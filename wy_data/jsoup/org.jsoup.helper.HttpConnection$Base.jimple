abstract class org.jsoup.helper.HttpConnection$Base extends java.lang.Object implements org.jsoup.Connection$Base
{
    java.net.URL url;
    org.jsoup.Connection$Method method;
    java.util.Map headers;
    java.util.Map cookies;

    private void <init>()
    {
        org.jsoup.helper.HttpConnection$Base this;
        java.util.LinkedHashMap $stack1, $stack2;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = new java.util.LinkedHashMap;

        specialinvoke $stack1.<java.util.LinkedHashMap: void <init>()>();

        this.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers> = $stack1;

        $stack2 = new java.util.LinkedHashMap;

        specialinvoke $stack2.<java.util.LinkedHashMap: void <init>()>();

        this.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies> = $stack2;

        return;
    }

    public java.net.URL url()
    {
        org.jsoup.helper.HttpConnection$Base this;
        java.net.URL $stack1;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        $stack1 = this.<org.jsoup.helper.HttpConnection$Base: java.net.URL url>;

        return $stack1;
    }

    public org.jsoup.Connection$Base url(java.net.URL)
    {
        java.net.URL url;
        org.jsoup.helper.HttpConnection$Base this;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        url := @parameter0: java.net.URL;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(url, "URL must not be null");

        this.<org.jsoup.helper.HttpConnection$Base: java.net.URL url> = url;

        return this;
    }

    public org.jsoup.Connection$Method method()
    {
        org.jsoup.helper.HttpConnection$Base this;
        org.jsoup.Connection$Method $stack1;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        $stack1 = this.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Method method>;

        return $stack1;
    }

    public org.jsoup.Connection$Base method(org.jsoup.Connection$Method)
    {
        org.jsoup.Connection$Method method;
        org.jsoup.helper.HttpConnection$Base this;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        method := @parameter0: org.jsoup.Connection$Method;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(method, "Method must not be null");

        this.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Method method> = method;

        return this;
    }

    public java.lang.String header(java.lang.String)
    {
        java.lang.String name, $stack5;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.List vals;
        int $stack4;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(name, "Header name must not be null");

        vals = specialinvoke this.<org.jsoup.helper.HttpConnection$Base: java.util.List getHeadersCaseInsensitive(java.lang.String)>(name);

        $stack4 = interfaceinvoke vals.<java.util.List: int size()>();

        if $stack4 <= 0 goto label1;

        $stack5 = staticinvoke <org.jsoup.internal.StringUtil: java.lang.String join(java.util.Collection,java.lang.String)>(vals, ", ");

        return $stack5;

     label1:
        return null;
    }

    public org.jsoup.Connection$Base addHeader(java.lang.String, java.lang.String)
    {
        java.lang.String name, $stack6, value, $stack14, value#3;
        org.jsoup.helper.HttpConnection$Base this;
        boolean $stack5;
        java.util.ArrayList $stack8;
        java.util.Map $stack9;
        java.util.List values;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(name);

        if value != null goto label1;

        $stack14 = "";

        goto label2;

     label1:
        $stack14 = value;

     label2:
        value#3 = $stack14;

        values = virtualinvoke this.<org.jsoup.helper.HttpConnection$Base: java.util.List headers(java.lang.String)>(name);

        $stack5 = interfaceinvoke values.<java.util.List: boolean isEmpty()>();

        if $stack5 == 0 goto label3;

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        values = $stack8;

        $stack9 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        interfaceinvoke $stack9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, $stack8);

     label3:
        $stack6 = staticinvoke <org.jsoup.helper.HttpConnection$Base: java.lang.String fixHeaderEncoding(java.lang.String)>(value#3);

        interfaceinvoke values.<java.util.List: boolean add(java.lang.Object)>($stack6);

        return this;
    }

    public java.util.List headers(java.lang.String)
    {
        java.lang.String name;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.List $stack2;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(name);

        $stack2 = specialinvoke this.<org.jsoup.helper.HttpConnection$Base: java.util.List getHeadersCaseInsensitive(java.lang.String)>(name);

        return $stack2;
    }

    private static java.lang.String fixHeaderEncoding(java.lang.String)
    {
        java.lang.String val, $stack4;
        boolean $stack3;
        java.io.UnsupportedEncodingException $stack5;
        byte[] bytes;

        val := @parameter0: java.lang.String;

     label1:
        bytes = virtualinvoke val.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $stack3 = staticinvoke <org.jsoup.helper.HttpConnection$Base: boolean looksLikeUtf8(byte[])>(bytes);

        if $stack3 != 0 goto label3;

     label2:
        return val;

     label3:
        $stack4 = new java.lang.String;

        specialinvoke $stack4.<java.lang.String: void <init>(byte[],java.lang.String)>(bytes, "UTF-8");

     label4:
        return $stack4;

     label5:
        $stack5 := @caughtexception;

        return val;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    private static boolean looksLikeUtf8(byte[])
    {
        byte[] input;
        int $stack5, j, $stack6, $stack7, $stack8, $stack9, $stack13, $stack19, $stack23, $stack25, i, $stack26, end, $stack10;
        byte $stack18, $stack22, $stack24, $stack28, $stack27, o;

        input := @parameter0: byte[];

        i = 0;

        $stack5 = lengthof input;

        if $stack5 < 3 goto label05;

        $stack18 = input[0];

        $stack19 = $stack18 & 255;

        if $stack19 != 239 goto label05;

        $stack22 = input[1];

        $stack23 = $stack22 & 255;

        if $stack23 != 187 goto label01;

        $stack28 = 1;

        goto label02;

     label01:
        $stack28 = 0;

     label02:
        $stack24 = input[2];

        $stack25 = $stack24 & 255;

        if $stack25 != 191 goto label03;

        $stack27 = 1;

        goto label04;

     label03:
        $stack27 = 0;

     label04:
        $stack26 = $stack28 & $stack27;

        if $stack26 == 0 goto label05;

        i = 3;

     label05:
        j = lengthof input;

     label06:
        if i >= j goto label14;

        o = input[i];

        $stack6 = o & 128;

        if $stack6 != 0 goto label07;

        goto label13;

     label07:
        $stack7 = o & 224;

        if $stack7 != 192 goto label08;

        end = i + 1;

        goto label11;

     label08:
        $stack8 = o & 240;

        if $stack8 != 224 goto label09;

        end = i + 2;

        goto label11;

     label09:
        $stack9 = o & 248;

        if $stack9 != 240 goto label10;

        end = i + 3;

        goto label11;

     label10:
        return 0;

     label11:
        $stack10 = lengthof input;

        if end < $stack10 goto label12;

        return 0;

     label12:
        if i >= end goto label13;

        i = i + 1;

        o = input[i];

        $stack13 = o & 192;

        if $stack13 == 128 goto label12;

        return 0;

     label13:
        i = i + 1;

        goto label06;

     label14:
        return 1;
    }

    public org.jsoup.Connection$Base header(java.lang.String, java.lang.String)
    {
        java.lang.String name, value;
        org.jsoup.helper.HttpConnection$Base this;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(name, "Header name must not be empty");

        virtualinvoke this.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base removeHeader(java.lang.String)>(name);

        virtualinvoke this.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base addHeader(java.lang.String,java.lang.String)>(name, value);

        return this;
    }

    public boolean hasHeader(java.lang.String)
    {
        java.lang.String name;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.List $stack2;
        boolean $stack3, $stack4;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(name, "Header name must not be empty");

        $stack2 = specialinvoke this.<org.jsoup.helper.HttpConnection$Base: java.util.List getHeadersCaseInsensitive(java.lang.String)>(name);

        $stack3 = interfaceinvoke $stack2.<java.util.List: boolean isEmpty()>();

        if $stack3 != 0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public boolean hasHeaderWithValue(java.lang.String, java.lang.String)
    {
        java.lang.String name, value, candidate;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.List values;
        java.util.Iterator l4;
        boolean $stack8, $stack10;
        java.lang.Object $stack9;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(name);

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(value);

        values = virtualinvoke this.<org.jsoup.helper.HttpConnection$Base: java.util.List headers(java.lang.String)>(name);

        l4 = interfaceinvoke values.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label3;

        $stack9 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        candidate = (java.lang.String) $stack9;

        $stack10 = virtualinvoke value.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(candidate);

        if $stack10 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public org.jsoup.Connection$Base removeHeader(java.lang.String)
    {
        java.lang.String name;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map$Entry entry;
        java.util.Map $stack4;
        java.lang.Object $stack5;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(name, "Header name must not be empty");

        entry = specialinvoke this.<org.jsoup.helper.HttpConnection$Base: java.util.Map$Entry scanHeaders(java.lang.String)>(name);

        if entry == null goto label1;

        $stack4 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $stack5 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($stack5);

     label1:
        return this;
    }

    public java.util.Map headers()
    {
        java.util.LinkedHashMap $stack6;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map $stack7, $stack9;
        int $stack8, $stack16;
        java.util.Set $stack10;
        java.util.Iterator l2;
        boolean $stack12;
        java.lang.Object $stack13, $stack14, $stack15, $stack18;
        java.util.Map$Entry entry;
        java.lang.String header;
        java.util.List values;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        $stack6 = new java.util.LinkedHashMap;

        $stack7 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $stack8 = interfaceinvoke $stack7.<java.util.Map: int size()>();

        specialinvoke $stack6.<java.util.LinkedHashMap: void <init>(int)>($stack8);

        $stack9 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label3;

        $stack13 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack13;

        $stack14 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        header = (java.lang.String) $stack14;

        $stack15 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        values = (java.util.List) $stack15;

        $stack16 = interfaceinvoke values.<java.util.List: int size()>();

        if $stack16 <= 0 goto label2;

        $stack18 = interfaceinvoke values.<java.util.List: java.lang.Object get(int)>(0);

        virtualinvoke $stack6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(header, $stack18);

     label2:
        goto label1;

     label3:
        return $stack6;
    }

    public java.util.Map multiHeaders()
    {
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map $stack1;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        $stack1 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        return $stack1;
    }

    private java.util.List getHeadersCaseInsensitive(java.lang.String)
    {
        java.lang.String name, $stack11;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map $stack4;
        java.util.Set $stack5;
        java.util.Iterator l2;
        boolean $stack7, $stack12;
        java.util.List $stack8, $stack15;
        java.lang.Object $stack9, $stack10, $stack14;
        java.util.Map$Entry entry;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(name);

        $stack4 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack9;

        $stack10 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack11 = (java.lang.String) $stack10;

        $stack12 = virtualinvoke name.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($stack11);

        if $stack12 == 0 goto label2;

        $stack14 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack15 = (java.util.List) $stack14;

        return $stack15;

     label2:
        goto label1;

     label3:
        $stack8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack8;
    }

    private java.util.Map$Entry scanHeaders(java.lang.String)
    {
        java.lang.String name, lc, $stack12, $stack13;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map $stack6;
        java.util.Set $stack7;
        java.util.Iterator l3;
        boolean $stack9, $stack14;
        java.lang.Object $stack10, $stack11;
        java.util.Map$Entry entry;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        lc = staticinvoke <org.jsoup.internal.Normalizer: java.lang.String lowerCase(java.lang.String)>(name);

        $stack6 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $stack7 = interfaceinvoke $stack6.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack10 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack10;

        $stack11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.String) $stack11;

        $stack13 = staticinvoke <org.jsoup.internal.Normalizer: java.lang.String lowerCase(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean equals(java.lang.Object)>(lc);

        if $stack14 == 0 goto label2;

        return entry;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.lang.String cookie(java.lang.String)
    {
        java.lang.String name, $stack4;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map $stack2;
        java.lang.Object $stack3;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(name, "Cookie name must not be empty");

        $stack2 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(name);

        $stack4 = (java.lang.String) $stack3;

        return $stack4;
    }

    public org.jsoup.Connection$Base cookie(java.lang.String, java.lang.String)
    {
        java.lang.String name, value;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map $stack3;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(name, "Cookie name must not be empty");

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(value, "Cookie value must not be null");

        $stack3 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, value);

        return this;
    }

    public boolean hasCookie(java.lang.String)
    {
        java.lang.String name;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map $stack2;
        boolean $stack3;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(name, "Cookie name must not be empty");

        $stack2 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: boolean containsKey(java.lang.Object)>(name);

        return $stack3;
    }

    public org.jsoup.Connection$Base removeCookie(java.lang.String)
    {
        java.lang.String name;
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map $stack2;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        name := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>(name, "Cookie name must not be empty");

        $stack2 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        interfaceinvoke $stack2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(name);

        return this;
    }

    public java.util.Map cookies()
    {
        org.jsoup.helper.HttpConnection$Base this;
        java.util.Map $stack1;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        $stack1 = this.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        return $stack1;
    }

    void <init>(org.jsoup.helper.HttpConnection$1)
    {
        org.jsoup.helper.HttpConnection$Base this;
        org.jsoup.helper.HttpConnection$1 x0;

        this := @this: org.jsoup.helper.HttpConnection$Base;

        x0 := @parameter0: org.jsoup.helper.HttpConnection$1;

        specialinvoke this.<org.jsoup.helper.HttpConnection$Base: void <init>()>();

        return;
    }
}
