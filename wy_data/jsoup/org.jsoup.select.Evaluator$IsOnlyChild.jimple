public final class org.jsoup.select.Evaluator$IsOnlyChild extends org.jsoup.select.Evaluator
{

    public void <init>()
    {
        org.jsoup.select.Evaluator$IsOnlyChild this;

        this := @this: org.jsoup.select.Evaluator$IsOnlyChild;

        specialinvoke this.<org.jsoup.select.Evaluator: void <init>()>();

        return;
    }

    public boolean matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Element element, p, root;
        boolean $stack5, $stack8, $stack6;
        org.jsoup.select.Elements $stack7;
        org.jsoup.select.Evaluator$IsOnlyChild this;

        this := @this: org.jsoup.select.Evaluator$IsOnlyChild;

        root := @parameter0: org.jsoup.nodes.Element;

        element := @parameter1: org.jsoup.nodes.Element;

        p = virtualinvoke element.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        if p == null goto label1;

        $stack5 = p instanceof org.jsoup.nodes.Document;

        if $stack5 != 0 goto label1;

        $stack7 = virtualinvoke element.<org.jsoup.nodes.Element: org.jsoup.select.Elements siblingElements()>();

        $stack8 = virtualinvoke $stack7.<org.jsoup.select.Elements: boolean isEmpty()>();

        if $stack8 == 0 goto label1;

        $stack6 = 1;

        goto label2;

     label1:
        $stack6 = 0;

     label2:
        return $stack6;
    }

    public java.lang.String toString()
    {
        org.jsoup.select.Evaluator$IsOnlyChild this;

        this := @this: org.jsoup.select.Evaluator$IsOnlyChild;

        return ":only-child";
    }
}
