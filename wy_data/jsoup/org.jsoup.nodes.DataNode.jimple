public class org.jsoup.nodes.DataNode extends org.jsoup.nodes.LeafNode
{

    public void <init>(java.lang.String)
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String data;

        this := @this: org.jsoup.nodes.DataNode;

        data := @parameter0: java.lang.String;

        specialinvoke this.<org.jsoup.nodes.LeafNode: void <init>()>();

        this.<org.jsoup.nodes.DataNode: java.lang.Object value> = data;

        return;
    }

    public java.lang.String nodeName()
    {
        org.jsoup.nodes.DataNode this;

        this := @this: org.jsoup.nodes.DataNode;

        return "#data";
    }

    public java.lang.String getWholeData()
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String $stack1;

        this := @this: org.jsoup.nodes.DataNode;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.DataNode: java.lang.String coreValue()>();

        return $stack1;
    }

    public org.jsoup.nodes.DataNode setWholeData(java.lang.String)
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String data;

        this := @this: org.jsoup.nodes.DataNode;

        data := @parameter0: java.lang.String;

        virtualinvoke this.<org.jsoup.nodes.DataNode: void coreValue(java.lang.String)>(data);

        return this;
    }

    void outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings) throws java.io.IOException
    {
        java.lang.Appendable accum;
        org.jsoup.nodes.DataNode this;
        java.lang.String $stack4;
        int depth;
        org.jsoup.nodes.Document$OutputSettings out;

        this := @this: org.jsoup.nodes.DataNode;

        accum := @parameter0: java.lang.Appendable;

        depth := @parameter1: int;

        out := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $stack4 = virtualinvoke this.<org.jsoup.nodes.DataNode: java.lang.String getWholeData()>();

        interfaceinvoke accum.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($stack4);

        return;
    }

    void outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.DataNode this;
        java.lang.Appendable accum;
        int depth;
        org.jsoup.nodes.Document$OutputSettings out;

        this := @this: org.jsoup.nodes.DataNode;

        accum := @parameter0: java.lang.Appendable;

        depth := @parameter1: int;

        out := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        return;
    }

    public java.lang.String toString()
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String $stack1;

        this := @this: org.jsoup.nodes.DataNode;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.DataNode: java.lang.String outerHtml()>();

        return $stack1;
    }

    public org.jsoup.nodes.DataNode clone()
    {
        org.jsoup.nodes.DataNode this, $stack2;
        org.jsoup.nodes.Node $stack1;

        this := @this: org.jsoup.nodes.DataNode;

        $stack1 = specialinvoke this.<org.jsoup.nodes.LeafNode: org.jsoup.nodes.Node clone()>();

        $stack2 = (org.jsoup.nodes.DataNode) $stack1;

        return $stack2;
    }

    public static org.jsoup.nodes.DataNode createFromEncoded(java.lang.String, java.lang.String)
    {
        java.lang.String encodedData, data, baseUri;
        org.jsoup.nodes.DataNode $stack4;

        encodedData := @parameter0: java.lang.String;

        baseUri := @parameter1: java.lang.String;

        data = staticinvoke <org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String)>(encodedData);

        $stack4 = new org.jsoup.nodes.DataNode;

        specialinvoke $stack4.<org.jsoup.nodes.DataNode: void <init>(java.lang.String)>(data);

        return $stack4;
    }

    public volatile org.jsoup.nodes.Node empty()
    {
        org.jsoup.nodes.DataNode this;
        org.jsoup.nodes.Node $stack1;

        this := @this: org.jsoup.nodes.DataNode;

        $stack1 = specialinvoke this.<org.jsoup.nodes.LeafNode: org.jsoup.nodes.Node empty()>();

        return $stack1;
    }

    public volatile int childNodeSize()
    {
        org.jsoup.nodes.DataNode this;
        int $stack1;

        this := @this: org.jsoup.nodes.DataNode;

        $stack1 = specialinvoke this.<org.jsoup.nodes.LeafNode: int childNodeSize()>();

        return $stack1;
    }

    public volatile java.lang.String baseUri()
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String $stack1;

        this := @this: org.jsoup.nodes.DataNode;

        $stack1 = specialinvoke this.<org.jsoup.nodes.LeafNode: java.lang.String baseUri()>();

        return $stack1;
    }

    public volatile java.lang.String absUrl(java.lang.String)
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String l1, $stack2;

        this := @this: org.jsoup.nodes.DataNode;

        l1 := @parameter0: java.lang.String;

        $stack2 = specialinvoke this.<org.jsoup.nodes.LeafNode: java.lang.String absUrl(java.lang.String)>(l1);

        return $stack2;
    }

    public volatile org.jsoup.nodes.Node removeAttr(java.lang.String)
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String l1;
        org.jsoup.nodes.Node $stack2;

        this := @this: org.jsoup.nodes.DataNode;

        l1 := @parameter0: java.lang.String;

        $stack2 = specialinvoke this.<org.jsoup.nodes.LeafNode: org.jsoup.nodes.Node removeAttr(java.lang.String)>(l1);

        return $stack2;
    }

    public volatile boolean hasAttr(java.lang.String)
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String l1;
        boolean $stack2;

        this := @this: org.jsoup.nodes.DataNode;

        l1 := @parameter0: java.lang.String;

        $stack2 = specialinvoke this.<org.jsoup.nodes.LeafNode: boolean hasAttr(java.lang.String)>(l1);

        return $stack2;
    }

    public volatile org.jsoup.nodes.Node attr(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String l1, l2;
        org.jsoup.nodes.Node $stack3;

        this := @this: org.jsoup.nodes.DataNode;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.String;

        $stack3 = specialinvoke this.<org.jsoup.nodes.LeafNode: org.jsoup.nodes.Node attr(java.lang.String,java.lang.String)>(l1, l2);

        return $stack3;
    }

    public volatile java.lang.String attr(java.lang.String)
    {
        org.jsoup.nodes.DataNode this;
        java.lang.String l1, $stack2;

        this := @this: org.jsoup.nodes.DataNode;

        l1 := @parameter0: java.lang.String;

        $stack2 = specialinvoke this.<org.jsoup.nodes.LeafNode: java.lang.String attr(java.lang.String)>(l1);

        return $stack2;
    }

    public volatile org.jsoup.nodes.Node clone()
    {
        org.jsoup.nodes.DataNode this, $stack1;

        this := @this: org.jsoup.nodes.DataNode;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.DataNode: org.jsoup.nodes.DataNode clone()>();

        return $stack1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.DataNode this, $stack1;

        this := @this: org.jsoup.nodes.DataNode;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.DataNode: org.jsoup.nodes.DataNode clone()>();

        return $stack1;
    }
}
