abstract class org.jsoup.parser.Token extends java.lang.Object
{
    org.jsoup.parser.Token$TokenType type;

    private void <init>()
    {
        org.jsoup.parser.Token this;

        this := @this: org.jsoup.parser.Token;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    java.lang.String tokenType()
    {
        org.jsoup.parser.Token this;
        java.lang.Class $stack1;
        java.lang.String $stack2;

        this := @this: org.jsoup.parser.Token;

        $stack1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack2 = virtualinvoke $stack1.<java.lang.Class: java.lang.String getSimpleName()>();

        return $stack2;
    }

    abstract org.jsoup.parser.Token reset();

    static void reset(java.lang.StringBuilder)
    {
        java.lang.StringBuilder sb;
        int $stack2;

        sb := @parameter0: java.lang.StringBuilder;

        if sb == null goto label1;

        $stack2 = virtualinvoke sb.<java.lang.StringBuilder: int length()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $stack2);

     label1:
        return;
    }

    final boolean isDoctype()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$TokenType $stack1, $stack2;
        boolean $stack3;

        this := @this: org.jsoup.parser.Token;

        $stack2 = this.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $stack1 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType Doctype>;

        if $stack2 != $stack1 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    final org.jsoup.parser.Token$Doctype asDoctype()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$Doctype $stack1;

        this := @this: org.jsoup.parser.Token;

        $stack1 = (org.jsoup.parser.Token$Doctype) this;

        return $stack1;
    }

    final boolean isStartTag()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$TokenType $stack1, $stack2;
        boolean $stack3;

        this := @this: org.jsoup.parser.Token;

        $stack2 = this.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $stack1 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType StartTag>;

        if $stack2 != $stack1 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    final org.jsoup.parser.Token$StartTag asStartTag()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$StartTag $stack1;

        this := @this: org.jsoup.parser.Token;

        $stack1 = (org.jsoup.parser.Token$StartTag) this;

        return $stack1;
    }

    final boolean isEndTag()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$TokenType $stack1, $stack2;
        boolean $stack3;

        this := @this: org.jsoup.parser.Token;

        $stack2 = this.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $stack1 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType EndTag>;

        if $stack2 != $stack1 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    final org.jsoup.parser.Token$EndTag asEndTag()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$EndTag $stack1;

        this := @this: org.jsoup.parser.Token;

        $stack1 = (org.jsoup.parser.Token$EndTag) this;

        return $stack1;
    }

    final boolean isComment()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$TokenType $stack1, $stack2;
        boolean $stack3;

        this := @this: org.jsoup.parser.Token;

        $stack2 = this.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $stack1 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType Comment>;

        if $stack2 != $stack1 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    final org.jsoup.parser.Token$Comment asComment()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$Comment $stack1;

        this := @this: org.jsoup.parser.Token;

        $stack1 = (org.jsoup.parser.Token$Comment) this;

        return $stack1;
    }

    final boolean isCharacter()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$TokenType $stack1, $stack2;
        boolean $stack3;

        this := @this: org.jsoup.parser.Token;

        $stack2 = this.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $stack1 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType Character>;

        if $stack2 != $stack1 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    final boolean isCData()
    {
        org.jsoup.parser.Token this;
        boolean $stack1;

        this := @this: org.jsoup.parser.Token;

        $stack1 = this instanceof org.jsoup.parser.Token$CData;

        return $stack1;
    }

    final org.jsoup.parser.Token$Character asCharacter()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$Character $stack1;

        this := @this: org.jsoup.parser.Token;

        $stack1 = (org.jsoup.parser.Token$Character) this;

        return $stack1;
    }

    final boolean isEOF()
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$TokenType $stack1, $stack2;
        boolean $stack3;

        this := @this: org.jsoup.parser.Token;

        $stack2 = this.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $stack1 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType EOF>;

        if $stack2 != $stack1 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    void <init>(org.jsoup.parser.Token$1)
    {
        org.jsoup.parser.Token this;
        org.jsoup.parser.Token$1 x0;

        this := @this: org.jsoup.parser.Token;

        x0 := @parameter0: org.jsoup.parser.Token$1;

        specialinvoke this.<org.jsoup.parser.Token: void <init>()>();

        return;
    }
}
