public class org.jfree.chart.renderer.category.StackedAreaRenderer extends org.jfree.chart.renderer.category.AreaRenderer implements java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private boolean renderAsPercentages;

    public void <init>()
    {
        org.jfree.chart.renderer.category.StackedAreaRenderer this;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        specialinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        org.jfree.chart.renderer.category.StackedAreaRenderer this;
        boolean renderAsPercentages;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        renderAsPercentages := @parameter0: boolean;

        specialinvoke this.<org.jfree.chart.renderer.category.AreaRenderer: void <init>()>();

        this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages> = renderAsPercentages;

        return;
    }

    public boolean getRenderAsPercentages()
    {
        org.jfree.chart.renderer.category.StackedAreaRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>;

        return $stack1;
    }

    public void setRenderAsPercentages(boolean)
    {
        org.jfree.chart.renderer.category.StackedAreaRenderer this;
        boolean asPercentages;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        asPercentages := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages> = asPercentages;

        virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: void fireChangeEvent()>();

        return;
    }

    public int getPassCount()
    {
        org.jfree.chart.renderer.category.StackedAreaRenderer this;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        return 2;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)
    {
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.renderer.category.StackedAreaRenderer this;
        boolean $stack2;
        org.jfree.data.Range $stack3, $stack4;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        if dataset != null goto label1;

        return null;

     label1:
        $stack2 = this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>;

        if $stack2 == 0 goto label2;

        $stack4 = new org.jfree.data.Range;

        specialinvoke $stack4.<org.jfree.data.Range: void <init>(double,double)>(0.0, 1.0);

        return $stack4;

     label2:
        $stack3 = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)>(dataset);

        return $stack3;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, int)
    {
        org.jfree.chart.renderer.category.StackedAreaRenderer this;
        int row, column, itemCount, pass, $stack215, $stack216, $stack217, $stack243, $stack244, $stack53, $stack56, $stack57, $stack59, $stack60, $stack63, $stack68, $stack67, $stack69, $stack72, $stack71, $stack73, $stack76;
        boolean $stack48, $stack184, $stack221, $stack248, $stack122;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        org.jfree.chart.entity.EntityCollection entities;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.CategoryPlot plot;
        double xx1, xx0, xx2, $stack87, $stack88, $stack89, $stack90, $stack91, $stack92, $stack93, $stack95, $stack96, $stack97, $stack98, $stack103, $stack104, $stack106, $stack107, $stack108, $stack109, $stack116, $stack142, $stack143, $stack144, $stack145, $stack146, $stack147, $stack148, $stack153, $stack154, $stack159, $stack160, $stack161, $stack162, $stack167, $stack168, $stack169, $stack170, y1, total, y0, y2, yleft, yright;
        double[] stackLeft, stackRight, adjStackLeft, adjStackRight, total#18, total#80, total#154;
        org.jfree.chart.ui.RectangleEdge edge1, $stack54, $stack64, $stack77;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        byte $stack94, $stack105, $stack115, $stack149, $stack155, $stack86;
        float $stack99, $stack100, $stack101, $stack102, $stack110, $stack111, $stack112, $stack113, $stack126, $stack127, $stack128, $stack130, $stack131, $stack132, $stack150, $stack151, $stack152, $stack156, $stack157, $stack158, $stack163, $stack164, $stack165, $stack166, $stack171, $stack172, $stack173, $stack174, transY1, transStack1, transStackLeft, transYLeft, yleft#228, transYRight;
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.PlotOrientation $stack114;
        java.awt.geom.GeneralPath $stack125, $stack84, $stack85;
        int[] $stack218, $stack245, $stack266, $stack51, $stack61, $stack74;
        java.lang.Number n;
        java.awt.Paint transStack1#240;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.category.CategoryItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        plot := @parameter3: org.jfree.chart.plot.CategoryPlot;

        domainAxis := @parameter4: org.jfree.chart.axis.CategoryAxis;

        rangeAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter6: org.jfree.data.category.CategoryDataset;

        row := @parameter7: int;

        column := @parameter8: int;

        pass := @parameter9: int;

        $stack48 = virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean isSeriesVisible(int)>(row);

        if $stack48 != 0 goto label01;

        return;

     label01:
        entities = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        y1 = 0.0;

        n = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(row, column);

        if n == null goto label02;

        y1 = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack248 = this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>;

        if $stack248 == 0 goto label02;

        $stack266 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int[] getVisibleSeriesArray()>();

        total = staticinvoke <org.jfree.data.DataUtils: double calculateColumnTotal(org.jfree.data.Values2D,int,int[])>(dataset, column, $stack266);

        y1 = y1 / total;

     label02:
        $stack51 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int[] getVisibleSeriesArray()>();

        total#18 = virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] getStackValues(org.jfree.data.category.CategoryDataset,int,int,int[])>(dataset, row, column, $stack51);

        $stack53 = virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: int getColumnCount()>();

        $stack54 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx1 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack53, dataArea, $stack54);

        y0 = 0.0;

        $stack56 = column - 1;

        $stack57 = staticinvoke <java.lang.Math: int max(int,int)>($stack56, 0);

        n = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(row, $stack57);

        if n == null goto label03;

        y0 = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack221 = this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>;

        if $stack221 == 0 goto label03;

        $stack243 = column - 1;

        $stack244 = staticinvoke <java.lang.Math: int max(int,int)>($stack243, 0);

        $stack245 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int[] getVisibleSeriesArray()>();

        total = staticinvoke <org.jfree.data.DataUtils: double calculateColumnTotal(org.jfree.data.Values2D,int,int[])>(dataset, $stack244, $stack245);

        y0 = y0 / total;

     label03:
        $stack59 = column - 1;

        $stack60 = staticinvoke <java.lang.Math: int max(int,int)>($stack59, 0);

        $stack61 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int[] getVisibleSeriesArray()>();

        total#80 = virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] getStackValues(org.jfree.data.category.CategoryDataset,int,int,int[])>(dataset, row, $stack60, $stack61);

        $stack63 = virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: int getColumnCount()>();

        $stack64 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx0 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack63, dataArea, $stack64);

        itemCount = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        y2 = 0.0;

        $stack68 = column + 1;

        $stack67 = itemCount - 1;

        $stack69 = staticinvoke <java.lang.Math: int min(int,int)>($stack68, $stack67);

        n = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(row, $stack69);

        if n == null goto label04;

        y2 = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack184 = this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>;

        if $stack184 == 0 goto label04;

        $stack216 = column + 1;

        $stack215 = itemCount - 1;

        $stack217 = staticinvoke <java.lang.Math: int min(int,int)>($stack216, $stack215);

        $stack218 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int[] getVisibleSeriesArray()>();

        total = staticinvoke <org.jfree.data.DataUtils: double calculateColumnTotal(org.jfree.data.Values2D,int,int[])>(dataset, $stack217, $stack218);

        y2 = y2 / total;

     label04:
        $stack72 = column + 1;

        $stack71 = itemCount - 1;

        $stack73 = staticinvoke <java.lang.Math: int min(int,int)>($stack72, $stack71);

        $stack74 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int[] getVisibleSeriesArray()>();

        total#154 = virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] getStackValues(org.jfree.data.category.CategoryDataset,int,int,int[])>(dataset, row, $stack73, $stack74);

        $stack76 = virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: int getColumnCount()>();

        $stack77 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx2 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack76, dataArea, $stack77);

        stackLeft = specialinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] averageStackValues(double[],double[])>(total#80, total#18);

        stackRight = specialinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] averageStackValues(double[],double[])>(total#18, total#154);

        adjStackLeft = specialinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] adjustedStackValues(double[],double[])>(total#80, total#18);

        adjStackRight = specialinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] adjustedStackValues(double[],double[])>(total#18, total#154);

        edge1 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        $stack84 = new java.awt.geom.GeneralPath;

        specialinvoke $stack84.<java.awt.geom.GeneralPath: void <init>()>();

        $stack85 = new java.awt.geom.GeneralPath;

        specialinvoke $stack85.<java.awt.geom.GeneralPath: void <init>()>();

        $stack86 = y1 cmpl 0.0;

        if $stack86 < 0 goto label09;

        $stack142 = total#18[1];

        $stack143 = y1 + $stack142;

        $stack144 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack143, dataArea, edge1);

        transY1 = (float) $stack144;

        $stack145 = total#18[1];

        $stack146 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack145, dataArea, edge1);

        transStack1 = (float) $stack146;

        $stack147 = adjStackLeft[1];

        $stack148 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack147, dataArea, edge1);

        transStackLeft = (float) $stack148;

        $stack149 = y0 cmpl 0.0;

        if $stack149 < 0 goto label05;

        $stack167 = y0 + y1;

        $stack169 = $stack167 / 2.0;

        $stack168 = stackLeft[1];

        yleft = $stack169 + $stack168;

        $stack170 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yleft, dataArea, edge1);

        transYLeft = (float) $stack170;

        $stack171 = (float) xx1;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack171, transY1);

        $stack172 = (float) xx1;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack172, transStack1);

        $stack173 = (float) xx0;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack173, transStackLeft);

        $stack174 = (float) xx0;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack174, transYLeft);

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void closePath()>();

        goto label06;

     label05:
        $stack150 = (float) xx1;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack150, transStack1);

        $stack151 = (float) xx1;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack151, transY1);

        $stack152 = (float) xx0;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack152, transStackLeft);

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void closePath()>();

     label06:
        $stack153 = adjStackRight[1];

        $stack154 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack153, dataArea, edge1);

        yleft#228 = (float) $stack154;

        $stack155 = y2 cmpl 0.0;

        if $stack155 < 0 goto label07;

        $stack159 = y1 + y2;

        $stack161 = $stack159 / 2.0;

        $stack160 = stackRight[1];

        yright = $stack161 + $stack160;

        $stack162 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yright, dataArea, edge1);

        transYRight = (float) $stack162;

        $stack163 = (float) xx1;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack163, transStack1);

        $stack164 = (float) xx1;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack164, transY1);

        $stack165 = (float) xx2;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack165, transYRight);

        $stack166 = (float) xx2;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack166, yleft#228);

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void closePath()>();

        goto label08;

     label07:
        $stack156 = (float) xx1;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack156, transStack1);

        $stack157 = (float) xx1;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack157, transY1);

        $stack158 = (float) xx2;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack158, yleft#228);

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void closePath()>();

     label08:
        goto label13;

     label09:
        $stack87 = total#18[0];

        $stack88 = y1 + $stack87;

        $stack89 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack88, dataArea, edge1);

        transY1 = (float) $stack89;

        $stack90 = total#18[0];

        $stack91 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack90, dataArea, edge1);

        transStack1 = (float) $stack91;

        $stack92 = adjStackLeft[0];

        $stack93 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack92, dataArea, edge1);

        transStackLeft = (float) $stack93;

        $stack94 = y0 cmpl 0.0;

        if $stack94 < 0 goto label10;

        $stack130 = (float) xx1;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack130, transStack1);

        $stack131 = (float) xx1;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack131, transY1);

        $stack132 = (float) xx0;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack132, transStackLeft);

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: java.lang.Object clone()>();

        goto label11;

     label10:
        $stack95 = y0 + y1;

        $stack97 = $stack95 / 2.0;

        $stack96 = stackLeft[0];

        yleft = $stack97 + $stack96;

        $stack98 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yleft, dataArea, edge1);

        transYLeft = (float) $stack98;

        $stack99 = (float) xx1;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack99, transY1);

        $stack100 = (float) xx1;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack100, transStack1);

        $stack101 = (float) xx0;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack101, transStackLeft);

        $stack102 = (float) xx0;

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack102, transYLeft);

        virtualinvoke $stack84.<java.awt.geom.GeneralPath: void closePath()>();

     label11:
        $stack103 = adjStackRight[0];

        $stack104 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack103, dataArea, edge1);

        yleft#228 = (float) $stack104;

        $stack105 = y2 cmpl 0.0;

        if $stack105 < 0 goto label12;

        $stack126 = (float) xx1;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack126, transStack1);

        $stack127 = (float) xx1;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack127, transY1);

        $stack128 = (float) xx2;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack128, yleft#228);

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void closePath()>();

        goto label13;

     label12:
        $stack106 = y1 + y2;

        $stack108 = $stack106 / 2.0;

        $stack107 = stackRight[0];

        yright = $stack108 + $stack107;

        $stack109 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yright, dataArea, edge1);

        transYRight = (float) $stack109;

        $stack110 = (float) xx1;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack110, transStack1);

        $stack111 = (float) xx1;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack111, transY1);

        $stack112 = (float) xx2;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack112, transYRight);

        $stack113 = (float) xx2;

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack113, yleft#228);

        virtualinvoke $stack85.<java.awt.geom.GeneralPath: void closePath()>();

     label13:
        if pass != 0 goto label15;

        transStack1#240 = virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: java.awt.Paint getItemPaint(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(transStack1#240);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack84);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack85);

        if entities == null goto label14;

        $stack125 = new java.awt.geom.GeneralPath;

        specialinvoke $stack125.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($stack84);

        virtualinvoke $stack125.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($stack85, 0);

        virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: void addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)>(entities, dataset, row, column, $stack125);

     label14:
        goto label18;

     label15:
        if pass != 1 goto label18;

        $stack114 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack116 = (double) transY1;

        $stack115 = y1 cmpg 0.0;

        if $stack115 >= 0 goto label16;

        $stack122 = 1;

        goto label17;

     label16:
        $stack122 = 0;

     label17:
        virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)>(g2, $stack114, dataset, row, column, xx1, $stack116, $stack122);

     label18:
        return;
    }

    protected double[] getStackValues(org.jfree.data.category.CategoryDataset, int, int, int[])
    {
        double[] result;
        org.jfree.chart.renderer.category.StackedAreaRenderer this;
        boolean $stack12, $stack13, $stack24, $stack17;
        int series, index, i;
        org.jfree.data.category.CategoryDataset dataset;
        java.lang.Number n;
        byte $stack18;
        double $stack19, $stack20, $stack21, $stack22, total, v;
        int[] validRows;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        series := @parameter1: int;

        index := @parameter2: int;

        validRows := @parameter3: int[];

        result = newarray (double)[2];

        total = 0.0;

        $stack12 = this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>;

        if $stack12 == 0 goto label1;

        total = staticinvoke <org.jfree.data.DataUtils: double calculateColumnTotal(org.jfree.data.Values2D,int,int[])>(dataset, index, validRows);

     label1:
        i = 0;

     label2:
        if i >= series goto label6;

        $stack13 = virtualinvoke this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean isSeriesVisible(int)>(i);

        if $stack13 == 0 goto label5;

        v = 0.0;

        n = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(i, index);

        if n == null goto label3;

        v = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack24 = this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>;

        if $stack24 == 0 goto label3;

        v = v / total;

     label3:
        $stack17 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v);

        if $stack17 != 0 goto label5;

        $stack18 = v cmpl 0.0;

        if $stack18 < 0 goto label4;

        $stack21 = result[1];

        $stack22 = $stack21 + v;

        result[1] = $stack22;

        goto label5;

     label4:
        $stack19 = result[0];

        $stack20 = $stack19 + v;

        result[0] = $stack20;

     label5:
        i = i + 1;

        goto label2;

     label6:
        return result;
    }

    private double[] averageStackValues(double[], double[])
    {
        double[] result, stack1, stack2;
        double $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;
        org.jfree.chart.renderer.category.StackedAreaRenderer this;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        stack1 := @parameter0: double[];

        stack2 := @parameter1: double[];

        result = newarray (double)[2];

        $stack5 = stack1[0];

        $stack4 = stack2[0];

        $stack6 = $stack5 + $stack4;

        $stack7 = $stack6 / 2.0;

        result[0] = $stack7;

        $stack9 = stack1[1];

        $stack8 = stack2[1];

        $stack10 = $stack9 + $stack8;

        $stack11 = $stack10 / 2.0;

        result[1] = $stack11;

        return result;
    }

    private double[] adjustedStackValues(double[], double[])
    {
        double[] result, stack1, stack2;
        double $stack4, $stack6, $stack8, $stack10, $stack11, $stack12, $stack13, $stack18, $stack20, $stack21, $stack22, $stack23;
        byte $stack5, $stack7, $stack9, $stack19;
        org.jfree.chart.renderer.category.StackedAreaRenderer this;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        stack1 := @parameter0: double[];

        stack2 := @parameter1: double[];

        result = newarray (double)[2];

        $stack4 = stack1[0];

        $stack5 = $stack4 cmpl 0.0;

        if $stack5 == 0 goto label1;

        $stack18 = stack2[0];

        $stack19 = $stack18 cmpl 0.0;

        if $stack19 != 0 goto label2;

     label1:
        result[0] = 0.0;

        goto label3;

     label2:
        $stack21 = stack1[0];

        $stack20 = stack2[0];

        $stack22 = $stack21 + $stack20;

        $stack23 = $stack22 / 2.0;

        result[0] = $stack23;

     label3:
        $stack6 = stack1[1];

        $stack7 = $stack6 cmpl 0.0;

        if $stack7 == 0 goto label4;

        $stack8 = stack2[1];

        $stack9 = $stack8 cmpl 0.0;

        if $stack9 != 0 goto label5;

     label4:
        result[1] = 0.0;

        goto label6;

     label5:
        $stack11 = stack1[1];

        $stack10 = stack2[1];

        $stack12 = $stack11 + $stack10;

        $stack13 = $stack12 / 2.0;

        result[1] = $stack13;

     label6:
        return result;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.category.StackedAreaRenderer this, that;
        boolean $stack3, $stack4, $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.category.StackedAreaRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.category.StackedAreaRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.category.StackedAreaRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>;

        $stack4 = that.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>;

        if $stack5 == $stack4 goto label3;

        return 0;

     label3:
        $stack6 = specialinvoke this.<org.jfree.chart.renderer.category.AreaRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack6;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.category.StackedAreaRenderer: long serialVersionUID> = -3595635038460823663L;

        return;
    }
}
