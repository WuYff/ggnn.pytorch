public class org.jfree.chart.renderer.OutlierListCollection extends java.lang.Object
{
    private java.util.List outlierLists;
    private boolean highFarOut;
    private boolean lowFarOut;

    public void <init>()
    {
        org.jfree.chart.renderer.OutlierListCollection this;
        java.util.ArrayList $stack1;

        this := @this: org.jfree.chart.renderer.OutlierListCollection;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.jfree.chart.renderer.OutlierListCollection: boolean highFarOut> = 0;

        this.<org.jfree.chart.renderer.OutlierListCollection: boolean lowFarOut> = 0;

        $stack1 = new java.util.ArrayList;

        specialinvoke $stack1.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.chart.renderer.OutlierListCollection: java.util.List outlierLists> = $stack1;

        return;
    }

    public boolean isHighFarOut()
    {
        org.jfree.chart.renderer.OutlierListCollection this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.OutlierListCollection;

        $stack1 = this.<org.jfree.chart.renderer.OutlierListCollection: boolean highFarOut>;

        return $stack1;
    }

    public void setHighFarOut(boolean)
    {
        org.jfree.chart.renderer.OutlierListCollection this;
        boolean farOut;

        this := @this: org.jfree.chart.renderer.OutlierListCollection;

        farOut := @parameter0: boolean;

        this.<org.jfree.chart.renderer.OutlierListCollection: boolean highFarOut> = farOut;

        return;
    }

    public boolean isLowFarOut()
    {
        org.jfree.chart.renderer.OutlierListCollection this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.OutlierListCollection;

        $stack1 = this.<org.jfree.chart.renderer.OutlierListCollection: boolean lowFarOut>;

        return $stack1;
    }

    public void setLowFarOut(boolean)
    {
        org.jfree.chart.renderer.OutlierListCollection this;
        boolean farOut;

        this := @this: org.jfree.chart.renderer.OutlierListCollection;

        farOut := @parameter0: boolean;

        this.<org.jfree.chart.renderer.OutlierListCollection: boolean lowFarOut> = farOut;

        return;
    }

    public boolean add(org.jfree.chart.renderer.Outlier)
    {
        org.jfree.chart.renderer.OutlierListCollection this;
        java.util.List $stack5, $stack7, $stack11, $stack19;
        boolean $stack6, $stack9, $stack15, $stack20, updated;
        java.util.Iterator l3;
        org.jfree.chart.renderer.OutlierList $stack10, list, $stack18;
        org.jfree.chart.renderer.Outlier outlier;
        java.lang.Object $stack14;

        this := @this: org.jfree.chart.renderer.OutlierListCollection;

        outlier := @parameter0: org.jfree.chart.renderer.Outlier;

        $stack5 = this.<org.jfree.chart.renderer.OutlierListCollection: java.util.List outlierLists>;

        $stack6 = interfaceinvoke $stack5.<java.util.List: boolean isEmpty()>();

        if $stack6 == 0 goto label1;

        $stack19 = this.<org.jfree.chart.renderer.OutlierListCollection: java.util.List outlierLists>;

        $stack18 = new org.jfree.chart.renderer.OutlierList;

        specialinvoke $stack18.<org.jfree.chart.renderer.OutlierList: void <init>(org.jfree.chart.renderer.Outlier)>(outlier);

        $stack20 = interfaceinvoke $stack19.<java.util.List: boolean add(java.lang.Object)>($stack18);

        return $stack20;

     label1:
        updated = 0;

        $stack7 = this.<org.jfree.chart.renderer.OutlierListCollection: java.util.List outlierLists>;

        l3 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label4;

        $stack14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        list = (org.jfree.chart.renderer.OutlierList) $stack14;

        $stack15 = virtualinvoke list.<org.jfree.chart.renderer.OutlierList: boolean isOverlapped(org.jfree.chart.renderer.Outlier)>(outlier);

        if $stack15 == 0 goto label3;

        updated = specialinvoke this.<org.jfree.chart.renderer.OutlierListCollection: boolean updateOutlierList(org.jfree.chart.renderer.OutlierList,org.jfree.chart.renderer.Outlier)>(list, outlier);

     label3:
        goto label2;

     label4:
        if updated != 0 goto label5;

        $stack11 = this.<org.jfree.chart.renderer.OutlierListCollection: java.util.List outlierLists>;

        $stack10 = new org.jfree.chart.renderer.OutlierList;

        specialinvoke $stack10.<org.jfree.chart.renderer.OutlierList: void <init>(org.jfree.chart.renderer.Outlier)>(outlier);

        updated = interfaceinvoke $stack11.<java.util.List: boolean add(java.lang.Object)>($stack10);

     label5:
        return updated;
    }

    public java.util.Iterator iterator()
    {
        org.jfree.chart.renderer.OutlierListCollection this;
        java.util.List $stack1;
        java.util.Iterator $stack2;

        this := @this: org.jfree.chart.renderer.OutlierListCollection;

        $stack1 = this.<org.jfree.chart.renderer.OutlierListCollection: java.util.List outlierLists>;

        $stack2 = interfaceinvoke $stack1.<java.util.List: java.util.Iterator iterator()>();

        return $stack2;
    }

    private boolean updateOutlierList(org.jfree.chart.renderer.OutlierList, org.jfree.chart.renderer.Outlier)
    {
        org.jfree.chart.renderer.OutlierList list;
        org.jfree.chart.renderer.Outlier outlier;
        boolean result;
        org.jfree.chart.renderer.OutlierListCollection this;

        this := @this: org.jfree.chart.renderer.OutlierListCollection;

        list := @parameter0: org.jfree.chart.renderer.OutlierList;

        outlier := @parameter1: org.jfree.chart.renderer.Outlier;

        result = virtualinvoke list.<org.jfree.chart.renderer.OutlierList: boolean add(org.jfree.chart.renderer.Outlier)>(outlier);

        virtualinvoke list.<org.jfree.chart.renderer.OutlierList: void updateAveragedOutlier()>();

        virtualinvoke list.<org.jfree.chart.renderer.OutlierList: void setMultiple(boolean)>(1);

        return result;
    }
}
