public class org.jfree.chart.plot.CategoryPlot extends org.jfree.chart.plot.Plot implements org.jfree.chart.plot.ValueAxisPlot, org.jfree.chart.plot.Pannable, org.jfree.chart.plot.Zoomable, org.jfree.chart.event.AnnotationChangeListener, org.jfree.chart.event.RendererChangeListener, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE;
    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE;
    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT;
    public static final java.awt.Font DEFAULT_VALUE_LABEL_FONT;
    public static final boolean DEFAULT_CROSSHAIR_VISIBLE;
    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE;
    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT;
    protected static java.util.ResourceBundle localizationResources;
    private org.jfree.chart.plot.PlotOrientation orientation;
    private org.jfree.chart.ui.RectangleInsets axisOffset;
    private java.util.Map domainAxes;
    private java.util.Map domainAxisLocations;
    private boolean drawSharedDomainAxis;
    private java.util.Map rangeAxes;
    private java.util.Map rangeAxisLocations;
    private java.util.Map datasets;
    private java.util.TreeMap datasetToDomainAxesMap;
    private java.util.TreeMap datasetToRangeAxesMap;
    private java.util.Map renderers;
    private org.jfree.chart.plot.DatasetRenderingOrder renderingOrder;
    private org.jfree.chart.util.SortOrder columnRenderingOrder;
    private org.jfree.chart.util.SortOrder rowRenderingOrder;
    private boolean domainGridlinesVisible;
    private org.jfree.chart.axis.CategoryAnchor domainGridlinePosition;
    private transient java.awt.Stroke domainGridlineStroke;
    private transient java.awt.Paint domainGridlinePaint;
    private boolean rangeZeroBaselineVisible;
    private transient java.awt.Stroke rangeZeroBaselineStroke;
    private transient java.awt.Paint rangeZeroBaselinePaint;
    private boolean rangeGridlinesVisible;
    private transient java.awt.Stroke rangeGridlineStroke;
    private transient java.awt.Paint rangeGridlinePaint;
    private boolean rangeMinorGridlinesVisible;
    private transient java.awt.Stroke rangeMinorGridlineStroke;
    private transient java.awt.Paint rangeMinorGridlinePaint;
    private double anchorValue;
    private int crosshairDatasetIndex;
    private boolean domainCrosshairVisible;
    private java.lang.Comparable domainCrosshairRowKey;
    private java.lang.Comparable domainCrosshairColumnKey;
    private transient java.awt.Stroke domainCrosshairStroke;
    private transient java.awt.Paint domainCrosshairPaint;
    private boolean rangeCrosshairVisible;
    private double rangeCrosshairValue;
    private transient java.awt.Stroke rangeCrosshairStroke;
    private transient java.awt.Paint rangeCrosshairPaint;
    private boolean rangeCrosshairLockedOnData;
    private java.util.Map foregroundDomainMarkers;
    private java.util.Map backgroundDomainMarkers;
    private java.util.Map foregroundRangeMarkers;
    private java.util.Map backgroundRangeMarkers;
    private java.util.List annotations;
    private int weight;
    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;
    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;
    private org.jfree.chart.LegendItemCollection fixedLegendItems;
    private boolean rangePannable;
    private org.jfree.chart.util.ShadowGenerator shadowGenerator;

    public void <init>()
    {
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        specialinvoke this.<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>(null, null, null, null);

        return;
    }

    public void <init>(org.jfree.data.category.CategoryDataset, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.category.CategoryItemRenderer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.DatasetRenderingOrder $stack5;
        org.jfree.chart.util.SortOrder $stack6, $stack7;
        org.jfree.chart.plot.PlotOrientation $stack8;
        java.util.HashMap $stack9, $stack10, $stack11, $stack12, $stack15, $stack16, $stack47, $stack48, $stack49, $stack50;
        java.util.TreeMap $stack13, $stack14;
        java.util.Map $stack17, $stack21, $stack25, $stack29, $stack32, $stack35;
        java.lang.Integer $stack18, $stack22, $stack26, $stack30, $stack33, $stack36;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.ui.RectangleInsets $stack20;
        org.jfree.chart.axis.AxisLocation $stack23, $stack27;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        org.jfree.chart.axis.CategoryAnchor $stack38;
        java.awt.Stroke $stack39, $stack43, $stack45, $stack51, $stack53;
        java.awt.Paint $stack40, $stack44, $stack52, $stack54;
        java.awt.Color $stack41, $stack46;
        java.awt.BasicStroke $stack42;
        java.util.ArrayList $stack55;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        domainAxis := @parameter1: org.jfree.chart.axis.CategoryAxis;

        rangeAxis := @parameter2: org.jfree.chart.axis.ValueAxis;

        renderer := @parameter3: org.jfree.chart.renderer.category.CategoryItemRenderer;

        specialinvoke this.<org.jfree.chart.plot.Plot: void <init>()>();

        $stack5 = <org.jfree.chart.plot.DatasetRenderingOrder: org.jfree.chart.plot.DatasetRenderingOrder REVERSE>;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.DatasetRenderingOrder renderingOrder> = $stack5;

        $stack6 = <org.jfree.chart.util.SortOrder: org.jfree.chart.util.SortOrder ASCENDING>;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder columnRenderingOrder> = $stack6;

        $stack7 = <org.jfree.chart.util.SortOrder: org.jfree.chart.util.SortOrder ASCENDING>;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder rowRenderingOrder> = $stack7;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairLockedOnData> = 1;

        $stack8 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation> = $stack8;

        $stack9 = new java.util.HashMap;

        specialinvoke $stack9.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes> = $stack9;

        $stack10 = new java.util.HashMap;

        specialinvoke $stack10.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations> = $stack10;

        $stack11 = new java.util.HashMap;

        specialinvoke $stack11.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes> = $stack11;

        $stack12 = new java.util.HashMap;

        specialinvoke $stack12.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations> = $stack12;

        $stack13 = new java.util.TreeMap;

        specialinvoke $stack13.<java.util.TreeMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap> = $stack13;

        $stack14 = new java.util.TreeMap;

        specialinvoke $stack14.<java.util.TreeMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap> = $stack14;

        $stack15 = new java.util.HashMap;

        specialinvoke $stack15.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers> = $stack15;

        $stack16 = new java.util.HashMap;

        specialinvoke $stack16.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets> = $stack16;

        $stack17 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $stack17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack18, dataset);

        if dataset == null goto label1;

        interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label1:
        $stack20 = <org.jfree.chart.ui.RectangleInsets: org.jfree.chart.ui.RectangleInsets ZERO_INSETS>;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset> = $stack20;

        $stack21 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations>;

        $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack23 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation BOTTOM_OR_LEFT>;

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack22, $stack23);

        $stack25 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations>;

        $stack26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack27 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation TOP_OR_LEFT>;

        interfaceinvoke $stack25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack26, $stack27);

        $stack29 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $stack29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack30, renderer);

        if renderer == null goto label2;

        interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: void setPlot(org.jfree.chart.plot.CategoryPlot)>(this);

        interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>(this);

     label2:
        $stack32 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $stack32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack33, domainAxis);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToDomainAxis(int,int)>(0, 0);

        if domainAxis == null goto label3;

        virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label3:
        this.<org.jfree.chart.plot.CategoryPlot: boolean drawSharedDomainAxis> = 0;

        $stack35 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $stack35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack36, rangeAxis);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToRangeAxis(int,int)>(0, 0);

        if rangeAxis == null goto label4;

        virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label4:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void configureDomainAxes()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void configureRangeAxes()>();

        this.<org.jfree.chart.plot.CategoryPlot: boolean domainGridlinesVisible> = 0;

        $stack38 = <org.jfree.chart.axis.CategoryAnchor: org.jfree.chart.axis.CategoryAnchor MIDDLE>;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAnchor domainGridlinePosition> = $stack38;

        $stack39 = <org.jfree.chart.plot.CategoryPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainGridlineStroke> = $stack39;

        $stack40 = <org.jfree.chart.plot.CategoryPlot: java.awt.Paint DEFAULT_GRIDLINE_PAINT>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainGridlinePaint> = $stack40;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeZeroBaselineVisible> = 0;

        $stack41 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint> = $stack41;

        $stack42 = new java.awt.BasicStroke;

        specialinvoke $stack42.<java.awt.BasicStroke: void <init>(float)>(0.5F);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke> = $stack42;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeGridlinesVisible> = 1;

        $stack43 = <org.jfree.chart.plot.CategoryPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeGridlineStroke> = $stack43;

        $stack44 = <org.jfree.chart.plot.CategoryPlot: java.awt.Paint DEFAULT_GRIDLINE_PAINT>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeGridlinePaint> = $stack44;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeMinorGridlinesVisible> = 0;

        $stack45 = <org.jfree.chart.plot.CategoryPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeMinorGridlineStroke> = $stack45;

        $stack46 = <java.awt.Color: java.awt.Color WHITE>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeMinorGridlinePaint> = $stack46;

        $stack47 = new java.util.HashMap;

        specialinvoke $stack47.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers> = $stack47;

        $stack48 = new java.util.HashMap;

        specialinvoke $stack48.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers> = $stack48;

        $stack49 = new java.util.HashMap;

        specialinvoke $stack49.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers> = $stack49;

        $stack50 = new java.util.HashMap;

        specialinvoke $stack50.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers> = $stack50;

        this.<org.jfree.chart.plot.CategoryPlot: double anchorValue> = 0.0;

        this.<org.jfree.chart.plot.CategoryPlot: boolean domainCrosshairVisible> = 0;

        $stack51 = <org.jfree.chart.plot.CategoryPlot: java.awt.Stroke DEFAULT_CROSSHAIR_STROKE>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainCrosshairStroke> = $stack51;

        $stack52 = <org.jfree.chart.plot.CategoryPlot: java.awt.Paint DEFAULT_CROSSHAIR_PAINT>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainCrosshairPaint> = $stack52;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairVisible> = 0;

        this.<org.jfree.chart.plot.CategoryPlot: double rangeCrosshairValue> = 0.0;

        $stack53 = <org.jfree.chart.plot.CategoryPlot: java.awt.Stroke DEFAULT_CROSSHAIR_STROKE>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeCrosshairStroke> = $stack53;

        $stack54 = <org.jfree.chart.plot.CategoryPlot: java.awt.Paint DEFAULT_CROSSHAIR_PAINT>;

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeCrosshairPaint> = $stack54;

        $stack55 = new java.util.ArrayList;

        specialinvoke $stack55.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations> = $stack55;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangePannable> = 0;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator> = null;

        return;
    }

    public java.lang.String getPlotType()
    {
        java.util.ResourceBundle $stack1;
        java.lang.String $stack2;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = <org.jfree.chart.plot.CategoryPlot: java.util.ResourceBundle localizationResources>;

        $stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Category_Plot");

        return $stack2;
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.PlotOrientation $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        return $stack1;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation)
    {
        org.jfree.chart.plot.PlotOrientation orientation;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        orientation := @parameter0: org.jfree.chart.plot.PlotOrientation;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(orientation, "orientation");

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation> = orientation;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.ui.RectangleInsets getAxisOffset()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        return $stack1;
    }

    public void setAxisOffset(org.jfree.chart.ui.RectangleInsets)
    {
        org.jfree.chart.ui.RectangleInsets offset;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        offset := @parameter0: org.jfree.chart.ui.RectangleInsets;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(offset, "offset");

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset> = offset;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.CategoryAxis $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis(int)>(0);

        return $stack1;
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis(int)
    {
        org.jfree.chart.plot.CategoryPlot this, cp;
        int index;
        java.util.Map $stack5;
        java.lang.Integer $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.plot.Plot parent;
        boolean $stack9;
        org.jfree.chart.axis.CategoryAxis result;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        result = (org.jfree.chart.axis.CategoryAxis) $stack7;

        if result != null goto label1;

        parent = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>();

        $stack9 = parent instanceof org.jfree.chart.plot.CategoryPlot;

        if $stack9 == 0 goto label1;

        cp = (org.jfree.chart.plot.CategoryPlot) parent;

        result = virtualinvoke cp.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis(int)>(index);

     label1:
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.CategoryAxis)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.CategoryAxis axis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axis := @parameter0: org.jfree.chart.axis.CategoryAxis;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)>(0, axis);

        return;
    }

    public void setDomainAxis(int, org.jfree.chart.axis.CategoryAxis)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.axis.CategoryAxis axis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        axis := @parameter1: org.jfree.chart.axis.CategoryAxis;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)>(index, axis, 1);

        return;
    }

    public void setDomainAxis(int, org.jfree.chart.axis.CategoryAxis, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack5, $stack8;
        java.lang.Integer $stack6, $stack9;
        java.lang.Object $stack7;
        org.jfree.chart.axis.CategoryAxis existing, axis;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        axis := @parameter1: org.jfree.chart.axis.CategoryAxis;

        notify := @parameter2: boolean;

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        existing = (org.jfree.chart.axis.CategoryAxis) $stack7;

        if existing == null goto label1;

        virtualinvoke existing.<org.jfree.chart.axis.CategoryAxis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label1:
        if axis == null goto label2;

        virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

     label2:
        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack9, axis);

        if axis == null goto label3;

        virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: void configure()>();

        virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label3:
        if notify == 0 goto label4;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label4:
        return;
    }

    public void setDomainAxes(org.jfree.chart.axis.CategoryAxis[])
    {
        org.jfree.chart.axis.CategoryAxis[] axes;
        int $stack3, i;
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.CategoryAxis $stack4;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axes := @parameter0: org.jfree.chart.axis.CategoryAxis[];

        i = 0;

     label1:
        $stack3 = lengthof axes;

        if i >= $stack3 goto label2;

        $stack4 = axes[i];

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)>(i, $stack4, 0);

        i = i + 1;

        goto label1;

     label2:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)
    {
        org.jfree.chart.axis.CategoryAxis axis;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack4;
        java.util.Set $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8, $stack9, $stack11;
        java.util.Map$Entry entry;
        java.lang.Integer $stack12;
        int $stack13;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axis := @parameter0: org.jfree.chart.axis.CategoryAxis;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(axis, "axis");

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack8;

        $stack9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack9 != axis goto label2;

        $stack11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        return $stack13;

     label2:
        goto label1;

     label3:
        return -1;
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisLocation $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)>(0);

        return $stack1;
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        java.lang.Object $stack5;
        org.jfree.chart.axis.AxisLocation $stack6, result;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4);

        result = (org.jfree.chart.axis.AxisLocation) $stack5;

        if result != null goto label1;

        $stack6 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)>(0);

        result = staticinvoke <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>($stack6);

     label1:
        return result;
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisLocation location;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        location := @parameter0: org.jfree.chart.axis.AxisLocation;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, location, 1);

        return;
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisLocation location;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        location := @parameter0: org.jfree.chart.axis.AxisLocation;

        notify := @parameter1: boolean;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, location, notify);

        return;
    }

    public void setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.axis.AxisLocation location;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        location := @parameter1: org.jfree.chart.axis.AxisLocation;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(index, location, 1);

        return;
    }

    public void setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)
    {
        int index;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack4;
        java.lang.Integer $stack5;
        org.jfree.chart.axis.AxisLocation location;
        boolean notify;
        java.lang.IllegalArgumentException $stack11;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        location := @parameter1: org.jfree.chart.axis.AxisLocation;

        notify := @parameter2: boolean;

        if index != 0 goto label1;

        if location != null goto label1;

        $stack11 = new java.lang.IllegalArgumentException;

        specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'location\' for index 0 not permitted.");

        throw $stack11;

     label1:
        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, location);

        if notify == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label2:
        return;
    }

    public org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.ui.RectangleEdge $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge(int)>(0);

        return $stack1;
    }

    public org.jfree.chart.ui.RectangleEdge getDomainAxisEdge(int)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.axis.AxisLocation location;
        org.jfree.chart.ui.RectangleEdge $stack5, result;
        org.jfree.chart.plot.PlotOrientation $stack7;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        location = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)>(index);

        if location == null goto label1;

        $stack7 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        result = staticinvoke <org.jfree.chart.plot.Plot: org.jfree.chart.ui.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>(location, $stack7);

        goto label2;

     label1:
        $stack5 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge(int)>(0);

        result = staticinvoke <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge opposite(org.jfree.chart.ui.RectangleEdge)>($stack5);

     label2:
        return result;
    }

    public int getDomainAxisCount()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack1;
        int $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public void clearDomainAxes()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack3, $stack7;
        java.util.Collection $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack8;
        org.jfree.chart.axis.CategoryAxis xAxis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.util.Collection values()>();

        l1 = interfaceinvoke $stack4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack8 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        xAxis = (org.jfree.chart.axis.CategoryAxis) $stack8;

        if xAxis == null goto label2;

        virtualinvoke xAxis.<org.jfree.chart.axis.CategoryAxis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label2:
        goto label1;

     label3:
        $stack7 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        interfaceinvoke $stack7.<java.util.Map: void clear()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public void configureDomainAxes()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack3;
        java.util.Collection $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.axis.CategoryAxis xAxis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.util.Collection values()>();

        l1 = interfaceinvoke $stack4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        xAxis = (org.jfree.chart.axis.CategoryAxis) $stack7;

        if xAxis == null goto label2;

        virtualinvoke xAxis.<org.jfree.chart.axis.CategoryAxis: void configure()>();

     label2:
        goto label1;

     label3:
        return;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.ValueAxis $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(0);

        return $stack1;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int)
    {
        org.jfree.chart.plot.CategoryPlot this, cp;
        int index;
        java.util.Map $stack5;
        java.lang.Integer $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.plot.Plot parent;
        boolean $stack9;
        org.jfree.chart.axis.ValueAxis result;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        result = (org.jfree.chart.axis.ValueAxis) $stack7;

        if result != null goto label1;

        parent = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>();

        $stack9 = parent instanceof org.jfree.chart.plot.CategoryPlot;

        if $stack9 == 0 goto label1;

        cp = (org.jfree.chart.plot.CategoryPlot) parent;

        result = virtualinvoke cp.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(index);

     label1:
        return result;
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRangeAxis(int,org.jfree.chart.axis.ValueAxis)>(0, axis);

        return;
    }

    public void setRangeAxis(int, org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        axis := @parameter1: org.jfree.chart.axis.ValueAxis;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)>(index, axis, 1);

        return;
    }

    public void setRangeAxis(int, org.jfree.chart.axis.ValueAxis, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack5, $stack8;
        java.lang.Integer $stack6, $stack9;
        java.lang.Object $stack7;
        org.jfree.chart.axis.ValueAxis existing, axis;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        axis := @parameter1: org.jfree.chart.axis.ValueAxis;

        notify := @parameter2: boolean;

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        existing = (org.jfree.chart.axis.ValueAxis) $stack7;

        if existing == null goto label1;

        virtualinvoke existing.<org.jfree.chart.axis.ValueAxis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label1:
        if axis == null goto label2;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

     label2:
        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack9, axis);

        if axis == null goto label3;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void configure()>();

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label3:
        if notify == 0 goto label4;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label4:
        return;
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[])
    {
        org.jfree.chart.axis.ValueAxis[] axes;
        int $stack3, i;
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.ValueAxis $stack4;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axes := @parameter0: org.jfree.chart.axis.ValueAxis[];

        i = 0;

     label1:
        $stack3 = lengthof axes;

        if i >= $stack3 goto label2;

        $stack4 = axes[i];

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)>(i, $stack4, 0);

        i = i + 1;

        goto label1;

     label2:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.chart.plot.CategoryPlot this, p;
        org.jfree.chart.plot.Plot parent;
        boolean $stack7;
        int result;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(axis, "axis");

        result = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: int findRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        if result >= 0 goto label1;

        parent = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>();

        $stack7 = parent instanceof org.jfree.chart.plot.CategoryPlot;

        if $stack7 == 0 goto label1;

        p = (org.jfree.chart.plot.CategoryPlot) parent;

        result = virtualinvoke p.<org.jfree.chart.plot.CategoryPlot: int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

     label1:
        return result;
    }

    private int findRangeAxisIndex(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack4;
        java.util.Set $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8, $stack9, $stack11;
        java.util.Map$Entry entry;
        org.jfree.chart.axis.ValueAxis axis;
        java.lang.Integer $stack12;
        int $stack13;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack8;

        $stack9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack9 != axis goto label2;

        $stack11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        return $stack13;

     label2:
        goto label1;

     label3:
        return -1;
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisLocation $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)>(0);

        return $stack1;
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        java.lang.Object $stack5;
        org.jfree.chart.axis.AxisLocation $stack6, result;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4);

        result = (org.jfree.chart.axis.AxisLocation) $stack5;

        if result != null goto label1;

        $stack6 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)>(0);

        result = staticinvoke <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>($stack6);

     label1:
        return result;
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisLocation location;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        location := @parameter0: org.jfree.chart.axis.AxisLocation;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)>(location, 1);

        return;
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisLocation location;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        location := @parameter0: org.jfree.chart.axis.AxisLocation;

        notify := @parameter1: boolean;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, location, notify);

        return;
    }

    public void setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.axis.AxisLocation location;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        location := @parameter1: org.jfree.chart.axis.AxisLocation;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(index, location, 1);

        return;
    }

    public void setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)
    {
        int index;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack4;
        java.lang.Integer $stack5;
        org.jfree.chart.axis.AxisLocation location;
        boolean notify;
        java.lang.IllegalArgumentException $stack11;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        location := @parameter1: org.jfree.chart.axis.AxisLocation;

        notify := @parameter2: boolean;

        if index != 0 goto label1;

        if location != null goto label1;

        $stack11 = new java.lang.IllegalArgumentException;

        specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'location\' for index 0 not permitted.");

        throw $stack11;

     label1:
        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, location);

        if notify == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label2:
        return;
    }

    public org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.ui.RectangleEdge $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge(int)>(0);

        return $stack1;
    }

    public org.jfree.chart.ui.RectangleEdge getRangeAxisEdge(int)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.axis.AxisLocation location;
        org.jfree.chart.plot.PlotOrientation $stack4;
        org.jfree.chart.ui.RectangleEdge $stack5;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        location = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)>(index);

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack5 = staticinvoke <org.jfree.chart.plot.Plot: org.jfree.chart.ui.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>(location, $stack4);

        return $stack5;
    }

    public int getRangeAxisCount()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack1;
        int $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public void clearRangeAxes()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack3, $stack7;
        java.util.Collection $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack8;
        org.jfree.chart.axis.ValueAxis yAxis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.util.Collection values()>();

        l1 = interfaceinvoke $stack4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack8 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        yAxis = (org.jfree.chart.axis.ValueAxis) $stack8;

        if yAxis == null goto label2;

        virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label2:
        goto label1;

     label3:
        $stack7 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        interfaceinvoke $stack7.<java.util.Map: void clear()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public void configureRangeAxes()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack3;
        java.util.Collection $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.axis.ValueAxis yAxis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.util.Collection values()>();

        l1 = interfaceinvoke $stack4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        yAxis = (org.jfree.chart.axis.ValueAxis) $stack7;

        if yAxis == null goto label2;

        virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: void configure()>();

     label2:
        goto label1;

     label3:
        return;
    }

    public org.jfree.data.category.CategoryDataset getDataset()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.data.category.CategoryDataset $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(0);

        return $stack1;
    }

    public org.jfree.data.category.CategoryDataset getDataset(int)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack2;
        java.lang.Integer $stack3;
        java.lang.Object $stack4;
        org.jfree.data.category.CategoryDataset $stack5;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        $stack2 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack4 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack3);

        $stack5 = (org.jfree.data.category.CategoryDataset) $stack4;

        return $stack5;
    }

    public void setDataset(org.jfree.data.category.CategoryDataset)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.data.category.CategoryDataset dataset;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDataset(int,org.jfree.data.category.CategoryDataset)>(0, dataset);

        return;
    }

    public void setDataset(int, org.jfree.data.category.CategoryDataset)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack5, $stack8;
        java.lang.Integer $stack6, $stack9;
        java.lang.Object $stack7;
        org.jfree.data.category.CategoryDataset existing, dataset;
        org.jfree.data.general.DatasetChangeEvent $stack11;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        dataset := @parameter1: org.jfree.data.category.CategoryDataset;

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        existing = (org.jfree.data.category.CategoryDataset) $stack7;

        if existing == null goto label1;

        interfaceinvoke existing.<org.jfree.data.category.CategoryDataset: void removeChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label1:
        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack9, dataset);

        if dataset == null goto label2;

        interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label2:
        $stack11 = new org.jfree.data.general.DatasetChangeEvent;

        specialinvoke $stack11.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, dataset);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($stack11);

        return;
    }

    public int getDatasetCount()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack1;
        int $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public int indexOf(org.jfree.data.category.CategoryDataset)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack4;
        java.util.Set $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8, $stack9, $stack11;
        java.util.Map$Entry entry;
        org.jfree.data.category.CategoryDataset dataset;
        java.lang.Integer $stack12;
        int $stack13;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack8;

        $stack9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack9 != dataset goto label2;

        $stack11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        return $stack13;

     label2:
        goto label1;

     label3:
        return -1;
    }

    public void mapDatasetToDomainAxis(int, int)
    {
        java.util.ArrayList $stack4;
        int axisIndex, index;
        java.lang.Integer $stack5;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        axisIndex := @parameter1: int;

        $stack4 = new java.util.ArrayList;

        specialinvoke $stack4.<java.util.ArrayList: void <init>(int)>(1);

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(axisIndex);

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>($stack5);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToDomainAxes(int,java.util.List)>(index, $stack4);

        return;
    }

    public void mapDatasetToDomainAxes(int, java.util.List)
    {
        int index;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.List axisIndices;
        java.util.TreeMap $stack3;
        java.lang.Integer $stack4;
        java.util.ArrayList $stack5;
        org.jfree.data.general.DatasetChangeEvent $stack7;
        org.jfree.data.category.CategoryDataset $stack8;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        axisIndices := @parameter1: java.util.List;

        staticinvoke <org.jfree.chart.util.Args: void requireNonNegative(int,java.lang.String)>(index, "index");

        specialinvoke this.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(axisIndices);

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>(java.util.Collection)>(axisIndices);

        virtualinvoke $stack3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack7 = new org.jfree.data.general.DatasetChangeEvent;

        $stack8 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(index);

        specialinvoke $stack7.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, $stack8);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($stack7);

        return;
    }

    private void checkAxisIndices(java.util.List)
    {
        java.util.List indices;
        int count, i;
        java.util.HashSet $stack7;
        java.lang.Object $stack8;
        java.lang.Integer item;
        boolean $stack9;
        java.lang.IllegalArgumentException $stack13, $stack14;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        indices := @parameter0: java.util.List;

        if indices != null goto label1;

        return;

     label1:
        count = interfaceinvoke indices.<java.util.List: int size()>();

        if count != 0 goto label2;

        $stack14 = new java.lang.IllegalArgumentException;

        specialinvoke $stack14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty list not permitted.");

        throw $stack14;

     label2:
        $stack7 = new java.util.HashSet;

        specialinvoke $stack7.<java.util.HashSet: void <init>()>();

        i = 0;

     label3:
        if i >= count goto label5;

        $stack8 = interfaceinvoke indices.<java.util.List: java.lang.Object get(int)>(i);

        item = (java.lang.Integer) $stack8;

        $stack9 = virtualinvoke $stack7.<java.util.HashSet: boolean contains(java.lang.Object)>(item);

        if $stack9 == 0 goto label4;

        $stack13 = new java.lang.IllegalArgumentException;

        specialinvoke $stack13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Indices must be unique.");

        throw $stack13;

     label4:
        virtualinvoke $stack7.<java.util.HashSet: boolean add(java.lang.Object)>(item);

        i = i + 1;

        goto label3;

     label5:
        return;
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int)
    {
        int index, $stack10;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.TreeMap $stack5;
        java.lang.Integer $stack6, axisIndex;
        java.lang.Object $stack7, $stack9;
        java.util.List axisIndices;
        org.jfree.chart.axis.CategoryAxis axis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        staticinvoke <org.jfree.chart.util.Args: void requireNonNegative(int,java.lang.String)>(index, "index");

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = virtualinvoke $stack5.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($stack6);

        axisIndices = (java.util.List) $stack7;

        if axisIndices == null goto label1;

        $stack9 = interfaceinvoke axisIndices.<java.util.List: java.lang.Object get(int)>(0);

        axisIndex = (java.lang.Integer) $stack9;

        $stack10 = virtualinvoke axisIndex.<java.lang.Integer: int intValue()>();

        axis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis(int)>($stack10);

        goto label2;

     label1:
        axis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis(int)>(0);

     label2:
        return axis;
    }

    public void mapDatasetToRangeAxis(int, int)
    {
        java.util.ArrayList $stack4;
        int axisIndex, index;
        java.lang.Integer $stack5;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        axisIndex := @parameter1: int;

        $stack4 = new java.util.ArrayList;

        specialinvoke $stack4.<java.util.ArrayList: void <init>(int)>(1);

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(axisIndex);

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>($stack5);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToRangeAxes(int,java.util.List)>(index, $stack4);

        return;
    }

    public void mapDatasetToRangeAxes(int, java.util.List)
    {
        int index;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.List axisIndices;
        java.util.TreeMap $stack3;
        java.lang.Integer $stack4;
        java.util.ArrayList $stack5;
        org.jfree.data.general.DatasetChangeEvent $stack7;
        org.jfree.data.category.CategoryDataset $stack8;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        axisIndices := @parameter1: java.util.List;

        staticinvoke <org.jfree.chart.util.Args: void requireNonNegative(int,java.lang.String)>(index, "index");

        specialinvoke this.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(axisIndices);

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>(java.util.Collection)>(axisIndices);

        virtualinvoke $stack3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack7 = new org.jfree.data.general.DatasetChangeEvent;

        $stack8 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(index);

        specialinvoke $stack7.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, $stack8);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($stack7);

        return;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)
    {
        int index, $stack10;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.TreeMap $stack4;
        java.lang.Integer $stack5, $stack9;
        java.lang.Object $stack6, $stack8;
        java.util.List axisIndices;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        staticinvoke <org.jfree.chart.util.Args: void requireNonNegative(int,java.lang.String)>(index, "index");

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack6 = virtualinvoke $stack4.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($stack5);

        axisIndices = (java.util.List) $stack6;

        if axisIndices == null goto label1;

        $stack8 = interfaceinvoke axisIndices.<java.util.List: java.lang.Object get(int)>(0);

        $stack9 = (java.lang.Integer) $stack8;

        $stack10 = virtualinvoke $stack9.<java.lang.Integer: int intValue()>();

        axis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>($stack10);

        goto label2;

     label1:
        axis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(0);

     label2:
        return axis;
    }

    public int getRendererCount()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack1;
        int $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.renderer.category.CategoryItemRenderer $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int)>(0);

        return $stack1;
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack3, $stack6;
        java.lang.Integer $stack4, $stack7;
        java.lang.Object $stack5, $stack8;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer, $stack9;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4);

        renderer = (org.jfree.chart.renderer.category.CategoryItemRenderer) $stack5;

        if renderer != null goto label1;

        $stack6 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack8 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack7);

        $stack9 = (org.jfree.chart.renderer.category.CategoryItemRenderer) $stack8;

        return $stack9;

     label1:
        return renderer;
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        renderer := @parameter0: org.jfree.chart.renderer.category.CategoryItemRenderer;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)>(0, renderer, 1);

        return;
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        renderer := @parameter0: org.jfree.chart.renderer.category.CategoryItemRenderer;

        notify := @parameter1: boolean;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)>(0, renderer, notify);

        return;
    }

    public void setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        renderer := @parameter1: org.jfree.chart.renderer.category.CategoryItemRenderer;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)>(index, renderer, 1);

        return;
    }

    public void setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack5, $stack8;
        java.lang.Integer $stack6, $stack9;
        java.lang.Object $stack7;
        org.jfree.chart.renderer.category.CategoryItemRenderer existing, renderer;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        renderer := @parameter1: org.jfree.chart.renderer.category.CategoryItemRenderer;

        notify := @parameter2: boolean;

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        existing = (org.jfree.chart.renderer.category.CategoryItemRenderer) $stack7;

        if existing == null goto label1;

        interfaceinvoke existing.<org.jfree.chart.renderer.category.CategoryItemRenderer: void removeChangeListener(org.jfree.chart.event.RendererChangeListener)>(this);

     label1:
        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack9, renderer);

        if renderer == null goto label2;

        interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: void setPlot(org.jfree.chart.plot.CategoryPlot)>(this);

        interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>(this);

     label2:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void configureDomainAxes()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void configureRangeAxes()>();

        if notify == 0 goto label3;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label3:
        return;
    }

    public void setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])
    {
        org.jfree.chart.renderer.category.CategoryItemRenderer[] renderers;
        int $stack3, i;
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.renderer.category.CategoryItemRenderer $stack4;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        renderers := @parameter0: org.jfree.chart.renderer.category.CategoryItemRenderer[];

        i = 0;

     label1:
        $stack3 = lengthof renderers;

        if i >= $stack3 goto label2;

        $stack4 = renderers[i];

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)>(i, $stack4, 0);

        i = i + 1;

        goto label1;

     label2:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRendererForDataset(org.jfree.data.category.CategoryDataset)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.data.category.CategoryDataset dataset;
        int datasetIndex;
        java.util.Map $stack5;
        java.lang.Integer $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer, $stack8;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        datasetIndex = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: int indexOf(org.jfree.data.category.CategoryDataset)>(dataset);

        if datasetIndex >= 0 goto label1;

        return null;

     label1:
        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(datasetIndex);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        renderer = (org.jfree.chart.renderer.category.CategoryItemRenderer) $stack7;

        if renderer != null goto label2;

        $stack8 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()>();

        return $stack8;

     label2:
        return renderer;
    }

    public int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack4;
        java.util.Set $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8, $stack9, $stack11;
        java.util.Map$Entry entry;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer;
        java.lang.Integer $stack12;
        int $stack13;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        renderer := @parameter0: org.jfree.chart.renderer.category.CategoryItemRenderer;

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack8;

        $stack9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack9 != renderer goto label2;

        $stack11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        return $stack13;

     label2:
        goto label1;

     label3:
        return -1;
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.DatasetRenderingOrder $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.DatasetRenderingOrder renderingOrder>;

        return $stack1;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)
    {
        org.jfree.chart.plot.DatasetRenderingOrder order;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        order := @parameter0: org.jfree.chart.plot.DatasetRenderingOrder;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(order, "order");

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.DatasetRenderingOrder renderingOrder> = order;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.util.SortOrder getColumnRenderingOrder()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.util.SortOrder $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder columnRenderingOrder>;

        return $stack1;
    }

    public void setColumnRenderingOrder(org.jfree.chart.util.SortOrder)
    {
        org.jfree.chart.util.SortOrder order;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        order := @parameter0: org.jfree.chart.util.SortOrder;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(order, "order");

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder columnRenderingOrder> = order;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.util.SortOrder getRowRenderingOrder()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.util.SortOrder $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder rowRenderingOrder>;

        return $stack1;
    }

    public void setRowRenderingOrder(org.jfree.chart.util.SortOrder)
    {
        org.jfree.chart.util.SortOrder order;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        order := @parameter0: org.jfree.chart.util.SortOrder;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(order, "order");

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder rowRenderingOrder> = order;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isDomainGridlinesVisible()
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: boolean domainGridlinesVisible>;

        return $stack1;
    }

    public void setDomainGridlinesVisible(boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.CategoryPlot: boolean domainGridlinesVisible>;

        if $stack2 == visible goto label1;

        this.<org.jfree.chart.plot.CategoryPlot: boolean domainGridlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.axis.CategoryAnchor getDomainGridlinePosition()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.CategoryAnchor $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAnchor domainGridlinePosition>;

        return $stack1;
    }

    public void setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)
    {
        org.jfree.chart.axis.CategoryAnchor position;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        position := @parameter0: org.jfree.chart.axis.CategoryAnchor;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(position, "position");

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAnchor domainGridlinePosition> = position;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getDomainGridlineStroke()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainGridlineStroke>;

        return $stack1;
    }

    public void setDomainGridlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainGridlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getDomainGridlinePaint()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainGridlinePaint>;

        return $stack1;
    }

    public void setDomainGridlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainGridlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isRangeZeroBaselineVisible()
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeZeroBaselineVisible>;

        return $stack1;
    }

    public void setRangeZeroBaselineVisible(boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean visible;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeZeroBaselineVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getRangeZeroBaselineStroke()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        return $stack1;
    }

    public void setRangeZeroBaselineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeZeroBaselinePaint()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint>;

        return $stack1;
    }

    public void setRangeZeroBaselinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isRangeGridlinesVisible()
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeGridlinesVisible>;

        return $stack1;
    }

    public void setRangeGridlinesVisible(boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeGridlinesVisible>;

        if $stack2 == visible goto label1;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeGridlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getRangeGridlineStroke()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeGridlineStroke>;

        return $stack1;
    }

    public void setRangeGridlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeGridlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeGridlinePaint()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeGridlinePaint>;

        return $stack1;
    }

    public void setRangeGridlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeGridlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isRangeMinorGridlinesVisible()
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeMinorGridlinesVisible>;

        return $stack1;
    }

    public void setRangeMinorGridlinesVisible(boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeMinorGridlinesVisible>;

        if $stack2 == visible goto label1;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeMinorGridlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getRangeMinorGridlineStroke()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        return $stack1;
    }

    public void setRangeMinorGridlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeMinorGridlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeMinorGridlinePaint()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeMinorGridlinePaint>;

        return $stack1;
    }

    public void setRangeMinorGridlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeMinorGridlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.LegendItemCollection $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        return $stack1;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.LegendItemCollection items;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        items := @parameter0: org.jfree.chart.LegendItemCollection;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems> = items;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.LegendItemCollection getLegendItems()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.LegendItemCollection $stack6, $stack7, $stack16, $stack17;
        java.util.Map $stack8;
        java.util.Collection $stack9;
        java.util.Iterator l2;
        boolean $stack11;
        java.lang.Object $stack12;
        org.jfree.data.category.CategoryDataset dataset;
        int datasetIndex;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack6 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        if $stack6 == null goto label1;

        $stack17 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        return $stack17;

     label1:
        $stack7 = new org.jfree.chart.LegendItemCollection;

        specialinvoke $stack7.<org.jfree.chart.LegendItemCollection: void <init>()>();

        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack9 = interfaceinvoke $stack8.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack9.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $stack11 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label4;

        $stack12 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        dataset = (org.jfree.data.category.CategoryDataset) $stack12;

        if dataset == null goto label3;

        datasetIndex = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: int indexOf(org.jfree.data.category.CategoryDataset)>(dataset);

        renderer = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int)>(datasetIndex);

        if renderer == null goto label3;

        $stack16 = interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: org.jfree.chart.LegendItemCollection getLegendItems()>();

        virtualinvoke $stack7.<org.jfree.chart.LegendItemCollection: void addAll(org.jfree.chart.LegendItemCollection)>($stack16);

     label3:
        goto label2;

     label4:
        return $stack7;
    }

    public void handleClick(int, int, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Rectangle2D dataArea, $stack22;
        int x, y;
        double $stack11, $stack12, value, java2D;
        boolean $stack13;
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.PlotOrientation $stack14, $stack15, $stack16, $stack17, $stack19;
        org.jfree.chart.ui.RectangleEdge edge;
        org.jfree.chart.axis.AxisLocation $stack18;
        org.jfree.chart.axis.ValueAxis $stack21;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        x := @parameter0: int;

        y := @parameter1: int;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        dataArea = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack12 = (double) x;

        $stack11 = (double) y;

        $stack13 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: boolean contains(double,double)>($stack12, $stack11);

        if $stack13 == 0 goto label3;

        java2D = 0.0;

        $stack15 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack14 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack15 != $stack14 goto label1;

        java2D = (double) x;

        goto label2;

     label1:
        $stack17 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack16 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if $stack17 != $stack16 goto label2;

        java2D = (double) y;

     label2:
        $stack18 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation()>();

        $stack19 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        edge = staticinvoke <org.jfree.chart.plot.Plot: org.jfree.chart.ui.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>($stack18, $stack19);

        $stack21 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack22 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        value = virtualinvoke $stack21.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(java2D, $stack22, edge);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setAnchorValue(double)>(value);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRangeCrosshairValue(double)>(value);

     label3:
        return;
    }

    public void zoom(double)
    {
        double percent, range, scaledRange, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18;
        byte $stack7;
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.ValueAxis $stack8, $stack9, $stack12;
        org.jfree.data.Range $stack10;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        percent := @parameter0: double;

        $stack7 = percent cmpl 0.0;

        if $stack7 <= 0 goto label1;

        $stack9 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack10 = virtualinvoke $stack9.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        range = virtualinvoke $stack10.<org.jfree.data.Range: double getLength()>();

        scaledRange = range * percent;

        $stack12 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack14 = this.<org.jfree.chart.plot.CategoryPlot: double anchorValue>;

        $stack13 = scaledRange / 2.0;

        $stack18 = $stack14 - $stack13;

        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: double anchorValue>;

        $stack15 = scaledRange / 2.0;

        $stack17 = $stack16 + $stack15;

        virtualinvoke $stack12.<org.jfree.chart.axis.ValueAxis: void setRange(double,double)>($stack18, $stack17);

        goto label2;

     label1:
        $stack8 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        virtualinvoke $stack8.<org.jfree.chart.axis.ValueAxis: void setAutoRange(boolean)>(1);

     label2:
        return;
    }

    public void annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.Plot $stack3, $stack5;
        org.jfree.chart.event.PlotChangeEvent $stack4;
        org.jfree.chart.event.AnnotationChangeEvent event;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        event := @parameter0: org.jfree.chart.event.AnnotationChangeEvent;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>();

        if $stack3 == null goto label1;

        $stack5 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>();

        virtualinvoke $stack5.<org.jfree.chart.plot.Plot: void annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)>(event);

        goto label2;

     label1:
        $stack4 = new org.jfree.chart.event.PlotChangeEvent;

        specialinvoke $stack4.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>($stack4);

     label2:
        return;
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack4;
        java.util.Collection $stack5;
        boolean $stack7;
        org.jfree.chart.plot.Plot $stack8, $stack11;
        org.jfree.chart.event.PlotChangeEvent $stack9;
        org.jfree.chart.event.ChartChangeEventType $stack10;
        org.jfree.data.general.DatasetChangeEvent event;
        java.lang.Object $stack12;
        org.jfree.chart.axis.ValueAxis yAxis;
        java.util.Iterator e;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        event := @parameter0: org.jfree.data.general.DatasetChangeEvent;

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Collection values()>();

        e = interfaceinvoke $stack5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke e.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack12 = interfaceinvoke e.<java.util.Iterator: java.lang.Object next()>();

        yAxis = (org.jfree.chart.axis.ValueAxis) $stack12;

        if yAxis == null goto label2;

        virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: void configure()>();

     label2:
        goto label1;

     label3:
        $stack8 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>();

        if $stack8 == null goto label4;

        $stack11 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>();

        virtualinvoke $stack11.<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>(event);

        goto label5;

     label4:
        $stack9 = new org.jfree.chart.event.PlotChangeEvent;

        specialinvoke $stack9.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(this);

        $stack10 = <org.jfree.chart.event.ChartChangeEventType: org.jfree.chart.event.ChartChangeEventType DATASET_UPDATED>;

        virtualinvoke $stack9.<org.jfree.chart.event.PlotChangeEvent: void setType(org.jfree.chart.event.ChartChangeEventType)>($stack10);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>($stack9);

     label5:
        return;
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.Plot parent;
        org.jfree.chart.event.PlotChangeEvent $stack5;
        boolean $stack6;
        java.lang.RuntimeException $stack7;
        org.jfree.chart.event.RendererChangeEvent event;
        org.jfree.chart.event.RendererChangeListener rcl;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        event := @parameter0: org.jfree.chart.event.RendererChangeEvent;

        parent = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>();

        if parent == null goto label2;

        $stack6 = parent instanceof org.jfree.chart.event.RendererChangeListener;

        if $stack6 == 0 goto label1;

        rcl = (org.jfree.chart.event.RendererChangeListener) parent;

        interfaceinvoke rcl.<org.jfree.chart.event.RendererChangeListener: void rendererChanged(org.jfree.chart.event.RendererChangeEvent)>(event);

        goto label3;

     label1:
        $stack7 = new java.lang.RuntimeException;

        specialinvoke $stack7.<java.lang.RuntimeException: void <init>(java.lang.String)>("The renderer has changed and I don\'t know what to do!");

        throw $stack7;

     label2:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void configureRangeAxes()>();

        $stack5 = new org.jfree.chart.event.PlotChangeEvent;

        specialinvoke $stack5.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>($stack5);

     label3:
        return;
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.CategoryMarker marker;
        org.jfree.chart.ui.Layer $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        marker := @parameter0: org.jfree.chart.plot.CategoryMarker;

        $stack2 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.chart.ui.Layer)>(marker, $stack2);

        return;
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.CategoryMarker marker;
        org.jfree.chart.ui.Layer layer;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        marker := @parameter0: org.jfree.chart.plot.CategoryMarker;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.ui.Layer)>(0, marker, layer);

        return;
    }

    public void addDomainMarker(int, org.jfree.chart.plot.CategoryMarker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.plot.CategoryMarker marker;
        org.jfree.chart.ui.Layer layer;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.CategoryMarker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.chart.ui.Layer,boolean)>(index, marker, layer, 1);

        return;
    }

    public void addDomainMarker(int, org.jfree.chart.plot.CategoryMarker, org.jfree.chart.ui.Layer, boolean)
    {
        org.jfree.chart.plot.CategoryMarker marker;
        org.jfree.chart.ui.Layer layer, $stack6, $stack7;
        org.jfree.chart.plot.CategoryPlot this;
        boolean notify;
        int index;
        java.util.Map $stack8, $stack16, $stack21, $stack26;
        java.lang.Integer $stack9, $stack17, $stack22, $stack27;
        java.lang.Object $stack10, $stack23;
        java.util.ArrayList $stack15, $stack25;
        java.util.Collection markers;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.CategoryMarker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        notify := @parameter3: boolean;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(marker, "marker");

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(layer, "layer");

        $stack6 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack6 goto label2;

        $stack21 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack23 = interfaceinvoke $stack21.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack22);

        markers = (java.util.Collection) $stack23;

        if markers != null goto label1;

        $stack25 = new java.util.ArrayList;

        specialinvoke $stack25.<java.util.ArrayList: void <init>()>();

        markers = $stack25;

        $stack26 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack27, $stack25);

     label1:
        interfaceinvoke markers.<java.util.Collection: boolean add(java.lang.Object)>(marker);

        goto label4;

     label2:
        $stack7 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        if layer != $stack7 goto label4;

        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack10 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack9);

        markers = (java.util.Collection) $stack10;

        if markers != null goto label3;

        $stack15 = new java.util.ArrayList;

        specialinvoke $stack15.<java.util.ArrayList: void <init>()>();

        markers = $stack15;

        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        $stack17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack17, $stack15);

     label3:
        interfaceinvoke markers.<java.util.Collection: boolean add(java.lang.Object)>(marker);

     label4:
        virtualinvoke marker.<org.jfree.chart.plot.CategoryMarker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        if notify == 0 goto label5;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label5:
        return;
    }

    public void clearDomainMarkers()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack4, $stack5, $stack6, $stack10, $stack15, $stack19;
        boolean $stack9, $stack18;
        java.lang.Object $stack12, $stack21;
        int $stack13, $stack22;
        java.util.Set keys;
        java.util.Iterator iterator;
        java.lang.Integer key;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        if $stack4 == null goto label3;

        $stack15 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        keys = interfaceinvoke $stack15.<java.util.Map: java.util.Set keySet()>();

        iterator = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack18 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label2;

        $stack21 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Integer) $stack21;

        $stack22 = virtualinvoke key.<java.lang.Integer: int intValue()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void clearDomainMarkers(int)>($stack22);

        goto label1;

     label2:
        $stack19 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        interfaceinvoke $stack19.<java.util.Map: void clear()>();

     label3:
        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        if $stack5 == null goto label6;

        $stack6 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        keys = interfaceinvoke $stack6.<java.util.Map: java.util.Set keySet()>();

        iterator = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $stack9 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label5;

        $stack12 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Integer) $stack12;

        $stack13 = virtualinvoke key.<java.lang.Integer: int intValue()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void clearDomainMarkers(int)>($stack13);

        goto label4;

     label5:
        $stack10 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        interfaceinvoke $stack10.<java.util.Map: void clear()>();

     label6:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.ui.Layer layer;
        java.util.Collection $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        layer := @parameter0: org.jfree.chart.ui.Layer;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.Collection getDomainMarkers(int,org.jfree.chart.ui.Layer)>(0, layer);

        return $stack2;
    }

    public java.util.Collection getDomainMarkers(int, org.jfree.chart.ui.Layer)
    {
        int index;
        java.lang.Integer key;
        org.jfree.chart.ui.Layer layer, $stack6, $stack7;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack10, $stack13;
        java.lang.Object $stack11, $stack14;
        java.util.Collection result;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        result = null;

        key = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack6 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack6 goto label1;

        $stack13 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        result = (java.util.Collection) $stack14;

        goto label2;

     label1:
        $stack7 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        if layer != $stack7 goto label2;

        $stack10 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        $stack11 = interfaceinvoke $stack10.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        result = (java.util.Collection) $stack11;

     label2:
        if result == null goto label3;

        result = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(result);

     label3:
        return result;
    }

    public void clearDomainMarkers(int)
    {
        int index;
        java.lang.Integer key;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack7, $stack9, $stack16, $stack8;
        java.lang.Object $stack10, $stack14, $stack17, $stack21;
        boolean $stack13, $stack20;
        java.util.Collection markers;
        java.util.Iterator iterator;
        org.jfree.chart.plot.Marker m;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        key = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        if $stack7 == null goto label3;

        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        $stack17 = interfaceinvoke $stack16.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        markers = (java.util.Collection) $stack17;

        if markers == null goto label3;

        iterator = interfaceinvoke markers.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack20 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label2;

        $stack21 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        m = (org.jfree.chart.plot.Marker) $stack21;

        virtualinvoke m.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        goto label1;

     label2:
        interfaceinvoke markers.<java.util.Collection: void clear()>();

     label3:
        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        if $stack8 == null goto label6;

        $stack9 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        markers = (java.util.Collection) $stack10;

        if markers == null goto label6;

        iterator = interfaceinvoke markers.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $stack13 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label5;

        $stack14 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        m = (org.jfree.chart.plot.Marker) $stack14;

        virtualinvoke m.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        goto label4;

     label5:
        interfaceinvoke markers.<java.util.Collection: void clear()>();

     label6:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer $stack2;
        boolean $stack3;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        $stack2 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(marker, $stack2);

        return $stack3;
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;
        boolean $stack3;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(0, marker, layer);

        return $stack3;
    }

    public boolean removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;
        boolean $stack4;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer,boolean)>(index, marker, layer, 1);

        return $stack4;
    }

    public boolean removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer, boolean)
    {
        org.jfree.chart.ui.Layer layer, $stack7;
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack8, $stack13;
        java.lang.Integer $stack9, $stack14;
        java.lang.Object $stack10, $stack15;
        org.jfree.chart.plot.Marker marker;
        boolean removed, notify;
        java.util.ArrayList markers;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        notify := @parameter3: boolean;

        $stack7 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack7 goto label1;

        $stack13 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack15 = interfaceinvoke $stack13.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack14);

        markers = (java.util.ArrayList) $stack15;

        goto label2;

     label1:
        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack10 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack9);

        markers = (java.util.ArrayList) $stack10;

     label2:
        if markers != null goto label3;

        return 0;

     label3:
        removed = virtualinvoke markers.<java.util.ArrayList: boolean remove(java.lang.Object)>(marker);

        if removed == 0 goto label4;

        if notify == 0 goto label4;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label4:
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        $stack2 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(marker, $stack2);

        return;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(0, marker, layer);

        return;
    }

    public void addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer,boolean)>(index, marker, layer, 1);

        return;
    }

    public void addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer, boolean)
    {
        org.jfree.chart.ui.Layer layer, $stack6, $stack7;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.plot.CategoryPlot this;
        boolean notify;
        int index;
        java.util.Map $stack8, $stack16, $stack21, $stack26;
        java.lang.Integer $stack9, $stack17, $stack22, $stack27;
        java.lang.Object $stack10, $stack23;
        java.util.ArrayList $stack15, $stack25;
        java.util.Collection markers;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        notify := @parameter3: boolean;

        $stack6 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack6 goto label2;

        $stack21 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack23 = interfaceinvoke $stack21.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack22);

        markers = (java.util.Collection) $stack23;

        if markers != null goto label1;

        $stack25 = new java.util.ArrayList;

        specialinvoke $stack25.<java.util.ArrayList: void <init>()>();

        markers = $stack25;

        $stack26 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack27, $stack25);

     label1:
        interfaceinvoke markers.<java.util.Collection: boolean add(java.lang.Object)>(marker);

        goto label4;

     label2:
        $stack7 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        if layer != $stack7 goto label4;

        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack10 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack9);

        markers = (java.util.Collection) $stack10;

        if markers != null goto label3;

        $stack15 = new java.util.ArrayList;

        specialinvoke $stack15.<java.util.ArrayList: void <init>()>();

        markers = $stack15;

        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        $stack17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack17, $stack15);

     label3:
        interfaceinvoke markers.<java.util.Collection: boolean add(java.lang.Object)>(marker);

     label4:
        virtualinvoke marker.<org.jfree.chart.plot.Marker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        if notify == 0 goto label5;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label5:
        return;
    }

    public void clearRangeMarkers()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack4, $stack5, $stack6, $stack10, $stack15, $stack19;
        boolean $stack9, $stack18;
        java.lang.Object $stack12, $stack21;
        int $stack13, $stack22;
        java.util.Set keys;
        java.util.Iterator iterator;
        java.lang.Integer key;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        if $stack4 == null goto label3;

        $stack15 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        keys = interfaceinvoke $stack15.<java.util.Map: java.util.Set keySet()>();

        iterator = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack18 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label2;

        $stack21 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Integer) $stack21;

        $stack22 = virtualinvoke key.<java.lang.Integer: int intValue()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void clearRangeMarkers(int)>($stack22);

        goto label1;

     label2:
        $stack19 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        interfaceinvoke $stack19.<java.util.Map: void clear()>();

     label3:
        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        if $stack5 == null goto label6;

        $stack6 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        keys = interfaceinvoke $stack6.<java.util.Map: java.util.Set keySet()>();

        iterator = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $stack9 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label5;

        $stack12 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Integer) $stack12;

        $stack13 = virtualinvoke key.<java.lang.Integer: int intValue()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void clearRangeMarkers(int)>($stack13);

        goto label4;

     label5:
        $stack10 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        interfaceinvoke $stack10.<java.util.Map: void clear()>();

     label6:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.ui.Layer layer;
        java.util.Collection $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        layer := @parameter0: org.jfree.chart.ui.Layer;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.Collection getRangeMarkers(int,org.jfree.chart.ui.Layer)>(0, layer);

        return $stack2;
    }

    public java.util.Collection getRangeMarkers(int, org.jfree.chart.ui.Layer)
    {
        int index;
        java.lang.Integer key;
        org.jfree.chart.ui.Layer layer, $stack6, $stack7;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack10, $stack13;
        java.lang.Object $stack11, $stack14;
        java.util.Collection result;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        result = null;

        key = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack6 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack6 goto label1;

        $stack13 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        result = (java.util.Collection) $stack14;

        goto label2;

     label1:
        $stack7 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        if layer != $stack7 goto label2;

        $stack10 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        $stack11 = interfaceinvoke $stack10.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        result = (java.util.Collection) $stack11;

     label2:
        if result == null goto label3;

        result = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(result);

     label3:
        return result;
    }

    public void clearRangeMarkers(int)
    {
        int index;
        java.lang.Integer key;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack7, $stack9, $stack16, $stack8;
        java.lang.Object $stack10, $stack14, $stack17, $stack21;
        boolean $stack13, $stack20;
        java.util.Collection markers;
        java.util.Iterator iterator;
        org.jfree.chart.plot.Marker m;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        key = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        if $stack7 == null goto label3;

        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        $stack17 = interfaceinvoke $stack16.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        markers = (java.util.Collection) $stack17;

        if markers == null goto label3;

        iterator = interfaceinvoke markers.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack20 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label2;

        $stack21 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        m = (org.jfree.chart.plot.Marker) $stack21;

        virtualinvoke m.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        goto label1;

     label2:
        interfaceinvoke markers.<java.util.Collection: void clear()>();

     label3:
        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        if $stack8 == null goto label6;

        $stack9 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        markers = (java.util.Collection) $stack10;

        if markers == null goto label6;

        iterator = interfaceinvoke markers.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $stack13 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label5;

        $stack14 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        m = (org.jfree.chart.plot.Marker) $stack14;

        virtualinvoke m.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        goto label4;

     label5:
        interfaceinvoke markers.<java.util.Collection: void clear()>();

     label6:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer $stack2;
        boolean $stack3;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        $stack2 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(marker, $stack2);

        return $stack3;
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;
        boolean $stack3;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(0, marker, layer);

        return $stack3;
    }

    public boolean removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;
        boolean $stack4;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer,boolean)>(index, marker, layer, 1);

        return $stack4;
    }

    public boolean removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer, boolean)
    {
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer, $stack7;
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        java.util.Map $stack8, $stack13;
        java.lang.Integer $stack9, $stack14;
        java.lang.Object $stack10, $stack15;
        boolean removed, notify;
        java.util.ArrayList markers;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        notify := @parameter3: boolean;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(marker, "marker");

        $stack7 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack7 goto label1;

        $stack13 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack15 = interfaceinvoke $stack13.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack14);

        markers = (java.util.ArrayList) $stack15;

        goto label2;

     label1:
        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack10 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack9);

        markers = (java.util.ArrayList) $stack10;

     label2:
        if markers != null goto label3;

        return 0;

     label3:
        removed = virtualinvoke markers.<java.util.ArrayList: boolean remove(java.lang.Object)>(marker);

        if removed == 0 goto label4;

        if notify == 0 goto label4;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label4:
        return removed;
    }

    public boolean isDomainCrosshairVisible()
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: boolean domainCrosshairVisible>;

        return $stack1;
    }

    public void setDomainCrosshairVisible(boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.CategoryPlot: boolean domainCrosshairVisible>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.plot.CategoryPlot: boolean domainCrosshairVisible> = flag;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.lang.Comparable getDomainCrosshairRowKey()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.lang.Comparable $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairRowKey>;

        return $stack1;
    }

    public void setDomainCrosshairRowKey(java.lang.Comparable)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.lang.Comparable key;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        key := @parameter0: java.lang.Comparable;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainCrosshairRowKey(java.lang.Comparable,boolean)>(key, 1);

        return;
    }

    public void setDomainCrosshairRowKey(java.lang.Comparable, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.lang.Comparable key;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        key := @parameter0: java.lang.Comparable;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairRowKey> = key;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.lang.Comparable getDomainCrosshairColumnKey()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.lang.Comparable $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairColumnKey>;

        return $stack1;
    }

    public void setDomainCrosshairColumnKey(java.lang.Comparable)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.lang.Comparable key;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        key := @parameter0: java.lang.Comparable;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainCrosshairColumnKey(java.lang.Comparable,boolean)>(key, 1);

        return;
    }

    public void setDomainCrosshairColumnKey(java.lang.Comparable, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.lang.Comparable key;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        key := @parameter0: java.lang.Comparable;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairColumnKey> = key;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public int getCrosshairDatasetIndex()
    {
        org.jfree.chart.plot.CategoryPlot this;
        int $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: int crosshairDatasetIndex>;

        return $stack1;
    }

    public void setCrosshairDatasetIndex(int)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setCrosshairDatasetIndex(int,boolean)>(index, 1);

        return;
    }

    public void setCrosshairDatasetIndex(int, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        index := @parameter0: int;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: int crosshairDatasetIndex> = index;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getDomainCrosshairPaint()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainCrosshairPaint>;

        return $stack1;
    }

    public void setDomainCrosshairPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainCrosshairPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getDomainCrosshairStroke()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainCrosshairStroke>;

        return $stack1;
    }

    public void setDomainCrosshairStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainCrosshairStroke> = stroke;

        return;
    }

    public boolean isRangeCrosshairVisible()
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairVisible>;

        return $stack1;
    }

    public void setRangeCrosshairVisible(boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairVisible>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairVisible> = flag;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean isRangeCrosshairLockedOnData()
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairLockedOnData>;

        return $stack1;
    }

    public void setRangeCrosshairLockedOnData(boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairLockedOnData>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairLockedOnData> = flag;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public double getRangeCrosshairValue()
    {
        org.jfree.chart.plot.CategoryPlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: double rangeCrosshairValue>;

        return $stack1;
    }

    public void setRangeCrosshairValue(double)
    {
        org.jfree.chart.plot.CategoryPlot this;
        double value;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        value := @parameter0: double;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRangeCrosshairValue(double,boolean)>(value, 1);

        return;
    }

    public void setRangeCrosshairValue(double, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        double value;
        boolean $stack4, notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        value := @parameter0: double;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: double rangeCrosshairValue> = value;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isRangeCrosshairVisible()>();

        if $stack4 == 0 goto label1;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getRangeCrosshairStroke()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeCrosshairStroke>;

        return $stack1;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeCrosshairStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeCrosshairPaint()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeCrosshairPaint>;

        return $stack1;
    }

    public void setRangeCrosshairPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeCrosshairPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public java.util.List getAnnotations()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.List $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        return $stack1;
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.annotations.CategoryAnnotation 'annotation';

        this := @this: org.jfree.chart.plot.CategoryPlot;

        'annotation' := @parameter0: org.jfree.chart.annotations.CategoryAnnotation;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)>('annotation', 1);

        return;
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation, boolean)
    {
        org.jfree.chart.annotations.CategoryAnnotation 'annotation';
        org.jfree.chart.plot.CategoryPlot this;
        java.util.List $stack3;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        'annotation' := @parameter0: org.jfree.chart.annotations.CategoryAnnotation;

        notify := @parameter1: boolean;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>('annotation', "annotation");

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        interfaceinvoke $stack3.<java.util.List: boolean add(java.lang.Object)>('annotation');

        interfaceinvoke 'annotation'.<org.jfree.chart.annotations.CategoryAnnotation: void addChangeListener(org.jfree.chart.event.AnnotationChangeListener)>(this);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.annotations.CategoryAnnotation 'annotation';
        boolean $stack2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        'annotation' := @parameter0: org.jfree.chart.annotations.CategoryAnnotation;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)>('annotation', 1);

        return $stack2;
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation, boolean)
    {
        org.jfree.chart.annotations.CategoryAnnotation 'annotation';
        org.jfree.chart.plot.CategoryPlot this;
        java.util.List $stack4;
        boolean removed, notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        'annotation' := @parameter0: org.jfree.chart.annotations.CategoryAnnotation;

        notify := @parameter1: boolean;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>('annotation', "annotation");

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        removed = interfaceinvoke $stack4.<java.util.List: boolean remove(java.lang.Object)>('annotation');

        interfaceinvoke 'annotation'.<org.jfree.chart.annotations.CategoryAnnotation: void removeChangeListener(org.jfree.chart.event.AnnotationChangeListener)>(this);

        if removed == 0 goto label1;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return removed;
    }

    public void clearAnnotations()
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.List $stack3, $stack5, $stack6;
        int $stack4, i;
        java.lang.Object $stack7;
        org.jfree.chart.annotations.CategoryAnnotation 'annotation';

        this := @this: org.jfree.chart.plot.CategoryPlot;

        i = 0;

     label1:
        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        $stack4 = interfaceinvoke $stack3.<java.util.List: int size()>();

        if i >= $stack4 goto label2;

        $stack6 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(i);

        'annotation' = (org.jfree.chart.annotations.CategoryAnnotation) $stack7;

        interfaceinvoke 'annotation'.<org.jfree.chart.annotations.CategoryAnnotation: void removeChangeListener(org.jfree.chart.event.AnnotationChangeListener)>(this);

        i = i + 1;

        goto label1;

     label2:
        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        interfaceinvoke $stack5.<java.util.List: void clear()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.util.ShadowGenerator getShadowGenerator()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.util.ShadowGenerator $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        return $stack1;
    }

    public void setShadowGenerator(org.jfree.chart.util.ShadowGenerator)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.util.ShadowGenerator generator;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        generator := @parameter0: org.jfree.chart.util.ShadowGenerator;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisSpace $stack9, $stack31, $stack34, $stack37, $stack40, $stack43, space;
        org.jfree.chart.axis.AxisLocation $stack10;
        org.jfree.chart.plot.PlotOrientation $stack11, $stack26, $stack28;
        org.jfree.chart.ui.RectangleEdge domainEdge, edge, $stack33, $stack36, $stack39, $stack42;
        boolean $stack13, $stack27, $stack29, $stack17;
        java.util.Map $stack14;
        java.util.Collection $stack15;
        java.util.Iterator l5;
        java.lang.Object $stack18;
        org.jfree.chart.axis.CategoryAxis xAxis, $stack23;
        int i;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;
        double $stack32, $stack35, $stack38, $stack41;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        space := @parameter2: org.jfree.chart.axis.AxisSpace;

        if space != null goto label1;

        $stack43 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack43.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        space = $stack43;

     label1:
        $stack9 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        if $stack9 == null goto label3;

        $stack26 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack27 = virtualinvoke $stack26.<org.jfree.chart.plot.PlotOrientation: boolean isHorizontal()>();

        if $stack27 == 0 goto label2;

        $stack37 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack38 = virtualinvoke $stack37.<org.jfree.chart.axis.AxisSpace: double getLeft()>();

        $stack39 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack38, $stack39);

        $stack40 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack41 = virtualinvoke $stack40.<org.jfree.chart.axis.AxisSpace: double getRight()>();

        $stack42 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack41, $stack42);

        goto label7;

     label2:
        $stack28 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack29 = virtualinvoke $stack28.<org.jfree.chart.plot.PlotOrientation: boolean isVertical()>();

        if $stack29 == 0 goto label7;

        $stack31 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack32 = virtualinvoke $stack31.<org.jfree.chart.axis.AxisSpace: double getTop()>();

        $stack33 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack32, $stack33);

        $stack34 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack35 = virtualinvoke $stack34.<org.jfree.chart.axis.AxisSpace: double getBottom()>();

        $stack36 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack35, $stack36);

        goto label7;

     label3:
        $stack10 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation()>();

        $stack11 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        domainEdge = staticinvoke <org.jfree.chart.plot.Plot: org.jfree.chart.ui.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>($stack10, $stack11);

        $stack13 = this.<org.jfree.chart.plot.CategoryPlot: boolean drawSharedDomainAxis>;

        if $stack13 == 0 goto label4;

        $stack23 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis()>();

        space = virtualinvoke $stack23.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)>(g2, this, plotArea, domainEdge, space);

     label4:
        $stack14 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack15 = interfaceinvoke $stack14.<java.util.Map: java.util.Collection values()>();

        l5 = interfaceinvoke $stack15.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $stack17 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label7;

        $stack18 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        xAxis = (org.jfree.chart.axis.CategoryAxis) $stack18;

        if xAxis == null goto label6;

        i = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)>(xAxis);

        edge = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge(int)>(i);

        space = virtualinvoke xAxis.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)>(g2, this, plotArea, edge, space);

     label6:
        goto label5;

     label7:
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisSpace $stack8, $stack23, $stack26, $stack29, $stack32, $stack35, space;
        java.util.Map $stack9;
        java.util.Collection $stack10;
        java.util.Iterator l4;
        boolean $stack12, $stack19;
        java.lang.Object $stack13;
        org.jfree.chart.axis.ValueAxis yAxis;
        int i;
        org.jfree.chart.ui.RectangleEdge edge, $stack25, $stack28, $stack31, $stack34;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;
        org.jfree.chart.plot.PlotOrientation $stack18, $stack20, $stack21;
        double $stack24, $stack27, $stack30, $stack33;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        space := @parameter2: org.jfree.chart.axis.AxisSpace;

        if space != null goto label1;

        $stack35 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack35.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        space = $stack35;

     label1:
        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        if $stack8 == null goto label3;

        $stack18 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack19 = virtualinvoke $stack18.<org.jfree.chart.plot.PlotOrientation: boolean isHorizontal()>();

        if $stack19 == 0 goto label2;

        $stack29 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack30 = virtualinvoke $stack29.<org.jfree.chart.axis.AxisSpace: double getTop()>();

        $stack31 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack30, $stack31);

        $stack32 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack33 = virtualinvoke $stack32.<org.jfree.chart.axis.AxisSpace: double getBottom()>();

        $stack34 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack33, $stack34);

        goto label6;

     label2:
        $stack21 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack20 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if $stack21 != $stack20 goto label6;

        $stack23 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack24 = virtualinvoke $stack23.<org.jfree.chart.axis.AxisSpace: double getLeft()>();

        $stack25 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack24, $stack25);

        $stack26 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack27 = virtualinvoke $stack26.<org.jfree.chart.axis.AxisSpace: double getRight()>();

        $stack28 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack27, $stack28);

        goto label6;

     label3:
        $stack9 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Collection values()>();

        l4 = interfaceinvoke $stack10.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $stack12 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label6;

        $stack13 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        yAxis = (org.jfree.chart.axis.ValueAxis) $stack13;

        if yAxis == null goto label5;

        i = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: int findRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(yAxis);

        edge = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge(int)>(i);

        space = virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)>(g2, this, plotArea, edge, space);

     label5:
        goto label4;

     label6:
        return space;
    }

    private java.awt.Rectangle integerise(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D rect;
        double $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13;
        int x0, y0, x1, y1, $stack15, $stack16;
        java.awt.Rectangle $stack14;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        rect := @parameter0: java.awt.geom.Rectangle2D;

        $stack6 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack7 = staticinvoke <java.lang.Math: double ceil(double)>($stack6);

        x0 = (int) $stack7;

        $stack8 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack9 = staticinvoke <java.lang.Math: double ceil(double)>($stack8);

        y0 = (int) $stack9;

        $stack10 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack11 = staticinvoke <java.lang.Math: double floor(double)>($stack10);

        x1 = (int) $stack11;

        $stack12 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack13 = staticinvoke <java.lang.Math: double floor(double)>($stack12);

        y1 = (int) $stack13;

        $stack14 = new java.awt.Rectangle;

        $stack16 = x1 - x0;

        $stack15 = y1 - y0;

        specialinvoke $stack14.<java.awt.Rectangle: void <init>(int,int,int,int)>(x0, y0, $stack16, $stack15);

        return $stack14;
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.axis.AxisSpace $stack4, space;
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        $stack4 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack4.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        space = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>(g2, plotArea, $stack4);

        space = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>(g2, plotArea, space);

        return space;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)
    {
        java.awt.geom.Rectangle2D area, $stack43, dataArea;
        double $stack32, $stack34, $stack103, $stack105, $stack136, $stack141, $stack147, $stack149, $stack178, $stack180, $stack183, $stack184, $stack185, $stack186, $stack216, $stack219, $stack234, $stack235, y, $stack49, yy, $stack87;
        byte $stack33, $stack35;
        boolean b1, $stack41, suppressShadow, $stack65, $stack73, $stack76, $stack78, $stack83, $stack89, $stack165, $stack224, $stack263, $stack261, $stack61, foundData#122, $stack167, $stack86, $stack88;
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.ui.RectangleInsets insets, $stack39;
        org.jfree.chart.axis.AxisSpace space;
        java.lang.Object $stack42, $stack55, $stack152, $stack157, $stack162, $stack168, $stack172, $stack196, $stack52;
        org.jfree.chart.renderer.category.CategoryItemRenderer $stack44, $stack90, $stack91, $stack237, renderer;
        java.util.Map axisStateMap, $stack62, $stack194, $stack58;
        java.awt.Graphics2D savedG2, g2;
        java.awt.RenderingHints$Key $stack53;
        java.lang.Boolean $stack54;
        org.jfree.chart.util.ShadowGenerator $stack57, $stack79, $stack134, $stack137, $stack142;
        java.util.Collection $stack63, $stack59;
        float $stack68;
        java.awt.AlphaComposite $stack69;
        java.util.List datasetIndices, $stack188, rendererIndices#128;
        java.lang.Comparable columnKey, $stack47, $stack48, i#145;
        java.awt.Paint paint;
        java.awt.Stroke stroke;
        org.jfree.chart.plot.PlotOrientation $stack95, $stack101, $stack102, $stack115, $stack214, $stack215;
        int $stack138, $stack139, $stack140, $stack143, $stack144, $stack145, $stack148, $stack150, $stack179, $stack181, i;
        java.lang.Integer $stack153, $stack158, $stack163;
        org.jfree.chart.ui.Layer $stack155, $stack160, $stack170, $stack174;
        java.awt.image.BufferedImage $stack177, dataImage, i#133;
        java.awt.RenderingHints $stack187;
        org.jfree.chart.plot.PlotState parentState;
        org.jfree.chart.axis.ValueAxis $stack195, rangeAxis, $stack51, paint;
        org.jfree.chart.ui.RectangleEdge $stack217, $stack220, stroke;
        org.jfree.chart.plot.PlotRenderingInfo $stack244, state;
        java.awt.geom.Point2D anchor;
        java.awt.Rectangle dataArea#7;
        org.jfree.chart.plot.CategoryCrosshairState $stack46;
        java.awt.Shape rangeAxis#64;
        org.jfree.chart.axis.AxisState y#95;
        java.util.Iterator foundData, rendererIndices, i#129;
        java.awt.Composite renderer#123;
        org.jfree.chart.plot.DatasetRenderingOrder i#124;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        anchor := @parameter2: java.awt.geom.Point2D;

        parentState := @parameter3: org.jfree.chart.plot.PlotState;

        state := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        $stack32 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack33 = $stack32 cmpg 10.0;

        if $stack33 > 0 goto label01;

        $stack263 = 1;

        goto label02;

     label01:
        $stack263 = 0;

     label02:
        b1 = $stack263;

        $stack34 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack35 = $stack34 cmpg 10.0;

        if $stack35 > 0 goto label03;

        $stack261 = 1;

        goto label04;

     label03:
        $stack261 = 0;

     label04:
        if b1 != 0 goto label05;

        if $stack261 == 0 goto label06;

     label05:
        return;

     label06:
        if state != null goto label07;

        $stack244 = new org.jfree.chart.plot.PlotRenderingInfo;

        specialinvoke $stack244.<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>(null);

        state = $stack244;

     label07:
        virtualinvoke state.<org.jfree.chart.plot.PlotRenderingInfo: void setPlotArea(java.awt.geom.Rectangle2D)>(area);

        insets = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets getInsets()>();

        virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(area);

        space = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        dataArea = virtualinvoke space.<org.jfree.chart.axis.AxisSpace: java.awt.geom.Rectangle2D shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(area, null);

        $stack39 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        virtualinvoke $stack39.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(dataArea);

        dataArea#7 = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: java.awt.Rectangle integerise(java.awt.geom.Rectangle2D)>(dataArea);

        $stack41 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: boolean isEmpty()>();

        if $stack41 == 0 goto label08;

        return;

     label08:
        virtualinvoke state.<org.jfree.chart.plot.PlotRenderingInfo: void setDataArea(java.awt.geom.Rectangle2D)>(dataArea#7);

        $stack42 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: java.lang.Object clone()>();

        $stack43 = (java.awt.geom.Rectangle2D) $stack42;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void createAndAddEntity(java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,java.lang.String,java.lang.String)>($stack43, state, null, null);

        $stack44 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()>();

        if $stack44 == null goto label09;

        $stack237 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()>();

        interfaceinvoke $stack237.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)>(g2, this, dataArea#7);

        goto label10;

     label09:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#7);

     label10:
        axisStateMap = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.Map drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>(g2, area, dataArea#7, state);

        if anchor == null goto label11;

        $stack224 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: boolean contains(java.awt.geom.Point2D)>(anchor);

        if $stack224 != 0 goto label11;

        $stack234 = virtualinvoke anchor.<java.awt.geom.Point2D: double getX()>();

        $stack235 = virtualinvoke anchor.<java.awt.geom.Point2D: double getY()>();

        anchor = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.geom.Point2D getPointInRectangle(double,double,java.awt.geom.Rectangle2D)>($stack234, $stack235, dataArea#7);

     label11:
        $stack46 = new org.jfree.chart.plot.CategoryCrosshairState;

        specialinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void <init>()>();

        virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void setCrosshairDistance(double)>(#Infinity);

        virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void setAnchor(java.awt.geom.Point2D)>(anchor);

        virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void setAnchorX(double)>(#NaN);

        virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void setAnchorY(double)>(#NaN);

        if anchor == null goto label14;

        rangeAxis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        if rangeAxis == null goto label14;

        $stack214 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack215 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if $stack214 != $stack215 goto label12;

        $stack219 = virtualinvoke anchor.<java.awt.geom.Point2D: double getY()>();

        $stack220 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        y = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack219, dataArea#7, $stack220);

        goto label13;

     label12:
        $stack216 = virtualinvoke anchor.<java.awt.geom.Point2D: double getX()>();

        $stack217 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        y = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack216, dataArea#7, $stack217);

     label13:
        virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void setAnchorY(double)>(y);

     label14:
        $stack47 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable getDomainCrosshairRowKey()>();

        virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void setRowKey(java.lang.Comparable)>($stack47);

        $stack48 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable getDomainCrosshairColumnKey()>();

        virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void setColumnKey(java.lang.Comparable)>($stack48);

        $stack49 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: double getRangeCrosshairValue()>();

        virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void setCrosshairY(double)>($stack49);

        rangeAxis#64 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Shape getClip()>();

        virtualinvoke g2.<java.awt.Graphics2D: void clip(java.awt.Shape)>(dataArea#7);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#7);

        $stack51 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack52 = interfaceinvoke axisStateMap.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack51);

        y#95 = (org.jfree.chart.axis.AxisState) $stack52;

        if y#95 != null goto label15;

        if parentState == null goto label15;

        $stack194 = virtualinvoke parentState.<org.jfree.chart.plot.PlotState: java.util.Map getSharedAxisStates()>();

        $stack195 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack196 = interfaceinvoke $stack194.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack195);

        y#95 = (org.jfree.chart.axis.AxisState) $stack196;

     label15:
        if y#95 == null goto label16;

        $stack188 = virtualinvoke y#95.<org.jfree.chart.axis.AxisState: java.util.List getTicks()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)>(g2, dataArea#7, $stack188);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#7);

     label16:
        savedG2 = g2;

        dataImage = null;

        $stack54 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack53 = <org.jfree.chart.JFreeChart: java.awt.RenderingHints$Key KEY_SUPPRESS_SHADOW_GENERATION>;

        $stack55 = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack53);

        suppressShadow = virtualinvoke $stack54.<java.lang.Boolean: boolean equals(java.lang.Object)>($stack55);

        $stack57 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack57 == null goto label17;

        if suppressShadow != 0 goto label17;

        $stack177 = new java.awt.image.BufferedImage;

        $stack178 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack179 = (int) $stack178;

        $stack180 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack181 = (int) $stack180;

        specialinvoke $stack177.<java.awt.image.BufferedImage: void <init>(int,int,int)>($stack179, $stack181, 2);

        dataImage = $stack177;

        g2 = virtualinvoke $stack177.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $stack183 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: double getX()>();

        $stack184 = neg $stack183;

        $stack185 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: double getY()>();

        $stack186 = neg $stack185;

        virtualinvoke g2.<java.awt.Graphics2D: void translate(double,double)>($stack184, $stack186);

        $stack187 = virtualinvoke savedG2.<java.awt.Graphics2D: java.awt.RenderingHints getRenderingHints()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHints(java.util.Map)>($stack187);

     label17:
        $stack58 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack59 = interfaceinvoke $stack58.<java.util.Map: java.util.Collection values()>();

        foundData = interfaceinvoke $stack59.<java.util.Collection: java.util.Iterator iterator()>();

     label18:
        $stack61 = interfaceinvoke foundData.<java.util.Iterator: boolean hasNext()>();

        if $stack61 == 0 goto label19;

        $stack172 = interfaceinvoke foundData.<java.util.Iterator: java.lang.Object next()>();

        renderer = (org.jfree.chart.renderer.category.CategoryItemRenderer) $stack172;

        i = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)>(renderer);

        $stack174 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.ui.Layer)>(g2, dataArea#7, i, $stack174);

        goto label18;

     label19:
        $stack62 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack63 = interfaceinvoke $stack62.<java.util.Map: java.util.Collection values()>();

        foundData = interfaceinvoke $stack63.<java.util.Collection: java.util.Iterator iterator()>();

     label20:
        $stack65 = interfaceinvoke foundData.<java.util.Iterator: boolean hasNext()>();

        if $stack65 == 0 goto label21;

        $stack168 = interfaceinvoke foundData.<java.util.Iterator: java.lang.Object next()>();

        renderer = (org.jfree.chart.renderer.category.CategoryItemRenderer) $stack168;

        i = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)>(renderer);

        $stack170 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.ui.Layer)>(g2, dataArea#7, i, $stack170);

        goto label20;

     label21:
        foundData#122 = 0;

        renderer#123 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $stack68 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: float getForegroundAlpha()>();

        $stack69 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $stack68);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($stack69);

        i#124 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder()>();

        datasetIndices = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.List getDatasetIndices(org.jfree.chart.plot.DatasetRenderingOrder)>(i#124);

        rendererIndices = interfaceinvoke datasetIndices.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $stack73 = interfaceinvoke rendererIndices.<java.util.Iterator: boolean hasNext()>();

        if $stack73 == 0 goto label26;

        $stack162 = interfaceinvoke rendererIndices.<java.util.Iterator: java.lang.Object next()>();

        $stack163 = (java.lang.Integer) $stack162;

        i = virtualinvoke $stack163.<java.lang.Integer: int intValue()>();

        $stack165 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CategoryCrosshairState)>(g2, dataArea#7, i, state, $stack46);

        if $stack165 != 0 goto label23;

        if foundData#122 == 0 goto label24;

     label23:
        $stack167 = 1;

        goto label25;

     label24:
        $stack167 = 0;

     label25:
        foundData#122 = $stack167;

        goto label22;

     label26:
        rendererIndices#128 = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.List getRendererIndices(org.jfree.chart.plot.DatasetRenderingOrder)>(i#124);

        i#129 = interfaceinvoke rendererIndices#128.<java.util.List: java.util.Iterator iterator()>();

     label27:
        $stack76 = interfaceinvoke i#129.<java.util.Iterator: boolean hasNext()>();

        if $stack76 == 0 goto label28;

        $stack157 = interfaceinvoke i#129.<java.util.Iterator: java.lang.Object next()>();

        $stack158 = (java.lang.Integer) $stack157;

        i = virtualinvoke $stack158.<java.lang.Integer: int intValue()>();

        $stack160 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.ui.Layer)>(g2, dataArea#7, i, $stack160);

        goto label27;

     label28:
        i#129 = interfaceinvoke rendererIndices#128.<java.util.List: java.util.Iterator iterator()>();

     label29:
        $stack78 = interfaceinvoke i#129.<java.util.Iterator: boolean hasNext()>();

        if $stack78 == 0 goto label30;

        $stack152 = interfaceinvoke i#129.<java.util.Iterator: java.lang.Object next()>();

        $stack153 = (java.lang.Integer) $stack152;

        i = virtualinvoke $stack153.<java.lang.Integer: int intValue()>();

        $stack155 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.ui.Layer)>(g2, dataArea#7, i, $stack155);

        goto label29;

     label30:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#7);

        $stack79 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack79 == null goto label31;

        if suppressShadow != 0 goto label31;

        $stack134 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        i#133 = interfaceinvoke $stack134.<org.jfree.chart.util.ShadowGenerator: java.awt.image.BufferedImage createDropShadow(java.awt.image.BufferedImage)>(dataImage);

        g2 = savedG2;

        $stack136 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: double getX()>();

        $stack138 = (int) $stack136;

        $stack137 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack139 = interfaceinvoke $stack137.<org.jfree.chart.util.ShadowGenerator: int calculateOffsetX()>();

        $stack140 = $stack138 + $stack139;

        $stack141 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: double getY()>();

        $stack143 = (int) $stack141;

        $stack142 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack144 = interfaceinvoke $stack142.<org.jfree.chart.util.ShadowGenerator: int calculateOffsetY()>();

        $stack145 = $stack143 + $stack144;

        virtualinvoke savedG2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(i#133, $stack140, $stack145, null);

        $stack147 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: double getX()>();

        $stack148 = (int) $stack147;

        $stack149 = virtualinvoke dataArea#7.<java.awt.geom.Rectangle2D: double getY()>();

        $stack150 = (int) $stack149;

        virtualinvoke savedG2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(dataImage, $stack148, $stack150, null);

     label31:
        virtualinvoke g2.<java.awt.Graphics2D: void setClip(java.awt.Shape)>(rangeAxis#64);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(renderer#123);

        if foundData#122 != 0 goto label32;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#7);

     label32:
        i = virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: int getDatasetIndex()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setCrosshairDatasetIndex(int,boolean)>(i, 0);

        i#145 = virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: java.lang.Comparable getRowKey()>();

        columnKey = virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: java.lang.Comparable getColumnKey()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainCrosshairRowKey(java.lang.Comparable,boolean)>(i#145, 0);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setDomainCrosshairColumnKey(java.lang.Comparable,boolean)>(columnKey, 0);

        $stack83 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isDomainCrosshairVisible()>();

        if $stack83 == 0 goto label33;

        if columnKey == null goto label33;

        paint = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint getDomainCrosshairPaint()>();

        stroke = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke getDomainCrosshairStroke()>();

        $stack115 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,int,java.lang.Comparable,java.lang.Comparable,java.awt.Stroke,java.awt.Paint)>(g2, dataArea#7, $stack115, i, i#145, columnKey, stroke, paint);

     label33:
        paint = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)>(i);

        stroke = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        $stack86 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairLockedOnData>;

        if $stack86 != 0 goto label36;

        if anchor == null goto label36;

        $stack101 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack102 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if $stack101 != $stack102 goto label34;

        $stack105 = virtualinvoke anchor.<java.awt.geom.Point2D: double getY()>();

        yy = virtualinvoke paint.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack105, dataArea#7, stroke);

        goto label35;

     label34:
        $stack103 = virtualinvoke anchor.<java.awt.geom.Point2D: double getX()>();

        yy = virtualinvoke paint.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack103, dataArea#7, stroke);

     label35:
        virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: void setCrosshairY(double)>(yy);

     label36:
        $stack87 = virtualinvoke $stack46.<org.jfree.chart.plot.CategoryCrosshairState: double getCrosshairY()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setRangeCrosshairValue(double,boolean)>($stack87, 0);

        $stack88 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isRangeCrosshairVisible()>();

        if $stack88 == 0 goto label37;

        yy = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: double getRangeCrosshairValue()>();

        paint = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint getRangeCrosshairPaint()>();

        stroke = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke getRangeCrosshairStroke()>();

        $stack95 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)>(g2, dataArea#7, $stack95, yy, paint, stroke, paint);

     label37:
        $stack89 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isOutlineVisible()>();

        if $stack89 == 0 goto label39;

        $stack90 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()>();

        if $stack90 == null goto label38;

        $stack91 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()>();

        interfaceinvoke $stack91.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)>(g2, this, dataArea#7);

        goto label39;

     label38:
        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#7);

     label39:
        return;
    }

    private java.util.List getDatasetIndices(org.jfree.chart.plot.DatasetRenderingOrder)
    {
        java.util.ArrayList $stack5;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack6;
        java.util.Set $stack7;
        java.util.Iterator l3;
        boolean $stack9;
        org.jfree.chart.plot.DatasetRenderingOrder order, $stack10;
        java.lang.Object $stack12, $stack13, $stack15;
        java.util.Map$Entry entry;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        order := @parameter0: org.jfree.chart.plot.DatasetRenderingOrder;

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        $stack6 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack7 = interfaceinvoke $stack6.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack12 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack12;

        $stack13 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack13 == null goto label2;

        $stack15 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>($stack15);

     label2:
        goto label1;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($stack5);

        $stack10 = <org.jfree.chart.plot.DatasetRenderingOrder: org.jfree.chart.plot.DatasetRenderingOrder REVERSE>;

        if order != $stack10 goto label4;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($stack5);

     label4:
        return $stack5;
    }

    private java.util.List getRendererIndices(org.jfree.chart.plot.DatasetRenderingOrder)
    {
        java.util.ArrayList $stack5;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack6;
        java.util.Set $stack7;
        java.util.Iterator l3;
        boolean $stack9;
        org.jfree.chart.plot.DatasetRenderingOrder order, $stack10;
        java.lang.Object $stack12, $stack13, $stack15;
        java.util.Map$Entry entry;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        order := @parameter0: org.jfree.chart.plot.DatasetRenderingOrder;

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        $stack6 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack7 = interfaceinvoke $stack6.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack12 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack12;

        $stack13 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack13 == null goto label2;

        $stack15 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>($stack15);

     label2:
        goto label1;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($stack5);

        $stack10 = <org.jfree.chart.plot.DatasetRenderingOrder: org.jfree.chart.plot.DatasetRenderingOrder REVERSE>;

        if order != $stack10 goto label4;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($stack5);

     label4:
        return $stack5;
    }

    public void drawBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.plot.PlotOrientation $stack3;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>(g2, area, $stack3);

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        return;
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.axis.AxisCollection $stack12;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack13, $stack17;
        java.util.Collection $stack14, $stack18;
        boolean $stack16, $stack20, $stack28, $stack35, $stack42, $stack49;
        java.util.HashMap $stack21;
        java.awt.geom.Rectangle2D dataArea, plotArea;
        double $stack22, $stack24, $stack25, $stack29, $stack31, $stack32, $stack36, $stack38, $stack39, $stack43, $stack45, $stack46, xAxis#8;
        org.jfree.chart.ui.RectangleInsets $stack23, $stack30, $stack37, $stack44;
        java.util.List $stack26, $stack33, $stack40, $stack47;
        java.lang.Object $stack50, $stack56, $stack62, $stack68, $stack74, $stack78;
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.PlotRenderingInfo plotState;
        org.jfree.chart.ui.RectangleEdge $stack52, $stack58, $stack64, $stack70, $stack77, $stack81;
        java.util.Iterator axisStateMap, l9;
        org.jfree.chart.axis.CategoryAxis xAxis;
        int index;
        org.jfree.chart.axis.ValueAxis xAxis#5;
        org.jfree.chart.axis.Axis axis;
        org.jfree.chart.axis.AxisState axisState;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        plotState := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        $stack12 = new org.jfree.chart.axis.AxisCollection;

        specialinvoke $stack12.<org.jfree.chart.axis.AxisCollection: void <init>()>();

        $stack13 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: java.util.Collection values()>();

        axisStateMap = interfaceinvoke $stack14.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $stack16 = interfaceinvoke axisStateMap.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label03;

        $stack78 = interfaceinvoke axisStateMap.<java.util.Iterator: java.lang.Object next()>();

        xAxis = (org.jfree.chart.axis.CategoryAxis) $stack78;

        if xAxis == null goto label02;

        index = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)>(xAxis);

        $stack81 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge(int)>(index);

        virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: void add(org.jfree.chart.axis.Axis,org.jfree.chart.ui.RectangleEdge)>(xAxis, $stack81);

     label02:
        goto label01;

     label03:
        $stack17 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack18 = interfaceinvoke $stack17.<java.util.Map: java.util.Collection values()>();

        axisStateMap = interfaceinvoke $stack18.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $stack20 = interfaceinvoke axisStateMap.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label06;

        $stack74 = interfaceinvoke axisStateMap.<java.util.Iterator: java.lang.Object next()>();

        xAxis#5 = (org.jfree.chart.axis.ValueAxis) $stack74;

        if xAxis#5 == null goto label05;

        index = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: int findRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(xAxis#5);

        $stack77 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge(int)>(index);

        virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: void add(org.jfree.chart.axis.Axis,org.jfree.chart.ui.RectangleEdge)>(xAxis#5, $stack77);

     label05:
        goto label04;

     label06:
        $stack21 = new java.util.HashMap;

        specialinvoke $stack21.<java.util.HashMap: void <init>()>();

        $stack22 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack23 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack24 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack25 = virtualinvoke $stack23.<org.jfree.chart.ui.RectangleInsets: double calculateTopOutset(double)>($stack24);

        xAxis#8 = $stack22 - $stack25;

        $stack26 = virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: java.util.List getAxesAtTop()>();

        l9 = interfaceinvoke $stack26.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack28 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack28 == 0 goto label09;

        $stack68 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.Axis) $stack68;

        if axis == null goto label08;

        $stack70 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        axisState = virtualinvoke axis.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, xAxis#8, plotArea, dataArea, $stack70, plotState);

        xAxis#8 = virtualinvoke axisState.<org.jfree.chart.axis.AxisState: double getCursor()>();

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(axis, axisState);

     label08:
        goto label07;

     label09:
        $stack29 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack30 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack31 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack32 = virtualinvoke $stack30.<org.jfree.chart.ui.RectangleInsets: double calculateBottomOutset(double)>($stack31);

        xAxis#8 = $stack29 + $stack32;

        $stack33 = virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: java.util.List getAxesAtBottom()>();

        l9 = interfaceinvoke $stack33.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $stack35 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack35 == 0 goto label12;

        $stack62 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.Axis) $stack62;

        if axis == null goto label11;

        $stack64 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        axisState = virtualinvoke axis.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, xAxis#8, plotArea, dataArea, $stack64, plotState);

        xAxis#8 = virtualinvoke axisState.<org.jfree.chart.axis.AxisState: double getCursor()>();

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(axis, axisState);

     label11:
        goto label10;

     label12:
        $stack36 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack37 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack38 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack39 = virtualinvoke $stack37.<org.jfree.chart.ui.RectangleInsets: double calculateLeftOutset(double)>($stack38);

        xAxis#8 = $stack36 - $stack39;

        $stack40 = virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: java.util.List getAxesAtLeft()>();

        l9 = interfaceinvoke $stack40.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $stack42 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack42 == 0 goto label15;

        $stack56 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.Axis) $stack56;

        if axis == null goto label14;

        $stack58 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        axisState = virtualinvoke axis.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, xAxis#8, plotArea, dataArea, $stack58, plotState);

        xAxis#8 = virtualinvoke axisState.<org.jfree.chart.axis.AxisState: double getCursor()>();

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(axis, axisState);

     label14:
        goto label13;

     label15:
        $stack43 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack44 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack45 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack46 = virtualinvoke $stack44.<org.jfree.chart.ui.RectangleInsets: double calculateRightOutset(double)>($stack45);

        xAxis#8 = $stack43 + $stack46;

        $stack47 = virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: java.util.List getAxesAtRight()>();

        l9 = interfaceinvoke $stack47.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $stack49 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack49 == 0 goto label18;

        $stack50 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.Axis) $stack50;

        if axis == null goto label17;

        $stack52 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        axisState = virtualinvoke axis.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, xAxis#8, plotArea, dataArea, $stack52, plotState);

        xAxis#8 = virtualinvoke axisState.<org.jfree.chart.axis.AxisState: double getCursor()>();

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(axis, axisState);

     label17:
        goto label16;

     label18:
        return $stack21;
    }

    public boolean render(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.CategoryCrosshairState)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index, columnCount, rowCount, passCount, pass, column, row;
        org.jfree.data.category.CategoryDataset currentDataset;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        boolean $stack23, foundData, $stack46;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        org.jfree.chart.plot.CategoryCrosshairState crosshairState;
        org.jfree.chart.util.SortOrder $stack29, $stack30, $stack33, $stack34, $stack39, $stack40;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        index := @parameter2: int;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        crosshairState := @parameter4: org.jfree.chart.plot.CategoryCrosshairState;

        foundData = 0;

        currentDataset = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(index);

        renderer = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int)>(index);

        domainAxis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int)>(index);

        rangeAxis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)>(index);

        $stack23 = staticinvoke <org.jfree.data.general.DatasetUtils: boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset)>(currentDataset);

        if $stack23 != 0 goto label01;

        $stack46 = 1;

        goto label02;

     label01:
        $stack46 = 0;

     label02:
        if $stack46 == 0 goto label19;

        if renderer == null goto label19;

        foundData = 1;

        state = interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>(g2, dataArea, this, index, info);

        virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: void setCrosshairState(org.jfree.chart.plot.CategoryCrosshairState)>(crosshairState);

        columnCount = interfaceinvoke currentDataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        rowCount = interfaceinvoke currentDataset.<org.jfree.data.category.CategoryDataset: int getRowCount()>();

        passCount = interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: int getPassCount()>();

        pass = 0;

     label03:
        if pass >= passCount goto label19;

        $stack30 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder columnRenderingOrder>;

        $stack29 = <org.jfree.chart.util.SortOrder: org.jfree.chart.util.SortOrder ASCENDING>;

        if $stack30 != $stack29 goto label11;

        column = 0;

     label04:
        if column >= columnCount goto label10;

        $stack40 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder rowRenderingOrder>;

        $stack39 = <org.jfree.chart.util.SortOrder: org.jfree.chart.util.SortOrder ASCENDING>;

        if $stack40 != $stack39 goto label07;

        row = 0;

     label05:
        if row >= rowCount goto label06;

        interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);

        row = row + 1;

        goto label05;

     label06:
        goto label09;

     label07:
        row = rowCount - 1;

     label08:
        if row < 0 goto label09;

        interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);

        row = row + -1;

        goto label08;

     label09:
        column = column + 1;

        goto label04;

     label10:
        goto label18;

     label11:
        column = columnCount - 1;

     label12:
        if column < 0 goto label18;

        $stack34 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder rowRenderingOrder>;

        $stack33 = <org.jfree.chart.util.SortOrder: org.jfree.chart.util.SortOrder ASCENDING>;

        if $stack34 != $stack33 goto label15;

        row = 0;

     label13:
        if row >= rowCount goto label14;

        interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);

        row = row + 1;

        goto label13;

     label14:
        goto label17;

     label15:
        row = rowCount - 1;

     label16:
        if row < 0 goto label17;

        interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);

        row = row + -1;

        goto label16;

     label17:
        column = column + -1;

        goto label12;

     label18:
        pass = pass + 1;

        goto label03;

     label19:
        return foundData;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack12;
        org.jfree.chart.axis.CategoryAnchor anchor;
        org.jfree.chart.ui.RectangleEdge domainAxisEdge;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.axis.CategoryAxis axis;
        int columnCount, c;
        java.awt.geom.Rectangle2D dataArea;
        double xx;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer1;
        java.awt.Graphics2D g2;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        $stack12 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isDomainGridlinesVisible()>();

        if $stack12 != 0 goto label1;

        return;

     label1:
        anchor = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAnchor getDomainGridlinePosition()>();

        domainAxisEdge = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        dataset = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset()>();

        if dataset != null goto label2;

        return;

     label2:
        axis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis()>();

        if axis == null goto label5;

        columnCount = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        c = 0;

     label3:
        if c >= columnCount goto label5;

        xx = virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: double getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(anchor, c, columnCount, dataArea, domainAxisEdge);

        renderer1 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()>();

        if renderer1 == null goto label4;

        interfaceinvoke renderer1.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)>(g2, this, dataArea, xx);

     label4:
        c = c + 1;

        goto label3;

     label5:
        return;
    }

    protected void drawRangeGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack11, $stack15, $stack25, $stack27, $stack32, $stack36, paintLine;
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.chart.renderer.category.CategoryItemRenderer r;
        java.util.List ticks;
        java.util.Iterator l9;
        java.lang.Object $stack16;
        org.jfree.chart.axis.ValueTick tick;
        org.jfree.chart.axis.TickType $stack17, $stack18, $stack19, $stack20;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        double $stack24, $stack21;
        java.awt.Stroke gridStroke;
        java.awt.Paint gridPaint;
        byte $stack22;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        ticks := @parameter2: java.util.List;

        $stack11 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isRangeGridlinesVisible()>();

        if $stack11 != 0 goto label1;

        $stack36 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isRangeMinorGridlinesVisible()>();

        if $stack36 != 0 goto label1;

        return;

     label1:
        axis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        if axis != null goto label2;

        return;

     label2:
        r = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()>();

        if r != null goto label3;

        return;

     label3:
        gridStroke = null;

        gridPaint = null;

        l9 = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $stack15 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label9;

        $stack16 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack16;

        paintLine = 0;

        $stack17 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack18 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MINOR>;

        if $stack17 != $stack18 goto label5;

        $stack32 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isRangeMinorGridlinesVisible()>();

        if $stack32 == 0 goto label5;

        gridStroke = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke getRangeMinorGridlineStroke()>();

        gridPaint = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint getRangeMinorGridlinePaint()>();

        paintLine = 1;

        goto label6;

     label5:
        $stack19 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack20 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MAJOR>;

        if $stack19 != $stack20 goto label6;

        $stack27 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isRangeGridlinesVisible()>();

        if $stack27 == 0 goto label6;

        gridStroke = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke getRangeGridlineStroke()>();

        gridPaint = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint getRangeGridlinePaint()>();

        paintLine = 1;

     label6:
        $stack21 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack22 = $stack21 cmpl 0.0;

        if $stack22 != 0 goto label7;

        $stack25 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isRangeZeroBaselineVisible()>();

        if $stack25 != 0 goto label8;

     label7:
        if paintLine == 0 goto label8;

        $stack24 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        interfaceinvoke r.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)>(g2, this, axis, dataArea, $stack24, gridPaint, gridStroke);

     label8:
        goto label4;

     label9:
        return;
    }

    protected void drawZeroRangeBaseline(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack4;
        org.jfree.chart.renderer.category.CategoryItemRenderer r;
        java.awt.Graphics2D g2;
        org.jfree.chart.axis.ValueAxis $stack6;
        java.awt.geom.Rectangle2D area;
        java.awt.Stroke $stack7;
        java.awt.Paint $stack8;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isRangeZeroBaselineVisible()>();

        if $stack4 != 0 goto label1;

        return;

     label1:
        r = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()>();

        $stack6 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint>;

        $stack7 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        interfaceinvoke r.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)>(g2, this, $stack6, area, 0.0, $stack8, $stack7);

        return;
    }

    protected void drawAnnotations(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.List $stack5, $stack6;
        java.util.Iterator l3;
        boolean $stack8;
        java.lang.Object $stack9;
        org.jfree.chart.annotations.CategoryAnnotation 'annotation';
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.axis.CategoryAxis $stack10;
        org.jfree.chart.axis.ValueAxis $stack11;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        $stack5 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.List getAnnotations()>();

        if $stack5 == null goto label2;

        $stack6 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.List getAnnotations()>();

        l3 = interfaceinvoke $stack6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack8 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack8 == 0 goto label2;

        $stack9 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        'annotation' = (org.jfree.chart.annotations.CategoryAnnotation) $stack9;

        $stack10 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis()>();

        $stack11 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        interfaceinvoke 'annotation'.<org.jfree.chart.annotations.CategoryAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)>(g2, this, dataArea, $stack10, $stack11);

        goto label1;

     label2:
        return;
    }

    protected void drawDomainMarkers(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.renderer.category.CategoryItemRenderer r;
        org.jfree.chart.ui.Layer layer;
        java.util.Collection markers;
        org.jfree.chart.axis.CategoryAxis axis;
        java.util.Iterator iterator;
        boolean $stack14;
        java.lang.Object $stack15;
        org.jfree.chart.plot.CategoryMarker marker;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        index := @parameter2: int;

        layer := @parameter3: org.jfree.chart.ui.Layer;

        r = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int)>(index);

        if r != null goto label1;

        return;

     label1:
        markers = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.Collection getDomainMarkers(int,org.jfree.chart.ui.Layer)>(index, layer);

        axis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int)>(index);

        if markers == null goto label3;

        if axis == null goto label3;

        iterator = interfaceinvoke markers.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $stack14 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label3;

        $stack15 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        marker = (org.jfree.chart.plot.CategoryMarker) $stack15;

        interfaceinvoke r.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)>(g2, this, axis, marker, dataArea);

        goto label2;

     label3:
        return;
    }

    protected void drawRangeMarkers(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int index;
        org.jfree.chart.renderer.category.CategoryItemRenderer r;
        org.jfree.chart.ui.Layer layer;
        java.util.Collection markers;
        org.jfree.chart.axis.ValueAxis axis;
        java.util.Iterator l8;
        boolean $stack14;
        java.lang.Object $stack15;
        org.jfree.chart.plot.Marker marker;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        index := @parameter2: int;

        layer := @parameter3: org.jfree.chart.ui.Layer;

        r = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int)>(index);

        if r != null goto label1;

        return;

     label1:
        markers = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.Collection getRangeMarkers(int,org.jfree.chart.ui.Layer)>(index, layer);

        axis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)>(index);

        if markers == null goto label3;

        if axis == null goto label3;

        l8 = interfaceinvoke markers.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $stack14 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label3;

        $stack15 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        marker = (org.jfree.chart.plot.Marker) $stack15;

        interfaceinvoke r.<org.jfree.chart.renderer.category.CategoryItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>(g2, this, axis, marker, dataArea);

        goto label2;

     label3:
        return;
    }

    protected void drawRangeLine(java.awt.Graphics2D, java.awt.geom.Rectangle2D, double, java.awt.Stroke, java.awt.Paint)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.ValueAxis $stack10;
        double value, java2D, $stack18, $stack19, $stack27, $stack28;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack11;
        org.jfree.chart.plot.PlotOrientation $stack13, $stack14, $stack15, $stack16;
        java.awt.Graphics2D g2;
        java.awt.Stroke stroke;
        java.awt.Paint paint;
        java.awt.geom.Line2D$Double $stack17, $stack26, line;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        value := @parameter2: double;

        stroke := @parameter3: java.awt.Stroke;

        paint := @parameter4: java.awt.Paint;

        $stack10 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack11 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        java2D = virtualinvoke $stack10.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack11);

        line = null;

        $stack14 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack13 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack14 != $stack13 goto label1;

        $stack26 = new java.awt.geom.Line2D$Double;

        $stack27 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack28 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack26.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(java2D, $stack27, java2D, $stack28);

        line = $stack26;

        goto label2;

     label1:
        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack15 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if $stack16 != $stack15 goto label2;

        $stack17 = new java.awt.geom.Line2D$Double;

        $stack18 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack19 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack17.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack18, java2D, $stack19, java2D);

        line = $stack17;

     label2:
        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(stroke);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

        return;
    }

    protected void drawDomainCrosshair(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation, int, java.lang.Comparable, java.lang.Comparable, java.awt.Stroke, java.awt.Paint)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int datasetIndex;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.axis.CategoryAxis axis;
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer;
        org.jfree.chart.plot.PlotOrientation orientation, $stack18;
        java.lang.Comparable rowKey, columnKey;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack19, $stack24;
        java.awt.geom.Line2D$Double $stack21, $stack26, line;
        double $stack22, $stack23, $stack27, $stack28, xx;
        java.awt.Graphics2D g2;
        java.awt.Stroke stroke;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        orientation := @parameter2: org.jfree.chart.plot.PlotOrientation;

        datasetIndex := @parameter3: int;

        rowKey := @parameter4: java.lang.Comparable;

        columnKey := @parameter5: java.lang.Comparable;

        stroke := @parameter6: java.awt.Stroke;

        paint := @parameter7: java.awt.Paint;

        dataset = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(datasetIndex);

        axis = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int)>(datasetIndex);

        renderer = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int)>(datasetIndex);

        $stack18 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack18 goto label1;

        $stack24 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        xx = interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: double getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(rowKey, columnKey, dataset, axis, dataArea, $stack24);

        $stack26 = new java.awt.geom.Line2D$Double;

        $stack27 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack28 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack26.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, $stack27, xx, $stack28);

        line = $stack26;

        goto label2;

     label1:
        $stack19 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        xx = interfaceinvoke renderer.<org.jfree.chart.renderer.category.CategoryItemRenderer: double getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(rowKey, columnKey, dataset, axis, dataArea, $stack19);

        $stack21 = new java.awt.geom.Line2D$Double;

        $stack22 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack23 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack21.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack22, xx, $stack23, xx);

        line = $stack21;

     label2:
        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(stroke);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

        return;
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation, double, org.jfree.chart.axis.ValueAxis, java.awt.Stroke, java.awt.Paint)
    {
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.data.Range $stack12;
        double value, $stack18, $stack19, $stack23, $stack24, xx;
        boolean $stack13;
        org.jfree.chart.plot.PlotOrientation orientation, $stack14;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack15, $stack20;
        java.awt.geom.Line2D$Double $stack17, $stack22, line;
        java.awt.Graphics2D g2;
        java.awt.Stroke stroke;
        java.awt.Paint paint;
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        orientation := @parameter2: org.jfree.chart.plot.PlotOrientation;

        value := @parameter3: double;

        axis := @parameter4: org.jfree.chart.axis.ValueAxis;

        stroke := @parameter5: java.awt.Stroke;

        paint := @parameter6: java.awt.Paint;

        $stack12 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack13 = virtualinvoke $stack12.<org.jfree.data.Range: boolean contains(double)>(value);

        if $stack13 != 0 goto label1;

        return;

     label1:
        $stack14 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack14 goto label2;

        $stack20 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        xx = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack20);

        $stack22 = new java.awt.geom.Line2D$Double;

        $stack23 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack24 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack22.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, $stack23, xx, $stack24);

        line = $stack22;

        goto label3;

     label2:
        $stack15 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        xx = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack15);

        $stack17 = new java.awt.geom.Line2D$Double;

        $stack18 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack19 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack17.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack18, xx, $stack19, xx);

        line = $stack17;

     label3:
        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(stroke);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

        return;
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)
    {
        java.util.ArrayList $stack8;
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.ValueAxis axis, $stack10;
        int rangeIndex;
        java.util.Iterator l5;
        java.lang.Object $stack13;
        org.jfree.data.category.CategoryDataset d;
        org.jfree.chart.renderer.category.CategoryItemRenderer r;
        org.jfree.data.Range $stack16, result;
        java.util.List $stack18, $stack21;
        boolean $stack12;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        result = null;

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        rangeIndex = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: int findRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        if rangeIndex < 0 goto label1;

        $stack21 = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.List datasetsMappedToRangeAxis(int)>(rangeIndex);

        interfaceinvoke $stack8.<java.util.List: boolean addAll(java.util.Collection)>($stack21);

        goto label2;

     label1:
        $stack10 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        if axis != $stack10 goto label2;

        $stack18 = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.List datasetsMappedToRangeAxis(int)>(0);

        interfaceinvoke $stack8.<java.util.List: boolean addAll(java.util.Collection)>($stack18);

     label2:
        l5 = interfaceinvoke $stack8.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack12 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label5;

        $stack13 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        d = (org.jfree.data.category.CategoryDataset) $stack13;

        r = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.renderer.category.CategoryItemRenderer getRendererForDataset(org.jfree.data.category.CategoryDataset)>(d);

        if r == null goto label4;

        $stack16 = interfaceinvoke r.<org.jfree.chart.renderer.category.CategoryItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>(d);

        result = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>(result, $stack16);

     label4:
        goto label3;

     label5:
        return result;
    }

    private java.util.List datasetsMappedToDomainAxis(int)
    {
        java.util.ArrayList $stack8;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack9;
        java.util.Set $stack10;
        java.util.Iterator l3;
        java.lang.Object $stack13, $stack14, $stack15, $stack17;
        java.util.Map$Entry entry;
        org.jfree.data.category.CategoryDataset dataset;
        java.lang.Integer datasetIndex, $stack18;
        java.util.TreeMap $stack16;
        java.util.List mappedAxes;
        int axisIndex;
        boolean $stack19, $stack12;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axisIndex := @parameter0: int;

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        $stack9 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label5;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack13;

        $stack14 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        dataset = (org.jfree.data.category.CategoryDataset) $stack14;

        if dataset != null goto label2;

        goto label1;

     label2:
        $stack15 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        datasetIndex = (java.lang.Integer) $stack15;

        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>;

        $stack17 = virtualinvoke $stack16.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(datasetIndex);

        mappedAxes = (java.util.List) $stack17;

        if mappedAxes != null goto label3;

        if axisIndex != 0 goto label4;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(dataset);

        goto label4;

     label3:
        $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(axisIndex);

        $stack19 = interfaceinvoke mappedAxes.<java.util.List: boolean contains(java.lang.Object)>($stack18);

        if $stack19 == 0 goto label4;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(dataset);

     label4:
        goto label1;

     label5:
        return $stack8;
    }

    private java.util.List datasetsMappedToRangeAxis(int)
    {
        java.util.ArrayList $stack8;
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack9;
        java.util.Set $stack10;
        java.util.Iterator l3;
        boolean $stack12, $stack19;
        java.lang.Object $stack13, $stack14, $stack15, $stack17;
        java.util.Map$Entry entry;
        java.lang.Integer datasetIndex, $stack18;
        org.jfree.data.category.CategoryDataset dataset;
        java.util.TreeMap $stack16;
        java.util.List mappedAxes;
        int axisIndex;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axisIndex := @parameter0: int;

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        $stack9 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label4;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack13;

        $stack14 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        datasetIndex = (java.lang.Integer) $stack14;

        $stack15 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        dataset = (org.jfree.data.category.CategoryDataset) $stack15;

        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>;

        $stack17 = virtualinvoke $stack16.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(datasetIndex);

        mappedAxes = (java.util.List) $stack17;

        if mappedAxes != null goto label2;

        if axisIndex != 0 goto label3;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(dataset);

        goto label3;

     label2:
        $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(axisIndex);

        $stack19 = interfaceinvoke mappedAxes.<java.util.List: boolean contains(java.lang.Object)>($stack18);

        if $stack19 == 0 goto label3;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(dataset);

     label3:
        goto label1;

     label4:
        return $stack8;
    }

    public int getWeight()
    {
        org.jfree.chart.plot.CategoryPlot this;
        int $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: int weight>;

        return $stack1;
    }

    public void setWeight(int)
    {
        org.jfree.chart.plot.CategoryPlot this;
        int weight;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        weight := @parameter0: int;

        this.<org.jfree.chart.plot.CategoryPlot: int weight> = weight;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisSpace $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        return $stack1;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisSpace space;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)>(space, 1);

        return;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisSpace space;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace> = space;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisSpace $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        return $stack1;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisSpace space;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)>(space, 1);

        return;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.AxisSpace space;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace> = space;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.util.List getCategories()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.data.category.CategoryDataset $stack2, $stack3;
        java.util.List $stack4, result;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        result = null;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset()>();

        if $stack2 == null goto label1;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset()>();

        $stack4 = interfaceinvoke $stack3.<org.jfree.data.category.CategoryDataset: java.util.List getColumnKeys()>();

        result = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack4);

     label1:
        return result;
    }

    public java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)
    {
        java.util.ArrayList $stack8;
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.axis.CategoryAxis axis;
        int axisIndex, $stack14, i;
        java.util.List $stack10;
        java.util.Iterator l4;
        boolean $stack12, $stack17;
        java.lang.Object $stack13;
        org.jfree.data.category.CategoryDataset dataset;
        java.lang.Comparable category;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        axis := @parameter0: org.jfree.chart.axis.CategoryAxis;

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        axisIndex = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)>(axis);

        $stack10 = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: java.util.List datasetsMappedToDomainAxis(int)>(axisIndex);

        l4 = interfaceinvoke $stack10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label5;

        $stack13 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        dataset = (org.jfree.data.category.CategoryDataset) $stack13;

        i = 0;

     label2:
        $stack14 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        if i >= $stack14 goto label4;

        category = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getColumnKey(int)>(i);

        $stack17 = interfaceinvoke $stack8.<java.util.List: boolean contains(java.lang.Object)>(category);

        if $stack17 != 0 goto label3;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(category);

     label3:
        i = i + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        return $stack8;
    }

    public boolean getDrawSharedDomainAxis()
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: boolean drawSharedDomainAxis>;

        return $stack1;
    }

    public void setDrawSharedDomainAxis(boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean draw;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        draw := @parameter0: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: boolean drawSharedDomainAxis> = draw;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isDomainPannable()
    {
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        return 0;
    }

    public boolean isRangePannable()
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangePannable>;

        return $stack1;
    }

    public void setRangePannable(boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean pannable;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        pannable := @parameter0: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: boolean rangePannable> = pannable;

        return;
    }

    public void panDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        double percent;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        percent := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        return;
    }

    public void panRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        boolean $stack11, $stack19, $stack15;
        java.util.Map $stack12;
        java.util.Collection $stack13;
        java.util.Iterator l5;
        java.lang.Object $stack16;
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.data.Range $stack17;
        double length, percent, $stack20, $stack21, $stack22, $stack23, adj;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        percent := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        $stack11 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean isRangePannable()>();

        if $stack11 != 0 goto label1;

        return;

     label1:
        $stack12 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack13 = interfaceinvoke $stack12.<java.util.Map: java.util.Collection values()>();

        l5 = interfaceinvoke $stack13.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $stack15 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label5;

        $stack16 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack16;

        if axis != null goto label3;

        goto label2;

     label3:
        $stack17 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        length = virtualinvoke $stack17.<org.jfree.data.Range: double getLength()>();

        adj = percent * length;

        $stack19 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        if $stack19 == 0 goto label4;

        adj = neg adj;

     label4:
        $stack20 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack21 = $stack20 + adj;

        $stack22 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        $stack23 = $stack22 + adj;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void setRange(double,double)>($stack21, $stack23);

        goto label2;

     label5:
        return;
    }

    public boolean isDomainZoomable()
    {
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        return 0;
    }

    public boolean isRangeZoomable()
    {
        org.jfree.chart.plot.CategoryPlot this;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        return 1;
    }

    public void zoomDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        double factor;
        org.jfree.chart.plot.PlotRenderingInfo state;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        factor := @parameter0: double;

        state := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        return;
    }

    public void zoomDomainAxes(double, double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        double lowerPercent, upperPercent;
        org.jfree.chart.plot.PlotRenderingInfo state;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        lowerPercent := @parameter0: double;

        upperPercent := @parameter1: double;

        state := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter3: java.awt.geom.Point2D;

        return;
    }

    public void zoomDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        double factor;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;
        boolean useAnchor;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        useAnchor := @parameter3: boolean;

        return;
    }

    public void zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        double factor;
        org.jfree.chart.plot.PlotRenderingInfo state;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        factor := @parameter0: double;

        state := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>(factor, state, source, 0);

        return;
    }

    public void zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack12;
        java.util.Collection $stack13;
        java.util.Iterator l6;
        java.lang.Object $stack16;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        boolean useAnchor, $stack20, $stack15;
        double factor, anchorY, sourceY;
        java.awt.geom.Point2D source;
        org.jfree.chart.plot.PlotOrientation $stack19;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Rectangle2D $stack21;
        org.jfree.chart.ui.RectangleEdge $stack22;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        useAnchor := @parameter3: boolean;

        $stack12 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack13 = interfaceinvoke $stack12.<java.util.Map: java.util.Collection values()>();

        l6 = interfaceinvoke $stack13.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack15 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label6;

        $stack16 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        rangeAxis = (org.jfree.chart.axis.ValueAxis) $stack16;

        if rangeAxis != null goto label2;

        goto label1;

     label2:
        if useAnchor == 0 goto label4;

        sourceY = virtualinvoke source.<java.awt.geom.Point2D: double getY()>();

        $stack19 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack20 = virtualinvoke $stack19.<org.jfree.chart.plot.PlotOrientation: boolean isHorizontal()>();

        if $stack20 == 0 goto label3;

        sourceY = virtualinvoke source.<java.awt.geom.Point2D: double getX()>();

     label3:
        $stack21 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack22 = virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        anchorY = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(sourceY, $stack21, $stack22);

        virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: void resizeRange2(double,double)>(factor, anchorY);

        goto label5;

     label4:
        virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: void resizeRange(double)>(factor);

     label5:
        goto label1;

     label6:
        return;
    }

    public void zoomRangeAxes(double, double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.CategoryPlot this;
        java.util.Map $stack9;
        java.util.Collection $stack10;
        java.util.Iterator l7;
        boolean $stack12;
        java.lang.Object $stack13;
        org.jfree.chart.axis.ValueAxis yAxis;
        double lowerPercent, upperPercent;
        org.jfree.chart.plot.PlotRenderingInfo state;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        lowerPercent := @parameter0: double;

        upperPercent := @parameter1: double;

        state := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter3: java.awt.geom.Point2D;

        $stack9 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Collection values()>();

        l7 = interfaceinvoke $stack10.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label3;

        $stack13 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        yAxis = (org.jfree.chart.axis.ValueAxis) $stack13;

        if yAxis == null goto label2;

        virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: void zoomRange(double,double)>(lowerPercent, upperPercent);

     label2:
        goto label1;

     label3:
        return;
    }

    public double getAnchorValue()
    {
        org.jfree.chart.plot.CategoryPlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CategoryPlot: double anchorValue>;

        return $stack1;
    }

    public void setAnchorValue(double)
    {
        org.jfree.chart.plot.CategoryPlot this;
        double value;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        value := @parameter0: double;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void setAnchorValue(double,boolean)>(value, 1);

        return;
    }

    public void setAnchorValue(double, boolean)
    {
        org.jfree.chart.plot.CategoryPlot this;
        double value;
        boolean notify;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        value := @parameter0: double;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.CategoryPlot: double anchorValue> = value;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.plot.CategoryPlot this, that;
        boolean $stack3, $stack8, $stack11, $stack14, $stack15, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $stack38, $stack39, $stack44, $stack47, $stack48, $stack49, $stack52, $stack55, $stack59, $stack60, $stack66, $stack69, $stack70, $stack71, $stack74, $stack77, $stack80, $stack83, $stack86, $stack89, $stack94, $stack97, $stack100, $stack101, $stack102, $stack107, $stack110, $stack113, $stack116, $stack117, $stack118, $stack121, $stack124, $stack125, $stack126, $stack129, $stack132, $stack135, $stack136;
        org.jfree.chart.plot.PlotOrientation $stack4, $stack5;
        org.jfree.chart.ui.RectangleInsets $stack6, $stack7;
        java.util.Map $stack9, $stack10, $stack12, $stack13, $stack17, $stack18, $stack20, $stack21, $stack29, $stack30, $stack72, $stack73, $stack75, $stack76, $stack78, $stack79, $stack81, $stack82, $stack84, $stack85;
        java.util.TreeMap $stack23, $stack24, $stack26, $stack27;
        org.jfree.chart.plot.DatasetRenderingOrder $stack32, $stack33;
        org.jfree.chart.util.SortOrder $stack34, $stack35, $stack36, $stack37;
        org.jfree.chart.axis.CategoryAnchor $stack40, $stack41;
        java.awt.Stroke $stack42, $stack43, $stack50, $stack51, $stack64, $stack65, $stack114, $stack115, $stack122, $stack123, $stack130, $stack131;
        java.awt.Paint $stack45, $stack46, $stack53, $stack54, $stack67, $stack68, $stack111, $stack112, $stack119, $stack120, $stack127, $stack128;
        double $stack56, $stack57, $stack61, $stack62;
        byte $stack58, $stack63;
        java.util.List $stack87, $stack88;
        int $stack90, $stack91, $stack103, $stack104;
        org.jfree.chart.axis.AxisSpace $stack92, $stack93, $stack95, $stack96;
        org.jfree.chart.LegendItemCollection $stack98, $stack99;
        java.lang.Comparable $stack105, $stack106, $stack108, $stack109;
        org.jfree.chart.util.ShadowGenerator $stack133, $stack134;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.plot.CategoryPlot;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.plot.CategoryPlot) obj;

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack4 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        if $stack5 == $stack4 goto label03;

        return 0;

     label03:
        $stack7 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack6 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack7, $stack6);

        if $stack8 != 0 goto label04;

        return 0;

     label04:
        $stack10 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack9 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack11 = interfaceinvoke $stack10.<java.util.Map: boolean equals(java.lang.Object)>($stack9);

        if $stack11 != 0 goto label05;

        return 0;

     label05:
        $stack13 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations>;

        $stack12 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: boolean equals(java.lang.Object)>($stack12);

        if $stack14 != 0 goto label06;

        return 0;

     label06:
        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: boolean drawSharedDomainAxis>;

        $stack15 = that.<org.jfree.chart.plot.CategoryPlot: boolean drawSharedDomainAxis>;

        if $stack16 == $stack15 goto label07;

        return 0;

     label07:
        $stack18 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack17 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack19 = interfaceinvoke $stack18.<java.util.Map: boolean equals(java.lang.Object)>($stack17);

        if $stack19 != 0 goto label08;

        return 0;

     label08:
        $stack21 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations>;

        $stack20 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations>;

        $stack22 = interfaceinvoke $stack21.<java.util.Map: boolean equals(java.lang.Object)>($stack20);

        if $stack22 != 0 goto label09;

        return 0;

     label09:
        $stack24 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>;

        $stack23 = that.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>;

        $stack25 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack24, $stack23);

        if $stack25 != 0 goto label10;

        return 0;

     label10:
        $stack27 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>;

        $stack26 = that.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>;

        $stack28 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack27, $stack26);

        if $stack28 != 0 goto label11;

        return 0;

     label11:
        $stack30 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack29 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack31 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack30, $stack29);

        if $stack31 != 0 goto label12;

        return 0;

     label12:
        $stack33 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.DatasetRenderingOrder renderingOrder>;

        $stack32 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.DatasetRenderingOrder renderingOrder>;

        if $stack33 == $stack32 goto label13;

        return 0;

     label13:
        $stack35 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder columnRenderingOrder>;

        $stack34 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder columnRenderingOrder>;

        if $stack35 == $stack34 goto label14;

        return 0;

     label14:
        $stack37 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder rowRenderingOrder>;

        $stack36 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder rowRenderingOrder>;

        if $stack37 == $stack36 goto label15;

        return 0;

     label15:
        $stack39 = this.<org.jfree.chart.plot.CategoryPlot: boolean domainGridlinesVisible>;

        $stack38 = that.<org.jfree.chart.plot.CategoryPlot: boolean domainGridlinesVisible>;

        if $stack39 == $stack38 goto label16;

        return 0;

     label16:
        $stack41 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAnchor domainGridlinePosition>;

        $stack40 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAnchor domainGridlinePosition>;

        if $stack41 == $stack40 goto label17;

        return 0;

     label17:
        $stack43 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainGridlineStroke>;

        $stack42 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainGridlineStroke>;

        $stack44 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack43, $stack42);

        if $stack44 != 0 goto label18;

        return 0;

     label18:
        $stack46 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainGridlinePaint>;

        $stack45 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainGridlinePaint>;

        $stack47 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack46, $stack45);

        if $stack47 != 0 goto label19;

        return 0;

     label19:
        $stack49 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeGridlinesVisible>;

        $stack48 = that.<org.jfree.chart.plot.CategoryPlot: boolean rangeGridlinesVisible>;

        if $stack49 == $stack48 goto label20;

        return 0;

     label20:
        $stack51 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeGridlineStroke>;

        $stack50 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeGridlineStroke>;

        $stack52 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack51, $stack50);

        if $stack52 != 0 goto label21;

        return 0;

     label21:
        $stack54 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeGridlinePaint>;

        $stack53 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeGridlinePaint>;

        $stack55 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack54, $stack53);

        if $stack55 != 0 goto label22;

        return 0;

     label22:
        $stack57 = this.<org.jfree.chart.plot.CategoryPlot: double anchorValue>;

        $stack56 = that.<org.jfree.chart.plot.CategoryPlot: double anchorValue>;

        $stack58 = $stack57 cmpl $stack56;

        if $stack58 == 0 goto label23;

        return 0;

     label23:
        $stack60 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairVisible>;

        $stack59 = that.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairVisible>;

        if $stack60 == $stack59 goto label24;

        return 0;

     label24:
        $stack62 = this.<org.jfree.chart.plot.CategoryPlot: double rangeCrosshairValue>;

        $stack61 = that.<org.jfree.chart.plot.CategoryPlot: double rangeCrosshairValue>;

        $stack63 = $stack62 cmpl $stack61;

        if $stack63 == 0 goto label25;

        return 0;

     label25:
        $stack65 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeCrosshairStroke>;

        $stack64 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeCrosshairStroke>;

        $stack66 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack65, $stack64);

        if $stack66 != 0 goto label26;

        return 0;

     label26:
        $stack68 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeCrosshairPaint>;

        $stack67 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeCrosshairPaint>;

        $stack69 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack68, $stack67);

        if $stack69 != 0 goto label27;

        return 0;

     label27:
        $stack71 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairLockedOnData>;

        $stack70 = that.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairLockedOnData>;

        if $stack71 == $stack70 goto label28;

        return 0;

     label28:
        $stack73 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        $stack72 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        $stack74 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack73, $stack72);

        if $stack74 != 0 goto label29;

        return 0;

     label29:
        $stack76 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack75 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack77 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack76, $stack75);

        if $stack77 != 0 goto label30;

        return 0;

     label30:
        $stack79 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        $stack78 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        $stack80 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack79, $stack78);

        if $stack80 != 0 goto label31;

        return 0;

     label31:
        $stack82 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        $stack81 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        $stack83 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack82, $stack81);

        if $stack83 != 0 goto label32;

        return 0;

     label32:
        $stack85 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        $stack84 = that.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        $stack86 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack85, $stack84);

        if $stack86 != 0 goto label33;

        return 0;

     label33:
        $stack88 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        $stack87 = that.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        $stack89 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack88, $stack87);

        if $stack89 != 0 goto label34;

        return 0;

     label34:
        $stack91 = this.<org.jfree.chart.plot.CategoryPlot: int weight>;

        $stack90 = that.<org.jfree.chart.plot.CategoryPlot: int weight>;

        if $stack91 == $stack90 goto label35;

        return 0;

     label35:
        $stack93 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack92 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack94 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack93, $stack92);

        if $stack94 != 0 goto label36;

        return 0;

     label36:
        $stack96 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack95 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack97 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack96, $stack95);

        if $stack97 != 0 goto label37;

        return 0;

     label37:
        $stack99 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        $stack98 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        $stack100 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack99, $stack98);

        if $stack100 != 0 goto label38;

        return 0;

     label38:
        $stack102 = this.<org.jfree.chart.plot.CategoryPlot: boolean domainCrosshairVisible>;

        $stack101 = that.<org.jfree.chart.plot.CategoryPlot: boolean domainCrosshairVisible>;

        if $stack102 == $stack101 goto label39;

        return 0;

     label39:
        $stack104 = this.<org.jfree.chart.plot.CategoryPlot: int crosshairDatasetIndex>;

        $stack103 = that.<org.jfree.chart.plot.CategoryPlot: int crosshairDatasetIndex>;

        if $stack104 == $stack103 goto label40;

        return 0;

     label40:
        $stack106 = this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairColumnKey>;

        $stack105 = that.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairColumnKey>;

        $stack107 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack106, $stack105);

        if $stack107 != 0 goto label41;

        return 0;

     label41:
        $stack109 = this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairRowKey>;

        $stack108 = that.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairRowKey>;

        $stack110 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack109, $stack108);

        if $stack110 != 0 goto label42;

        return 0;

     label42:
        $stack112 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainCrosshairPaint>;

        $stack111 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainCrosshairPaint>;

        $stack113 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack112, $stack111);

        if $stack113 != 0 goto label43;

        return 0;

     label43:
        $stack115 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainCrosshairStroke>;

        $stack114 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainCrosshairStroke>;

        $stack116 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack115, $stack114);

        if $stack116 != 0 goto label44;

        return 0;

     label44:
        $stack118 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeMinorGridlinesVisible>;

        $stack117 = that.<org.jfree.chart.plot.CategoryPlot: boolean rangeMinorGridlinesVisible>;

        if $stack118 == $stack117 goto label45;

        return 0;

     label45:
        $stack120 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeMinorGridlinePaint>;

        $stack119 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeMinorGridlinePaint>;

        $stack121 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack120, $stack119);

        if $stack121 != 0 goto label46;

        return 0;

     label46:
        $stack123 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        $stack122 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        $stack124 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack123, $stack122);

        if $stack124 != 0 goto label47;

        return 0;

     label47:
        $stack126 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeZeroBaselineVisible>;

        $stack125 = that.<org.jfree.chart.plot.CategoryPlot: boolean rangeZeroBaselineVisible>;

        if $stack126 == $stack125 goto label48;

        return 0;

     label48:
        $stack128 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint>;

        $stack127 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint>;

        $stack129 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack128, $stack127);

        if $stack129 != 0 goto label49;

        return 0;

     label49:
        $stack131 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        $stack130 = that.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        $stack132 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack131, $stack130);

        if $stack132 != 0 goto label50;

        return 0;

     label50:
        $stack134 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack133 = that.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack135 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack134, $stack133);

        if $stack135 != 0 goto label51;

        return 0;

     label51:
        $stack136 = specialinvoke this.<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>(obj);

        return $stack136;
    }

    public int hashCode()
    {
        org.jfree.chart.plot.CategoryPlot this;
        org.jfree.chart.plot.PlotOrientation $stack2, $stack393;
        int $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31, $stack33, $stack35, $stack37, $stack39, $stack41, $stack43, $stack45, $stack47, $stack49, $stack51, $stack53, $stack55, $stack57, $stack63, $stack64, $stack65, $stack67, $stack69, $stack71, $stack73, $stack75, $stack77, $stack79, $stack85, $stack87, $stack89, $stack91, $stack93, $stack95, $stack97, $stack99, $stack101, $stack102, $stack103, $stack105, $stack107, $stack109, $stack111, $stack113, $stack394, hash#3, $stack388, $stack382, $stack376, $stack365, $stack359, $stack353, $stack347, $stack341, $stack335, $stack329, $stack323, $stack317, $stack306, $stack300, $stack294, $stack283, $stack277, $stack266, $stack260, $stack249, $stack233, $stack222, $stack216, $stack210, $stack204, $stack187, $stack181, $stack170, $stack164, $stack158, $stack152, $stack142, $stack136, $stack130, $stack124, $stack115;
        org.jfree.chart.ui.RectangleInsets $stack4, $stack387;
        java.util.Map $stack6, $stack8, $stack12, $stack14, $stack16, $stack22, $stack92, $stack94, $stack96, $stack98, $stack151, $stack157, $stack163, $stack169, $stack334, $stack352, $stack358, $stack364, $stack375, $stack381;
        boolean $stack10, $stack30, $stack38, $stack44, $stack50, $stack66, $stack76, $stack90, $stack110;
        java.util.TreeMap $stack18, $stack20, $stack340, $stack346;
        org.jfree.chart.plot.DatasetRenderingOrder $stack24, $stack328;
        org.jfree.chart.util.SortOrder $stack26, $stack28, $stack316, $stack322;
        org.jfree.chart.axis.CategoryAnchor $stack32, $stack305;
        java.awt.Stroke $stack34, $stack40, $stack46, $stack52, $stack72, $stack86, $stack186, $stack209, $stack248, $stack265, $stack282, $stack299;
        java.awt.Paint $stack36, $stack42, $stack48, $stack54, $stack74, $stack88, $stack180, $stack203, $stack232, $stack259, $stack276, $stack293;
        double $stack56, $stack59, $stack78, $stack81;
        long $stack58, $stack60, $stack61, $stack62, $stack80, $stack82, $stack83, $stack84;
        java.lang.Comparable $stack68, $stack70, $stack215, $stack221;
        java.util.List $stack100, $stack141;
        org.jfree.chart.axis.AxisSpace $stack104, $stack106, $stack129, $stack135;
        org.jfree.chart.LegendItemCollection $stack108, $stack123;
        org.jfree.chart.util.ShadowGenerator $stack112, $stack114;
        byte $stack370, $stack311, $stack288, $stack271, $stack254, $stack227, $stack192, $stack175, $stack118;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack3 = 37 * 7;

        $stack2 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        if $stack2 == null goto label01;

        $stack393 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack394 = virtualinvoke $stack393.<org.jfree.chart.plot.PlotOrientation: int hashCode()>();

        goto label02;

     label01:
        $stack394 = 0;

     label02:
        hash#3 = $stack3 + $stack394;

        $stack5 = 37 * hash#3;

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        if $stack4 == null goto label03;

        $stack387 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack388 = virtualinvoke $stack387.<org.jfree.chart.ui.RectangleInsets: int hashCode()>();

        goto label04;

     label03:
        $stack388 = 0;

     label04:
        hash#3 = $stack5 + $stack388;

        $stack7 = 37 * hash#3;

        $stack6 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        if $stack6 == null goto label05;

        $stack381 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack382 = interfaceinvoke $stack381.<java.util.Map: int hashCode()>();

        goto label06;

     label05:
        $stack382 = 0;

     label06:
        hash#3 = $stack7 + $stack382;

        $stack9 = 37 * hash#3;

        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations>;

        if $stack8 == null goto label07;

        $stack375 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations>;

        $stack376 = interfaceinvoke $stack375.<java.util.Map: int hashCode()>();

        goto label08;

     label07:
        $stack376 = 0;

     label08:
        hash#3 = $stack9 + $stack376;

        $stack11 = 37 * hash#3;

        $stack10 = this.<org.jfree.chart.plot.CategoryPlot: boolean drawSharedDomainAxis>;

        if $stack10 == 0 goto label09;

        $stack370 = 1;

        goto label10;

     label09:
        $stack370 = 0;

     label10:
        hash#3 = $stack11 + $stack370;

        $stack13 = 37 * hash#3;

        $stack12 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        if $stack12 == null goto label11;

        $stack364 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack365 = interfaceinvoke $stack364.<java.util.Map: int hashCode()>();

        goto label12;

     label11:
        $stack365 = 0;

     label12:
        hash#3 = $stack13 + $stack365;

        $stack15 = 37 * hash#3;

        $stack14 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations>;

        if $stack14 == null goto label13;

        $stack358 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations>;

        $stack359 = interfaceinvoke $stack358.<java.util.Map: int hashCode()>();

        goto label14;

     label13:
        $stack359 = 0;

     label14:
        hash#3 = $stack15 + $stack359;

        $stack17 = 37 * hash#3;

        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        if $stack16 == null goto label15;

        $stack352 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack353 = interfaceinvoke $stack352.<java.util.Map: int hashCode()>();

        goto label16;

     label15:
        $stack353 = 0;

     label16:
        hash#3 = $stack17 + $stack353;

        $stack19 = 37 * hash#3;

        $stack18 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>;

        if $stack18 == null goto label17;

        $stack346 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>;

        $stack347 = virtualinvoke $stack346.<java.util.TreeMap: int hashCode()>();

        goto label18;

     label17:
        $stack347 = 0;

     label18:
        hash#3 = $stack19 + $stack347;

        $stack21 = 37 * hash#3;

        $stack20 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>;

        if $stack20 == null goto label19;

        $stack340 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>;

        $stack341 = virtualinvoke $stack340.<java.util.TreeMap: int hashCode()>();

        goto label20;

     label19:
        $stack341 = 0;

     label20:
        hash#3 = $stack21 + $stack341;

        $stack23 = 37 * hash#3;

        $stack22 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        if $stack22 == null goto label21;

        $stack334 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack335 = interfaceinvoke $stack334.<java.util.Map: int hashCode()>();

        goto label22;

     label21:
        $stack335 = 0;

     label22:
        hash#3 = $stack23 + $stack335;

        $stack25 = 37 * hash#3;

        $stack24 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.DatasetRenderingOrder renderingOrder>;

        if $stack24 == null goto label23;

        $stack328 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.DatasetRenderingOrder renderingOrder>;

        $stack329 = virtualinvoke $stack328.<org.jfree.chart.plot.DatasetRenderingOrder: int hashCode()>();

        goto label24;

     label23:
        $stack329 = 0;

     label24:
        hash#3 = $stack25 + $stack329;

        $stack27 = 37 * hash#3;

        $stack26 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder columnRenderingOrder>;

        if $stack26 == null goto label25;

        $stack322 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder columnRenderingOrder>;

        $stack323 = virtualinvoke $stack322.<org.jfree.chart.util.SortOrder: int hashCode()>();

        goto label26;

     label25:
        $stack323 = 0;

     label26:
        hash#3 = $stack27 + $stack323;

        $stack29 = 37 * hash#3;

        $stack28 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder rowRenderingOrder>;

        if $stack28 == null goto label27;

        $stack316 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.SortOrder rowRenderingOrder>;

        $stack317 = virtualinvoke $stack316.<org.jfree.chart.util.SortOrder: int hashCode()>();

        goto label28;

     label27:
        $stack317 = 0;

     label28:
        hash#3 = $stack29 + $stack317;

        $stack31 = 37 * hash#3;

        $stack30 = this.<org.jfree.chart.plot.CategoryPlot: boolean domainGridlinesVisible>;

        if $stack30 == 0 goto label29;

        $stack311 = 1;

        goto label30;

     label29:
        $stack311 = 0;

     label30:
        hash#3 = $stack31 + $stack311;

        $stack33 = 37 * hash#3;

        $stack32 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAnchor domainGridlinePosition>;

        if $stack32 == null goto label31;

        $stack305 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAnchor domainGridlinePosition>;

        $stack306 = virtualinvoke $stack305.<org.jfree.chart.axis.CategoryAnchor: int hashCode()>();

        goto label32;

     label31:
        $stack306 = 0;

     label32:
        hash#3 = $stack33 + $stack306;

        $stack35 = 37 * hash#3;

        $stack34 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainGridlineStroke>;

        if $stack34 == null goto label33;

        $stack299 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainGridlineStroke>;

        $stack300 = virtualinvoke $stack299.<java.lang.Object: int hashCode()>();

        goto label34;

     label33:
        $stack300 = 0;

     label34:
        hash#3 = $stack35 + $stack300;

        $stack37 = 37 * hash#3;

        $stack36 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainGridlinePaint>;

        if $stack36 == null goto label35;

        $stack293 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainGridlinePaint>;

        $stack294 = virtualinvoke $stack293.<java.lang.Object: int hashCode()>();

        goto label36;

     label35:
        $stack294 = 0;

     label36:
        hash#3 = $stack37 + $stack294;

        $stack39 = 37 * hash#3;

        $stack38 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeZeroBaselineVisible>;

        if $stack38 == 0 goto label37;

        $stack288 = 1;

        goto label38;

     label37:
        $stack288 = 0;

     label38:
        hash#3 = $stack39 + $stack288;

        $stack41 = 37 * hash#3;

        $stack40 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        if $stack40 == null goto label39;

        $stack282 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        $stack283 = virtualinvoke $stack282.<java.lang.Object: int hashCode()>();

        goto label40;

     label39:
        $stack283 = 0;

     label40:
        hash#3 = $stack41 + $stack283;

        $stack43 = 37 * hash#3;

        $stack42 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint>;

        if $stack42 == null goto label41;

        $stack276 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint>;

        $stack277 = virtualinvoke $stack276.<java.lang.Object: int hashCode()>();

        goto label42;

     label41:
        $stack277 = 0;

     label42:
        hash#3 = $stack43 + $stack277;

        $stack45 = 37 * hash#3;

        $stack44 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeGridlinesVisible>;

        if $stack44 == 0 goto label43;

        $stack271 = 1;

        goto label44;

     label43:
        $stack271 = 0;

     label44:
        hash#3 = $stack45 + $stack271;

        $stack47 = 37 * hash#3;

        $stack46 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeGridlineStroke>;

        if $stack46 == null goto label45;

        $stack265 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeGridlineStroke>;

        $stack266 = virtualinvoke $stack265.<java.lang.Object: int hashCode()>();

        goto label46;

     label45:
        $stack266 = 0;

     label46:
        hash#3 = $stack47 + $stack266;

        $stack49 = 37 * hash#3;

        $stack48 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeGridlinePaint>;

        if $stack48 == null goto label47;

        $stack259 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeGridlinePaint>;

        $stack260 = virtualinvoke $stack259.<java.lang.Object: int hashCode()>();

        goto label48;

     label47:
        $stack260 = 0;

     label48:
        hash#3 = $stack49 + $stack260;

        $stack51 = 37 * hash#3;

        $stack50 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeMinorGridlinesVisible>;

        if $stack50 == 0 goto label49;

        $stack254 = 1;

        goto label50;

     label49:
        $stack254 = 0;

     label50:
        hash#3 = $stack51 + $stack254;

        $stack53 = 37 * hash#3;

        $stack52 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        if $stack52 == null goto label51;

        $stack248 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        $stack249 = virtualinvoke $stack248.<java.lang.Object: int hashCode()>();

        goto label52;

     label51:
        $stack249 = 0;

     label52:
        hash#3 = $stack53 + $stack249;

        $stack55 = 37 * hash#3;

        $stack54 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeMinorGridlinePaint>;

        if $stack54 == null goto label53;

        $stack232 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeMinorGridlinePaint>;

        $stack233 = virtualinvoke $stack232.<java.lang.Object: int hashCode()>();

        goto label54;

     label53:
        $stack233 = 0;

     label54:
        hash#3 = $stack55 + $stack233;

        $stack57 = 37 * hash#3;

        $stack56 = this.<org.jfree.chart.plot.CategoryPlot: double anchorValue>;

        $stack58 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack56);

        $stack59 = this.<org.jfree.chart.plot.CategoryPlot: double anchorValue>;

        $stack60 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack59);

        $stack61 = $stack60 >>> 32;

        $stack62 = $stack58 ^ $stack61;

        $stack63 = (int) $stack62;

        hash#3 = $stack57 + $stack63;

        $stack65 = 37 * hash#3;

        $stack64 = this.<org.jfree.chart.plot.CategoryPlot: int crosshairDatasetIndex>;

        hash#3 = $stack65 + $stack64;

        $stack67 = 37 * hash#3;

        $stack66 = this.<org.jfree.chart.plot.CategoryPlot: boolean domainCrosshairVisible>;

        if $stack66 == 0 goto label55;

        $stack227 = 1;

        goto label56;

     label55:
        $stack227 = 0;

     label56:
        hash#3 = $stack67 + $stack227;

        $stack69 = 37 * hash#3;

        $stack68 = this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairRowKey>;

        if $stack68 == null goto label57;

        $stack221 = this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairRowKey>;

        $stack222 = virtualinvoke $stack221.<java.lang.Object: int hashCode()>();

        goto label58;

     label57:
        $stack222 = 0;

     label58:
        hash#3 = $stack69 + $stack222;

        $stack71 = 37 * hash#3;

        $stack70 = this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairColumnKey>;

        if $stack70 == null goto label59;

        $stack215 = this.<org.jfree.chart.plot.CategoryPlot: java.lang.Comparable domainCrosshairColumnKey>;

        $stack216 = virtualinvoke $stack215.<java.lang.Object: int hashCode()>();

        goto label60;

     label59:
        $stack216 = 0;

     label60:
        hash#3 = $stack71 + $stack216;

        $stack73 = 37 * hash#3;

        $stack72 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainCrosshairStroke>;

        if $stack72 == null goto label61;

        $stack209 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainCrosshairStroke>;

        $stack210 = virtualinvoke $stack209.<java.lang.Object: int hashCode()>();

        goto label62;

     label61:
        $stack210 = 0;

     label62:
        hash#3 = $stack73 + $stack210;

        $stack75 = 37 * hash#3;

        $stack74 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainCrosshairPaint>;

        if $stack74 == null goto label63;

        $stack203 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainCrosshairPaint>;

        $stack204 = virtualinvoke $stack203.<java.lang.Object: int hashCode()>();

        goto label64;

     label63:
        $stack204 = 0;

     label64:
        hash#3 = $stack75 + $stack204;

        $stack77 = 37 * hash#3;

        $stack76 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairVisible>;

        if $stack76 == 0 goto label65;

        $stack192 = 1;

        goto label66;

     label65:
        $stack192 = 0;

     label66:
        hash#3 = $stack77 + $stack192;

        $stack79 = 37 * hash#3;

        $stack78 = this.<org.jfree.chart.plot.CategoryPlot: double rangeCrosshairValue>;

        $stack80 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack78);

        $stack81 = this.<org.jfree.chart.plot.CategoryPlot: double rangeCrosshairValue>;

        $stack82 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack81);

        $stack83 = $stack82 >>> 32;

        $stack84 = $stack80 ^ $stack83;

        $stack85 = (int) $stack84;

        hash#3 = $stack79 + $stack85;

        $stack87 = 37 * hash#3;

        $stack86 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeCrosshairStroke>;

        if $stack86 == null goto label67;

        $stack186 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeCrosshairStroke>;

        $stack187 = virtualinvoke $stack186.<java.lang.Object: int hashCode()>();

        goto label68;

     label67:
        $stack187 = 0;

     label68:
        hash#3 = $stack87 + $stack187;

        $stack89 = 37 * hash#3;

        $stack88 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeCrosshairPaint>;

        if $stack88 == null goto label69;

        $stack180 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeCrosshairPaint>;

        $stack181 = virtualinvoke $stack180.<java.lang.Object: int hashCode()>();

        goto label70;

     label69:
        $stack181 = 0;

     label70:
        hash#3 = $stack89 + $stack181;

        $stack91 = 37 * hash#3;

        $stack90 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangeCrosshairLockedOnData>;

        if $stack90 == 0 goto label71;

        $stack175 = 1;

        goto label72;

     label71:
        $stack175 = 0;

     label72:
        hash#3 = $stack91 + $stack175;

        $stack93 = 37 * hash#3;

        $stack92 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        if $stack92 == null goto label73;

        $stack169 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        $stack170 = interfaceinvoke $stack169.<java.util.Map: int hashCode()>();

        goto label74;

     label73:
        $stack170 = 0;

     label74:
        hash#3 = $stack93 + $stack170;

        $stack95 = 37 * hash#3;

        $stack94 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        if $stack94 == null goto label75;

        $stack163 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        $stack164 = interfaceinvoke $stack163.<java.util.Map: int hashCode()>();

        goto label76;

     label75:
        $stack164 = 0;

     label76:
        hash#3 = $stack95 + $stack164;

        $stack97 = 37 * hash#3;

        $stack96 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        if $stack96 == null goto label77;

        $stack157 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        $stack158 = interfaceinvoke $stack157.<java.util.Map: int hashCode()>();

        goto label78;

     label77:
        $stack158 = 0;

     label78:
        hash#3 = $stack97 + $stack158;

        $stack99 = 37 * hash#3;

        $stack98 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        if $stack98 == null goto label79;

        $stack151 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        $stack152 = interfaceinvoke $stack151.<java.util.Map: int hashCode()>();

        goto label80;

     label79:
        $stack152 = 0;

     label80:
        hash#3 = $stack99 + $stack152;

        $stack101 = 37 * hash#3;

        $stack100 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        if $stack100 == null goto label81;

        $stack141 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        $stack142 = interfaceinvoke $stack141.<java.util.List: int hashCode()>();

        goto label82;

     label81:
        $stack142 = 0;

     label82:
        hash#3 = $stack101 + $stack142;

        $stack103 = 37 * hash#3;

        $stack102 = this.<org.jfree.chart.plot.CategoryPlot: int weight>;

        hash#3 = $stack103 + $stack102;

        $stack105 = 37 * hash#3;

        $stack104 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        if $stack104 == null goto label83;

        $stack135 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack136 = virtualinvoke $stack135.<org.jfree.chart.axis.AxisSpace: int hashCode()>();

        goto label84;

     label83:
        $stack136 = 0;

     label84:
        hash#3 = $stack105 + $stack136;

        $stack107 = 37 * hash#3;

        $stack106 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        if $stack106 == null goto label85;

        $stack129 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack130 = virtualinvoke $stack129.<org.jfree.chart.axis.AxisSpace: int hashCode()>();

        goto label86;

     label85:
        $stack130 = 0;

     label86:
        hash#3 = $stack107 + $stack130;

        $stack109 = 37 * hash#3;

        $stack108 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        if $stack108 == null goto label87;

        $stack123 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        $stack124 = virtualinvoke $stack123.<org.jfree.chart.LegendItemCollection: int hashCode()>();

        goto label88;

     label87:
        $stack124 = 0;

     label88:
        hash#3 = $stack109 + $stack124;

        $stack111 = 37 * hash#3;

        $stack110 = this.<org.jfree.chart.plot.CategoryPlot: boolean rangePannable>;

        if $stack110 == 0 goto label89;

        $stack118 = 1;

        goto label90;

     label89:
        $stack118 = 0;

     label90:
        hash#3 = $stack111 + $stack118;

        $stack113 = 37 * hash#3;

        $stack112 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack112 == null goto label91;

        $stack114 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack115 = virtualinvoke $stack114.<java.lang.Object: int hashCode()>();

        goto label92;

     label91:
        $stack115 = 0;

     label92:
        hash#3 = $stack113 + $stack115;

        return hash#3;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.plot.CategoryPlot this, clone;
        java.lang.Object $stack4, $stack53, $stack57, $stack71, $stack74, $stack76, $stack78, $stack80;
        java.util.Map $stack5, $stack6, $stack7, $stack11, $stack12, $stack13, $stack18, $stack20, $stack22, $stack23, $stack33, $stack34, $stack35, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack50;
        java.util.Collection $stack8, $stack14, $stack24, $stack36;
        boolean $stack10, $stack16, $stack26, $stack38;
        java.util.HashMap $stack17, $stack19, $stack21;
        java.util.TreeMap $stack27, $stack28, $stack29, $stack30, $stack31, $stack32;
        org.jfree.chart.axis.AxisSpace $stack39, $stack40, $stack56, $stack58, $stack70, $stack72;
        java.util.List $stack41, $stack42;
        org.jfree.chart.LegendItemCollection $stack51, $stack52, $stack54;
        java.util.Iterator l2;
        org.jfree.chart.axis.CategoryAxis axis;
        org.jfree.chart.axis.ValueAxis axis#4;
        org.jfree.data.category.CategoryDataset axis#6;
        org.jfree.chart.renderer.category.CategoryItemRenderer axis#8;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        $stack4 = specialinvoke this.<org.jfree.chart.plot.Plot: java.lang.Object clone()>();

        clone = (org.jfree.chart.plot.CategoryPlot) $stack4;

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack6 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack5);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes> = $stack6;

        $stack7 = clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack8 = interfaceinvoke $stack7.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack8.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $stack10 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label03;

        $stack80 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.CategoryAxis) $stack80;

        if axis == null goto label02;

        virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: void setPlot(org.jfree.chart.plot.Plot)>(clone);

        virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(clone);

     label02:
        goto label01;

     label03:
        $stack11 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack12 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack11);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes> = $stack12;

        $stack13 = clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack14.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $stack16 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label06;

        $stack78 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        axis#4 = (org.jfree.chart.axis.ValueAxis) $stack78;

        if axis#4 == null goto label05;

        virtualinvoke axis#4.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(clone);

        virtualinvoke axis#4.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(clone);

     label05:
        goto label04;

     label06:
        $stack17 = new java.util.HashMap;

        $stack18 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations>;

        specialinvoke $stack17.<java.util.HashMap: void <init>(java.util.Map)>($stack18);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxisLocations> = $stack17;

        $stack19 = new java.util.HashMap;

        $stack20 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations>;

        specialinvoke $stack19.<java.util.HashMap: void <init>(java.util.Map)>($stack20);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxisLocations> = $stack19;

        $stack21 = new java.util.HashMap;

        $stack22 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        specialinvoke $stack21.<java.util.HashMap: void <init>(java.util.Map)>($stack22);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets> = $stack21;

        $stack23 = clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack24 = interfaceinvoke $stack23.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack24.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $stack26 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label09;

        $stack76 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        axis#6 = (org.jfree.data.category.CategoryDataset) $stack76;

        if axis#6 == null goto label08;

        interfaceinvoke axis#6.<org.jfree.data.category.CategoryDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(clone);

     label08:
        goto label07;

     label09:
        $stack27 = new java.util.TreeMap;

        specialinvoke $stack27.<java.util.TreeMap: void <init>()>();

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap> = $stack27;

        $stack29 = clone.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>;

        $stack28 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>;

        virtualinvoke $stack29.<java.util.TreeMap: void putAll(java.util.Map)>($stack28);

        $stack30 = new java.util.TreeMap;

        specialinvoke $stack30.<java.util.TreeMap: void <init>()>();

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap> = $stack30;

        $stack32 = clone.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>;

        $stack31 = this.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>;

        virtualinvoke $stack32.<java.util.TreeMap: void putAll(java.util.Map)>($stack31);

        $stack33 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack34 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack33);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers> = $stack34;

        $stack35 = clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack36 = interfaceinvoke $stack35.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack36.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $stack38 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack38 == 0 goto label12;

        $stack74 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        axis#8 = (org.jfree.chart.renderer.category.CategoryItemRenderer) $stack74;

        if axis#8 == null goto label11;

        interfaceinvoke axis#8.<org.jfree.chart.renderer.category.CategoryItemRenderer: void setPlot(org.jfree.chart.plot.CategoryPlot)>(clone);

        interfaceinvoke axis#8.<org.jfree.chart.renderer.category.CategoryItemRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>(clone);

     label11:
        goto label10;

     label12:
        $stack39 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        if $stack39 == null goto label13;

        $stack70 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack71 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack70);

        $stack72 = (org.jfree.chart.axis.AxisSpace) $stack71;

        clone.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace> = $stack72;

     label13:
        $stack40 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        if $stack40 == null goto label14;

        $stack56 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack57 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack56);

        $stack58 = (org.jfree.chart.axis.AxisSpace) $stack57;

        clone.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace> = $stack58;

     label14:
        $stack41 = this.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations>;

        $stack42 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.List cloneList(java.util.List)>($stack41);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.List annotations> = $stack42;

        $stack43 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>;

        $stack44 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack43);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers> = $stack44;

        $stack45 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>;

        $stack46 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack45);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers> = $stack46;

        $stack47 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>;

        $stack48 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack47);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers> = $stack48;

        $stack49 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>;

        $stack50 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack49);

        clone.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers> = $stack50;

        $stack51 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        if $stack51 == null goto label15;

        $stack52 = this.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        $stack53 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack52);

        $stack54 = (org.jfree.chart.LegendItemCollection) $stack53;

        clone.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection fixedLegendItems> = $stack54;

     label15:
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Stroke $stack2, $stack4, $stack6, $stack8, $stack10, $stack12;
        java.awt.Paint $stack3, $stack5, $stack7, $stack9, $stack11, $stack13;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainGridlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainGridlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeGridlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack4, stream);

        $stack5 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeGridlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack5, stream);

        $stack6 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeCrosshairStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack6, stream);

        $stack7 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeCrosshairPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack7, stream);

        $stack8 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainCrosshairStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack8, stream);

        $stack9 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainCrosshairPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack9, stream);

        $stack10 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack10, stream);

        $stack11 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeMinorGridlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack11, stream);

        $stack12 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack12, stream);

        $stack13 = this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack13, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.plot.CategoryPlot this;
        java.awt.Stroke $stack4, $stack6, $stack8, $stack10, $stack12, $stack14;
        java.awt.Paint $stack5, $stack7, $stack9, $stack11, $stack13, $stack15;
        java.util.Map $stack16, $stack20, $stack24, $stack28;
        java.util.Collection $stack17, $stack21, $stack25, $stack29;
        boolean $stack19, $stack23, $stack27, $stack31;
        java.lang.Object $stack32, $stack34, $stack36, $stack38;
        java.util.Iterator l2;
        org.jfree.chart.axis.CategoryAxis xAxis;
        org.jfree.chart.axis.ValueAxis xAxis#4;
        org.jfree.data.category.CategoryDataset xAxis#6;
        org.jfree.chart.renderer.category.CategoryItemRenderer xAxis#8;

        this := @this: org.jfree.chart.plot.CategoryPlot;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainGridlineStroke> = $stack4;

        $stack5 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainGridlinePaint> = $stack5;

        $stack6 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeGridlineStroke> = $stack6;

        $stack7 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeGridlinePaint> = $stack7;

        $stack8 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeCrosshairStroke> = $stack8;

        $stack9 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeCrosshairPaint> = $stack9;

        $stack10 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke domainCrosshairStroke> = $stack10;

        $stack11 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint domainCrosshairPaint> = $stack11;

        $stack12 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeMinorGridlineStroke> = $stack12;

        $stack13 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeMinorGridlinePaint> = $stack13;

        $stack14 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Stroke rangeZeroBaselineStroke> = $stack14;

        $stack15 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CategoryPlot: java.awt.Paint rangeZeroBaselinePaint> = $stack15;

        $stack16 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map domainAxes>;

        $stack17 = interfaceinvoke $stack16.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack17.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $stack19 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack19 == 0 goto label03;

        $stack38 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        xAxis = (org.jfree.chart.axis.CategoryAxis) $stack38;

        if xAxis == null goto label02;

        virtualinvoke xAxis.<org.jfree.chart.axis.CategoryAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke xAxis.<org.jfree.chart.axis.CategoryAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label02:
        goto label01;

     label03:
        $stack20 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map rangeAxes>;

        $stack21 = interfaceinvoke $stack20.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack21.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $stack23 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label06;

        $stack36 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        xAxis#4 = (org.jfree.chart.axis.ValueAxis) $stack36;

        if xAxis#4 == null goto label05;

        virtualinvoke xAxis#4.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke xAxis#4.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label05:
        goto label04;

     label06:
        $stack24 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map datasets>;

        $stack25 = interfaceinvoke $stack24.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack25.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $stack27 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack27 == 0 goto label09;

        $stack34 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        xAxis#6 = (org.jfree.data.category.CategoryDataset) $stack34;

        if xAxis#6 == null goto label08;

        interfaceinvoke xAxis#6.<org.jfree.data.category.CategoryDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label08:
        goto label07;

     label09:
        $stack28 = this.<org.jfree.chart.plot.CategoryPlot: java.util.Map renderers>;

        $stack29 = interfaceinvoke $stack28.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack29.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $stack31 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack31 == 0 goto label12;

        $stack32 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        xAxis#8 = (org.jfree.chart.renderer.category.CategoryItemRenderer) $stack32;

        if xAxis#8 == null goto label11;

        interfaceinvoke xAxis#8.<org.jfree.chart.renderer.category.CategoryItemRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>(this);

     label11:
        goto label10;

     label12:
        return;
    }

    static void <clinit>()
    {
        java.awt.BasicStroke $stack0;
        float[] $stack1;
        java.awt.Color $stack2, $stack5;
        java.awt.Font $stack3;
        java.awt.Stroke $stack4;
        java.util.ResourceBundle $stack6;

        <org.jfree.chart.plot.CategoryPlot: boolean DEFAULT_CROSSHAIR_VISIBLE> = 0;

        <org.jfree.chart.plot.CategoryPlot: boolean DEFAULT_RANGE_GRIDLINES_VISIBLE> = 1;

        <org.jfree.chart.plot.CategoryPlot: boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE> = 0;

        <org.jfree.chart.plot.CategoryPlot: long serialVersionUID> = -3537691700434728188L;

        $stack0 = new java.awt.BasicStroke;

        $stack1 = newarray (float)[2];

        $stack1[0] = 2.0F;

        $stack1[1] = 2.0F;

        specialinvoke $stack0.<java.awt.BasicStroke: void <init>(float,int,int,float,float[],float)>(0.5F, 0, 2, 0.0F, $stack1, 0.0F);

        <org.jfree.chart.plot.CategoryPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE> = $stack0;

        $stack2 = <java.awt.Color: java.awt.Color LIGHT_GRAY>;

        <org.jfree.chart.plot.CategoryPlot: java.awt.Paint DEFAULT_GRIDLINE_PAINT> = $stack2;

        $stack3 = new java.awt.Font;

        specialinvoke $stack3.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 0, 10);

        <org.jfree.chart.plot.CategoryPlot: java.awt.Font DEFAULT_VALUE_LABEL_FONT> = $stack3;

        $stack4 = <org.jfree.chart.plot.CategoryPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        <org.jfree.chart.plot.CategoryPlot: java.awt.Stroke DEFAULT_CROSSHAIR_STROKE> = $stack4;

        $stack5 = <java.awt.Color: java.awt.Color BLUE>;

        <org.jfree.chart.plot.CategoryPlot: java.awt.Paint DEFAULT_CROSSHAIR_PAINT> = $stack5;

        $stack6 = staticinvoke <org.jfree.chart.util.ResourceBundleWrapper: java.util.ResourceBundle getBundle(java.lang.String)>("org.jfree.chart.plot.LocalizationBundle");

        <org.jfree.chart.plot.CategoryPlot: java.util.ResourceBundle localizationResources> = $stack6;

        return;
    }
}
