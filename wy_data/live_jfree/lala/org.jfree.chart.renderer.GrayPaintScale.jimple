public class org.jfree.chart.renderer.GrayPaintScale extends java.lang.Object implements org.jfree.chart.renderer.PaintScale, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private double lowerBound;
    private double upperBound;
    private int alpha;

    public void <init>()
    {
        org.jfree.chart.renderer.GrayPaintScale this;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        specialinvoke this.<org.jfree.chart.renderer.GrayPaintScale: void <init>(double,double)>(0.0, 1.0);

        return;
    }

    public void <init>(double, double)
    {
        org.jfree.chart.renderer.GrayPaintScale this;
        double lowerBound, upperBound;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        lowerBound := @parameter0: double;

        upperBound := @parameter1: double;

        specialinvoke this.<org.jfree.chart.renderer.GrayPaintScale: void <init>(double,double,int)>(lowerBound, upperBound, 255);

        return;
    }

    public void <init>(double, double, int)
    {
        org.jfree.chart.renderer.GrayPaintScale this;
        double lowerBound, upperBound;
        byte $stack6;
        int alpha;
        java.lang.IllegalArgumentException $stack7, $stack9;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        lowerBound := @parameter0: double;

        upperBound := @parameter1: double;

        alpha := @parameter2: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack6 = lowerBound cmpl upperBound;

        if $stack6 < 0 goto label1;

        $stack9 = new java.lang.IllegalArgumentException;

        specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requires lowerBound < upperBound.");

        throw $stack9;

     label1:
        if alpha < 0 goto label2;

        if alpha <= 255 goto label3;

     label2:
        $stack7 = new java.lang.IllegalArgumentException;

        specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requires alpha in the range 0 to 255.");

        throw $stack7;

     label3:
        this.<org.jfree.chart.renderer.GrayPaintScale: double lowerBound> = lowerBound;

        this.<org.jfree.chart.renderer.GrayPaintScale: double upperBound> = upperBound;

        this.<org.jfree.chart.renderer.GrayPaintScale: int alpha> = alpha;

        return;
    }

    public double getLowerBound()
    {
        org.jfree.chart.renderer.GrayPaintScale this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        $stack1 = this.<org.jfree.chart.renderer.GrayPaintScale: double lowerBound>;

        return $stack1;
    }

    public double getUpperBound()
    {
        org.jfree.chart.renderer.GrayPaintScale this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        $stack1 = this.<org.jfree.chart.renderer.GrayPaintScale: double upperBound>;

        return $stack1;
    }

    public int getAlpha()
    {
        org.jfree.chart.renderer.GrayPaintScale this;
        int $stack1;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        $stack1 = this.<org.jfree.chart.renderer.GrayPaintScale: int alpha>;

        return $stack1;
    }

    public java.awt.Paint getPaint(double)
    {
        double value, $stack6, $stack8, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, v;
        org.jfree.chart.renderer.GrayPaintScale this;
        int g, $stack18;
        java.awt.Color $stack17;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        value := @parameter0: double;

        $stack6 = this.<org.jfree.chart.renderer.GrayPaintScale: double lowerBound>;

        v = staticinvoke <java.lang.Math: double max(double,double)>(value, $stack6);

        $stack8 = this.<org.jfree.chart.renderer.GrayPaintScale: double upperBound>;

        v = staticinvoke <java.lang.Math: double min(double,double)>(v, $stack8);

        $stack10 = this.<org.jfree.chart.renderer.GrayPaintScale: double lowerBound>;

        $stack14 = v - $stack10;

        $stack12 = this.<org.jfree.chart.renderer.GrayPaintScale: double upperBound>;

        $stack11 = this.<org.jfree.chart.renderer.GrayPaintScale: double lowerBound>;

        $stack13 = $stack12 - $stack11;

        $stack15 = $stack14 / $stack13;

        $stack16 = $stack15 * 255.0;

        g = (int) $stack16;

        $stack17 = new java.awt.Color;

        $stack18 = this.<org.jfree.chart.renderer.GrayPaintScale: int alpha>;

        specialinvoke $stack17.<java.awt.Color: void <init>(int,int,int,int)>(g, g, g, $stack18);

        return $stack17;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.GrayPaintScale this, that;
        boolean $stack3;
        double $stack4, $stack5, $stack7, $stack8;
        byte $stack6, $stack9;
        int $stack10, $stack11;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.GrayPaintScale;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.GrayPaintScale) obj;

        $stack5 = this.<org.jfree.chart.renderer.GrayPaintScale: double lowerBound>;

        $stack4 = that.<org.jfree.chart.renderer.GrayPaintScale: double lowerBound>;

        $stack6 = $stack5 cmpl $stack4;

        if $stack6 == 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.renderer.GrayPaintScale: double upperBound>;

        $stack7 = that.<org.jfree.chart.renderer.GrayPaintScale: double upperBound>;

        $stack9 = $stack8 cmpl $stack7;

        if $stack9 == 0 goto label4;

        return 0;

     label4:
        $stack11 = this.<org.jfree.chart.renderer.GrayPaintScale: int alpha>;

        $stack10 = that.<org.jfree.chart.renderer.GrayPaintScale: int alpha>;

        if $stack11 == $stack10 goto label5;

        return 0;

     label5:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.renderer.GrayPaintScale this;
        double $stack2, $stack4;
        int $stack6, $stack7, hash#2;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        $stack2 = this.<org.jfree.chart.renderer.GrayPaintScale: double lowerBound>;

        hash#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,double)>(7, $stack2);

        $stack4 = this.<org.jfree.chart.renderer.GrayPaintScale: double upperBound>;

        hash#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,double)>(hash#2, $stack4);

        $stack7 = 43 * hash#2;

        $stack6 = this.<org.jfree.chart.renderer.GrayPaintScale: int alpha>;

        hash#2 = $stack7 + $stack6;

        return hash#2;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.GrayPaintScale this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.renderer.GrayPaintScale;

        $stack1 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        return $stack1;
    }
}
