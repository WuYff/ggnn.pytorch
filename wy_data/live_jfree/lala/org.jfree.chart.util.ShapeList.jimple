public class org.jfree.chart.util.ShapeList extends org.jfree.chart.util.AbstractObjectList
{

    public void <init>()
    {
        org.jfree.chart.util.ShapeList this;

        this := @this: org.jfree.chart.util.ShapeList;

        specialinvoke this.<org.jfree.chart.util.AbstractObjectList: void <init>()>();

        return;
    }

    public java.awt.Shape getShape(int)
    {
        org.jfree.chart.util.ShapeList this;
        int index;
        java.lang.Object $stack2;
        java.awt.Shape $stack3;

        this := @this: org.jfree.chart.util.ShapeList;

        index := @parameter0: int;

        $stack2 = virtualinvoke this.<org.jfree.chart.util.ShapeList: java.lang.Object get(int)>(index);

        $stack3 = (java.awt.Shape) $stack2;

        return $stack3;
    }

    public void setShape(int, java.awt.Shape)
    {
        org.jfree.chart.util.ShapeList this;
        int index;
        java.awt.Shape shape;

        this := @this: org.jfree.chart.util.ShapeList;

        index := @parameter0: int;

        shape := @parameter1: java.awt.Shape;

        virtualinvoke this.<org.jfree.chart.util.ShapeList: void set(int,java.lang.Object)>(index, shape);

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.util.ShapeList this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.util.ShapeList;

        $stack1 = specialinvoke this.<org.jfree.chart.util.AbstractObjectList: java.lang.Object clone()>();

        return $stack1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj, $stack7, $stack9;
        org.jfree.chart.util.ShapeList this, that;
        boolean $stack5, $stack11;
        int listSize, i;
        java.awt.Shape $stack8, $stack10;

        this := @this: org.jfree.chart.util.ShapeList;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack5 = obj instanceof org.jfree.chart.util.ShapeList;

        if $stack5 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.util.ShapeList) obj;

        listSize = virtualinvoke this.<org.jfree.chart.util.ShapeList: int size()>();

        i = 0;

     label3:
        if i >= listSize goto label5;

        $stack7 = virtualinvoke this.<org.jfree.chart.util.ShapeList: java.lang.Object get(int)>(i);

        $stack8 = (java.awt.Shape) $stack7;

        $stack9 = virtualinvoke that.<org.jfree.chart.util.ShapeList: java.lang.Object get(int)>(i);

        $stack10 = (java.awt.Shape) $stack9;

        $stack11 = staticinvoke <org.jfree.chart.util.ShapeUtils: boolean equal(java.awt.Shape,java.awt.Shape)>($stack8, $stack10);

        if $stack11 != 0 goto label4;

        return 0;

     label4:
        i = i + 1;

        goto label3;

     label5:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.util.ShapeList this;
        int $stack1;

        this := @this: org.jfree.chart.util.ShapeList;

        $stack1 = specialinvoke this.<org.jfree.chart.util.AbstractObjectList: int hashCode()>();

        return $stack1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.util.ShapeList this;
        int count, i;
        java.awt.Shape shape;

        this := @this: org.jfree.chart.util.ShapeList;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        count = virtualinvoke this.<org.jfree.chart.util.ShapeList: int size()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>(count);

        i = 0;

     label1:
        if i >= count goto label4;

        shape = virtualinvoke this.<org.jfree.chart.util.ShapeList: java.awt.Shape getShape(int)>(i);

        if shape == null goto label2;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>(i);

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>(shape, stream);

        goto label3;

     label2:
        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>(-1);

     label3:
        i = i + 1;

        goto label1;

     label4:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        int count, index, i;
        org.jfree.chart.util.ShapeList this;
        java.awt.Shape $stack9;

        this := @this: org.jfree.chart.util.ShapeList;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        count = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        i = 0;

     label1:
        if i >= count goto label3;

        index = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        if index == -1 goto label2;

        $stack9 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        virtualinvoke this.<org.jfree.chart.util.ShapeList: void setShape(int,java.awt.Shape)>(index, $stack9);

     label2:
        i = i + 1;

        goto label1;

     label3:
        return;
    }
}
