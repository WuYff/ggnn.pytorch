public class org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet extends java.lang.Object implements org.jfree.data.xy.XYDataset
{
    protected org.jfree.data.xy.XYDataset delegateSet;
    java.lang.Double[] x;
    java.lang.Double[] y;

    public void <init>(double[], double[], org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        org.jfree.data.xy.XYDataset delegateSet;
        double[] x, y;
        int $stack5, $stack7, $stack9, i;
        java.lang.Double[] $stack6, $stack8, $stack11, $stack14;
        double $stack10, $stack13;
        java.lang.Double $stack12, $stack15;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        x := @parameter0: double[];

        y := @parameter1: double[];

        delegateSet := @parameter2: org.jfree.data.xy.XYDataset;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: org.jfree.data.xy.XYDataset delegateSet> = delegateSet;

        $stack5 = lengthof x;

        $stack6 = newarray (java.lang.Double)[$stack5];

        this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: java.lang.Double[] x> = $stack6;

        $stack7 = lengthof y;

        $stack8 = newarray (java.lang.Double)[$stack7];

        this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: java.lang.Double[] y> = $stack8;

        i = 0;

     label1:
        $stack9 = lengthof x;

        if i >= $stack9 goto label2;

        $stack11 = this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: java.lang.Double[] x>;

        $stack10 = x[i];

        $stack12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack10);

        $stack11[i] = $stack12;

        $stack14 = this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: java.lang.Double[] y>;

        $stack13 = y[i];

        $stack15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack13);

        $stack14[i] = $stack15;

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    public org.jfree.data.DomainOrder getDomainOrder()
    {
        org.jfree.data.DomainOrder $stack1;
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        $stack1 = <org.jfree.data.DomainOrder: org.jfree.data.DomainOrder NONE>;

        return $stack1;
    }

    public int getItemCount(int)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        java.lang.Double[] $stack2;
        int $stack3, series;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: java.lang.Double[] x>;

        $stack3 = lengthof $stack2;

        return $stack3;
    }

    public java.lang.Number getX(int, int)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        int item, series;
        java.lang.Double[] $stack3;
        java.lang.Double $stack4;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack3 = this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: java.lang.Double[] x>;

        $stack4 = $stack3[item];

        return $stack4;
    }

    public double getXValue(int, int)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        int series, item;
        java.lang.Number xx;
        double result;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        series := @parameter0: int;

        item := @parameter1: int;

        result = #NaN;

        xx = virtualinvoke this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: java.lang.Number getX(int,int)>(series, item);

        if xx == null goto label1;

        result = virtualinvoke xx.<java.lang.Number: double doubleValue()>();

     label1:
        return result;
    }

    public java.lang.Number getY(int, int)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        int item, series;
        java.lang.Double[] $stack3;
        java.lang.Double $stack4;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack3 = this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: java.lang.Double[] y>;

        $stack4 = $stack3[item];

        return $stack4;
    }

    public double getYValue(int, int)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        int series, item;
        java.lang.Number yy;
        double result;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        series := @parameter0: int;

        item := @parameter1: int;

        result = #NaN;

        yy = virtualinvoke this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: java.lang.Number getY(int,int)>(series, item);

        if yy == null goto label1;

        result = virtualinvoke yy.<java.lang.Number: double doubleValue()>();

     label1:
        return result;
    }

    public int getSeriesCount()
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        org.jfree.data.xy.XYDataset $stack1;
        int $stack2;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        $stack1 = this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: org.jfree.data.xy.XYDataset delegateSet>;

        $stack2 = interfaceinvoke $stack1.<org.jfree.data.xy.XYDataset: int getSeriesCount()>();

        return $stack2;
    }

    public java.lang.Comparable getSeriesKey(int)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        int series;
        org.jfree.data.xy.XYDataset $stack2;
        java.lang.Comparable $stack3;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: org.jfree.data.xy.XYDataset delegateSet>;

        $stack3 = interfaceinvoke $stack2.<org.jfree.data.xy.XYDataset: java.lang.Comparable getSeriesKey(int)>(series);

        return $stack3;
    }

    public int indexOf(java.lang.Comparable)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        java.lang.Comparable seriesName;
        org.jfree.data.xy.XYDataset $stack2;
        int $stack3;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        seriesName := @parameter0: java.lang.Comparable;

        $stack2 = this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: org.jfree.data.xy.XYDataset delegateSet>;

        $stack3 = interfaceinvoke $stack2.<org.jfree.data.xy.XYDataset: int indexOf(java.lang.Comparable)>(seriesName);

        return $stack3;
    }

    public void addChangeListener(org.jfree.data.general.DatasetChangeListener)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        org.jfree.data.general.DatasetChangeListener listener;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        listener := @parameter0: org.jfree.data.general.DatasetChangeListener;

        return;
    }

    public void removeChangeListener(org.jfree.data.general.DatasetChangeListener)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        org.jfree.data.general.DatasetChangeListener listener;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        listener := @parameter0: org.jfree.data.general.DatasetChangeListener;

        return;
    }

    public org.jfree.data.general.DatasetGroup getGroup()
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        org.jfree.data.xy.XYDataset $stack1;
        org.jfree.data.general.DatasetGroup $stack2;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        $stack1 = this.<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: org.jfree.data.xy.XYDataset delegateSet>;

        $stack2 = interfaceinvoke $stack1.<org.jfree.data.xy.XYDataset: org.jfree.data.general.DatasetGroup getGroup()>();

        return $stack2;
    }

    public void setGroup(org.jfree.data.general.DatasetGroup)
    {
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet this;
        org.jfree.data.general.DatasetGroup group;

        this := @this: org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet;

        group := @parameter0: org.jfree.data.general.DatasetGroup;

        return;
    }
}
