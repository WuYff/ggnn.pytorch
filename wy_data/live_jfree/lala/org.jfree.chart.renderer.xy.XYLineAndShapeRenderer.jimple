public class org.jfree.chart.renderer.xy.XYLineAndShapeRenderer extends org.jfree.chart.renderer.xy.AbstractXYItemRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.jfree.chart.util.BooleanList seriesLinesVisible;
    private boolean defaultLinesVisible;
    private transient java.awt.Shape legendLine;
    private org.jfree.chart.util.BooleanList seriesShapesVisible;
    private boolean defaultShapesVisible;
    private org.jfree.chart.util.BooleanList seriesShapesFilled;
    private boolean defaultShapesFilled;
    private boolean drawOutlines;
    private boolean useFillPaint;
    private boolean useOutlinePaint;
    private boolean drawSeriesLineAsPath;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>(1, 1);

        return;
    }

    public void <init>(boolean, boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        org.jfree.chart.util.BooleanList $stack3, $stack5, $stack6;
        boolean lines, shapes;
        java.awt.geom.Line2D$Double $stack4;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        lines := @parameter0: boolean;

        shapes := @parameter1: boolean;

        specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>();

        $stack3 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack3.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible> = $stack3;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultLinesVisible> = lines;

        $stack4 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack4.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(-7.0, 0.0, 7.0, 0.0);

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine> = $stack4;

        $stack5 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack5.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible> = $stack5;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesVisible> = shapes;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useFillPaint> = 0;

        $stack6 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack6.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled> = $stack6;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesFilled> = 1;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawOutlines> = 1;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useOutlinePaint> = 0;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawSeriesLineAsPath> = 0;

        return;
    }

    public boolean getDrawSeriesLineAsPath()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawSeriesLineAsPath>;

        return $stack1;
    }

    public void setDrawSeriesLineAsPath(boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawSeriesLineAsPath>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawSeriesLineAsPath> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public int getPassCount()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        return 2;
    }

    public boolean getItemLineVisible(int, int)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series, item;
        java.lang.Boolean flag;
        boolean $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        item := @parameter1: int;

        flag = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.lang.Boolean getSeriesLinesVisible(int)>(series);

        if flag == null goto label1;

        $stack6 = virtualinvoke flag.<java.lang.Boolean: boolean booleanValue()>();

        return $stack6;

     label1:
        $stack5 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultLinesVisible>;

        return $stack5;
    }

    public java.lang.Boolean getSeriesLinesVisible(int)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack2;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        return $stack3;
    }

    public void setSeriesLinesVisible(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series;
        java.lang.Boolean flag;
        org.jfree.chart.util.BooleanList $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        flag := @parameter1: java.lang.Boolean;

        $stack3 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, flag);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public void setSeriesLinesVisible(int, boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series;
        boolean visible;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        visible := @parameter1: boolean;

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(visible);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void setSeriesLinesVisible(int,java.lang.Boolean)>(series, $stack3);

        return;
    }

    public boolean getDefaultLinesVisible()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultLinesVisible>;

        return $stack1;
    }

    public void setDefaultLinesVisible(boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultLinesVisible> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Shape getLegendLine()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine>;

        return $stack1;
    }

    public void setLegendLine(java.awt.Shape)
    {
        java.awt.Shape line;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        line := @parameter0: java.awt.Shape;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(line, "line");

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine> = line;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getItemShapeVisible(int, int)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series, item;
        java.lang.Boolean flag;
        boolean $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        item := @parameter1: int;

        flag = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.lang.Boolean getSeriesShapesVisible(int)>(series);

        if flag == null goto label1;

        $stack6 = virtualinvoke flag.<java.lang.Boolean: boolean booleanValue()>();

        return $stack6;

     label1:
        $stack5 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesVisible>;

        return $stack5;
    }

    public java.lang.Boolean getSeriesShapesVisible(int)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack2;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        return $stack3;
    }

    public void setSeriesShapesVisible(int, boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series;
        boolean visible;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        visible := @parameter1: boolean;

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(visible);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void setSeriesShapesVisible(int,java.lang.Boolean)>(series, $stack3);

        return;
    }

    public void setSeriesShapesVisible(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series;
        java.lang.Boolean flag;
        org.jfree.chart.util.BooleanList $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        flag := @parameter1: java.lang.Boolean;

        $stack3 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, flag);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getDefaultShapesVisible()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesVisible>;

        return $stack1;
    }

    public void setDefaultShapesVisible(boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesVisible> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getItemShapeFilled(int, int)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series, item;
        java.lang.Boolean flag;
        boolean $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        item := @parameter1: int;

        flag = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.lang.Boolean getSeriesShapesFilled(int)>(series);

        if flag == null goto label1;

        $stack6 = virtualinvoke flag.<java.lang.Boolean: boolean booleanValue()>();

        return $stack6;

     label1:
        $stack5 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesFilled>;

        return $stack5;
    }

    public java.lang.Boolean getSeriesShapesFilled(int)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack2;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        return $stack3;
    }

    public void setSeriesShapesFilled(int, boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series;
        boolean flag;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        flag := @parameter1: boolean;

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(flag);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>(series, $stack3);

        return;
    }

    public void setSeriesShapesFilled(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series;
        java.lang.Boolean flag;
        org.jfree.chart.util.BooleanList $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        series := @parameter0: int;

        flag := @parameter1: java.lang.Boolean;

        $stack3 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, flag);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getDefaultShapesFilled()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesFilled>;

        return $stack1;
    }

    public void setDefaultShapesFilled(boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesFilled> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getDrawOutlines()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawOutlines>;

        return $stack1;
    }

    public void setDrawOutlines(boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawOutlines> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseFillPaint()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useFillPaint>;

        return $stack1;
    }

    public void setUseFillPaint(boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useFillPaint> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseOutlinePaint()
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useOutlinePaint>;

        return $stack1;
    }

    public void setUseOutlinePaint(boolean)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useOutlinePaint> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State $stack6;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.data.xy.XYDataset data;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        plot := @parameter2: org.jfree.chart.plot.XYPlot;

        data := @parameter3: org.jfree.data.xy.XYDataset;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        $stack6 = new org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State;

        specialinvoke $stack6.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>(info);

        return $stack6;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series, item, pass;
        boolean $stack14, $stack15, $stack16, $stack32, $stack33;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.ChartRenderingInfo $stack17, $stack30;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.entity.EntityCollection entities;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        $stack14 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean getItemVisible(int,int)>(series, item);

        if $stack14 != 0 goto label1;

        return;

     label1:
        $stack15 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean isLinePass(int)>(pass);

        if $stack15 == 0 goto label3;

        $stack32 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean getItemLineVisible(int,int)>(series, item);

        if $stack32 == 0 goto label5;

        $stack33 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawSeriesLineAsPath>;

        if $stack33 == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>(state, g2, plot, dataset, pass, series, item, domainAxis, rangeAxis, dataArea);

        goto label5;

     label2:
        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>(state, g2, plot, dataset, pass, series, item, domainAxis, rangeAxis, dataArea);

        goto label5;

     label3:
        $stack16 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean isItemPass(int)>(pass);

        if $stack16 == 0 goto label5;

        entities = null;

        if info == null goto label4;

        $stack17 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        if $stack17 == null goto label4;

        $stack30 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        entities = virtualinvoke $stack30.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

     label4:
        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)>(g2, plot, dataset, pass, series, item, domainAxis, dataArea, rangeAxis, crosshairState, entities);

     label5:
        return;
    }

    protected boolean isLinePass(int)
    {
        int pass;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        pass := @parameter0: int;

        if pass != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    protected boolean isItemPass(int)
    {
        int pass;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        boolean $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        pass := @parameter0: int;

        if pass != 1 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    protected void drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)
    {
        int item, series, $stack35, $stack37, pass;
        org.jfree.data.xy.XYDataset dataset;
        double x1, y1, x0, y0, transX0, transY0, transX1, transY1;
        boolean $stack33, $stack34, $stack39, $stack40, $stack47, $stack48, $stack49, $stack50, visible;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge xAxisLocation, yAxisLocation;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.PlotOrientation orientation, $stack52, $stack53;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        java.awt.Graphics2D g2;
        java.awt.geom.Line2D $stack56, $stack57, $stack61, $stack54;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        state := @parameter0: org.jfree.chart.renderer.xy.XYItemRendererState;

        g2 := @parameter1: java.awt.Graphics2D;

        plot := @parameter2: org.jfree.chart.plot.XYPlot;

        dataset := @parameter3: org.jfree.data.xy.XYDataset;

        pass := @parameter4: int;

        series := @parameter5: int;

        item := @parameter6: int;

        domainAxis := @parameter7: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter8: org.jfree.chart.axis.ValueAxis;

        dataArea := @parameter9: java.awt.geom.Rectangle2D;

        if item != 0 goto label01;

        return;

     label01:
        x1 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, item);

        y1 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, item);

        $stack33 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y1);

        if $stack33 != 0 goto label02;

        $stack34 = staticinvoke <java.lang.Double: boolean isNaN(double)>(x1);

        if $stack34 == 0 goto label03;

     label02:
        return;

     label03:
        $stack35 = item - 1;

        x0 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, $stack35);

        $stack37 = item - 1;

        y0 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, $stack37);

        $stack39 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y0);

        if $stack39 != 0 goto label04;

        $stack40 = staticinvoke <java.lang.Double: boolean isNaN(double)>(x0);

        if $stack40 == 0 goto label05;

     label04:
        return;

     label05:
        xAxisLocation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        yAxisLocation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        transX0 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x0, dataArea, xAxisLocation);

        transY0 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y0, dataArea, yAxisLocation);

        transX1 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x1, dataArea, xAxisLocation);

        transY1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y1, dataArea, yAxisLocation);

        $stack47 = staticinvoke <java.lang.Double: boolean isNaN(double)>(transX0);

        if $stack47 != 0 goto label06;

        $stack48 = staticinvoke <java.lang.Double: boolean isNaN(double)>(transY0);

        if $stack48 != 0 goto label06;

        $stack49 = staticinvoke <java.lang.Double: boolean isNaN(double)>(transX1);

        if $stack49 != 0 goto label06;

        $stack50 = staticinvoke <java.lang.Double: boolean isNaN(double)>(transY1);

        if $stack50 == 0 goto label07;

     label06:
        return;

     label07:
        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack52 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack52 goto label08;

        $stack61 = state.<org.jfree.chart.renderer.xy.XYItemRendererState: java.awt.geom.Line2D workingLine>;

        virtualinvoke $stack61.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(transY0, transX0, transY1, transX1);

        goto label09;

     label08:
        $stack53 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack53 goto label09;

        $stack57 = state.<org.jfree.chart.renderer.xy.XYItemRendererState: java.awt.geom.Line2D workingLine>;

        virtualinvoke $stack57.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(transX0, transY0, transX1, transY1);

     label09:
        $stack54 = state.<org.jfree.chart.renderer.xy.XYItemRendererState: java.awt.geom.Line2D workingLine>;

        visible = staticinvoke <org.jfree.chart.util.LineUtils: boolean clipLine(java.awt.geom.Line2D,java.awt.geom.Rectangle2D)>($stack54, dataArea);

        if visible == 0 goto label10;

        $stack56 = state.<org.jfree.chart.renderer.xy.XYItemRendererState: java.awt.geom.Line2D workingLine>;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>(g2, pass, series, item, $stack56);

     label10:
        return;
    }

    protected void drawFirstPassShape(java.awt.Graphics2D, int, int, int, java.awt.Shape)
    {
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        int series, item, pass;
        java.awt.Stroke $stack6;
        java.awt.Paint $stack7;
        java.awt.Shape shape;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        pass := @parameter1: int;

        series := @parameter2: int;

        item := @parameter3: int;

        shape := @parameter4: java.awt.Shape;

        $stack6 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Stroke getItemStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack6);

        $stack7 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack7);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(shape);

        return;
    }

    protected void drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge xAxisLocation, yAxisLocation;
        org.jfree.data.xy.XYDataset dataset;
        int series, item, pass, $stack32;
        double x1, y1, transX1, transY1;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State s;
        boolean $stack31, $stack34, $stack41;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        java.awt.Graphics2D g2;
        java.awt.geom.GeneralPath $stack33, $stack42, $stack43;
        org.jfree.chart.plot.PlotOrientation orientation, $stack40;
        float x, y;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        state := @parameter0: org.jfree.chart.renderer.xy.XYItemRendererState;

        g2 := @parameter1: java.awt.Graphics2D;

        plot := @parameter2: org.jfree.chart.plot.XYPlot;

        dataset := @parameter3: org.jfree.data.xy.XYDataset;

        pass := @parameter4: int;

        series := @parameter5: int;

        item := @parameter6: int;

        domainAxis := @parameter7: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter8: org.jfree.chart.axis.ValueAxis;

        dataArea := @parameter9: java.awt.geom.Rectangle2D;

        xAxisLocation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        yAxisLocation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        x1 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, item);

        y1 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, item);

        transX1 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x1, dataArea, xAxisLocation);

        transY1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y1, dataArea, yAxisLocation);

        s = (org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State) state;

        $stack31 = staticinvoke <java.lang.Double: boolean isNaN(double)>(transX1);

        if $stack31 != 0 goto label4;

        $stack34 = staticinvoke <java.lang.Double: boolean isNaN(double)>(transY1);

        if $stack34 != 0 goto label4;

        x = (float) transX1;

        y = (float) transY1;

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack40 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack40 goto label1;

        x = (float) transY1;

        y = (float) transX1;

     label1:
        $stack41 = virtualinvoke s.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: boolean isLastPointGood()>();

        if $stack41 == 0 goto label2;

        $stack43 = s.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: java.awt.geom.GeneralPath seriesPath>;

        virtualinvoke $stack43.<java.awt.geom.GeneralPath: void lineTo(float,float)>(x, y);

        goto label3;

     label2:
        $stack42 = s.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: java.awt.geom.GeneralPath seriesPath>;

        virtualinvoke $stack42.<java.awt.geom.GeneralPath: void moveTo(float,float)>(x, y);

     label3:
        virtualinvoke s.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: void setLastPointGood(boolean)>(1);

        goto label5;

     label4:
        virtualinvoke s.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: void setLastPointGood(boolean)>(0);

     label5:
        $stack32 = virtualinvoke s.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: int getLastItemIndex()>();

        if item != $stack32 goto label6;

        $stack33 = s.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: java.awt.geom.GeneralPath seriesPath>;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>(g2, pass, series, item, $stack33);

     label6:
        return;
    }

    protected void drawSecondaryPass(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D, org.jfree.chart.axis.ValueAxis, org.jfree.chart.plot.CrosshairState, org.jfree.chart.entity.EntityCollection)
    {
        org.jfree.data.xy.XYDataset dataset;
        int series, item, datasetIndex, pass;
        double x1, y1, transX1, transY1, $stack60, $stack61, shape#19, yy;
        boolean $stack31, $stack32, $stack38, $stack40, $stack42, $stack74, $stack76, $stack86, $stack70, $stack75, $stack62;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.plot.PlotOrientation orientation, $stack68, $stack69, $stack39;
        org.jfree.chart.ui.RectangleEdge xAxisLocation, yAxisLocation;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.entity.EntityCollection entities;
        java.awt.Graphics2D g2;
        byte $stack43;
        java.awt.Paint $stack77, $stack79, $stack87, $stack89;
        java.awt.Stroke $stack78;
        java.awt.Shape entityArea, shape;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        plot := @parameter1: org.jfree.chart.plot.XYPlot;

        dataset := @parameter2: org.jfree.data.xy.XYDataset;

        pass := @parameter3: int;

        series := @parameter4: int;

        item := @parameter5: int;

        domainAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataArea := @parameter7: java.awt.geom.Rectangle2D;

        rangeAxis := @parameter8: org.jfree.chart.axis.ValueAxis;

        crosshairState := @parameter9: org.jfree.chart.plot.CrosshairState;

        entities := @parameter10: org.jfree.chart.entity.EntityCollection;

        entityArea = null;

        x1 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, item);

        y1 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, item);

        $stack31 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y1);

        if $stack31 != 0 goto label01;

        $stack32 = staticinvoke <java.lang.Double: boolean isNaN(double)>(x1);

        if $stack32 == 0 goto label02;

     label01:
        return;

     label02:
        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        xAxisLocation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        yAxisLocation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        transX1 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x1, dataArea, xAxisLocation);

        transY1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y1, dataArea, yAxisLocation);

        $stack38 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean getItemShapeVisible(int,int)>(series, item);

        if $stack38 == 0 goto label10;

        shape = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape getItemShape(int,int)>(series, item);

        $stack68 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack68 goto label03;

        shape = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(shape, transY1, transX1);

        goto label04;

     label03:
        $stack69 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack69 goto label04;

        shape = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(shape, transX1, transY1);

     label04:
        entityArea = shape;

        $stack70 = interfaceinvoke shape.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(dataArea);

        if $stack70 == 0 goto label10;

        $stack74 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean getItemShapeFilled(int,int)>(series, item);

        if $stack74 == 0 goto label07;

        $stack86 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useFillPaint>;

        if $stack86 == 0 goto label05;

        $stack89 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint getItemFillPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack89);

        goto label06;

     label05:
        $stack87 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack87);

     label06:
        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(shape);

     label07:
        $stack75 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawOutlines>;

        if $stack75 == 0 goto label10;

        $stack76 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean getUseOutlinePaint()>();

        if $stack76 == 0 goto label08;

        $stack79 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack79);

        goto label09;

     label08:
        $stack77 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack77);

     label09:
        $stack78 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Stroke getItemOutlineStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack78);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(shape);

     label10:
        shape#19 = transX1;

        yy = transY1;

        $stack39 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack39 goto label11;

        shape#19 = transY1;

        yy = transX1;

     label11:
        $stack40 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean isItemLabelVisible(int,int)>(series, item);

        if $stack40 == 0 goto label14;

        $stack60 = shape#19;

        $stack61 = yy;

        $stack43 = y1 cmpg 0.0;

        if $stack43 >= 0 goto label12;

        $stack62 = 1;

        goto label13;

     label12:
        $stack62 = 0;

     label13:
        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)>(g2, orientation, dataset, series, item, $stack60, $stack61, $stack62);

     label14:
        datasetIndex = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: int indexOf(org.jfree.data.xy.XYDataset)>(dataset);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,double,double,org.jfree.chart.plot.PlotOrientation)>(crosshairState, x1, y1, datasetIndex, transX1, transY1, orientation);

        if entities == null goto label15;

        $stack42 = staticinvoke <org.jfree.chart.util.ShapeUtils: boolean isPointInRect(java.awt.geom.Rectangle2D,double,double)>(dataArea, shape#19, yy);

        if $stack42 == 0 goto label15;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(entities, entityArea, dataset, series, item, shape#19, yy);

     label15:
        return;
    }

    public org.jfree.chart.LegendItem getLegendItem(int, int)
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        org.jfree.chart.plot.XYPlot plot;
        int datasetIndex, series;
        org.jfree.data.xy.XYDataset dataset;
        boolean $stack23, shapeIsVisible, shapeIsFilled, $stack31, shapeOutlineVisible, $stack33, lineVisible;
        org.jfree.chart.labels.XYSeriesLabelGenerator $stack24, $stack26, $stack27, $stack89, $stack100;
        java.lang.String label, toolTipText, urlText;
        java.awt.Shape shape, $stack40;
        java.awt.Paint fillPaint, linePaint, labelPaint, $stack32, $stack34;
        java.awt.Stroke outlineStroke, lineStroke;
        org.jfree.chart.LegendItem $stack39;
        java.awt.Font $stack41;
        java.lang.Comparable $stack43;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        datasetIndex := @parameter0: int;

        series := @parameter1: int;

        plot = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.plot.XYPlot getPlot()>();

        if plot != null goto label01;

        return null;

     label01:
        dataset = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.data.xy.XYDataset getDataset(int)>(datasetIndex);

        if dataset != null goto label02;

        return null;

     label02:
        $stack23 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean getItemVisible(int,int)>(series, 0);

        if $stack23 != 0 goto label03;

        return null;

     label03:
        $stack24 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemLabelGenerator()>();

        label = interfaceinvoke $stack24.<org.jfree.chart.labels.XYSeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int)>(dataset, series);

        toolTipText = null;

        $stack26 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemToolTipGenerator()>();

        if $stack26 == null goto label04;

        $stack100 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemToolTipGenerator()>();

        toolTipText = interfaceinvoke $stack100.<org.jfree.chart.labels.XYSeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int)>(dataset, series);

     label04:
        urlText = null;

        $stack27 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemURLGenerator()>();

        if $stack27 == null goto label05;

        $stack89 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemURLGenerator()>();

        urlText = interfaceinvoke $stack89.<org.jfree.chart.labels.XYSeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int)>(dataset, series);

     label05:
        shapeIsVisible = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean getItemShapeVisible(int,int)>(series, 0);

        shape = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape lookupLegendShape(int)>(series);

        shapeIsFilled = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean getItemShapeFilled(int,int)>(series, 0);

        $stack31 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useFillPaint>;

        if $stack31 == 0 goto label06;

        $stack32 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint lookupSeriesFillPaint(int)>(series);

        goto label07;

     label06:
        $stack32 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint lookupSeriesPaint(int)>(series);

     label07:
        fillPaint = $stack32;

        shapeOutlineVisible = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawOutlines>;

        $stack33 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useOutlinePaint>;

        if $stack33 == 0 goto label08;

        $stack34 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint lookupSeriesOutlinePaint(int)>(series);

        goto label09;

     label08:
        $stack34 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint lookupSeriesPaint(int)>(series);

     label09:
        outlineStroke = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Stroke lookupSeriesOutlineStroke(int)>(series);

        lineVisible = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean getItemLineVisible(int,int)>(series, 0);

        lineStroke = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Stroke lookupSeriesStroke(int)>(series);

        linePaint = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint lookupSeriesPaint(int)>(series);

        $stack39 = new org.jfree.chart.LegendItem;

        $stack40 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine>;

        specialinvoke $stack39.<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>(label, label, toolTipText, urlText, shapeIsVisible, shape, shapeIsFilled, fillPaint, shapeOutlineVisible, $stack34, outlineStroke, lineVisible, $stack40, lineStroke, linePaint);

        $stack41 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Font lookupLegendTextFont(int)>(series);

        virtualinvoke $stack39.<org.jfree.chart.LegendItem: void setLabelFont(java.awt.Font)>($stack41);

        labelPaint = virtualinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Paint lookupLegendTextPaint(int)>(series);

        if labelPaint == null goto label10;

        virtualinvoke $stack39.<org.jfree.chart.LegendItem: void setLabelPaint(java.awt.Paint)>(labelPaint);

     label10:
        $stack43 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: java.lang.Comparable getSeriesKey(int)>(series);

        virtualinvoke $stack39.<org.jfree.chart.LegendItem: void setSeriesKey(java.lang.Comparable)>($stack43);

        virtualinvoke $stack39.<org.jfree.chart.LegendItem: void setSeriesIndex(int)>(series);

        virtualinvoke $stack39.<org.jfree.chart.LegendItem: void setDataset(org.jfree.data.general.Dataset)>(dataset);

        virtualinvoke $stack39.<org.jfree.chart.LegendItem: void setDatasetIndex(int)>(datasetIndex);

        return $stack39;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this, clone;
        java.lang.Object $stack2, $stack4, $stack8, $stack11;
        org.jfree.chart.util.BooleanList $stack3, $stack5, $stack7, $stack9, $stack10, $stack12;
        java.awt.Shape $stack6, $stack13, $stack14;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        $stack2 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>();

        clone = (org.jfree.chart.renderer.xy.XYLineAndShapeRenderer) $stack2;

        $stack3 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        $stack4 = virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack5 = (org.jfree.chart.util.BooleanList) $stack4;

        clone.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible> = $stack5;

        $stack6 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine>;

        if $stack6 == null goto label1;

        $stack13 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine>;

        $stack14 = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape clone(java.awt.Shape)>($stack13);

        clone.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine> = $stack14;

     label1:
        $stack7 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        $stack8 = virtualinvoke $stack7.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack9 = (org.jfree.chart.util.BooleanList) $stack8;

        clone.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible> = $stack9;

        $stack10 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        $stack11 = virtualinvoke $stack10.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack12 = (org.jfree.chart.util.BooleanList) $stack11;

        clone.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled> = $stack12;

        return clone;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this, that;
        boolean $stack3, $stack4, $stack7, $stack8, $stack9, $stack12, $stack15, $stack16, $stack17, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30;
        org.jfree.chart.util.BooleanList $stack5, $stack6, $stack13, $stack14, $stack18, $stack19;
        java.awt.Shape $stack10, $stack11;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        $stack4 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>(obj);

        if $stack4 != 0 goto label03;

        return 0;

     label03:
        that = (org.jfree.chart.renderer.xy.XYLineAndShapeRenderer) obj;

        $stack6 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        $stack5 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        $stack7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack6, $stack5);

        if $stack7 != 0 goto label04;

        return 0;

     label04:
        $stack9 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultLinesVisible>;

        $stack8 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultLinesVisible>;

        if $stack9 == $stack8 goto label05;

        return 0;

     label05:
        $stack11 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine>;

        $stack10 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine>;

        $stack12 = staticinvoke <org.jfree.chart.util.ShapeUtils: boolean equal(java.awt.Shape,java.awt.Shape)>($stack11, $stack10);

        if $stack12 != 0 goto label06;

        return 0;

     label06:
        $stack14 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        $stack13 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        $stack15 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack14, $stack13);

        if $stack15 != 0 goto label07;

        return 0;

     label07:
        $stack17 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesVisible>;

        $stack16 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesVisible>;

        if $stack17 == $stack16 goto label08;

        return 0;

     label08:
        $stack19 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        $stack18 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        $stack20 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack19, $stack18);

        if $stack20 != 0 goto label09;

        return 0;

     label09:
        $stack22 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesFilled>;

        $stack21 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean defaultShapesFilled>;

        if $stack22 == $stack21 goto label10;

        return 0;

     label10:
        $stack24 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawOutlines>;

        $stack23 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawOutlines>;

        if $stack24 == $stack23 goto label11;

        return 0;

     label11:
        $stack26 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useOutlinePaint>;

        $stack25 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useOutlinePaint>;

        if $stack26 == $stack25 goto label12;

        return 0;

     label12:
        $stack28 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useFillPaint>;

        $stack27 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean useFillPaint>;

        if $stack28 == $stack27 goto label13;

        return 0;

     label13:
        $stack30 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawSeriesLineAsPath>;

        $stack29 = that.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean drawSeriesLineAsPath>;

        if $stack30 == $stack29 goto label14;

        return 0;

     label14:
        return 1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        java.awt.Shape $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine> = $stack2;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer this;
        java.awt.Shape $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.awt.Shape legendLine>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack2, stream);

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: long serialVersionUID> = -7435246895986425885L;

        return;
    }
}
