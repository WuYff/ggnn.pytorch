public class org.jfree.chart.util.Args extends java.lang.Object
{

    public void <init>()
    {
        org.jfree.chart.util.Args this;

        this := @this: org.jfree.chart.util.Args;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void nullNotPermitted(java.lang.Object, java.lang.String)
    {
        java.lang.Object param;
        java.lang.IllegalArgumentException $stack2;
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6;
        java.lang.String name, $stack7;

        param := @parameter0: java.lang.Object;

        name := @parameter1: java.lang.String;

        if param != null goto label1;

        $stack2 = new java.lang.IllegalArgumentException;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null \'");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' argument.");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack7);

        throw $stack2;

     label1:
        return;
    }

    public static void requireNonNegative(int, java.lang.String)
    {
        int value;
        java.lang.IllegalArgumentException $stack2;
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;
        java.lang.String name, $stack9;

        value := @parameter0: int;

        name := @parameter1: java.lang.String;

        if value >= 0 goto label1;

        $stack2 = new java.lang.IllegalArgumentException;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Require \'");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(value);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to be non-negative.");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9);

        throw $stack2;

     label1:
        return;
    }

    public static void requireInRange(int, java.lang.String, int, int)
    {
        int value, lowerBound, upperBound;
        java.lang.IllegalArgumentException $stack4;
        java.lang.StringBuilder $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13;
        java.lang.String name, $stack14;

        value := @parameter0: int;

        name := @parameter1: java.lang.String;

        lowerBound := @parameter2: int;

        upperBound := @parameter3: int;

        if value < lowerBound goto label1;

        if value <= upperBound goto label2;

     label1:
        $stack4 = new java.lang.IllegalArgumentException;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Require \'");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(value);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to be in the range ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(lowerBound);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(upperBound);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack14);

        throw $stack4;

     label2:
        return;
    }
}
