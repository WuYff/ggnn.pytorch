public class org.jfree.chart.renderer.xy.XYShapeRenderer extends org.jfree.chart.renderer.xy.AbstractXYItemRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.jfree.chart.renderer.PaintScale paintScale;
    private boolean drawOutlines;
    private boolean useOutlinePaint;
    private boolean useFillPaint;
    private boolean guideLinesVisible;
    private transient java.awt.Paint guideLinePaint;
    private transient java.awt.Stroke guideLineStroke;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        org.jfree.chart.renderer.LookupPaintScale $stack1;
        java.awt.Color $stack2;
        java.awt.BasicStroke $stack3;
        java.awt.geom.Ellipse2D$Double $stack4;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>();

        $stack1 = new org.jfree.chart.renderer.LookupPaintScale;

        specialinvoke $stack1.<org.jfree.chart.renderer.LookupPaintScale: void <init>()>();

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: org.jfree.chart.renderer.PaintScale paintScale> = $stack1;

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useFillPaint> = 0;

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean drawOutlines> = 0;

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useOutlinePaint> = 1;

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean guideLinesVisible> = 0;

        $stack2 = <java.awt.Color: java.awt.Color darkGray>;

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint guideLinePaint> = $stack2;

        $stack3 = new java.awt.BasicStroke;

        specialinvoke $stack3.<java.awt.BasicStroke: void <init>()>();

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Stroke guideLineStroke> = $stack3;

        $stack4 = new java.awt.geom.Ellipse2D$Double;

        specialinvoke $stack4.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>(-5.0, -5.0, 10.0, 10.0);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void setDefaultShape(java.awt.Shape)>($stack4);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void setAutoPopulateSeriesShape(boolean)>(0);

        return;
    }

    public org.jfree.chart.renderer.PaintScale getPaintScale()
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        org.jfree.chart.renderer.PaintScale $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        return $stack1;
    }

    public void setPaintScale(org.jfree.chart.renderer.PaintScale)
    {
        org.jfree.chart.renderer.PaintScale scale;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        org.jfree.chart.event.RendererChangeEvent $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        scale := @parameter0: org.jfree.chart.renderer.PaintScale;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(scale, "scale");

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: org.jfree.chart.renderer.PaintScale paintScale> = scale;

        $stack2 = new org.jfree.chart.event.RendererChangeEvent;

        specialinvoke $stack2.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>(this);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($stack2);

        return;
    }

    public boolean getDrawOutlines()
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean drawOutlines>;

        return $stack1;
    }

    public void setDrawOutlines(boolean)
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean drawOutlines> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseFillPaint()
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useFillPaint>;

        return $stack1;
    }

    public void setUseFillPaint(boolean)
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useFillPaint> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseOutlinePaint()
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useOutlinePaint>;

        return $stack1;
    }

    public void setUseOutlinePaint(boolean)
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        boolean use;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        use := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useOutlinePaint> = use;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean isGuideLinesVisible()
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean guideLinesVisible>;

        return $stack1;
    }

    public void setGuideLinesVisible(boolean)
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        boolean visible;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean guideLinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getGuideLinePaint()
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint guideLinePaint>;

        return $stack1;
    }

    public void setGuideLinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint guideLinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getGuideLineStroke()
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Stroke guideLineStroke>;

        return $stack1;
    }

    public void setGuideLineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Stroke guideLineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.Range r, $stack6;
        double $stack7, $stack8, $stack9, $stack10;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        if dataset != null goto label1;

        return null;

     label1:
        r = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>(dataset, 0);

        if r != null goto label2;

        return null;

     label2:
        $stack6 = new org.jfree.data.Range;

        $stack7 = virtualinvoke r.<org.jfree.data.Range: double getLowerBound()>();

        $stack8 = $stack7 + 0.0;

        $stack9 = virtualinvoke r.<org.jfree.data.Range: double getUpperBound()>();

        $stack10 = $stack9 + 0.0;

        specialinvoke $stack6.<org.jfree.data.Range: void <init>(double,double)>($stack8, $stack10);

        return $stack6;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.Range r, $stack6;
        double $stack7, $stack8, $stack9, $stack10;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        if dataset != null goto label1;

        return null;

     label1:
        r = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>(dataset, 0);

        if r != null goto label2;

        return null;

     label2:
        $stack6 = new org.jfree.data.Range;

        $stack7 = virtualinvoke r.<org.jfree.data.Range: double getLowerBound()>();

        $stack8 = $stack7 + 0.0;

        $stack9 = virtualinvoke r.<org.jfree.data.Range: double getUpperBound()>();

        $stack10 = $stack9 + 0.0;

        specialinvoke $stack6.<org.jfree.data.Range: void <init>(double,double)>($stack8, $stack10);

        return $stack6;
    }

    public org.jfree.data.Range findZBounds(org.jfree.data.xy.XYZDataset)
    {
        org.jfree.data.xy.XYZDataset dataset;
        org.jfree.data.Range $stack2;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYZDataset;

        if dataset == null goto label1;

        $stack2 = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findZBounds(org.jfree.data.xy.XYZDataset)>(dataset);

        return $stack2;

     label1:
        return null;
    }

    public int getPassCount()
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        return 2;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.data.xy.XYDataset dataset;
        int series, item, pass, datasetIndex;
        double x, y, transX, transY, $stack75, $stack76, $stack78, $stack79, $stack81, $stack82, $stack84, $stack85;
        boolean $stack28, $stack29, $stack41, $stack53, $stack68, $stack38;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack30, $stack32;
        org.jfree.chart.plot.PlotOrientation orientation, $stack36, $stack37, $stack73;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        java.awt.Shape hotspot, shape;
        org.jfree.chart.plot.CrosshairState crosshairState;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack40, $stack54, $stack56, $stack72;
        java.awt.Stroke $stack55, $stack71;
        java.awt.geom.Line2D$Double $stack74, $stack77, $stack80, $stack83;
        org.jfree.chart.ChartRenderingInfo $stack86;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.entity.EntityCollection entities;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        entities = null;

        if info == null goto label01;

        $stack86 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        entities = virtualinvoke $stack86.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

     label01:
        x = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, item);

        y = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, item);

        $stack28 = staticinvoke <java.lang.Double: boolean isNaN(double)>(x);

        if $stack28 != 0 goto label02;

        $stack29 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y);

        if $stack29 == 0 goto label03;

     label02:
        return;

     label03:
        $stack30 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        transX = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x, dataArea, $stack30);

        $stack32 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        transY = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y, dataArea, $stack32);

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        if pass != 0 goto label05;

        $stack68 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean guideLinesVisible>;

        if $stack68 == 0 goto label05;

        $stack71 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Stroke guideLineStroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack71);

        $stack72 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint guideLinePaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack72);

        $stack73 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack73 goto label04;

        $stack80 = new java.awt.geom.Line2D$Double;

        $stack81 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack82 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack80.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(transY, $stack81, transY, $stack82);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack80);

        $stack83 = new java.awt.geom.Line2D$Double;

        $stack84 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack85 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack83.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack84, transX, $stack85, transX);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack83);

        goto label11;

     label04:
        $stack74 = new java.awt.geom.Line2D$Double;

        $stack75 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack76 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack74.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(transX, $stack75, transX, $stack76);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack74);

        $stack77 = new java.awt.geom.Line2D$Double;

        $stack78 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack79 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack77.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack78, transY, $stack79, transY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack77);

        goto label11;

     label05:
        if pass != 1 goto label11;

        shape = virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Shape getItemShape(int,int)>(series, item);

        $stack36 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack36 goto label06;

        shape = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(shape, transY, transX);

        goto label07;

     label06:
        $stack37 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack37 goto label07;

        shape = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(shape, transX, transY);

     label07:
        hotspot = shape;

        $stack38 = interfaceinvoke shape.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(dataArea);

        if $stack38 == 0 goto label10;

        $stack40 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint getPaint(org.jfree.data.xy.XYDataset,int,int)>(dataset, series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack40);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(shape);

        $stack41 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean drawOutlines>;

        if $stack41 == 0 goto label10;

        $stack53 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean getUseOutlinePaint()>();

        if $stack53 == 0 goto label08;

        $stack56 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack56);

        goto label09;

     label08:
        $stack54 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack54);

     label09:
        $stack55 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Stroke getItemOutlineStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack55);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(shape);

     label10:
        datasetIndex = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: int indexOf(org.jfree.data.xy.XYDataset)>(dataset);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,double,double,org.jfree.chart.plot.PlotOrientation)>(crosshairState, x, y, datasetIndex, transX, transY, orientation);

        if entities == null goto label11;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(entities, hotspot, dataset, series, item, 0.0, 0.0);

     label11:
        return;
    }

    protected java.awt.Paint getPaint(org.jfree.data.xy.XYDataset, int, int)
    {
        org.jfree.data.xy.XYDataset dataset;
        boolean $stack7, $stack8;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        int series, item;
        org.jfree.data.xy.XYZDataset $stack12;
        double z;
        org.jfree.chart.renderer.PaintScale $stack14;
        java.awt.Paint p;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        series := @parameter1: int;

        item := @parameter2: int;

        $stack7 = dataset instanceof org.jfree.data.xy.XYZDataset;

        if $stack7 == 0 goto label1;

        $stack12 = (org.jfree.data.xy.XYZDataset) dataset;

        z = interfaceinvoke $stack12.<org.jfree.data.xy.XYZDataset: double getZValue(int,int)>(series, item);

        $stack14 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        p = interfaceinvoke $stack14.<org.jfree.chart.renderer.PaintScale: java.awt.Paint getPaint(double)>(z);

        goto label3;

     label1:
        $stack8 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useFillPaint>;

        if $stack8 == 0 goto label2;

        p = virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint getItemFillPaint(int,int)>(series, item);

        goto label3;

     label2:
        p = virtualinvoke this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

     label3:
        return p;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.XYShapeRenderer this, that;
        boolean $stack3, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack17, $stack20, $stack21;
        org.jfree.chart.renderer.PaintScale $stack4, $stack5;
        java.awt.Paint $stack15, $stack16;
        java.awt.Stroke $stack18, $stack19;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.XYShapeRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.xy.XYShapeRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        $stack4 = that.<org.jfree.chart.renderer.xy.XYShapeRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        $stack6 = virtualinvoke $stack5.<java.lang.Object: boolean equals(java.lang.Object)>($stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean drawOutlines>;

        $stack7 = that.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean drawOutlines>;

        if $stack8 == $stack7 goto label4;

        return 0;

     label4:
        $stack10 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useOutlinePaint>;

        $stack9 = that.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useOutlinePaint>;

        if $stack10 == $stack9 goto label5;

        return 0;

     label5:
        $stack12 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useFillPaint>;

        $stack11 = that.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean useFillPaint>;

        if $stack12 == $stack11 goto label6;

        return 0;

     label6:
        $stack14 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean guideLinesVisible>;

        $stack13 = that.<org.jfree.chart.renderer.xy.XYShapeRenderer: boolean guideLinesVisible>;

        if $stack14 == $stack13 goto label7;

        return 0;

     label7:
        $stack16 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint guideLinePaint>;

        $stack15 = that.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint guideLinePaint>;

        $stack17 = virtualinvoke $stack16.<java.lang.Object: boolean equals(java.lang.Object)>($stack15);

        if $stack17 != 0 goto label8;

        return 0;

     label8:
        $stack19 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Stroke guideLineStroke>;

        $stack18 = that.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Stroke guideLineStroke>;

        $stack20 = virtualinvoke $stack19.<java.lang.Object: boolean equals(java.lang.Object)>($stack18);

        if $stack20 != 0 goto label9;

        return 0;

     label9:
        $stack21 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack21;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.xy.XYShapeRenderer this, clone;
        java.lang.Object $stack2, $stack4;
        org.jfree.chart.renderer.PaintScale $stack3, $stack5;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        $stack2 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>();

        clone = (org.jfree.chart.renderer.xy.XYShapeRenderer) $stack2;

        $stack3 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        $stack4 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack3);

        $stack5 = (org.jfree.chart.renderer.PaintScale) $stack4;

        clone.<org.jfree.chart.renderer.xy.XYShapeRenderer: org.jfree.chart.renderer.PaintScale paintScale> = $stack5;

        return clone;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        java.awt.Paint $stack2;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint guideLinePaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Stroke guideLineStroke> = $stack3;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.renderer.xy.XYShapeRenderer this;
        java.awt.Paint $stack2;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYShapeRenderer;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Paint guideLinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.renderer.xy.XYShapeRenderer: java.awt.Stroke guideLineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack3, stream);

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.xy.XYShapeRenderer: long serialVersionUID> = 8320552104211173221L;

        return;
    }
}
