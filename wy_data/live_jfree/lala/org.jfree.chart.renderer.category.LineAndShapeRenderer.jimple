public class org.jfree.chart.renderer.category.LineAndShapeRenderer extends org.jfree.chart.renderer.category.AbstractCategoryItemRenderer implements java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.jfree.chart.util.BooleanList seriesLinesVisible;
    private boolean defaultLinesVisible;
    private org.jfree.chart.util.BooleanList seriesShapesVisible;
    private boolean defaultShapesVisible;
    private org.jfree.chart.util.BooleanList seriesShapesFilled;
    private boolean defaultShapesFilled;
    private boolean useFillPaint;
    private boolean drawOutlines;
    private boolean useOutlinePaint;
    private boolean useSeriesOffset;
    private double itemMargin;

    public void <init>()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        specialinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>(1, 1);

        return;
    }

    public void <init>(boolean, boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        org.jfree.chart.util.BooleanList $stack3, $stack4, $stack5;
        boolean lines, shapes;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        lines := @parameter0: boolean;

        shapes := @parameter1: boolean;

        specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>();

        $stack3 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack3.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible> = $stack3;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultLinesVisible> = lines;

        $stack4 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack4.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible> = $stack4;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesVisible> = shapes;

        $stack5 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack5.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled> = $stack5;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesFilled> = 1;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useFillPaint> = 0;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean drawOutlines> = 1;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useOutlinePaint> = 0;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useSeriesOffset> = 0;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: double itemMargin> = 0.0;

        return;
    }

    public boolean getItemLineVisible(int, int)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series, item;
        java.lang.Boolean flag;
        boolean $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        item := @parameter1: int;

        flag = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.lang.Boolean getSeriesLinesVisible(int)>(series);

        if flag == null goto label1;

        $stack6 = virtualinvoke flag.<java.lang.Boolean: boolean booleanValue()>();

        return $stack6;

     label1:
        $stack5 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultLinesVisible>;

        return $stack5;
    }

    public java.lang.Boolean getSeriesLinesVisible(int)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack2;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        return $stack3;
    }

    public void setSeriesLinesVisible(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series;
        java.lang.Boolean flag;
        org.jfree.chart.util.BooleanList $stack3;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        flag := @parameter1: java.lang.Boolean;

        $stack3 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, flag);

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public void setSeriesLinesVisible(int, boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series;
        boolean visible;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        visible := @parameter1: boolean;

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(visible);

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void setSeriesLinesVisible(int,java.lang.Boolean)>(series, $stack3);

        return;
    }

    public boolean getDefaultLinesVisible()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultLinesVisible>;

        return $stack1;
    }

    public void setDefaultLinesVisible(boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultLinesVisible> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getItemShapeVisible(int, int)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series, item;
        java.lang.Boolean flag;
        boolean $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        item := @parameter1: int;

        flag = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.lang.Boolean getSeriesShapesVisible(int)>(series);

        if flag == null goto label1;

        $stack6 = virtualinvoke flag.<java.lang.Boolean: boolean booleanValue()>();

        return $stack6;

     label1:
        $stack5 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesVisible>;

        return $stack5;
    }

    public java.lang.Boolean getSeriesShapesVisible(int)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack2;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        return $stack3;
    }

    public void setSeriesShapesVisible(int, boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series;
        boolean visible;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        visible := @parameter1: boolean;

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(visible);

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void setSeriesShapesVisible(int,java.lang.Boolean)>(series, $stack3);

        return;
    }

    public void setSeriesShapesVisible(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series;
        java.lang.Boolean flag;
        org.jfree.chart.util.BooleanList $stack3;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        flag := @parameter1: java.lang.Boolean;

        $stack3 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, flag);

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getDefaultShapesVisible()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesVisible>;

        return $stack1;
    }

    public void setDefaultShapesVisible(boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesVisible> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getDrawOutlines()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean drawOutlines>;

        return $stack1;
    }

    public void setDrawOutlines(boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean drawOutlines> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseOutlinePaint()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useOutlinePaint>;

        return $stack1;
    }

    public void setUseOutlinePaint(boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean use;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        use := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useOutlinePaint> = use;

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getItemShapeFilled(int, int)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series, item;
        boolean $stack3;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getSeriesShapesFilled(int)>(series);

        return $stack3;
    }

    public boolean getSeriesShapesFilled(int)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack3;
        java.lang.Boolean flag;
        boolean $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        $stack3 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        flag = virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        if flag == null goto label1;

        $stack6 = virtualinvoke flag.<java.lang.Boolean: boolean booleanValue()>();

        return $stack6;

     label1:
        $stack5 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesFilled>;

        return $stack5;
    }

    public void setSeriesShapesFilled(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series;
        java.lang.Boolean filled;
        org.jfree.chart.util.BooleanList $stack3;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        filled := @parameter1: java.lang.Boolean;

        $stack3 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, filled);

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public void setSeriesShapesFilled(int, boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int series;
        boolean filled;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        series := @parameter0: int;

        filled := @parameter1: boolean;

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(filled);

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>(series, $stack3);

        return;
    }

    public boolean getDefaultShapesFilled()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesFilled>;

        return $stack1;
    }

    public void setDefaultShapesFilled(boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesFilled> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseFillPaint()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useFillPaint>;

        return $stack1;
    }

    public void setUseFillPaint(boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useFillPaint> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseSeriesOffset()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useSeriesOffset>;

        return $stack1;
    }

    public void setUseSeriesOffset(boolean)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        boolean offset;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        offset := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useSeriesOffset> = offset;

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public double getItemMargin()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: double itemMargin>;

        return $stack1;
    }

    public void setItemMargin(double)
    {
        double margin;
        byte $stack3, $stack5;
        java.lang.IllegalArgumentException $stack4;
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        margin := @parameter0: double;

        $stack3 = margin cmpg 0.0;

        if $stack3 < 0 goto label1;

        $stack5 = margin cmpl 1.0;

        if $stack5 < 0 goto label2;

     label1:
        $stack4 = new java.lang.IllegalArgumentException;

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requires 0.0 <= margin < 1.0.");

        throw $stack4;

     label2:
        this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: double itemMargin> = margin;

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.LegendItem getLegendItem(int, int)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        org.jfree.chart.plot.CategoryPlot cp;
        int series, datasetIndex;
        boolean $stack20, $stack21, $stack30, shapeOutlineVisible, $stack31, lineVisible, shapeVisible, $stack36;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.labels.CategorySeriesLabelGenerator $stack24, $stack26, $stack27, $stack96, $stack103;
        java.lang.String label, toolTipText, urlText;
        java.awt.Shape shape;
        java.awt.Paint paint, fillPaint, $stack39, labelPaint, $stack92, $stack53;
        java.awt.Stroke outlineStroke, $stack38;
        org.jfree.chart.LegendItem $stack35;
        java.awt.geom.Line2D$Double $stack37;
        java.awt.Font $stack40;
        java.lang.Comparable $stack42;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        datasetIndex := @parameter0: int;

        series := @parameter1: int;

        cp = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.plot.CategoryPlot getPlot()>();

        if cp != null goto label1;

        return null;

     label1:
        $stack20 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean isSeriesVisible(int)>(series);

        if $stack20 == 0 goto label9;

        $stack21 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean isSeriesVisibleInLegend(int)>(series);

        if $stack21 == 0 goto label9;

        dataset = virtualinvoke cp.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(datasetIndex);

        $stack24 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemLabelGenerator()>();

        label = interfaceinvoke $stack24.<org.jfree.chart.labels.CategorySeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)>(dataset, series);

        toolTipText = null;

        $stack26 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemToolTipGenerator()>();

        if $stack26 == null goto label2;

        $stack103 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemToolTipGenerator()>();

        toolTipText = interfaceinvoke $stack103.<org.jfree.chart.labels.CategorySeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)>(dataset, series);

     label2:
        urlText = null;

        $stack27 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemURLGenerator()>();

        if $stack27 == null goto label3;

        $stack96 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemURLGenerator()>();

        urlText = interfaceinvoke $stack96.<org.jfree.chart.labels.CategorySeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)>(dataset, series);

     label3:
        shape = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Shape lookupLegendShape(int)>(series);

        paint = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint lookupSeriesPaint(int)>(series);

        $stack30 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useFillPaint>;

        if $stack30 == 0 goto label4;

        $stack92 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint getItemFillPaint(int,int)>(series, 0);

        goto label5;

     label4:
        $stack92 = paint;

     label5:
        fillPaint = $stack92;

        shapeOutlineVisible = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean drawOutlines>;

        $stack31 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useOutlinePaint>;

        if $stack31 == 0 goto label6;

        $stack53 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(series, 0);

        goto label7;

     label6:
        $stack53 = paint;

     label7:
        outlineStroke = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Stroke lookupSeriesOutlineStroke(int)>(series);

        lineVisible = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getItemLineVisible(int,int)>(series, 0);

        shapeVisible = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getItemShapeVisible(int,int)>(series, 0);

        $stack35 = new org.jfree.chart.LegendItem;

        $stack36 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getItemShapeFilled(int,int)>(series, 0);

        $stack37 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack37.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(-7.0, 0.0, 7.0, 0.0);

        $stack38 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Stroke getItemStroke(int,int)>(series, 0);

        $stack39 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint getItemPaint(int,int)>(series, 0);

        specialinvoke $stack35.<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>(label, label, toolTipText, urlText, shapeVisible, shape, $stack36, fillPaint, shapeOutlineVisible, $stack53, outlineStroke, lineVisible, $stack37, $stack38, $stack39);

        $stack40 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Font lookupLegendTextFont(int)>(series);

        virtualinvoke $stack35.<org.jfree.chart.LegendItem: void setLabelFont(java.awt.Font)>($stack40);

        labelPaint = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint lookupLegendTextPaint(int)>(series);

        if labelPaint == null goto label8;

        virtualinvoke $stack35.<org.jfree.chart.LegendItem: void setLabelPaint(java.awt.Paint)>(labelPaint);

     label8:
        virtualinvoke $stack35.<org.jfree.chart.LegendItem: void setDataset(org.jfree.data.general.Dataset)>(dataset);

        virtualinvoke $stack35.<org.jfree.chart.LegendItem: void setDatasetIndex(int)>(datasetIndex);

        $stack42 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(series);

        virtualinvoke $stack35.<org.jfree.chart.LegendItem: void setSeriesKey(java.lang.Comparable)>($stack42);

        virtualinvoke $stack35.<org.jfree.chart.LegendItem: void setSeriesIndex(int)>(series);

        return $stack35;

     label9:
        return null;
    }

    public int getPassCount()
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        return 2;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, int)
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this;
        int row, column, visibleRow, visibleRowCount, $stack36, pass, $stack118, $stack122, $stack123, $stack144, $stack145, $stack155, previous#81;
        boolean $stack29, $stack30, $stack35, $stack89, $stack94, $stack104, $stack115, $stack121, $stack165, $stack45, $stack90, $stack46, $stack87, $stack77;
        org.jfree.data.category.CategoryDataset dataset;
        java.lang.Number v, previousValue;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.plot.PlotOrientation orientation, $stack43, $stack44, $stack52, $stack53, $stack128, $stack129;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack37, $stack40, $stack124, $stack126, $stack147, $stack157;
        double value, y1, $stack75, $stack86, y0, $stack146, $stack156, x1, previous, x0;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        org.jfree.chart.entity.EntityCollection entities;
        java.awt.Graphics2D g2;
        byte $stack69, $stack79;
        java.awt.Paint $stack95, $stack97, $stack105, $stack107, $stack130;
        java.awt.Stroke $stack96, $stack131;
        java.awt.geom.Line2D$Double $stack132, $stack143, line;
        java.awt.Shape previousValue#42;
        org.jfree.chart.plot.CategoryCrosshairState $stack48;
        java.lang.Comparable $stack49, $stack50;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.category.CategoryItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        plot := @parameter3: org.jfree.chart.plot.CategoryPlot;

        domainAxis := @parameter4: org.jfree.chart.axis.CategoryAxis;

        rangeAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter6: org.jfree.data.category.CategoryDataset;

        row := @parameter7: int;

        column := @parameter8: int;

        pass := @parameter9: int;

        $stack29 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getItemVisible(int,int)>(row, column);

        if $stack29 != 0 goto label01;

        return;

     label01:
        $stack30 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getItemLineVisible(int,int)>(row, column);

        if $stack30 != 0 goto label02;

        $stack165 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getItemShapeVisible(int,int)>(row, column);

        if $stack165 != 0 goto label02;

        return;

     label02:
        v = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(row, column);

        if v != null goto label03;

        return;

     label03:
        visibleRow = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int getVisibleSeriesIndex(int)>(row);

        if visibleRow >= 0 goto label04;

        return;

     label04:
        visibleRowCount = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int getVisibleSeriesCount()>();

        orientation = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack35 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useSeriesOffset>;

        if $stack35 == 0 goto label05;

        $stack155 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        $stack156 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: double itemMargin>;

        $stack157 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        x1 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategorySeriesMiddle(int,int,int,int,double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack155, visibleRow, visibleRowCount, $stack156, dataArea, $stack157);

        goto label06;

     label05:
        $stack36 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: int getColumnCount()>();

        $stack37 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        x1 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack36, dataArea, $stack37);

     label06:
        value = virtualinvoke v.<java.lang.Number: double doubleValue()>();

        $stack40 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        y1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack40);

        if pass != 0 goto label11;

        $stack115 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getItemLineVisible(int,int)>(row, column);

        if $stack115 == 0 goto label11;

        if column == 0 goto label11;

        $stack118 = column - 1;

        previousValue = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(row, $stack118);

        if previousValue == null goto label11;

        previous = virtualinvoke previousValue.<java.lang.Number: double doubleValue()>();

        $stack121 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useSeriesOffset>;

        if $stack121 == 0 goto label07;

        $stack144 = column - 1;

        $stack145 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        $stack146 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: double itemMargin>;

        $stack147 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        x0 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategorySeriesMiddle(int,int,int,int,double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack144, $stack145, visibleRow, visibleRowCount, $stack146, dataArea, $stack147);

        goto label08;

     label07:
        $stack122 = column - 1;

        $stack123 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: int getColumnCount()>();

        $stack124 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        x0 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack122, $stack123, dataArea, $stack124);

     label08:
        $stack126 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        y0 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(previous, dataArea, $stack126);

        line = null;

        $stack128 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack128 goto label09;

        $stack143 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack143.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(y0, x0, y1, x1);

        line = $stack143;

        goto label10;

     label09:
        $stack129 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack129 goto label10;

        $stack132 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack132.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(x0, y0, x1, y1);

        line = $stack132;

     label10:
        $stack130 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint getItemPaint(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack130);

        $stack131 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Stroke getItemStroke(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack131);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

     label11:
        if pass != 1 goto label26;

        previousValue#42 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Shape getItemShape(int,int)>(row, column);

        $stack43 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack43 goto label12;

        previousValue#42 = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(previousValue#42, y1, x1);

        goto label13;

     label12:
        $stack44 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack44 goto label13;

        previousValue#42 = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(previousValue#42, x1, y1);

     label13:
        $stack45 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getItemShapeVisible(int,int)>(row, column);

        if $stack45 == 0 goto label19;

        $stack89 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean getItemShapeFilled(int,int)>(row, column);

        if $stack89 == 0 goto label16;

        $stack104 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useFillPaint>;

        if $stack104 == 0 goto label14;

        $stack107 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint getItemFillPaint(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack107);

        goto label15;

     label14:
        $stack105 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint getItemPaint(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack105);

     label15:
        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(previousValue#42);

     label16:
        $stack90 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean drawOutlines>;

        if $stack90 == 0 goto label19;

        $stack94 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useOutlinePaint>;

        if $stack94 == 0 goto label17;

        $stack97 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack97);

        goto label18;

     label17:
        $stack95 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Paint getItemPaint(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack95);

     label18:
        $stack96 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: java.awt.Stroke getItemOutlineStroke(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack96);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(previousValue#42);

     label19:
        $stack46 = virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean isItemLabelVisible(int,int)>(row, column);

        if $stack46 == 0 goto label25;

        $stack52 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack52 goto label22;

        $stack86 = x1;

        $stack79 = value cmpg 0.0;

        if $stack79 >= 0 goto label20;

        $stack87 = 1;

        goto label21;

     label20:
        $stack87 = 0;

     label21:
        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)>(g2, orientation, dataset, row, column, y1, $stack86, $stack87);

        goto label25;

     label22:
        $stack53 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack53 goto label25;

        $stack75 = x1;

        $stack69 = value cmpg 0.0;

        if $stack69 >= 0 goto label23;

        $stack77 = 1;

        goto label24;

     label23:
        $stack77 = 0;

     label24:
        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)>(g2, orientation, dataset, row, column, $stack75, y1, $stack77);

     label25:
        previous#81 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: int indexOf(org.jfree.data.category.CategoryDataset)>(dataset);

        $stack48 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.plot.CategoryCrosshairState getCrosshairState()>();

        $stack49 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(row);

        $stack50 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getColumnKey(int)>(column);

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void updateCrosshairValues(org.jfree.chart.plot.CategoryCrosshairState,java.lang.Comparable,java.lang.Comparable,double,int,double,double,org.jfree.chart.plot.PlotOrientation)>($stack48, $stack49, $stack50, value, previous#81, x1, y1, orientation);

        entities = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label26;

        virtualinvoke this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: void addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)>(entities, dataset, row, column, previousValue#42);

     label26:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.category.LineAndShapeRenderer this, that;
        boolean $stack3, $stack4, $stack5, $stack8, $stack9, $stack10, $stack13, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack26;
        org.jfree.chart.util.BooleanList $stack6, $stack7, $stack11, $stack12, $stack14, $stack15;
        double $stack23, $stack24;
        byte $stack25;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.renderer.category.LineAndShapeRenderer;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.renderer.category.LineAndShapeRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultLinesVisible>;

        $stack4 = that.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultLinesVisible>;

        if $stack5 == $stack4 goto label03;

        return 0;

     label03:
        $stack7 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        $stack6 = that.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        $stack8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack7, $stack6);

        if $stack8 != 0 goto label04;

        return 0;

     label04:
        $stack10 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesVisible>;

        $stack9 = that.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesVisible>;

        if $stack10 == $stack9 goto label05;

        return 0;

     label05:
        $stack12 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        $stack11 = that.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        $stack13 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack12, $stack11);

        if $stack13 != 0 goto label06;

        return 0;

     label06:
        $stack15 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        $stack14 = that.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        $stack16 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack15, $stack14);

        if $stack16 != 0 goto label07;

        return 0;

     label07:
        $stack18 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesFilled>;

        $stack17 = that.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean defaultShapesFilled>;

        if $stack18 == $stack17 goto label08;

        return 0;

     label08:
        $stack20 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useOutlinePaint>;

        $stack19 = that.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useOutlinePaint>;

        if $stack20 == $stack19 goto label09;

        return 0;

     label09:
        $stack22 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useSeriesOffset>;

        $stack21 = that.<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean useSeriesOffset>;

        if $stack22 == $stack21 goto label10;

        return 0;

     label10:
        $stack24 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: double itemMargin>;

        $stack23 = that.<org.jfree.chart.renderer.category.LineAndShapeRenderer: double itemMargin>;

        $stack25 = $stack24 cmpl $stack23;

        if $stack25 == 0 goto label11;

        return 0;

     label11:
        $stack26 = specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack26;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.category.LineAndShapeRenderer this, clone;
        java.lang.Object $stack2, $stack4, $stack7, $stack10;
        org.jfree.chart.util.BooleanList $stack3, $stack5, $stack6, $stack8, $stack9, $stack11;

        this := @this: org.jfree.chart.renderer.category.LineAndShapeRenderer;

        $stack2 = specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>();

        clone = (org.jfree.chart.renderer.category.LineAndShapeRenderer) $stack2;

        $stack3 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible>;

        $stack4 = virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack5 = (org.jfree.chart.util.BooleanList) $stack4;

        clone.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesLinesVisible> = $stack5;

        $stack6 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible>;

        $stack7 = virtualinvoke $stack6.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack8 = (org.jfree.chart.util.BooleanList) $stack7;

        clone.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesVisible> = $stack8;

        $stack9 = this.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled>;

        $stack10 = virtualinvoke $stack9.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack11 = (org.jfree.chart.util.BooleanList) $stack10;

        clone.<org.jfree.chart.renderer.category.LineAndShapeRenderer: org.jfree.chart.util.BooleanList seriesShapesFilled> = $stack11;

        return clone;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.category.LineAndShapeRenderer: long serialVersionUID> = -197749519869226398L;

        return;
    }
}
