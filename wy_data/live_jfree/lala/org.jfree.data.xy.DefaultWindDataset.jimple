public class org.jfree.data.xy.DefaultWindDataset extends org.jfree.data.xy.AbstractXYDataset implements org.jfree.data.xy.WindDataset, org.jfree.chart.util.PublicCloneable
{
    private java.util.List seriesKeys;
    private java.util.List allSeriesData;

    public void <init>()
    {
        org.jfree.data.xy.DefaultWindDataset this;
        java.util.ArrayList $stack1, $stack2;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        specialinvoke this.<org.jfree.data.xy.AbstractXYDataset: void <init>()>();

        $stack1 = new java.util.ArrayList;

        specialinvoke $stack1.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.data.xy.DefaultWindDataset: java.util.List seriesKeys> = $stack1;

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData> = $stack2;

        return;
    }

    public void <init>(java.lang.Object[][][])
    {
        org.jfree.data.xy.DefaultWindDataset this;
        java.lang.Object[][][] data;
        java.util.List $stack2;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        data := @parameter0: java.lang.Object[][][];

        $stack2 = staticinvoke <org.jfree.data.xy.DefaultWindDataset: java.util.List seriesNameListFromDataArray(java.lang.Object[][])>(data);

        specialinvoke this.<org.jfree.data.xy.DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>($stack2, data);

        return;
    }

    public void <init>(java.lang.String[], java.lang.Object[][][])
    {
        org.jfree.data.xy.DefaultWindDataset this;
        java.lang.String[] seriesNames;
        java.util.List $stack3;
        java.lang.Object[][][] data;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        seriesNames := @parameter0: java.lang.String[];

        data := @parameter1: java.lang.Object[][][];

        $stack3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(seriesNames);

        specialinvoke this.<org.jfree.data.xy.DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>($stack3, data);

        return;
    }

    public void <init>(java.util.List, java.lang.Object[][][])
    {
        org.jfree.data.xy.DefaultWindDataset this;
        java.util.List seriesKeys, $stack17;
        int $stack12, $stack13, seriesCount, maxItemCount, seriesIndex, itemIndex;
        java.lang.Object[][][] data;
        java.util.ArrayList $stack14, $stack15;
        java.lang.Object[][] $stack16, $stack20, $stack27, $stack30;
        java.lang.Object[] $stack21, $stack28, $stack31;
        java.lang.Object xObject, $stack29, $stack32;
        boolean $stack24, $stack25;
        java.lang.Integer $stack26;
        java.lang.Number windForce, xNumber, xDate#21;
        java.lang.Long $stack35;
        long $stack36;
        java.lang.IllegalArgumentException $stack51;
        java.util.Date xDate;
        org.jfree.data.xy.WindDataItem $stack33;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        seriesKeys := @parameter0: java.util.List;

        data := @parameter1: java.lang.Object[][][];

        specialinvoke this.<org.jfree.data.xy.AbstractXYDataset: void <init>()>();

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(seriesKeys, "seriesKeys");

        $stack12 = interfaceinvoke seriesKeys.<java.util.List: int size()>();

        $stack13 = lengthof data;

        if $stack12 == $stack13 goto label1;

        $stack51 = new java.lang.IllegalArgumentException;

        specialinvoke $stack51.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of series keys does not match the number of series in the data array.");

        throw $stack51;

     label1:
        this.<org.jfree.data.xy.DefaultWindDataset: java.util.List seriesKeys> = seriesKeys;

        seriesCount = lengthof data;

        $stack14 = new java.util.ArrayList;

        specialinvoke $stack14.<java.util.ArrayList: void <init>(int)>(seriesCount);

        this.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData> = $stack14;

        seriesIndex = 0;

     label2:
        if seriesIndex >= seriesCount goto label9;

        $stack15 = new java.util.ArrayList;

        specialinvoke $stack15.<java.util.ArrayList: void <init>()>();

        $stack16 = data[seriesIndex];

        maxItemCount = lengthof $stack16;

        itemIndex = 0;

     label3:
        if itemIndex >= maxItemCount goto label8;

        $stack20 = data[seriesIndex];

        $stack21 = $stack20[itemIndex];

        xObject = $stack21[0];

        if xObject == null goto label7;

        $stack24 = xObject instanceof java.lang.Number;

        if $stack24 == 0 goto label4;

        xNumber = (java.lang.Number) xObject;

        goto label6;

     label4:
        $stack25 = xObject instanceof java.util.Date;

        if $stack25 == 0 goto label5;

        xDate = (java.util.Date) xObject;

        $stack35 = new java.lang.Long;

        $stack36 = virtualinvoke xDate.<java.util.Date: long getTime()>();

        specialinvoke $stack35.<java.lang.Long: void <init>(long)>($stack36);

        xNumber = $stack35;

        goto label6;

     label5:
        $stack26 = new java.lang.Integer;

        specialinvoke $stack26.<java.lang.Integer: void <init>(int)>(0);

        xNumber = $stack26;

     label6:
        $stack27 = data[seriesIndex];

        $stack28 = $stack27[itemIndex];

        $stack29 = $stack28[1];

        xDate#21 = (java.lang.Number) $stack29;

        $stack30 = data[seriesIndex];

        $stack31 = $stack30[itemIndex];

        $stack32 = $stack31[2];

        windForce = (java.lang.Number) $stack32;

        $stack33 = new org.jfree.data.xy.WindDataItem;

        specialinvoke $stack33.<org.jfree.data.xy.WindDataItem: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>(xNumber, xDate#21, windForce);

        interfaceinvoke $stack15.<java.util.List: boolean add(java.lang.Object)>($stack33);

     label7:
        itemIndex = itemIndex + 1;

        goto label3;

     label8:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($stack15);

        $stack17 = this.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData>;

        interfaceinvoke $stack17.<java.util.List: void add(int,java.lang.Object)>(seriesIndex, $stack15);

        seriesIndex = seriesIndex + 1;

        goto label2;

     label9:
        return;
    }

    public int getSeriesCount()
    {
        org.jfree.data.xy.DefaultWindDataset this;
        java.util.List $stack1;
        int $stack2;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        $stack1 = this.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData>;

        $stack2 = interfaceinvoke $stack1.<java.util.List: int size()>();

        return $stack2;
    }

    public int getItemCount(int)
    {
        int series, $stack8, $stack11;
        java.lang.IllegalArgumentException $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack6;
        java.lang.String $stack7;
        org.jfree.data.xy.DefaultWindDataset this;
        java.util.List $stack9, oneSeriesData;
        java.lang.Object $stack10;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        series := @parameter0: int;

        if series < 0 goto label1;

        $stack8 = virtualinvoke this.<org.jfree.data.xy.DefaultWindDataset: int getSeriesCount()>();

        if series < $stack8 goto label2;

     label1:
        $stack3 = new java.lang.IllegalArgumentException;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid series index: ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(series);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack7);

        throw $stack3;

     label2:
        $stack9 = this.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData>;

        $stack10 = interfaceinvoke $stack9.<java.util.List: java.lang.Object get(int)>(series);

        oneSeriesData = (java.util.List) $stack10;

        $stack11 = interfaceinvoke oneSeriesData.<java.util.List: int size()>();

        return $stack11;
    }

    public java.lang.Comparable getSeriesKey(int)
    {
        int series, $stack7;
        java.lang.IllegalArgumentException $stack2;
        java.lang.StringBuilder $stack3, $stack4, $stack5;
        java.lang.String $stack6;
        org.jfree.data.xy.DefaultWindDataset this;
        java.util.List $stack8;
        java.lang.Object $stack9;
        java.lang.Comparable $stack10;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        series := @parameter0: int;

        if series < 0 goto label1;

        $stack7 = virtualinvoke this.<org.jfree.data.xy.DefaultWindDataset: int getSeriesCount()>();

        if series < $stack7 goto label2;

     label1:
        $stack2 = new java.lang.IllegalArgumentException;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid series index: ");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(series);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack6);

        throw $stack2;

     label2:
        $stack8 = this.<org.jfree.data.xy.DefaultWindDataset: java.util.List seriesKeys>;

        $stack9 = interfaceinvoke $stack8.<java.util.List: java.lang.Object get(int)>(series);

        $stack10 = (java.lang.Comparable) $stack9;

        return $stack10;
    }

    public java.lang.Number getX(int, int)
    {
        org.jfree.data.xy.DefaultWindDataset this;
        int series, item;
        java.util.List $stack5, oneSeriesData;
        java.lang.Object $stack6, $stack7;
        org.jfree.data.xy.WindDataItem windItem;
        java.lang.Number $stack8;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack5 = this.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData>;

        $stack6 = interfaceinvoke $stack5.<java.util.List: java.lang.Object get(int)>(series);

        oneSeriesData = (java.util.List) $stack6;

        $stack7 = interfaceinvoke oneSeriesData.<java.util.List: java.lang.Object get(int)>(item);

        windItem = (org.jfree.data.xy.WindDataItem) $stack7;

        $stack8 = virtualinvoke windItem.<org.jfree.data.xy.WindDataItem: java.lang.Number getX()>();

        return $stack8;
    }

    public java.lang.Number getY(int, int)
    {
        org.jfree.data.xy.DefaultWindDataset this;
        int series, item;
        java.lang.Number $stack3;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.data.xy.DefaultWindDataset: java.lang.Number getWindForce(int,int)>(series, item);

        return $stack3;
    }

    public java.lang.Number getWindDirection(int, int)
    {
        org.jfree.data.xy.DefaultWindDataset this;
        int series, item;
        java.util.List $stack5, oneSeriesData;
        java.lang.Object $stack6, $stack7;
        org.jfree.data.xy.WindDataItem windItem;
        java.lang.Number $stack8;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack5 = this.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData>;

        $stack6 = interfaceinvoke $stack5.<java.util.List: java.lang.Object get(int)>(series);

        oneSeriesData = (java.util.List) $stack6;

        $stack7 = interfaceinvoke oneSeriesData.<java.util.List: java.lang.Object get(int)>(item);

        windItem = (org.jfree.data.xy.WindDataItem) $stack7;

        $stack8 = virtualinvoke windItem.<org.jfree.data.xy.WindDataItem: java.lang.Number getWindDirection()>();

        return $stack8;
    }

    public java.lang.Number getWindForce(int, int)
    {
        org.jfree.data.xy.DefaultWindDataset this;
        int series, item;
        java.util.List $stack5, oneSeriesData;
        java.lang.Object $stack6, $stack7;
        org.jfree.data.xy.WindDataItem windItem;
        java.lang.Number $stack8;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack5 = this.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData>;

        $stack6 = interfaceinvoke $stack5.<java.util.List: java.lang.Object get(int)>(series);

        oneSeriesData = (java.util.List) $stack6;

        $stack7 = interfaceinvoke oneSeriesData.<java.util.List: java.lang.Object get(int)>(item);

        windItem = (org.jfree.data.xy.WindDataItem) $stack7;

        $stack8 = virtualinvoke windItem.<org.jfree.data.xy.WindDataItem: java.lang.Number getWindForce()>();

        return $stack8;
    }

    public static java.util.List seriesNameListFromDataArray(java.lang.Object[][])
    {
        java.lang.Object[][] data;
        int seriesCount, $stack7, i;
        java.util.ArrayList $stack4;
        java.lang.StringBuilder $stack5, $stack6, $stack8;
        java.lang.String $stack9;

        data := @parameter0: java.lang.Object[][];

        seriesCount = lengthof data;

        $stack4 = new java.util.ArrayList;

        specialinvoke $stack4.<java.util.ArrayList: void <init>(int)>(seriesCount);

        i = 0;

     label1:
        if i >= seriesCount goto label2;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Series ");

        $stack7 = i + 1;

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>($stack9);

        i = i + 1;

        goto label1;

     label2:
        return $stack4;
    }

    public boolean equals(java.lang.Object)
    {
        org.jfree.data.xy.DefaultWindDataset this, that;
        java.lang.Object obj;
        boolean $stack3, $stack6, $stack9;
        java.util.List $stack4, $stack5, $stack7, $stack8;

        this := @this: org.jfree.data.xy.DefaultWindDataset;

        obj := @parameter0: java.lang.Object;

        if this != obj goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.data.xy.DefaultWindDataset;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.data.xy.DefaultWindDataset) obj;

        $stack5 = this.<org.jfree.data.xy.DefaultWindDataset: java.util.List seriesKeys>;

        $stack4 = that.<org.jfree.data.xy.DefaultWindDataset: java.util.List seriesKeys>;

        $stack6 = interfaceinvoke $stack5.<java.util.List: boolean equals(java.lang.Object)>($stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData>;

        $stack7 = that.<org.jfree.data.xy.DefaultWindDataset: java.util.List allSeriesData>;

        $stack9 = interfaceinvoke $stack8.<java.util.List: boolean equals(java.lang.Object)>($stack7);

        if $stack9 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }
}
