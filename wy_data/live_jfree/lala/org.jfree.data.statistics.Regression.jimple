public abstract class org.jfree.data.statistics.Regression extends java.lang.Object
{

    public void <init>()
    {
        org.jfree.data.statistics.Regression this;

        this := @this: org.jfree.data.statistics.Regression;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static double[] getOLSRegression(double[][])
    {
        double[][] data;
        int n, i;
        double $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, sxy, $stack25, xbar, $stack26, ybar, $stack27, $stack28, $stack29, $stack30, x, y, xx, xy, sumX, sumY, sumXX, sumXY, i#6;
        double[] result, $stack31, $stack32;
        java.lang.IllegalArgumentException $stack35;

        data := @parameter0: double[][];

        n = lengthof data;

        if n >= 2 goto label1;

        $stack35 = new java.lang.IllegalArgumentException;

        specialinvoke $stack35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not enough data.");

        throw $stack35;

     label1:
        sumX = 0.0;

        sumY = 0.0;

        sumXX = 0.0;

        sumXY = 0.0;

        i = 0;

     label2:
        if i >= n goto label3;

        $stack31 = data[i];

        x = $stack31[0];

        $stack32 = data[i];

        y = $stack32[1];

        sumX = sumX + x;

        sumY = sumY + y;

        xx = x * x;

        sumXX = sumXX + xx;

        xy = x * y;

        sumXY = sumXY + xy;

        i = i + 1;

        goto label2;

     label3:
        $stack20 = sumX * sumX;

        $stack19 = (double) n;

        $stack21 = $stack20 / $stack19;

        i#6 = sumXX - $stack21;

        $stack23 = sumX * sumY;

        $stack22 = (double) n;

        $stack24 = $stack23 / $stack22;

        sxy = sumXY - $stack24;

        $stack25 = (double) n;

        xbar = sumX / $stack25;

        $stack26 = (double) n;

        ybar = sumY / $stack26;

        result = newarray (double)[2];

        $stack27 = sxy / i#6;

        result[1] = $stack27;

        $stack28 = result[1];

        $stack29 = $stack28 * xbar;

        $stack30 = ybar - $stack29;

        result[0] = $stack30;

        return result;
    }

    public static double[] getOLSRegression(org.jfree.data.xy.XYDataset, int)
    {
        org.jfree.data.xy.XYDataset data;
        int series, n, i;
        double $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, sxy, $stack27, xbar, $stack28, ybar, $stack29, $stack30, $stack31, $stack32, x, y, xx, xy, sumX, sumY, sumXX, sumXY, i#6;
        double[] result;
        java.lang.IllegalArgumentException $stack37;

        data := @parameter0: org.jfree.data.xy.XYDataset;

        series := @parameter1: int;

        n = interfaceinvoke data.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(series);

        if n >= 2 goto label1;

        $stack37 = new java.lang.IllegalArgumentException;

        specialinvoke $stack37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not enough data.");

        throw $stack37;

     label1:
        sumX = 0.0;

        sumY = 0.0;

        sumXX = 0.0;

        sumXY = 0.0;

        i = 0;

     label2:
        if i >= n goto label3;

        x = interfaceinvoke data.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, i);

        y = interfaceinvoke data.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, i);

        sumX = sumX + x;

        sumY = sumY + y;

        xx = x * x;

        sumXX = sumXX + xx;

        xy = x * y;

        sumXY = sumXY + xy;

        i = i + 1;

        goto label2;

     label3:
        $stack22 = sumX * sumX;

        $stack21 = (double) n;

        $stack23 = $stack22 / $stack21;

        i#6 = sumXX - $stack23;

        $stack25 = sumX * sumY;

        $stack24 = (double) n;

        $stack26 = $stack25 / $stack24;

        sxy = sumXY - $stack26;

        $stack27 = (double) n;

        xbar = sumX / $stack27;

        $stack28 = (double) n;

        ybar = sumY / $stack28;

        result = newarray (double)[2];

        $stack29 = sxy / i#6;

        result[1] = $stack29;

        $stack30 = result[1];

        $stack31 = $stack30 * xbar;

        $stack32 = ybar - $stack31;

        result[0] = $stack32;

        return result;
    }

    public static double[] getPowerRegression(double[][])
    {
        double[][] data;
        int n, i;
        double $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, sxy, $stack25, xbar, $stack26, ybar, $stack27, $stack29, $stack30, $stack31, $stack32, $stack33, $stack35, x, $stack38, y, xx, xy, sumX, sumY, sumXX, sumXY, i#6;
        double[] result, $stack34, $stack37;
        java.lang.IllegalArgumentException $stack42;

        data := @parameter0: double[][];

        n = lengthof data;

        if n >= 2 goto label1;

        $stack42 = new java.lang.IllegalArgumentException;

        specialinvoke $stack42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not enough data.");

        throw $stack42;

     label1:
        sumX = 0.0;

        sumY = 0.0;

        sumXX = 0.0;

        sumXY = 0.0;

        i = 0;

     label2:
        if i >= n goto label3;

        $stack34 = data[i];

        $stack35 = $stack34[0];

        x = staticinvoke <java.lang.Math: double log(double)>($stack35);

        $stack37 = data[i];

        $stack38 = $stack37[1];

        y = staticinvoke <java.lang.Math: double log(double)>($stack38);

        sumX = sumX + x;

        sumY = sumY + y;

        xx = x * x;

        sumXX = sumXX + xx;

        xy = x * y;

        sumXY = sumXY + xy;

        i = i + 1;

        goto label2;

     label3:
        $stack20 = sumX * sumX;

        $stack19 = (double) n;

        $stack21 = $stack20 / $stack19;

        i#6 = sumXX - $stack21;

        $stack23 = sumX * sumY;

        $stack22 = (double) n;

        $stack24 = $stack23 / $stack22;

        sxy = sumXY - $stack24;

        $stack25 = (double) n;

        xbar = sumX / $stack25;

        $stack26 = (double) n;

        ybar = sumY / $stack26;

        result = newarray (double)[2];

        $stack27 = sxy / i#6;

        result[1] = $stack27;

        $stack29 = staticinvoke <java.lang.Math: double exp(double)>(1.0);

        $stack30 = result[1];

        $stack31 = $stack30 * xbar;

        $stack32 = ybar - $stack31;

        $stack33 = staticinvoke <java.lang.Math: double pow(double,double)>($stack29, $stack32);

        result[0] = $stack33;

        return result;
    }

    public static double[] getPowerRegression(org.jfree.data.xy.XYDataset, int)
    {
        org.jfree.data.xy.XYDataset data;
        int series, n, i;
        double $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, sxy, $stack27, xbar, $stack28, ybar, $stack29, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, x, $stack38, y, xx, xy, sumX, sumY, sumXX, sumXY, i#6;
        double[] result;
        java.lang.IllegalArgumentException $stack42;

        data := @parameter0: org.jfree.data.xy.XYDataset;

        series := @parameter1: int;

        n = interfaceinvoke data.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(series);

        if n >= 2 goto label1;

        $stack42 = new java.lang.IllegalArgumentException;

        specialinvoke $stack42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not enough data.");

        throw $stack42;

     label1:
        sumX = 0.0;

        sumY = 0.0;

        sumXX = 0.0;

        sumXY = 0.0;

        i = 0;

     label2:
        if i >= n goto label3;

        $stack36 = interfaceinvoke data.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, i);

        x = staticinvoke <java.lang.Math: double log(double)>($stack36);

        $stack38 = interfaceinvoke data.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, i);

        y = staticinvoke <java.lang.Math: double log(double)>($stack38);

        sumX = sumX + x;

        sumY = sumY + y;

        xx = x * x;

        sumXX = sumXX + xx;

        xy = x * y;

        sumXY = sumXY + xy;

        i = i + 1;

        goto label2;

     label3:
        $stack22 = sumX * sumX;

        $stack21 = (double) n;

        $stack23 = $stack22 / $stack21;

        i#6 = sumXX - $stack23;

        $stack25 = sumX * sumY;

        $stack24 = (double) n;

        $stack26 = $stack25 / $stack24;

        sxy = sumXY - $stack26;

        $stack27 = (double) n;

        xbar = sumX / $stack27;

        $stack28 = (double) n;

        ybar = sumY / $stack28;

        result = newarray (double)[2];

        $stack29 = sxy / i#6;

        result[1] = $stack29;

        $stack31 = staticinvoke <java.lang.Math: double exp(double)>(1.0);

        $stack32 = result[1];

        $stack33 = $stack32 * xbar;

        $stack34 = ybar - $stack33;

        $stack35 = staticinvoke <java.lang.Math: double pow(double,double)>($stack31, $stack34);

        result[0] = $stack35;

        return result;
    }

    public static double[] getPolynomialRegression(org.jfree.data.xy.XYDataset, int, int)
    {
        org.jfree.data.xy.XYDataset dataset;
        int series, itemCount, order, $stack26, $stack27, $stack28, $stack47, $stack49, $stack65, $stack66, $stack78, $stack79, $stack94, validItems, item, x#6, item#10, eq, coe;
        double[][] data, y#7, item#13;
        double[] result, $stack33, $stack39, $stack48, $stack50, $stack55, $stack62, $stack67, $stack69, $stack72, $stack74, $stack80, $stack81, $stack82, $stack92, $stack93, $stack110, $stack111;
        double $stack30, $stack31, $stack32, $stack34, $stack35, $stack36, $stack40, $stack41, $stack42, $stack43, $stack44, $stack51, $stack52, $stack56, $stack57, $stack58, $stack68, $stack73, $stack75, $stack83, $stack84, $stack85, $stack86, $stack87, $stack88, $stack89, $stack95, $stack96, $stack97, $stack98, $stack99, x, y, sumY, coe#17, eq#19, yObsSquare, yRegSquare, yCalc, item#25;
        java.lang.IllegalArgumentException $stack103, $stack112;
        boolean $stack106, $stack109;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        series := @parameter1: int;

        order := @parameter2: int;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(dataset, "dataset");

        itemCount = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(series);

        $stack26 = order + 1;

        if itemCount >= $stack26 goto label01;

        $stack112 = new java.lang.IllegalArgumentException;

        specialinvoke $stack112.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not enough data.");

        throw $stack112;

     label01:
        validItems = 0;

        data = newmultiarray (double)[2][itemCount];

        item = 0;

     label02:
        if item >= itemCount goto label04;

        x = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, item);

        y = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, item);

        $stack106 = staticinvoke <java.lang.Double: boolean isNaN(double)>(x);

        if $stack106 != 0 goto label03;

        $stack109 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y);

        if $stack109 != 0 goto label03;

        $stack110 = data[0];

        $stack110[validItems] = x;

        $stack111 = data[1];

        $stack111[validItems] = y;

        validItems = validItems + 1;

     label03:
        item = item + 1;

        goto label02;

     label04:
        $stack27 = order + 1;

        if validItems >= $stack27 goto label05;

        $stack103 = new java.lang.IllegalArgumentException;

        specialinvoke $stack103.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not enough data.");

        throw $stack103;

     label05:
        item = order + 1;

        x#6 = order + 2;

        $stack28 = item + 1;

        result = newarray (double)[$stack28];

        y#7 = newmultiarray (double)[item][x#6];

        sumY = 0.0;

        item#10 = 0;

     label06:
        if item#10 >= validItems goto label11;

        $stack72 = data[0];

        $stack73 = $stack72[item#10];

        $stack74 = data[1];

        $stack75 = $stack74[item#10];

        sumY = sumY + $stack75;

        eq = 0;

     label07:
        if eq >= item goto label10;

        coe = 0;

     label08:
        $stack78 = x#6 - 1;

        if coe >= $stack78 goto label09;

        $stack92 = y#7[eq];

        $stack97 = $stack92[coe];

        $stack93 = data[0];

        $stack96 = $stack93[item#10];

        $stack94 = eq + coe;

        $stack95 = (double) $stack94;

        $stack98 = staticinvoke <java.lang.Math: double pow(double,double)>($stack96, $stack95);

        $stack99 = $stack97 + $stack98;

        $stack92[coe] = $stack99;

        coe = coe + 1;

        goto label08;

     label09:
        $stack80 = y#7[eq];

        $stack79 = x#6 - 1;

        $stack85 = $stack80[$stack79];

        $stack81 = data[1];

        $stack86 = $stack81[item#10];

        $stack82 = data[0];

        $stack84 = $stack82[item#10];

        $stack83 = (double) eq;

        $stack87 = staticinvoke <java.lang.Math: double pow(double,double)>($stack84, $stack83);

        $stack88 = $stack86 * $stack87;

        $stack89 = $stack85 + $stack88;

        $stack80[$stack79] = $stack89;

        eq = eq + 1;

        goto label07;

     label10:
        item#10 = item#10 + 1;

        goto label06;

     label11:
        item#13 = staticinvoke <org.jfree.data.statistics.Regression: double[][] calculateSubMatrix(double[][])>(y#7);

        eq = 1;

     label12:
        if eq >= item goto label15;

        $stack62 = y#7[eq];

        $stack62[0] = 0.0;

        coe = 1;

     label13:
        if coe >= x#6 goto label14;

        $stack69 = y#7[eq];

        $stack65 = eq - 1;

        $stack67 = item#13[$stack65];

        $stack66 = coe - 1;

        $stack68 = $stack67[$stack66];

        $stack69[coe] = $stack68;

        coe = coe + 1;

        goto label13;

     label14:
        eq = eq + 1;

        goto label12;

     label15:
        eq = item - 1;

     label16:
        if eq <= -1 goto label19;

        $stack48 = y#7[eq];

        $stack47 = x#6 - 1;

        coe#17 = $stack48[$stack47];

        coe = eq;

     label17:
        $stack49 = x#6 - 1;

        if coe >= $stack49 goto label18;

        $stack55 = y#7[eq];

        $stack57 = $stack55[coe];

        $stack56 = result[coe];

        $stack58 = $stack57 * $stack56;

        coe#17 = coe#17 - $stack58;

        coe = coe + 1;

        goto label17;

     label18:
        $stack50 = y#7[eq];

        $stack51 = $stack50[eq];

        $stack52 = coe#17 / $stack51;

        result[eq] = $stack52;

        eq = eq + -1;

        goto label16;

     label19:
        $stack30 = (double) validItems;

        eq#19 = sumY / $stack30;

        yObsSquare = 0.0;

        yRegSquare = 0.0;

        item#10 = 0;

     label20:
        if item#10 >= validItems goto label23;

        yCalc = 0.0;

        eq = 0;

     label21:
        if eq >= item goto label22;

        $stack42 = result[eq];

        $stack39 = data[0];

        $stack41 = $stack39[item#10];

        $stack40 = (double) eq;

        $stack43 = staticinvoke <java.lang.Math: double pow(double,double)>($stack41, $stack40);

        $stack44 = $stack42 * $stack43;

        yCalc = yCalc + $stack44;

        eq = eq + 1;

        goto label21;

     label22:
        $stack31 = yCalc - eq#19;

        $stack32 = staticinvoke <java.lang.Math: double pow(double,double)>($stack31, 2.0);

        yRegSquare = yRegSquare + $stack32;

        $stack33 = data[1];

        $stack34 = $stack33[item#10];

        $stack35 = $stack34 - eq#19;

        $stack36 = staticinvoke <java.lang.Math: double pow(double,double)>($stack35, 2.0);

        yObsSquare = yObsSquare + $stack36;

        item#10 = item#10 + 1;

        goto label20;

     label23:
        item#25 = yRegSquare / yObsSquare;

        result[item] = item#25;

        return result;
    }

    private static double[][] calculateSubMatrix(double[][])
    {
        double[][] matrix, result, $stack34, eq#7;
        int equations, coefficients, $stack9, $stack10, $stack17, $stack21, $stack22, $stack29, $stack32, $stack33, $stack41, $stack44, $stack53, $stack60, eq, coe, factor#5, $stack15, temp#17;
        double[] $stack8, $stack11, $stack16, $stack23, $stack25, $stack35, $stack40, $stack42, $stack43, $stack45, $stack47, $stack48, $stack54, $stack55, $stack61, temp;
        double $stack12, $stack24, $stack36, $stack49, $stack50, $stack56, $stack57, $stack58, $stack59, factor;
        byte $stack13, $stack37;
        boolean eq#4;

        matrix := @parameter0: double[][];

        equations = lengthof matrix;

        $stack8 = matrix[0];

        coefficients = lengthof $stack8;

        $stack10 = equations - 1;

        $stack9 = coefficients - 1;

        result = newmultiarray (double)[$stack10][$stack9];

        eq = 1;

     label01:
        if eq >= equations goto label04;

        $stack47 = matrix[0];

        $stack50 = $stack47[0];

        $stack48 = matrix[eq];

        $stack49 = $stack48[0];

        factor = $stack50 / $stack49;

        coe = 1;

     label02:
        if coe >= coefficients goto label03;

        $stack53 = eq - 1;

        $stack61 = result[$stack53];

        $stack60 = coe - 1;

        $stack54 = matrix[0];

        $stack58 = $stack54[coe];

        $stack55 = matrix[eq];

        $stack56 = $stack55[coe];

        $stack57 = $stack56 * factor;

        $stack59 = $stack58 - $stack57;

        $stack61[$stack60] = $stack59;

        coe = coe + 1;

        goto label02;

     label03:
        eq = eq + 1;

        goto label01;

     label04:
        if equations != 1 goto label05;

        return result;

     label05:
        $stack11 = result[0];

        $stack12 = $stack11[0];

        $stack13 = $stack12 cmpl 0.0;

        if $stack13 != 0 goto label09;

        eq#4 = 0;

        factor#5 = 0;

     label06:
        $stack29 = lengthof result;

        if factor#5 >= $stack29 goto label08;

        $stack35 = result[factor#5];

        $stack36 = $stack35[0];

        $stack37 = $stack36 cmpl 0.0;

        if $stack37 == 0 goto label07;

        eq#4 = 1;

        temp = result[0];

        $stack43 = result[factor#5];

        $stack42 = result[0];

        $stack40 = result[factor#5];

        $stack41 = lengthof $stack40;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack43, 0, $stack42, 0, $stack41);

        $stack45 = result[factor#5];

        $stack44 = lengthof temp;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(temp, 0, $stack45, 0, $stack44);

        goto label08;

     label07:
        factor#5 = factor#5 + 1;

        goto label06;

     label08:
        if eq#4 != 0 goto label09;

        $stack33 = equations - 1;

        $stack32 = coefficients - 1;

        $stack34 = newmultiarray (double)[$stack33][$stack32];

        return $stack34;

     label09:
        eq#7 = staticinvoke <org.jfree.data.statistics.Regression: double[][] calculateSubMatrix(double[][])>(result);

        factor#5 = 1;

     label10:
        $stack15 = equations - 1;

        if factor#5 >= $stack15 goto label13;

        $stack16 = result[factor#5];

        $stack16[0] = 0.0;

        temp#17 = 1;

     label11:
        $stack17 = coefficients - 1;

        if temp#17 >= $stack17 goto label12;

        $stack25 = result[factor#5];

        $stack21 = factor#5 - 1;

        $stack23 = eq#7[$stack21];

        $stack22 = temp#17 - 1;

        $stack24 = $stack23[$stack22];

        $stack25[temp#17] = $stack24;

        temp#17 = temp#17 + 1;

        goto label11;

     label12:
        factor#5 = factor#5 + 1;

        goto label10;

     label13:
        return result;
    }
}
