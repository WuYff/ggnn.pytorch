public class org.jfree.chart.plot.DefaultDrawingSupplier extends java.lang.Object implements org.jfree.chart.plot.DrawingSupplier, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.awt.Paint[] DEFAULT_PAINT_SEQUENCE;
    public static final java.awt.Paint[] DEFAULT_OUTLINE_PAINT_SEQUENCE;
    public static final java.awt.Paint[] DEFAULT_FILL_PAINT_SEQUENCE;
    public static final java.awt.Stroke[] DEFAULT_STROKE_SEQUENCE;
    public static final java.awt.Stroke[] DEFAULT_OUTLINE_STROKE_SEQUENCE;
    public static final java.awt.Shape[] DEFAULT_SHAPE_SEQUENCE;
    private transient java.awt.Paint[] paintSequence;
    private int paintIndex;
    private transient java.awt.Paint[] outlinePaintSequence;
    private int outlinePaintIndex;
    private transient java.awt.Paint[] fillPaintSequence;
    private int fillPaintIndex;
    private transient java.awt.Stroke[] strokeSequence;
    private int strokeIndex;
    private transient java.awt.Stroke[] outlineStrokeSequence;
    private int outlineStrokeIndex;
    private transient java.awt.Shape[] shapeSequence;
    private int shapeIndex;

    public void <init>()
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Shape[] $stack1;
        java.awt.Stroke[] $stack2, $stack3;
        java.awt.Paint[] $stack4, $stack5, $stack6;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        $stack6 = <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] DEFAULT_PAINT_SEQUENCE>;

        $stack5 = <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] DEFAULT_FILL_PAINT_SEQUENCE>;

        $stack4 = <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] DEFAULT_OUTLINE_PAINT_SEQUENCE>;

        $stack3 = <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] DEFAULT_STROKE_SEQUENCE>;

        $stack2 = <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] DEFAULT_OUTLINE_STROKE_SEQUENCE>;

        $stack1 = <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] DEFAULT_SHAPE_SEQUENCE>;

        specialinvoke this.<org.jfree.chart.plot.DefaultDrawingSupplier: void <init>(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])>($stack6, $stack5, $stack4, $stack3, $stack2, $stack1);

        return;
    }

    public void <init>(java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Paint[] paintSequence, $stack6, outlinePaintSequence;
        java.awt.Stroke[] strokeSequence, outlineStrokeSequence;
        java.awt.Shape[] shapeSequence;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        paintSequence := @parameter0: java.awt.Paint[];

        outlinePaintSequence := @parameter1: java.awt.Paint[];

        strokeSequence := @parameter2: java.awt.Stroke[];

        outlineStrokeSequence := @parameter3: java.awt.Stroke[];

        shapeSequence := @parameter4: java.awt.Shape[];

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence> = paintSequence;

        $stack6 = <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] DEFAULT_FILL_PAINT_SEQUENCE>;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] fillPaintSequence> = $stack6;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence> = outlinePaintSequence;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence> = strokeSequence;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence> = outlineStrokeSequence;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence> = shapeSequence;

        return;
    }

    public void <init>(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Paint[] paintSequence, fillPaintSequence, outlinePaintSequence;
        java.awt.Stroke[] strokeSequence, outlineStrokeSequence;
        java.awt.Shape[] shapeSequence;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        paintSequence := @parameter0: java.awt.Paint[];

        fillPaintSequence := @parameter1: java.awt.Paint[];

        outlinePaintSequence := @parameter2: java.awt.Paint[];

        strokeSequence := @parameter3: java.awt.Stroke[];

        outlineStrokeSequence := @parameter4: java.awt.Stroke[];

        shapeSequence := @parameter5: java.awt.Shape[];

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence> = paintSequence;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] fillPaintSequence> = fillPaintSequence;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence> = outlinePaintSequence;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence> = strokeSequence;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence> = outlineStrokeSequence;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence> = shapeSequence;

        return;
    }

    public java.awt.Paint getNextPaint()
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Paint[] $stack2, $stack6;
        int $stack3, $stack4, $stack5, $stack7, $stack8;
        java.awt.Paint result;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        $stack6 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence>;

        $stack4 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int paintIndex>;

        $stack2 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence>;

        $stack3 = lengthof $stack2;

        $stack5 = $stack4 % $stack3;

        result = $stack6[$stack5];

        $stack7 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int paintIndex>;

        $stack8 = $stack7 + 1;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: int paintIndex> = $stack8;

        return result;
    }

    public java.awt.Paint getNextOutlinePaint()
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Paint[] $stack2, $stack6;
        int $stack3, $stack4, $stack5, $stack7, $stack8;
        java.awt.Paint result;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        $stack6 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence>;

        $stack4 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlinePaintIndex>;

        $stack2 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence>;

        $stack3 = lengthof $stack2;

        $stack5 = $stack4 % $stack3;

        result = $stack6[$stack5];

        $stack7 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlinePaintIndex>;

        $stack8 = $stack7 + 1;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlinePaintIndex> = $stack8;

        return result;
    }

    public java.awt.Paint getNextFillPaint()
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Paint[] $stack2, $stack6;
        int $stack3, $stack4, $stack5, $stack7, $stack8;
        java.awt.Paint result;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        $stack6 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] fillPaintSequence>;

        $stack4 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int fillPaintIndex>;

        $stack2 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] fillPaintSequence>;

        $stack3 = lengthof $stack2;

        $stack5 = $stack4 % $stack3;

        result = $stack6[$stack5];

        $stack7 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int fillPaintIndex>;

        $stack8 = $stack7 + 1;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: int fillPaintIndex> = $stack8;

        return result;
    }

    public java.awt.Stroke getNextStroke()
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Stroke[] $stack2, $stack6;
        int $stack3, $stack4, $stack5, $stack7, $stack8;
        java.awt.Stroke result;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        $stack6 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence>;

        $stack4 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int strokeIndex>;

        $stack2 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence>;

        $stack3 = lengthof $stack2;

        $stack5 = $stack4 % $stack3;

        result = $stack6[$stack5];

        $stack7 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int strokeIndex>;

        $stack8 = $stack7 + 1;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: int strokeIndex> = $stack8;

        return result;
    }

    public java.awt.Stroke getNextOutlineStroke()
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Stroke[] $stack2, $stack6;
        int $stack3, $stack4, $stack5, $stack7, $stack8;
        java.awt.Stroke result;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        $stack6 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence>;

        $stack4 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlineStrokeIndex>;

        $stack2 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence>;

        $stack3 = lengthof $stack2;

        $stack5 = $stack4 % $stack3;

        result = $stack6[$stack5];

        $stack7 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlineStrokeIndex>;

        $stack8 = $stack7 + 1;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlineStrokeIndex> = $stack8;

        return result;
    }

    public java.awt.Shape getNextShape()
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Shape[] $stack2, $stack6;
        int $stack3, $stack4, $stack5, $stack7, $stack8;
        java.awt.Shape result;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        $stack6 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence>;

        $stack4 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int shapeIndex>;

        $stack2 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence>;

        $stack3 = lengthof $stack2;

        $stack5 = $stack4 % $stack3;

        result = $stack6[$stack5];

        $stack7 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int shapeIndex>;

        $stack8 = $stack7 + 1;

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: int shapeIndex> = $stack8;

        return result;
    }

    public static java.awt.Shape[] createStandardSeriesShapes()
    {
        java.awt.Shape[] result;
        double delta, $stack8, $stack9, $stack12, $stack13, $stack15, $stack17, $stack21, $stack23, $stack28, $stack29, $stack30, $stack31, $stack33, $stack35, $stack36, $stack41, $stack42, $stack43, $stack44, $stack46, $stack47, $stack49, $stack54, $stack55, $stack56, $stack57, $stack59, $stack61;
        java.awt.geom.Rectangle2D$Double $stack7, $stack27, $stack53;
        java.awt.geom.Ellipse2D$Double $stack11, $stack40;
        java.awt.Polygon $stack19, $stack25, $stack38, $stack51, $stack63;
        int[] xpoints, ypoints;

        result = newarray (java.awt.Shape)[10];

        delta = 6.0 / 2.0;

        $stack7 = new java.awt.geom.Rectangle2D$Double;

        $stack9 = neg delta;

        $stack8 = neg delta;

        specialinvoke $stack7.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack9, $stack8, 6.0, 6.0);

        result[0] = $stack7;

        $stack11 = new java.awt.geom.Ellipse2D$Double;

        $stack13 = neg delta;

        $stack12 = neg delta;

        specialinvoke $stack11.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack13, $stack12, 6.0, 6.0);

        result[1] = $stack11;

        $stack15 = neg delta;

        xpoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>(0.0, delta, $stack15);

        $stack17 = neg delta;

        ypoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>($stack17, delta, delta);

        $stack19 = new java.awt.Polygon;

        specialinvoke $stack19.<java.awt.Polygon: void <init>(int[],int[],int)>(xpoints, ypoints, 3);

        result[2] = $stack19;

        $stack21 = neg delta;

        xpoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double,double)>(0.0, delta, 0.0, $stack21);

        $stack23 = neg delta;

        ypoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double,double)>($stack23, 0.0, delta, 0.0);

        $stack25 = new java.awt.Polygon;

        specialinvoke $stack25.<java.awt.Polygon: void <init>(int[],int[],int)>(xpoints, ypoints, 4);

        result[3] = $stack25;

        $stack27 = new java.awt.geom.Rectangle2D$Double;

        $stack31 = neg delta;

        $stack28 = neg delta;

        $stack30 = $stack28 / 2.0;

        $stack29 = 6.0 / 2.0;

        specialinvoke $stack27.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack31, $stack30, 6.0, $stack29);

        result[4] = $stack27;

        $stack33 = neg delta;

        xpoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>($stack33, delta, 0.0);

        $stack36 = neg delta;

        $stack35 = neg delta;

        ypoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>($stack36, $stack35, delta);

        $stack38 = new java.awt.Polygon;

        specialinvoke $stack38.<java.awt.Polygon: void <init>(int[],int[],int)>(xpoints, ypoints, 3);

        result[5] = $stack38;

        $stack40 = new java.awt.geom.Ellipse2D$Double;

        $stack44 = neg delta;

        $stack41 = neg delta;

        $stack43 = $stack41 / 2.0;

        $stack42 = 6.0 / 2.0;

        specialinvoke $stack40.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack44, $stack43, 6.0, $stack42);

        result[6] = $stack40;

        $stack47 = neg delta;

        $stack46 = neg delta;

        xpoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>($stack47, delta, $stack46);

        $stack49 = neg delta;

        ypoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>($stack49, 0.0, delta);

        $stack51 = new java.awt.Polygon;

        specialinvoke $stack51.<java.awt.Polygon: void <init>(int[],int[],int)>(xpoints, ypoints, 3);

        result[7] = $stack51;

        $stack53 = new java.awt.geom.Rectangle2D$Double;

        $stack54 = neg delta;

        $stack57 = $stack54 / 2.0;

        $stack56 = neg delta;

        $stack55 = 6.0 / 2.0;

        specialinvoke $stack53.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack57, $stack56, $stack55, 6.0);

        result[8] = $stack53;

        $stack59 = neg delta;

        xpoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>($stack59, delta, delta);

        $stack61 = neg delta;

        ypoints = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>(0.0, $stack61, delta);

        $stack63 = new java.awt.Polygon;

        specialinvoke $stack63.<java.awt.Polygon: void <init>(int[],int[],int)>(xpoints, ypoints, 3);

        result[9] = $stack63;

        return result;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.plot.DefaultDrawingSupplier this, that;
        boolean $stack3, $stack6, $stack11, $stack16, $stack21, $stack26;
        java.awt.Paint[] $stack4, $stack5, $stack9, $stack10;
        int $stack7, $stack8, $stack12, $stack13, $stack17, $stack18, $stack22, $stack23, $stack27, $stack28;
        java.awt.Stroke[] $stack14, $stack15, $stack19, $stack20;
        java.awt.Shape[] $stack24, $stack25;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.plot.DefaultDrawingSupplier;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.plot.DefaultDrawingSupplier) obj;

        $stack5 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence>;

        $stack4 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack5, $stack4);

        if $stack6 != 0 goto label03;

        return 0;

     label03:
        $stack8 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int paintIndex>;

        $stack7 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: int paintIndex>;

        if $stack8 == $stack7 goto label04;

        return 0;

     label04:
        $stack10 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence>;

        $stack9 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence>;

        $stack11 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack10, $stack9);

        if $stack11 != 0 goto label05;

        return 0;

     label05:
        $stack13 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlinePaintIndex>;

        $stack12 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlinePaintIndex>;

        if $stack13 == $stack12 goto label06;

        return 0;

     label06:
        $stack15 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence>;

        $stack14 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence>;

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack15, $stack14);

        if $stack16 != 0 goto label07;

        return 0;

     label07:
        $stack18 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int strokeIndex>;

        $stack17 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: int strokeIndex>;

        if $stack18 == $stack17 goto label08;

        return 0;

     label08:
        $stack20 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence>;

        $stack19 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence>;

        $stack21 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack20, $stack19);

        if $stack21 != 0 goto label09;

        return 0;

     label09:
        $stack23 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlineStrokeIndex>;

        $stack22 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: int outlineStrokeIndex>;

        if $stack23 == $stack22 goto label10;

        return 0;

     label10:
        $stack25 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence>;

        $stack24 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence>;

        $stack26 = specialinvoke this.<org.jfree.chart.plot.DefaultDrawingSupplier: boolean equalShapes(java.awt.Shape[],java.awt.Shape[])>($stack25, $stack24);

        if $stack26 != 0 goto label11;

        return 0;

     label11:
        $stack28 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: int shapeIndex>;

        $stack27 = that.<org.jfree.chart.plot.DefaultDrawingSupplier: int shapeIndex>;

        if $stack28 == $stack27 goto label12;

        return 0;

     label12:
        return 1;
    }

    private boolean equalShapes(java.awt.Shape[], java.awt.Shape[])
    {
        java.awt.Shape[] s1, s2;
        int $stack4, $stack5, $stack6, i;
        java.awt.Shape $stack7, $stack8;
        boolean $stack9, $stack12;
        org.jfree.chart.plot.DefaultDrawingSupplier this;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        s1 := @parameter0: java.awt.Shape[];

        s2 := @parameter1: java.awt.Shape[];

        if s1 != null goto label3;

        if s2 != null goto label1;

        $stack12 = 1;

        goto label2;

     label1:
        $stack12 = 0;

     label2:
        return $stack12;

     label3:
        if s2 != null goto label4;

        return 0;

     label4:
        $stack5 = lengthof s1;

        $stack4 = lengthof s2;

        if $stack5 == $stack4 goto label5;

        return 0;

     label5:
        i = 0;

     label6:
        $stack6 = lengthof s1;

        if i >= $stack6 goto label8;

        $stack8 = s1[i];

        $stack7 = s2[i];

        $stack9 = staticinvoke <org.jfree.chart.util.ShapeUtils: boolean equal(java.awt.Shape,java.awt.Shape)>($stack8, $stack7);

        if $stack9 != 0 goto label7;

        return 0;

     label7:
        i = i + 1;

        goto label6;

     label8:
        return 1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Paint[] $stack8, $stack9, $stack25, $stack29;
        int paintCount, i, i#3;
        java.awt.Stroke[] $stack10, $stack11, $stack17, $stack21;
        java.awt.Shape[] $stack12, $stack13;
        java.awt.Shape $stack14;
        java.awt.Stroke $stack18, $stack22;
        java.awt.Paint $stack26, $stack30;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack8 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence>;

        paintCount = lengthof $stack8;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>(paintCount);

        i = 0;

     label01:
        if i >= paintCount goto label02;

        $stack29 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence>;

        $stack30 = $stack29[i];

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack30, stream);

        i = i + 1;

        goto label01;

     label02:
        $stack9 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence>;

        i = lengthof $stack9;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>(i);

        i#3 = 0;

     label03:
        if i#3 >= i goto label04;

        $stack25 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence>;

        $stack26 = $stack25[i#3];

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack26, stream);

        i#3 = i#3 + 1;

        goto label03;

     label04:
        $stack10 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence>;

        i#3 = lengthof $stack10;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>(i#3);

        i = 0;

     label05:
        if i >= i#3 goto label06;

        $stack21 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence>;

        $stack22 = $stack21[i];

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack22, stream);

        i = i + 1;

        goto label05;

     label06:
        $stack11 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence>;

        i#3 = lengthof $stack11;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>(i#3);

        i = 0;

     label07:
        if i >= i#3 goto label08;

        $stack17 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence>;

        $stack18 = $stack17[i];

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack18, stream);

        i = i + 1;

        goto label07;

     label08:
        $stack12 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence>;

        i#3 = lengthof $stack12;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>(i#3);

        i = 0;

     label09:
        if i >= i#3 goto label10;

        $stack13 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence>;

        $stack14 = $stack13[i];

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack14, stream);

        i = i + 1;

        goto label09;

     label10:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        int paintCount, i, i#3;
        org.jfree.chart.plot.DefaultDrawingSupplier this;
        java.awt.Paint[] $stack9, $stack11, $stack30, $stack34;
        java.awt.Stroke[] $stack13, $stack15, $stack22, $stack26;
        java.awt.Shape[] $stack17, $stack18;
        java.awt.Shape $stack19;
        java.awt.Stroke $stack23, $stack27;
        java.awt.Paint $stack31, $stack35;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        paintCount = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        $stack9 = newarray (java.awt.Paint)[paintCount];

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence> = $stack9;

        i = 0;

     label01:
        if i >= paintCount goto label02;

        $stack34 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] paintSequence>;

        $stack35 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        $stack34[i] = $stack35;

        i = i + 1;

        goto label01;

     label02:
        i = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        $stack11 = newarray (java.awt.Paint)[i];

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence> = $stack11;

        i#3 = 0;

     label03:
        if i#3 >= i goto label04;

        $stack30 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] outlinePaintSequence>;

        $stack31 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        $stack30[i#3] = $stack31;

        i#3 = i#3 + 1;

        goto label03;

     label04:
        i#3 = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        $stack13 = newarray (java.awt.Stroke)[i#3];

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence> = $stack13;

        i = 0;

     label05:
        if i >= i#3 goto label06;

        $stack26 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] strokeSequence>;

        $stack27 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        $stack26[i] = $stack27;

        i = i + 1;

        goto label05;

     label06:
        i#3 = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        $stack15 = newarray (java.awt.Stroke)[i#3];

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence> = $stack15;

        i = 0;

     label07:
        if i >= i#3 goto label08;

        $stack22 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] outlineStrokeSequence>;

        $stack23 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        $stack22[i] = $stack23;

        i = i + 1;

        goto label07;

     label08:
        i#3 = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        $stack17 = newarray (java.awt.Shape)[i#3];

        this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence> = $stack17;

        i = 0;

     label09:
        if i >= i#3 goto label10;

        $stack18 = this.<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] shapeSequence>;

        $stack19 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        $stack18[i] = $stack19;

        i = i + 1;

        goto label09;

     label10:
        return;
    }

    private static int[] intArray(double, double, double)
    {
        int[] $stack6;
        double a, b, c;
        int $stack7, $stack8, $stack9;

        a := @parameter0: double;

        b := @parameter1: double;

        c := @parameter2: double;

        $stack6 = newarray (int)[3];

        $stack7 = (int) a;

        $stack6[0] = $stack7;

        $stack8 = (int) b;

        $stack6[1] = $stack8;

        $stack9 = (int) c;

        $stack6[2] = $stack9;

        return $stack6;
    }

    private static int[] intArray(double, double, double, double)
    {
        int[] $stack8;
        double a, b, c, d;
        int $stack9, $stack10, $stack11, $stack12;

        a := @parameter0: double;

        b := @parameter1: double;

        c := @parameter2: double;

        d := @parameter3: double;

        $stack8 = newarray (int)[4];

        $stack9 = (int) a;

        $stack8[0] = $stack9;

        $stack10 = (int) b;

        $stack8[1] = $stack10;

        $stack11 = (int) c;

        $stack8[2] = $stack11;

        $stack12 = (int) d;

        $stack8[3] = $stack12;

        return $stack8;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.plot.DefaultDrawingSupplier this, clone;
        java.lang.Object $stack2;

        this := @this: org.jfree.chart.plot.DefaultDrawingSupplier;

        $stack2 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        clone = (org.jfree.chart.plot.DefaultDrawingSupplier) $stack2;

        return clone;
    }

    static void <clinit>()
    {
        java.awt.Paint[] $stack0, $stack1, $stack3;
        java.awt.Color $stack2, $stack4;
        java.awt.Stroke[] $stack5, $stack8;
        java.awt.BasicStroke $stack6, $stack9;
        java.awt.Shape[] $stack11;

        <org.jfree.chart.plot.DefaultDrawingSupplier: long serialVersionUID> = -7339847061039422538L;

        $stack0 = staticinvoke <org.jfree.chart.ChartColor: java.awt.Paint[] createDefaultPaintArray()>();

        <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] DEFAULT_PAINT_SEQUENCE> = $stack0;

        $stack1 = newarray (java.awt.Paint)[1];

        $stack2 = <java.awt.Color: java.awt.Color LIGHT_GRAY>;

        $stack1[0] = $stack2;

        <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] DEFAULT_OUTLINE_PAINT_SEQUENCE> = $stack1;

        $stack3 = newarray (java.awt.Paint)[1];

        $stack4 = <java.awt.Color: java.awt.Color WHITE>;

        $stack3[0] = $stack4;

        <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Paint[] DEFAULT_FILL_PAINT_SEQUENCE> = $stack3;

        $stack5 = newarray (java.awt.Stroke)[1];

        $stack6 = new java.awt.BasicStroke;

        specialinvoke $stack6.<java.awt.BasicStroke: void <init>(float,int,int)>(1.0F, 2, 2);

        $stack5[0] = $stack6;

        <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] DEFAULT_STROKE_SEQUENCE> = $stack5;

        $stack8 = newarray (java.awt.Stroke)[1];

        $stack9 = new java.awt.BasicStroke;

        specialinvoke $stack9.<java.awt.BasicStroke: void <init>(float,int,int)>(1.0F, 2, 2);

        $stack8[0] = $stack9;

        <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Stroke[] DEFAULT_OUTLINE_STROKE_SEQUENCE> = $stack8;

        $stack11 = staticinvoke <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] createStandardSeriesShapes()>();

        <org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] DEFAULT_SHAPE_SEQUENCE> = $stack11;

        return;
    }
}
