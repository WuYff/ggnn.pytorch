public class org.jfree.chart.block.AbstractBlock extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private java.lang.String id;
    private org.jfree.chart.ui.RectangleInsets margin;
    private org.jfree.chart.block.BlockFrame frame;
    private org.jfree.chart.ui.RectangleInsets padding;
    private double width;
    private double height;
    private transient java.awt.geom.Rectangle2D bounds;

    protected void <init>()
    {
        org.jfree.chart.block.AbstractBlock this;
        java.awt.geom.Rectangle2D$Float $stack1;
        org.jfree.chart.ui.RectangleInsets $stack2, $stack4;
        org.jfree.chart.block.BlockBorder $stack3;

        this := @this: org.jfree.chart.block.AbstractBlock;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.jfree.chart.block.AbstractBlock: java.lang.String id> = null;

        this.<org.jfree.chart.block.AbstractBlock: double width> = 0.0;

        this.<org.jfree.chart.block.AbstractBlock: double height> = 0.0;

        $stack1 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $stack1.<java.awt.geom.Rectangle2D$Float: void <init>()>();

        this.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds> = $stack1;

        $stack2 = <org.jfree.chart.ui.RectangleInsets: org.jfree.chart.ui.RectangleInsets ZERO_INSETS>;

        this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin> = $stack2;

        $stack3 = <org.jfree.chart.block.BlockBorder: org.jfree.chart.block.BlockBorder NONE>;

        this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame> = $stack3;

        $stack4 = <org.jfree.chart.ui.RectangleInsets: org.jfree.chart.ui.RectangleInsets ZERO_INSETS>;

        this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding> = $stack4;

        return;
    }

    public java.lang.String getID()
    {
        org.jfree.chart.block.AbstractBlock this;
        java.lang.String $stack1;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack1 = this.<org.jfree.chart.block.AbstractBlock: java.lang.String id>;

        return $stack1;
    }

    public void setID(java.lang.String)
    {
        org.jfree.chart.block.AbstractBlock this;
        java.lang.String id;

        this := @this: org.jfree.chart.block.AbstractBlock;

        id := @parameter0: java.lang.String;

        this.<org.jfree.chart.block.AbstractBlock: java.lang.String id> = id;

        return;
    }

    public double getWidth()
    {
        org.jfree.chart.block.AbstractBlock this;
        double $stack1;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack1 = this.<org.jfree.chart.block.AbstractBlock: double width>;

        return $stack1;
    }

    public void setWidth(double)
    {
        org.jfree.chart.block.AbstractBlock this;
        double width;

        this := @this: org.jfree.chart.block.AbstractBlock;

        width := @parameter0: double;

        this.<org.jfree.chart.block.AbstractBlock: double width> = width;

        return;
    }

    public double getHeight()
    {
        org.jfree.chart.block.AbstractBlock this;
        double $stack1;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack1 = this.<org.jfree.chart.block.AbstractBlock: double height>;

        return $stack1;
    }

    public void setHeight(double)
    {
        org.jfree.chart.block.AbstractBlock this;
        double height;

        this := @this: org.jfree.chart.block.AbstractBlock;

        height := @parameter0: double;

        this.<org.jfree.chart.block.AbstractBlock: double height> = height;

        return;
    }

    public org.jfree.chart.ui.RectangleInsets getMargin()
    {
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack1 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        return $stack1;
    }

    public void setMargin(org.jfree.chart.ui.RectangleInsets)
    {
        org.jfree.chart.ui.RectangleInsets margin;
        org.jfree.chart.block.AbstractBlock this;

        this := @this: org.jfree.chart.block.AbstractBlock;

        margin := @parameter0: org.jfree.chart.ui.RectangleInsets;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(margin, "margin");

        this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin> = margin;

        return;
    }

    public void setMargin(double, double, double, double)
    {
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.ui.RectangleInsets $stack9;
        double top, left, bottom, right;

        this := @this: org.jfree.chart.block.AbstractBlock;

        top := @parameter0: double;

        left := @parameter1: double;

        bottom := @parameter2: double;

        right := @parameter3: double;

        $stack9 = new org.jfree.chart.ui.RectangleInsets;

        specialinvoke $stack9.<org.jfree.chart.ui.RectangleInsets: void <init>(double,double,double,double)>(top, left, bottom, right);

        virtualinvoke this.<org.jfree.chart.block.AbstractBlock: void setMargin(org.jfree.chart.ui.RectangleInsets)>($stack9);

        return;
    }

    public void setBorder(double, double, double, double)
    {
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.block.BlockBorder $stack9;
        double top, left, bottom, right;

        this := @this: org.jfree.chart.block.AbstractBlock;

        top := @parameter0: double;

        left := @parameter1: double;

        bottom := @parameter2: double;

        right := @parameter3: double;

        $stack9 = new org.jfree.chart.block.BlockBorder;

        specialinvoke $stack9.<org.jfree.chart.block.BlockBorder: void <init>(double,double,double,double)>(top, left, bottom, right);

        virtualinvoke this.<org.jfree.chart.block.AbstractBlock: void setFrame(org.jfree.chart.block.BlockFrame)>($stack9);

        return;
    }

    public org.jfree.chart.block.BlockFrame getFrame()
    {
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.block.BlockFrame $stack1;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack1 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        return $stack1;
    }

    public void setFrame(org.jfree.chart.block.BlockFrame)
    {
        org.jfree.chart.block.BlockFrame frame;
        org.jfree.chart.block.AbstractBlock this;

        this := @this: org.jfree.chart.block.AbstractBlock;

        frame := @parameter0: org.jfree.chart.block.BlockFrame;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(frame, "frame");

        this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame> = frame;

        return;
    }

    public org.jfree.chart.ui.RectangleInsets getPadding()
    {
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack1 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        return $stack1;
    }

    public void setPadding(org.jfree.chart.ui.RectangleInsets)
    {
        org.jfree.chart.ui.RectangleInsets padding;
        org.jfree.chart.block.AbstractBlock this;

        this := @this: org.jfree.chart.block.AbstractBlock;

        padding := @parameter0: org.jfree.chart.ui.RectangleInsets;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(padding, "padding");

        this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding> = padding;

        return;
    }

    public void setPadding(double, double, double, double)
    {
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.ui.RectangleInsets $stack9;
        double top, left, bottom, right;

        this := @this: org.jfree.chart.block.AbstractBlock;

        top := @parameter0: double;

        left := @parameter1: double;

        bottom := @parameter2: double;

        right := @parameter3: double;

        $stack9 = new org.jfree.chart.ui.RectangleInsets;

        specialinvoke $stack9.<org.jfree.chart.ui.RectangleInsets: void <init>(double,double,double,double)>(top, left, bottom, right);

        virtualinvoke this.<org.jfree.chart.block.AbstractBlock: void setPadding(org.jfree.chart.ui.RectangleInsets)>($stack9);

        return;
    }

    public double getContentXOffset()
    {
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.ui.RectangleInsets $stack1, $stack4, $stack6;
        double $stack2, $stack5, $stack7, $stack8, $stack9;
        org.jfree.chart.block.BlockFrame $stack3;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack1 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        $stack2 = virtualinvoke $stack1.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack3 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack4 = interfaceinvoke $stack3.<org.jfree.chart.block.BlockFrame: org.jfree.chart.ui.RectangleInsets getInsets()>();

        $stack5 = virtualinvoke $stack4.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack7 = $stack2 + $stack5;

        $stack6 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        $stack8 = virtualinvoke $stack6.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack9 = $stack7 + $stack8;

        return $stack9;
    }

    public double getContentYOffset()
    {
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.ui.RectangleInsets $stack1, $stack4, $stack6;
        double $stack2, $stack5, $stack7, $stack8, $stack9;
        org.jfree.chart.block.BlockFrame $stack3;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack1 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        $stack2 = virtualinvoke $stack1.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack3 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack4 = interfaceinvoke $stack3.<org.jfree.chart.block.BlockFrame: org.jfree.chart.ui.RectangleInsets getInsets()>();

        $stack5 = virtualinvoke $stack4.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack7 = $stack2 + $stack5;

        $stack6 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        $stack8 = virtualinvoke $stack6.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack9 = $stack7 + $stack8;

        return $stack9;
    }

    public org.jfree.chart.ui.Size2D arrange(java.awt.Graphics2D)
    {
        org.jfree.chart.block.AbstractBlock this;
        java.awt.Graphics2D g2;
        org.jfree.chart.block.RectangleConstraint $stack2;
        org.jfree.chart.ui.Size2D $stack3;

        this := @this: org.jfree.chart.block.AbstractBlock;

        g2 := @parameter0: java.awt.Graphics2D;

        $stack2 = <org.jfree.chart.block.RectangleConstraint: org.jfree.chart.block.RectangleConstraint NONE>;

        $stack3 = virtualinvoke this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>(g2, $stack2);

        return $stack3;
    }

    public org.jfree.chart.ui.Size2D arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)
    {
        org.jfree.chart.ui.Size2D $stack4, $stack7;
        org.jfree.chart.block.AbstractBlock this;
        double $stack5, $stack6;
        org.jfree.chart.block.RectangleConstraint constraint;
        java.awt.Graphics2D g2;

        this := @this: org.jfree.chart.block.AbstractBlock;

        g2 := @parameter0: java.awt.Graphics2D;

        constraint := @parameter1: org.jfree.chart.block.RectangleConstraint;

        $stack4 = new org.jfree.chart.ui.Size2D;

        $stack5 = virtualinvoke this.<org.jfree.chart.block.AbstractBlock: double getWidth()>();

        $stack6 = virtualinvoke this.<org.jfree.chart.block.AbstractBlock: double getHeight()>();

        specialinvoke $stack4.<org.jfree.chart.ui.Size2D: void <init>(double,double)>($stack5, $stack6);

        $stack7 = virtualinvoke constraint.<org.jfree.chart.block.RectangleConstraint: org.jfree.chart.ui.Size2D calculateConstrainedSize(org.jfree.chart.ui.Size2D)>($stack4);

        return $stack7;
    }

    public java.awt.geom.Rectangle2D getBounds()
    {
        org.jfree.chart.block.AbstractBlock this;
        java.awt.geom.Rectangle2D $stack1;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack1 = this.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds>;

        return $stack1;
    }

    public void setBounds(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D bounds;
        org.jfree.chart.block.AbstractBlock this;

        this := @this: org.jfree.chart.block.AbstractBlock;

        bounds := @parameter0: java.awt.geom.Rectangle2D;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(bounds, "bounds");

        this.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds> = bounds;

        return;
    }

    protected double trimToContentWidth(double)
    {
        org.jfree.chart.block.AbstractBlock this;
        double fixedWidth, $stack12, result;
        org.jfree.chart.ui.RectangleInsets $stack5, $stack8, $stack10;
        org.jfree.chart.block.BlockFrame $stack7;

        this := @this: org.jfree.chart.block.AbstractBlock;

        fixedWidth := @parameter0: double;

        $stack5 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        result = virtualinvoke $stack5.<org.jfree.chart.ui.RectangleInsets: double trimWidth(double)>(fixedWidth);

        $stack7 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack8 = interfaceinvoke $stack7.<org.jfree.chart.block.BlockFrame: org.jfree.chart.ui.RectangleInsets getInsets()>();

        result = virtualinvoke $stack8.<org.jfree.chart.ui.RectangleInsets: double trimWidth(double)>(result);

        $stack10 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        result = virtualinvoke $stack10.<org.jfree.chart.ui.RectangleInsets: double trimWidth(double)>(result);

        $stack12 = staticinvoke <java.lang.Math: double max(double,double)>(result, 0.0);

        return $stack12;
    }

    protected double trimToContentHeight(double)
    {
        org.jfree.chart.block.AbstractBlock this;
        double fixedHeight, $stack12, result;
        org.jfree.chart.ui.RectangleInsets $stack5, $stack8, $stack10;
        org.jfree.chart.block.BlockFrame $stack7;

        this := @this: org.jfree.chart.block.AbstractBlock;

        fixedHeight := @parameter0: double;

        $stack5 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        result = virtualinvoke $stack5.<org.jfree.chart.ui.RectangleInsets: double trimHeight(double)>(fixedHeight);

        $stack7 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack8 = interfaceinvoke $stack7.<org.jfree.chart.block.BlockFrame: org.jfree.chart.ui.RectangleInsets getInsets()>();

        result = virtualinvoke $stack8.<org.jfree.chart.ui.RectangleInsets: double trimHeight(double)>(result);

        $stack10 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        result = virtualinvoke $stack10.<org.jfree.chart.ui.RectangleInsets: double trimHeight(double)>(result);

        $stack12 = staticinvoke <java.lang.Math: double max(double,double)>(result, 0.0);

        return $stack12;
    }

    protected org.jfree.chart.block.RectangleConstraint toContentConstraint(org.jfree.chart.block.RectangleConstraint)
    {
        org.jfree.chart.block.RectangleConstraint c, $stack14, $stack24;
        boolean $stack15;
        double w, h, ww, hh;
        org.jfree.data.Range wr, hr, wwr, hhr;
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.block.LengthConstraintType $stack25, $stack26;

        this := @this: org.jfree.chart.block.AbstractBlock;

        c := @parameter0: org.jfree.chart.block.RectangleConstraint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(c, "c");

        $stack14 = <org.jfree.chart.block.RectangleConstraint: org.jfree.chart.block.RectangleConstraint NONE>;

        $stack15 = virtualinvoke c.<java.lang.Object: boolean equals(java.lang.Object)>($stack14);

        if $stack15 == 0 goto label1;

        return c;

     label1:
        w = virtualinvoke c.<org.jfree.chart.block.RectangleConstraint: double getWidth()>();

        wr = virtualinvoke c.<org.jfree.chart.block.RectangleConstraint: org.jfree.data.Range getWidthRange()>();

        h = virtualinvoke c.<org.jfree.chart.block.RectangleConstraint: double getHeight()>();

        hr = virtualinvoke c.<org.jfree.chart.block.RectangleConstraint: org.jfree.data.Range getHeightRange()>();

        ww = virtualinvoke this.<org.jfree.chart.block.AbstractBlock: double trimToContentWidth(double)>(w);

        hh = virtualinvoke this.<org.jfree.chart.block.AbstractBlock: double trimToContentHeight(double)>(h);

        wwr = specialinvoke this.<org.jfree.chart.block.AbstractBlock: org.jfree.data.Range trimToContentWidth(org.jfree.data.Range)>(wr);

        hhr = specialinvoke this.<org.jfree.chart.block.AbstractBlock: org.jfree.data.Range trimToContentHeight(org.jfree.data.Range)>(hr);

        $stack24 = new org.jfree.chart.block.RectangleConstraint;

        $stack25 = virtualinvoke c.<org.jfree.chart.block.RectangleConstraint: org.jfree.chart.block.LengthConstraintType getWidthConstraintType()>();

        $stack26 = virtualinvoke c.<org.jfree.chart.block.RectangleConstraint: org.jfree.chart.block.LengthConstraintType getHeightConstraintType()>();

        specialinvoke $stack24.<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>(ww, wwr, $stack25, hh, hhr, $stack26);

        return $stack24;
    }

    private org.jfree.data.Range trimToContentWidth(org.jfree.data.Range)
    {
        org.jfree.data.Range r, $stack10;
        double $stack6, $stack8, $stack11, $stack15, lowerBound, upperBound;
        byte $stack7, $stack9;
        org.jfree.chart.block.AbstractBlock this;

        this := @this: org.jfree.chart.block.AbstractBlock;

        r := @parameter0: org.jfree.data.Range;

        if r != null goto label1;

        return null;

     label1:
        lowerBound = 0.0;

        upperBound = #Infinity;

        $stack6 = virtualinvoke r.<org.jfree.data.Range: double getLowerBound()>();

        $stack7 = $stack6 cmpl 0.0;

        if $stack7 <= 0 goto label2;

        $stack15 = virtualinvoke r.<org.jfree.data.Range: double getLowerBound()>();

        lowerBound = virtualinvoke this.<org.jfree.chart.block.AbstractBlock: double trimToContentWidth(double)>($stack15);

     label2:
        $stack8 = virtualinvoke r.<org.jfree.data.Range: double getUpperBound()>();

        $stack9 = $stack8 cmpg #Infinity;

        if $stack9 >= 0 goto label3;

        $stack11 = virtualinvoke r.<org.jfree.data.Range: double getUpperBound()>();

        upperBound = virtualinvoke this.<org.jfree.chart.block.AbstractBlock: double trimToContentWidth(double)>($stack11);

     label3:
        $stack10 = new org.jfree.data.Range;

        specialinvoke $stack10.<org.jfree.data.Range: void <init>(double,double)>(lowerBound, upperBound);

        return $stack10;
    }

    private org.jfree.data.Range trimToContentHeight(org.jfree.data.Range)
    {
        org.jfree.data.Range r, $stack10;
        double $stack6, $stack8, $stack11, $stack15, lowerBound, upperBound;
        byte $stack7, $stack9;
        org.jfree.chart.block.AbstractBlock this;

        this := @this: org.jfree.chart.block.AbstractBlock;

        r := @parameter0: org.jfree.data.Range;

        if r != null goto label1;

        return null;

     label1:
        lowerBound = 0.0;

        upperBound = #Infinity;

        $stack6 = virtualinvoke r.<org.jfree.data.Range: double getLowerBound()>();

        $stack7 = $stack6 cmpl 0.0;

        if $stack7 <= 0 goto label2;

        $stack15 = virtualinvoke r.<org.jfree.data.Range: double getLowerBound()>();

        lowerBound = virtualinvoke this.<org.jfree.chart.block.AbstractBlock: double trimToContentHeight(double)>($stack15);

     label2:
        $stack8 = virtualinvoke r.<org.jfree.data.Range: double getUpperBound()>();

        $stack9 = $stack8 cmpg #Infinity;

        if $stack9 >= 0 goto label3;

        $stack11 = virtualinvoke r.<org.jfree.data.Range: double getUpperBound()>();

        upperBound = virtualinvoke this.<org.jfree.chart.block.AbstractBlock: double trimToContentHeight(double)>($stack11);

     label3:
        $stack10 = new org.jfree.data.Range;

        specialinvoke $stack10.<org.jfree.data.Range: void <init>(double,double)>(lowerBound, upperBound);

        return $stack10;
    }

    protected double calculateTotalWidth(double)
    {
        double contentWidth, result;
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.ui.RectangleInsets $stack5, $stack8, $stack10;
        org.jfree.chart.block.BlockFrame $stack7;

        this := @this: org.jfree.chart.block.AbstractBlock;

        contentWidth := @parameter0: double;

        $stack5 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        result = virtualinvoke $stack5.<org.jfree.chart.ui.RectangleInsets: double extendWidth(double)>(contentWidth);

        $stack7 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack8 = interfaceinvoke $stack7.<org.jfree.chart.block.BlockFrame: org.jfree.chart.ui.RectangleInsets getInsets()>();

        result = virtualinvoke $stack8.<org.jfree.chart.ui.RectangleInsets: double extendWidth(double)>(result);

        $stack10 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        result = virtualinvoke $stack10.<org.jfree.chart.ui.RectangleInsets: double extendWidth(double)>(result);

        return result;
    }

    protected double calculateTotalHeight(double)
    {
        double contentHeight, result;
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.ui.RectangleInsets $stack5, $stack8, $stack10;
        org.jfree.chart.block.BlockFrame $stack7;

        this := @this: org.jfree.chart.block.AbstractBlock;

        contentHeight := @parameter0: double;

        $stack5 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        result = virtualinvoke $stack5.<org.jfree.chart.ui.RectangleInsets: double extendHeight(double)>(contentHeight);

        $stack7 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack8 = interfaceinvoke $stack7.<org.jfree.chart.block.BlockFrame: org.jfree.chart.ui.RectangleInsets getInsets()>();

        result = virtualinvoke $stack8.<org.jfree.chart.ui.RectangleInsets: double extendHeight(double)>(result);

        $stack10 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        result = virtualinvoke $stack10.<org.jfree.chart.ui.RectangleInsets: double extendHeight(double)>(result);

        return result;
    }

    protected java.awt.geom.Rectangle2D trimMargin(java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.block.AbstractBlock this;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.ui.RectangleInsets $stack2;

        this := @this: org.jfree.chart.block.AbstractBlock;

        area := @parameter0: java.awt.geom.Rectangle2D;

        $stack2 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        virtualinvoke $stack2.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(area);

        return area;
    }

    protected java.awt.geom.Rectangle2D trimBorder(java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.block.AbstractBlock this;
        org.jfree.chart.block.BlockFrame $stack2;
        org.jfree.chart.ui.RectangleInsets $stack3;
        java.awt.geom.Rectangle2D area;

        this := @this: org.jfree.chart.block.AbstractBlock;

        area := @parameter0: java.awt.geom.Rectangle2D;

        $stack2 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack3 = interfaceinvoke $stack2.<org.jfree.chart.block.BlockFrame: org.jfree.chart.ui.RectangleInsets getInsets()>();

        virtualinvoke $stack3.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(area);

        return area;
    }

    protected java.awt.geom.Rectangle2D trimPadding(java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.block.AbstractBlock this;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.ui.RectangleInsets $stack2;

        this := @this: org.jfree.chart.block.AbstractBlock;

        area := @parameter0: java.awt.geom.Rectangle2D;

        $stack2 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        virtualinvoke $stack2.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(area);

        return area;
    }

    protected void drawBorder(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.block.AbstractBlock this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.block.BlockFrame $stack3;

        this := @this: org.jfree.chart.block.AbstractBlock;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        $stack3 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        interfaceinvoke $stack3.<org.jfree.chart.block.BlockFrame: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.block.AbstractBlock this, that;
        boolean $stack3, $stack6, $stack9, $stack12, $stack15, $stack18;
        java.lang.String $stack4, $stack5;
        org.jfree.chart.block.BlockFrame $stack7, $stack8;
        java.awt.geom.Rectangle2D $stack10, $stack11;
        org.jfree.chart.ui.RectangleInsets $stack13, $stack14, $stack16, $stack17;
        double $stack19, $stack20, $stack22, $stack23;
        byte $stack21, $stack24;

        this := @this: org.jfree.chart.block.AbstractBlock;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.block.AbstractBlock;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.block.AbstractBlock) obj;

        $stack5 = this.<org.jfree.chart.block.AbstractBlock: java.lang.String id>;

        $stack4 = that.<org.jfree.chart.block.AbstractBlock: java.lang.String id>;

        $stack6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack5, $stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack7 = that.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack9 = virtualinvoke $stack8.<java.lang.Object: boolean equals(java.lang.Object)>($stack7);

        if $stack9 != 0 goto label4;

        return 0;

     label4:
        $stack11 = this.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds>;

        $stack10 = that.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds>;

        $stack12 = virtualinvoke $stack11.<java.awt.geom.Rectangle2D: boolean equals(java.lang.Object)>($stack10);

        if $stack12 != 0 goto label5;

        return 0;

     label5:
        $stack14 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        $stack13 = that.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        $stack15 = virtualinvoke $stack14.<org.jfree.chart.ui.RectangleInsets: boolean equals(java.lang.Object)>($stack13);

        if $stack15 != 0 goto label6;

        return 0;

     label6:
        $stack17 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        $stack16 = that.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        $stack18 = virtualinvoke $stack17.<org.jfree.chart.ui.RectangleInsets: boolean equals(java.lang.Object)>($stack16);

        if $stack18 != 0 goto label7;

        return 0;

     label7:
        $stack20 = this.<org.jfree.chart.block.AbstractBlock: double height>;

        $stack19 = that.<org.jfree.chart.block.AbstractBlock: double height>;

        $stack21 = $stack20 cmpl $stack19;

        if $stack21 == 0 goto label8;

        return 0;

     label8:
        $stack23 = this.<org.jfree.chart.block.AbstractBlock: double width>;

        $stack22 = that.<org.jfree.chart.block.AbstractBlock: double width>;

        $stack24 = $stack23 cmpl $stack22;

        if $stack24 == 0 goto label9;

        return 0;

     label9:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.block.AbstractBlock this;
        java.lang.String $stack2;
        int $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack21, $stack23, $stack29, $stack31, $stack32, hash#2;
        org.jfree.chart.ui.RectangleInsets $stack5, $stack11;
        org.jfree.chart.block.BlockFrame $stack8;
        double $stack14, $stack17, $stack22, $stack25;
        long $stack16, $stack18, $stack19, $stack20, $stack24, $stack26, $stack27, $stack28;
        java.awt.geom.Rectangle2D $stack30;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack3 = 41 * 5;

        $stack2 = this.<org.jfree.chart.block.AbstractBlock: java.lang.String id>;

        $stack4 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack2);

        hash#2 = $stack3 + $stack4;

        $stack6 = 41 * hash#2;

        $stack5 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets margin>;

        $stack7 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack5);

        hash#2 = $stack6 + $stack7;

        $stack9 = 41 * hash#2;

        $stack8 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack10 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack8);

        hash#2 = $stack9 + $stack10;

        $stack12 = 41 * hash#2;

        $stack11 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.ui.RectangleInsets padding>;

        $stack13 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack11);

        hash#2 = $stack12 + $stack13;

        $stack15 = 41 * hash#2;

        $stack14 = this.<org.jfree.chart.block.AbstractBlock: double width>;

        $stack16 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack14);

        $stack17 = this.<org.jfree.chart.block.AbstractBlock: double width>;

        $stack18 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack17);

        $stack19 = $stack18 >>> 32;

        $stack20 = $stack16 ^ $stack19;

        $stack21 = (int) $stack20;

        hash#2 = $stack15 + $stack21;

        $stack23 = 41 * hash#2;

        $stack22 = this.<org.jfree.chart.block.AbstractBlock: double height>;

        $stack24 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack22);

        $stack25 = this.<org.jfree.chart.block.AbstractBlock: double height>;

        $stack26 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack25);

        $stack27 = $stack26 >>> 32;

        $stack28 = $stack24 ^ $stack27;

        $stack29 = (int) $stack28;

        hash#2 = $stack23 + $stack29;

        $stack31 = 41 * hash#2;

        $stack30 = this.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds>;

        $stack32 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack30);

        hash#2 = $stack31 + $stack32;

        return hash#2;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.block.AbstractBlock this, clone;
        java.lang.Object $stack3, $stack10;
        java.awt.geom.Rectangle2D $stack4, $stack6;
        java.awt.Shape $stack5;
        org.jfree.chart.block.BlockFrame $stack7, $stack9, $stack11;
        boolean $stack8;
        org.jfree.chart.util.PublicCloneable pc;

        this := @this: org.jfree.chart.block.AbstractBlock;

        $stack3 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        clone = (org.jfree.chart.block.AbstractBlock) $stack3;

        $stack4 = this.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds>;

        $stack5 = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape clone(java.awt.Shape)>($stack4);

        $stack6 = (java.awt.geom.Rectangle2D) $stack5;

        clone.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds> = $stack6;

        $stack7 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        $stack8 = $stack7 instanceof org.jfree.chart.util.PublicCloneable;

        if $stack8 == 0 goto label1;

        $stack9 = this.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame>;

        pc = (org.jfree.chart.util.PublicCloneable) $stack9;

        $stack10 = interfaceinvoke pc.<org.jfree.chart.util.PublicCloneable: java.lang.Object clone()>();

        $stack11 = (org.jfree.chart.block.BlockFrame) $stack10;

        clone.<org.jfree.chart.block.AbstractBlock: org.jfree.chart.block.BlockFrame frame> = $stack11;

     label1:
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.block.AbstractBlock this;
        java.awt.geom.Rectangle2D $stack2;

        this := @this: org.jfree.chart.block.AbstractBlock;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack2, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.block.AbstractBlock this;
        java.awt.Shape $stack2;
        java.awt.geom.Rectangle2D $stack3;

        this := @this: org.jfree.chart.block.AbstractBlock;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        $stack3 = (java.awt.geom.Rectangle2D) $stack2;

        this.<org.jfree.chart.block.AbstractBlock: java.awt.geom.Rectangle2D bounds> = $stack3;

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.block.AbstractBlock: long serialVersionUID> = 7689852412141274563L;

        return;
    }
}
