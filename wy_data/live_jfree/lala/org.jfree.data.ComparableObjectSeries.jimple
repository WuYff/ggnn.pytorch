public class org.jfree.data.ComparableObjectSeries extends org.jfree.data.general.Series implements java.lang.Cloneable, java.io.Serializable
{
    protected java.util.List data;
    private int maximumItemCount;
    private boolean autoSort;
    private boolean allowDuplicateXValues;

    public void <init>(java.lang.Comparable)
    {
        org.jfree.data.ComparableObjectSeries this;
        java.lang.Comparable key;

        this := @this: org.jfree.data.ComparableObjectSeries;

        key := @parameter0: java.lang.Comparable;

        specialinvoke this.<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>(key, 1, 1);

        return;
    }

    public void <init>(java.lang.Comparable, boolean, boolean)
    {
        org.jfree.data.ComparableObjectSeries this;
        java.lang.Comparable key;
        java.util.ArrayList $stack4;
        boolean autoSort, allowDuplicateXValues;

        this := @this: org.jfree.data.ComparableObjectSeries;

        key := @parameter0: java.lang.Comparable;

        autoSort := @parameter1: boolean;

        allowDuplicateXValues := @parameter2: boolean;

        specialinvoke this.<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>(key);

        this.<org.jfree.data.ComparableObjectSeries: int maximumItemCount> = 2147483647;

        $stack4 = new java.util.ArrayList;

        specialinvoke $stack4.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.data.ComparableObjectSeries: java.util.List data> = $stack4;

        this.<org.jfree.data.ComparableObjectSeries: boolean autoSort> = autoSort;

        this.<org.jfree.data.ComparableObjectSeries: boolean allowDuplicateXValues> = allowDuplicateXValues;

        return;
    }

    public boolean getAutoSort()
    {
        org.jfree.data.ComparableObjectSeries this;
        boolean $stack1;

        this := @this: org.jfree.data.ComparableObjectSeries;

        $stack1 = this.<org.jfree.data.ComparableObjectSeries: boolean autoSort>;

        return $stack1;
    }

    public boolean getAllowDuplicateXValues()
    {
        org.jfree.data.ComparableObjectSeries this;
        boolean $stack1;

        this := @this: org.jfree.data.ComparableObjectSeries;

        $stack1 = this.<org.jfree.data.ComparableObjectSeries: boolean allowDuplicateXValues>;

        return $stack1;
    }

    public int getItemCount()
    {
        org.jfree.data.ComparableObjectSeries this;
        java.util.List $stack1;
        int $stack2;

        this := @this: org.jfree.data.ComparableObjectSeries;

        $stack1 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack2 = interfaceinvoke $stack1.<java.util.List: int size()>();

        return $stack2;
    }

    public int getMaximumItemCount()
    {
        org.jfree.data.ComparableObjectSeries this;
        int $stack1;

        this := @this: org.jfree.data.ComparableObjectSeries;

        $stack1 = this.<org.jfree.data.ComparableObjectSeries: int maximumItemCount>;

        return $stack1;
    }

    public void setMaximumItemCount(int)
    {
        org.jfree.data.ComparableObjectSeries this;
        int maximum, $stack4;
        java.util.List $stack3, $stack5;
        boolean dataRemoved;

        this := @this: org.jfree.data.ComparableObjectSeries;

        maximum := @parameter0: int;

        this.<org.jfree.data.ComparableObjectSeries: int maximumItemCount> = maximum;

        dataRemoved = 0;

     label1:
        $stack3 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack4 = interfaceinvoke $stack3.<java.util.List: int size()>();

        if $stack4 <= maximum goto label2;

        $stack5 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        interfaceinvoke $stack5.<java.util.List: java.lang.Object remove(int)>(0);

        dataRemoved = 1;

        goto label1;

     label2:
        if dataRemoved == 0 goto label3;

        virtualinvoke this.<org.jfree.data.ComparableObjectSeries: void fireSeriesChanged()>();

     label3:
        return;
    }

    protected void add(java.lang.Comparable, java.lang.Object)
    {
        org.jfree.data.ComparableObjectSeries this;
        java.lang.Comparable x;
        java.lang.Object y;

        this := @this: org.jfree.data.ComparableObjectSeries;

        x := @parameter0: java.lang.Comparable;

        y := @parameter1: java.lang.Object;

        virtualinvoke this.<org.jfree.data.ComparableObjectSeries: void add(java.lang.Comparable,java.lang.Object,boolean)>(x, y, 1);

        return;
    }

    protected void add(java.lang.Comparable, java.lang.Object, boolean)
    {
        org.jfree.data.ComparableObjectItem $stack5;
        java.lang.Comparable x;
        java.lang.Object y;
        org.jfree.data.ComparableObjectSeries this;
        boolean notify;

        this := @this: org.jfree.data.ComparableObjectSeries;

        x := @parameter0: java.lang.Comparable;

        y := @parameter1: java.lang.Object;

        notify := @parameter2: boolean;

        $stack5 = new org.jfree.data.ComparableObjectItem;

        specialinvoke $stack5.<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>(x, y);

        virtualinvoke this.<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>($stack5, notify);

        return;
    }

    protected void add(org.jfree.data.ComparableObjectItem, boolean)
    {
        org.jfree.data.ComparableObjectItem item, $stack34;
        org.jfree.data.ComparableObjectSeries this;
        boolean $stack5, $stack6, notify, $stack23;
        java.util.List $stack7, $stack11, $stack21, $stack25, $stack27, $stack29, $stack31, $stack32, $stack42;
        java.lang.Comparable $stack14;
        org.jfree.data.general.SeriesException $stack20, $stack24;
        int size, $stack28, $stack35, $stack40, $stack41, index, $stack9, $stack10;
        java.lang.Object $stack33;

        this := @this: org.jfree.data.ComparableObjectSeries;

        item := @parameter0: org.jfree.data.ComparableObjectItem;

        notify := @parameter1: boolean;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(item, "item");

        $stack5 = this.<org.jfree.data.ComparableObjectSeries: boolean autoSort>;

        if $stack5 == 0 goto label08;

        $stack21 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        index = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($stack21, item);

        if index >= 0 goto label01;

        $stack42 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack40 = neg index;

        $stack41 = $stack40 - 1;

        interfaceinvoke $stack42.<java.util.List: void add(int,java.lang.Object)>($stack41, item);

        goto label07;

     label01:
        $stack23 = this.<org.jfree.data.ComparableObjectSeries: boolean allowDuplicateXValues>;

        if $stack23 == 0 goto label06;

        $stack25 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        size = interfaceinvoke $stack25.<java.util.List: int size()>();

     label02:
        if index >= size goto label03;

        $stack32 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack33 = interfaceinvoke $stack32.<java.util.List: java.lang.Object get(int)>(index);

        $stack34 = (org.jfree.data.ComparableObjectItem) $stack33;

        $stack35 = virtualinvoke item.<org.jfree.data.ComparableObjectItem: int compareTo(org.jfree.data.ComparableObjectItem)>($stack34);

        if $stack35 != 0 goto label03;

        index = index + 1;

        goto label02;

     label03:
        $stack27 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack28 = interfaceinvoke $stack27.<java.util.List: int size()>();

        if index >= $stack28 goto label04;

        $stack31 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        interfaceinvoke $stack31.<java.util.List: void add(int,java.lang.Object)>(index, item);

        goto label05;

     label04:
        $stack29 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        interfaceinvoke $stack29.<java.util.List: boolean add(java.lang.Object)>(item);

     label05:
        goto label07;

     label06:
        $stack24 = new org.jfree.data.general.SeriesException;

        specialinvoke $stack24.<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>("X-value already exists.");

        throw $stack24;

     label07:
        goto label10;

     label08:
        $stack6 = this.<org.jfree.data.ComparableObjectSeries: boolean allowDuplicateXValues>;

        if $stack6 != 0 goto label09;

        $stack14 = virtualinvoke item.<org.jfree.data.ComparableObjectItem: java.lang.Comparable getComparable()>();

        index = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: int indexOf(java.lang.Comparable)>($stack14);

        if index < 0 goto label09;

        $stack20 = new org.jfree.data.general.SeriesException;

        specialinvoke $stack20.<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>("X-value already exists.");

        throw $stack20;

     label09:
        $stack7 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        interfaceinvoke $stack7.<java.util.List: boolean add(java.lang.Object)>(item);

     label10:
        $stack9 = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: int getItemCount()>();

        $stack10 = this.<org.jfree.data.ComparableObjectSeries: int maximumItemCount>;

        if $stack9 <= $stack10 goto label11;

        $stack11 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        interfaceinvoke $stack11.<java.util.List: java.lang.Object remove(int)>(0);

     label11:
        if notify == 0 goto label12;

        virtualinvoke this.<org.jfree.data.ComparableObjectSeries: void fireSeriesChanged()>();

     label12:
        return;
    }

    public int indexOf(java.lang.Comparable)
    {
        org.jfree.data.ComparableObjectSeries this;
        boolean $stack4, $stack10;
        java.util.List $stack5, $stack7, $stack14;
        int $stack6, $stack15, i;
        java.lang.Object $stack8;
        org.jfree.data.ComparableObjectItem item, $stack13;
        java.lang.Comparable $stack9, x;

        this := @this: org.jfree.data.ComparableObjectSeries;

        x := @parameter0: java.lang.Comparable;

        $stack4 = this.<org.jfree.data.ComparableObjectSeries: boolean autoSort>;

        if $stack4 == 0 goto label1;

        $stack14 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack13 = new org.jfree.data.ComparableObjectItem;

        specialinvoke $stack13.<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>(x, null);

        $stack15 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($stack14, $stack13);

        return $stack15;

     label1:
        i = 0;

     label2:
        $stack5 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack6 = interfaceinvoke $stack5.<java.util.List: int size()>();

        if i >= $stack6 goto label4;

        $stack7 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(i);

        item = (org.jfree.data.ComparableObjectItem) $stack8;

        $stack9 = virtualinvoke item.<org.jfree.data.ComparableObjectItem: java.lang.Comparable getComparable()>();

        $stack10 = virtualinvoke $stack9.<java.lang.Object: boolean equals(java.lang.Object)>(x);

        if $stack10 == 0 goto label3;

        return i;

     label3:
        i = i + 1;

        goto label2;

     label4:
        return -1;
    }

    protected void update(java.lang.Comparable, java.lang.Object)
    {
        org.jfree.data.ComparableObjectSeries this;
        java.lang.Comparable x;
        int index;
        org.jfree.data.ComparableObjectItem item;
        java.lang.Object y;
        org.jfree.data.general.SeriesException $stack7;
        java.lang.StringBuilder $stack8, $stack9, $stack10;
        java.lang.String $stack11;

        this := @this: org.jfree.data.ComparableObjectSeries;

        x := @parameter0: java.lang.Comparable;

        y := @parameter1: java.lang.Object;

        index = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: int indexOf(java.lang.Comparable)>(x);

        if index >= 0 goto label1;

        $stack7 = new org.jfree.data.general.SeriesException;

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No observation for x = ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(x);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack7.<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>($stack11);

        throw $stack7;

     label1:
        item = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>(index);

        virtualinvoke item.<org.jfree.data.ComparableObjectItem: void setObject(java.lang.Object)>(y);

        virtualinvoke this.<org.jfree.data.ComparableObjectSeries: void fireSeriesChanged()>();

        return;
    }

    protected void updateByIndex(int, java.lang.Object)
    {
        org.jfree.data.ComparableObjectSeries this;
        int index;
        org.jfree.data.ComparableObjectItem item;
        java.lang.Object y;

        this := @this: org.jfree.data.ComparableObjectSeries;

        index := @parameter0: int;

        y := @parameter1: java.lang.Object;

        item = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>(index);

        virtualinvoke item.<org.jfree.data.ComparableObjectItem: void setObject(java.lang.Object)>(y);

        virtualinvoke this.<org.jfree.data.ComparableObjectSeries: void fireSeriesChanged()>();

        return;
    }

    protected org.jfree.data.ComparableObjectItem getDataItem(int)
    {
        org.jfree.data.ComparableObjectSeries this;
        int index;
        java.util.List $stack2;
        java.lang.Object $stack3;
        org.jfree.data.ComparableObjectItem $stack4;

        this := @this: org.jfree.data.ComparableObjectSeries;

        index := @parameter0: int;

        $stack2 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack3 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(index);

        $stack4 = (org.jfree.data.ComparableObjectItem) $stack3;

        return $stack4;
    }

    protected void delete(int, int)
    {
        int start, end, i;
        org.jfree.data.ComparableObjectSeries this;
        java.util.List $stack4;

        this := @this: org.jfree.data.ComparableObjectSeries;

        start := @parameter0: int;

        end := @parameter1: int;

        i = start;

     label1:
        if i > end goto label2;

        $stack4 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        interfaceinvoke $stack4.<java.util.List: java.lang.Object remove(int)>(start);

        i = i + 1;

        goto label1;

     label2:
        virtualinvoke this.<org.jfree.data.ComparableObjectSeries: void fireSeriesChanged()>();

        return;
    }

    public void clear()
    {
        org.jfree.data.ComparableObjectSeries this;
        java.util.List $stack1, $stack3;
        int $stack2;

        this := @this: org.jfree.data.ComparableObjectSeries;

        $stack1 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack2 = interfaceinvoke $stack1.<java.util.List: int size()>();

        if $stack2 <= 0 goto label1;

        $stack3 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        interfaceinvoke $stack3.<java.util.List: void clear()>();

        virtualinvoke this.<org.jfree.data.ComparableObjectSeries: void fireSeriesChanged()>();

     label1:
        return;
    }

    protected org.jfree.data.ComparableObjectItem remove(int)
    {
        org.jfree.data.ComparableObjectSeries this;
        int index;
        java.util.List $stack3;
        java.lang.Object $stack4;
        org.jfree.data.ComparableObjectItem result;

        this := @this: org.jfree.data.ComparableObjectSeries;

        index := @parameter0: int;

        $stack3 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack4 = interfaceinvoke $stack3.<java.util.List: java.lang.Object remove(int)>(index);

        result = (org.jfree.data.ComparableObjectItem) $stack4;

        virtualinvoke this.<org.jfree.data.ComparableObjectSeries: void fireSeriesChanged()>();

        return result;
    }

    public org.jfree.data.ComparableObjectItem remove(java.lang.Comparable)
    {
        org.jfree.data.ComparableObjectSeries this;
        java.lang.Comparable x;
        int $stack2;
        org.jfree.data.ComparableObjectItem $stack3;

        this := @this: org.jfree.data.ComparableObjectSeries;

        x := @parameter0: java.lang.Comparable;

        $stack2 = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: int indexOf(java.lang.Comparable)>(x);

        $stack3 = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem remove(int)>($stack2);

        return $stack3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.data.ComparableObjectSeries this, that;
        boolean $stack3, $stack4, $stack7, $stack8, $stack9, $stack10, $stack13;
        int $stack5, $stack6;
        java.util.List $stack11, $stack12;

        this := @this: org.jfree.data.ComparableObjectSeries;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.data.ComparableObjectSeries;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        $stack4 = specialinvoke this.<org.jfree.data.general.Series: boolean equals(java.lang.Object)>(obj);

        if $stack4 != 0 goto label3;

        return 0;

     label3:
        that = (org.jfree.data.ComparableObjectSeries) obj;

        $stack6 = this.<org.jfree.data.ComparableObjectSeries: int maximumItemCount>;

        $stack5 = that.<org.jfree.data.ComparableObjectSeries: int maximumItemCount>;

        if $stack6 == $stack5 goto label4;

        return 0;

     label4:
        $stack8 = this.<org.jfree.data.ComparableObjectSeries: boolean autoSort>;

        $stack7 = that.<org.jfree.data.ComparableObjectSeries: boolean autoSort>;

        if $stack8 == $stack7 goto label5;

        return 0;

     label5:
        $stack10 = this.<org.jfree.data.ComparableObjectSeries: boolean allowDuplicateXValues>;

        $stack9 = that.<org.jfree.data.ComparableObjectSeries: boolean allowDuplicateXValues>;

        if $stack10 == $stack9 goto label6;

        return 0;

     label6:
        $stack12 = this.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack11 = that.<org.jfree.data.ComparableObjectSeries: java.util.List data>;

        $stack13 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack12, $stack11);

        if $stack13 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.data.ComparableObjectSeries this;
        int count, $stack6, $stack7, $stack9, $stack11, $stack20, $stack22, $stack23, $stack31, $stack33, $stack34, $stack38, $stack39, result;
        boolean $stack8, $stack10;
        org.jfree.data.ComparableObjectItem item;
        byte $stack15, $stack12;

        this := @this: org.jfree.data.ComparableObjectSeries;

        result = specialinvoke this.<org.jfree.data.general.Series: int hashCode()>();

        count = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: int getItemCount()>();

        if count <= 0 goto label1;

        item = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>(0);

        $stack38 = 29 * result;

        $stack39 = virtualinvoke item.<org.jfree.data.ComparableObjectItem: int hashCode()>();

        result = $stack38 + $stack39;

     label1:
        if count <= 1 goto label2;

        $stack31 = count - 1;

        item = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>($stack31);

        $stack33 = 29 * result;

        $stack34 = virtualinvoke item.<org.jfree.data.ComparableObjectItem: int hashCode()>();

        result = $stack33 + $stack34;

     label2:
        if count <= 2 goto label3;

        $stack20 = count / 2;

        item = virtualinvoke this.<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>($stack20);

        $stack22 = 29 * result;

        $stack23 = virtualinvoke item.<org.jfree.data.ComparableObjectItem: int hashCode()>();

        result = $stack22 + $stack23;

     label3:
        $stack7 = 29 * result;

        $stack6 = this.<org.jfree.data.ComparableObjectSeries: int maximumItemCount>;

        result = $stack7 + $stack6;

        $stack9 = 29 * result;

        $stack8 = this.<org.jfree.data.ComparableObjectSeries: boolean autoSort>;

        if $stack8 == 0 goto label4;

        $stack15 = 1;

        goto label5;

     label4:
        $stack15 = 0;

     label5:
        result = $stack9 + $stack15;

        $stack11 = 29 * result;

        $stack10 = this.<org.jfree.data.ComparableObjectSeries: boolean allowDuplicateXValues>;

        if $stack10 == 0 goto label6;

        $stack12 = 1;

        goto label7;

     label6:
        $stack12 = 0;

     label7:
        result = $stack11 + $stack12;

        return result;
    }
}
