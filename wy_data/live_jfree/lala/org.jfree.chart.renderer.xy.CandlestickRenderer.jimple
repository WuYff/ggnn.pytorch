public class org.jfree.chart.renderer.xy.CandlestickRenderer extends org.jfree.chart.renderer.xy.AbstractXYItemRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final int WIDTHMETHOD_AVERAGE;
    public static final int WIDTHMETHOD_SMALLEST;
    public static final int WIDTHMETHOD_INTERVALDATA;
    private int autoWidthMethod;
    private double autoWidthFactor;
    private double autoWidthGap;
    private double candleWidth;
    private double maxCandleWidthInMilliseconds;
    private double maxCandleWidth;
    private transient java.awt.Paint upPaint;
    private transient java.awt.Paint downPaint;
    private boolean drawVolume;
    private transient java.awt.Paint volumePaint;
    private transient double maxVolume;
    private boolean useOutlinePaint;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void <init>(double)>(-1.0);

        return;
    }

    public void <init>(double)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        double candleWidth;
        org.jfree.chart.labels.HighLowItemLabelGenerator $stack3;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        candleWidth := @parameter0: double;

        $stack3 = new org.jfree.chart.labels.HighLowItemLabelGenerator;

        specialinvoke $stack3.<org.jfree.chart.labels.HighLowItemLabelGenerator: void <init>()>();

        specialinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void <init>(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)>(candleWidth, 1, $stack3);

        return;
    }

    public void <init>(double, boolean, org.jfree.chart.labels.XYToolTipGenerator)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        org.jfree.chart.labels.XYToolTipGenerator toolTipGenerator;
        double candleWidth;
        boolean drawVolume;
        java.awt.Color $stack5, $stack6, $stack7;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        candleWidth := @parameter0: double;

        drawVolume := @parameter1: boolean;

        toolTipGenerator := @parameter2: org.jfree.chart.labels.XYToolTipGenerator;

        specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>();

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: int autoWidthMethod> = 0;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthFactor> = 0.6428571428571429;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthGap> = 0.0;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidthInMilliseconds> = 7.2E7;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void setDefaultToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)>(toolTipGenerator);

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double candleWidth> = candleWidth;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean drawVolume> = drawVolume;

        $stack5 = <java.awt.Color: java.awt.Color GRAY>;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint volumePaint> = $stack5;

        $stack6 = <java.awt.Color: java.awt.Color GREEN>;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint upPaint> = $stack6;

        $stack7 = <java.awt.Color: java.awt.Color RED>;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint downPaint> = $stack7;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean useOutlinePaint> = 0;

        return;
    }

    public double getCandleWidth()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double candleWidth>;

        return $stack1;
    }

    public void setCandleWidth(double)
    {
        double width, $stack3;
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        byte $stack4;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        width := @parameter0: double;

        $stack3 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double candleWidth>;

        $stack4 = width cmpl $stack3;

        if $stack4 == 0 goto label1;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double candleWidth> = width;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public double getMaxCandleWidthInMilliseconds()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidthInMilliseconds>;

        return $stack1;
    }

    public void setMaxCandleWidthInMilliseconds(double)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        double millis;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        millis := @parameter0: double;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidthInMilliseconds> = millis;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

        return;
    }

    public int getAutoWidthMethod()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        int $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: int autoWidthMethod>;

        return $stack1;
    }

    public void setAutoWidthMethod(int)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        int autoWidthMethod, $stack2;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        autoWidthMethod := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: int autoWidthMethod>;

        if $stack2 == autoWidthMethod goto label1;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: int autoWidthMethod> = autoWidthMethod;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public double getAutoWidthFactor()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthFactor>;

        return $stack1;
    }

    public void setAutoWidthFactor(double)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        double autoWidthFactor, $stack3;
        byte $stack4;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        autoWidthFactor := @parameter0: double;

        $stack3 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthFactor>;

        $stack4 = $stack3 cmpl autoWidthFactor;

        if $stack4 == 0 goto label1;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthFactor> = autoWidthFactor;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public double getAutoWidthGap()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthGap>;

        return $stack1;
    }

    public void setAutoWidthGap(double)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        double autoWidthGap, $stack3;
        byte $stack4;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        autoWidthGap := @parameter0: double;

        $stack3 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthGap>;

        $stack4 = $stack3 cmpl autoWidthGap;

        if $stack4 == 0 goto label1;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthGap> = autoWidthGap;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getUpPaint()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint upPaint>;

        return $stack1;
    }

    public void setUpPaint(java.awt.Paint)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint upPaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getDownPaint()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint downPaint>;

        return $stack1;
    }

    public void setDownPaint(java.awt.Paint)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint downPaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getDrawVolume()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean drawVolume>;

        return $stack1;
    }

    public void setDrawVolume(boolean)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean drawVolume>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean drawVolume> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getVolumePaint()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint volumePaint>;

        return $stack1;
    }

    public void setVolumePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.renderer.xy.CandlestickRenderer this;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint volumePaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseOutlinePaint()
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean useOutlinePaint>;

        return $stack1;
    }

    public void setUseOutlinePaint(boolean)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        boolean use, $stack2;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        use := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean useOutlinePaint>;

        if $stack2 == use goto label1;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean useOutlinePaint> = use;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.Range $stack2;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        $stack2 = virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>(dataset, 1);

        return $stack2;
    }

    public org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.axis.ValueAxis axis;
        double x1, $stack23, x2, xx1, xx2, $stack27, $stack28, volume, $stack37;
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        org.jfree.chart.ui.RectangleEdge edge;
        java.awt.geom.Rectangle2D dataArea;
        boolean $stack29;
        org.jfree.chart.renderer.xy.XYItemRendererState $stack30;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.xy.OHLCDataset highLowDataset;
        int $stack31, $stack33, series, item;
        byte $stack38;
        java.awt.Graphics2D g2;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        plot := @parameter2: org.jfree.chart.plot.XYPlot;

        dataset := @parameter3: org.jfree.data.xy.XYDataset;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        axis = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        x1 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack23 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidthInMilliseconds>;

        x2 = x1 + $stack23;

        edge = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx1 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x1, dataArea, edge);

        xx2 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x2, dataArea, edge);

        $stack27 = xx2 - xx1;

        $stack28 = staticinvoke <java.lang.Math: double abs(double)>($stack27);

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidth> = $stack28;

        $stack29 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean drawVolume>;

        if $stack29 == 0 goto label5;

        highLowDataset = (org.jfree.data.xy.OHLCDataset) dataset;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxVolume> = 0.0;

        series = 0;

     label1:
        $stack31 = interfaceinvoke highLowDataset.<org.jfree.data.xy.OHLCDataset: int getSeriesCount()>();

        if series >= $stack31 goto label5;

        item = 0;

     label2:
        $stack33 = interfaceinvoke highLowDataset.<org.jfree.data.xy.OHLCDataset: int getItemCount(int)>(series);

        if item >= $stack33 goto label4;

        volume = interfaceinvoke highLowDataset.<org.jfree.data.xy.OHLCDataset: double getVolumeValue(int,int)>(series, item);

        $stack37 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxVolume>;

        $stack38 = volume cmpl $stack37;

        if $stack38 <= 0 goto label3;

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxVolume> = volume;

     label3:
        item = item + 1;

        goto label2;

     label4:
        series = series + 1;

        goto label1;

     label5:
        $stack30 = new org.jfree.chart.renderer.xy.XYItemRendererState;

        specialinvoke $stack30.<org.jfree.chart.renderer.xy.XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>(info);

        return $stack30;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.plot.PlotOrientation orientation, $stack61, $stack62;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.xy.OHLCDataset highLowData;
        int series, item, $stack77, pass, itemCount, i, lastPos#159;
        double x, yHigh, yLow, yOpen, yClose, xx, yyHigh, yyLow, yyOpen, yyClose, $stack75, $stack78, $stack81, $stack84, maxOpenClose, minOpenClose, length, base, $stack112, $stack113, $stack114, $stack116, $stack117, $stack133, $stack134, $stack135, $stack137, $stack138, $stack162, $stack163, $stack164, volumeHeight, $stack167, zzVolume, $stack172, $stack173, $stack174, $stack177, $stack178, $stack223, $stack228, $stack229, $stack233, $stack234, $stack235, $stack236, volumeWidth, stickWidth, xxWidth, lastPos, pos, endPos, $stack86, $stack87, $stack88, $stack89, $stack91, $stack92, $stack94, $stack95, i#168, $stack108;
        org.jfree.chart.ui.RectangleEdge domainEdge, edge, $stack79, $stack82;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        byte $stack76, $stack106, $stack118, $stack225, $stack107;
        java.awt.Graphics2D g2;
        boolean $stack100, horiz, $stack98, $stack101, $stack120;
        java.awt.geom.Rectangle2D$Double $stack111, $stack115, $stack132, $stack136, $stack171, $stack176, body, originalComposite#192;
        java.awt.Paint $stack119, $stack124, $stack128, $stack129, $stack168, xxWidth#141, outlinePaint;
        java.awt.geom.Line2D$Double $stack141, $stack147, $stack148, $stack151;
        java.awt.AlphaComposite $stack170;
        org.jfree.chart.ChartRenderingInfo $stack237;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.entity.EntityCollection entities;
        org.jfree.data.xy.IntervalXYDataset i#11;
        java.awt.Stroke itemCount#158;
        java.awt.Composite originalComposite;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack61 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack61 goto label01;

        horiz = 1;

        goto label03;

     label01:
        $stack62 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack62 goto label02;

        horiz = 0;

        goto label03;

     label02:
        return;

     label03:
        entities = null;

        if info == null goto label04;

        $stack237 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        entities = virtualinvoke $stack237.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

     label04:
        highLowData = (org.jfree.data.xy.OHLCDataset) dataset;

        x = interfaceinvoke highLowData.<org.jfree.data.xy.OHLCDataset: double getXValue(int,int)>(series, item);

        yHigh = interfaceinvoke highLowData.<org.jfree.data.xy.OHLCDataset: double getHighValue(int,int)>(series, item);

        yLow = interfaceinvoke highLowData.<org.jfree.data.xy.OHLCDataset: double getLowValue(int,int)>(series, item);

        yOpen = interfaceinvoke highLowData.<org.jfree.data.xy.OHLCDataset: double getOpenValue(int,int)>(series, item);

        yClose = interfaceinvoke highLowData.<org.jfree.data.xy.OHLCDataset: double getCloseValue(int,int)>(series, item);

        domainEdge = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x, dataArea, domainEdge);

        edge = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yyHigh = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yHigh, dataArea, edge);

        yyLow = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yLow, dataArea, edge);

        yyOpen = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yOpen, dataArea, edge);

        yyClose = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yClose, dataArea, edge);

        $stack75 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double candleWidth>;

        $stack76 = $stack75 cmpl 0.0;

        if $stack76 <= 0 goto label05;

        volumeWidth = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double candleWidth>;

        stickWidth = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double candleWidth>;

        goto label14;

     label05:
        xxWidth = 0.0;

        $stack77 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: int autoWidthMethod>;

        tableswitch($stack77)
        {
            case 0: goto label06;
            case 1: goto label08;
            case 2: goto label12;
            default: goto label13;
        };

     label06:
        itemCount = interfaceinvoke highLowData.<org.jfree.data.xy.OHLCDataset: int getItemCount(int)>(series);

        if horiz == 0 goto label07;

        $stack235 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack236 = (double) itemCount;

        xxWidth = $stack235 / $stack236;

        goto label13;

     label07:
        $stack233 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack234 = (double) itemCount;

        xxWidth = $stack233 / $stack234;

        goto label13;

     label08:
        itemCount = interfaceinvoke highLowData.<org.jfree.data.xy.OHLCDataset: int getItemCount(int)>(series);

        lastPos = -1.0;

        xxWidth = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        i = 0;

     label09:
        if i >= itemCount goto label11;

        $stack223 = interfaceinvoke highLowData.<org.jfree.data.xy.OHLCDataset: double getXValue(int,int)>(series, i);

        pos = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack223, dataArea, domainEdge);

        $stack225 = lastPos cmpl -1.0;

        if $stack225 == 0 goto label10;

        $stack228 = pos - lastPos;

        $stack229 = staticinvoke <java.lang.Math: double abs(double)>($stack228);

        xxWidth = staticinvoke <java.lang.Math: double min(double,double)>(xxWidth, $stack229);

     label10:
        lastPos = pos;

        i = i + 1;

        goto label09;

     label11:
        goto label13;

     label12:
        i#11 = (org.jfree.data.xy.IntervalXYDataset) dataset;

        $stack78 = interfaceinvoke i#11.<org.jfree.data.xy.IntervalXYDataset: double getStartXValue(int,int)>(series, item);

        $stack79 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        pos = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack78, dataArea, $stack79);

        $stack81 = interfaceinvoke i#11.<org.jfree.data.xy.IntervalXYDataset: double getEndXValue(int,int)>(series, item);

        $stack82 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        endPos = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack81, dataArea, $stack82);

        $stack84 = endPos - pos;

        xxWidth = staticinvoke <java.lang.Math: double abs(double)>($stack84);

     label13:
        $stack86 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthGap>;

        $stack87 = 2.0 * $stack86;

        xxWidth = xxWidth - $stack87;

        $stack88 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthFactor>;

        xxWidth = xxWidth * $stack88;

        $stack89 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidth>;

        xxWidth = staticinvoke <java.lang.Math: double min(double,double)>(xxWidth, $stack89);

        $stack91 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidth>;

        $stack92 = staticinvoke <java.lang.Math: double min(double,double)>(1.0, $stack91);

        volumeWidth = staticinvoke <java.lang.Math: double max(double,double)>($stack92, xxWidth);

        $stack94 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidth>;

        $stack95 = staticinvoke <java.lang.Math: double min(double,double)>(3.0, $stack94);

        stickWidth = staticinvoke <java.lang.Math: double max(double,double)>($stack95, xxWidth);

     label14:
        xxWidth#141 = virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        outlinePaint = null;

        $stack98 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean useOutlinePaint>;

        if $stack98 == 0 goto label15;

        outlinePaint = virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(series, item);

     label15:
        itemCount#158 = virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Stroke getItemStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(itemCount#158);

        $stack100 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean drawVolume>;

        if $stack100 == 0 goto label20;

        $stack162 = interfaceinvoke highLowData.<org.jfree.data.xy.OHLCDataset: double getVolumeValue(int,int)>(series, item);

        lastPos#159 = (int) $stack162;

        $stack164 = (double) lastPos#159;

        $stack163 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxVolume>;

        volumeHeight = $stack164 / $stack163;

        if horiz == 0 goto label16;

        pos = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        endPos = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        goto label17;

     label16:
        pos = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        endPos = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

     label17:
        $stack167 = endPos - pos;

        zzVolume = volumeHeight * $stack167;

        $stack168 = virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint getVolumePaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack168);

        originalComposite = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $stack170 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, 0.3F);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($stack170);

        if horiz == 0 goto label18;

        $stack176 = new java.awt.geom.Rectangle2D$Double;

        $stack177 = volumeWidth / 2.0;

        $stack178 = xx - $stack177;

        specialinvoke $stack176.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(pos, $stack178, zzVolume, volumeWidth);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack176);

        goto label19;

     label18:
        $stack171 = new java.awt.geom.Rectangle2D$Double;

        $stack172 = volumeWidth / 2.0;

        $stack174 = xx - $stack172;

        $stack173 = endPos - zzVolume;

        specialinvoke $stack171.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack174, $stack173, volumeWidth, zzVolume);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack171);

     label19:
        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(originalComposite);

     label20:
        $stack101 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean useOutlinePaint>;

        if $stack101 == 0 goto label21;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(outlinePaint);

        goto label22;

     label21:
        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(xxWidth#141);

     label22:
        lastPos = staticinvoke <java.lang.Math: double max(double,double)>(yyOpen, yyClose);

        i#168 = staticinvoke <java.lang.Math: double min(double,double)>(yyOpen, yyClose);

        maxOpenClose = staticinvoke <java.lang.Math: double max(double,double)>(yOpen, yClose);

        minOpenClose = staticinvoke <java.lang.Math: double min(double,double)>(yOpen, yClose);

        $stack106 = yHigh cmpl maxOpenClose;

        if $stack106 <= 0 goto label24;

        if horiz == 0 goto label23;

        $stack151 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack151.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yyHigh, xx, lastPos, xx);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack151);

        goto label24;

     label23:
        $stack148 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack148.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, yyHigh, xx, lastPos);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack148);

     label24:
        $stack107 = yLow cmpg minOpenClose;

        if $stack107 >= 0 goto label26;

        if horiz == 0 goto label25;

        $stack147 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack147.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yyLow, xx, i#168, xx);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack147);

        goto label26;

     label25:
        $stack141 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack141.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, yyLow, xx, i#168);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack141);

     label26:
        $stack108 = yyHigh - yyLow;

        length = staticinvoke <java.lang.Math: double abs(double)>($stack108);

        base = staticinvoke <java.lang.Math: double min(double,double)>(yyHigh, yyLow);

        if horiz == 0 goto label27;

        $stack132 = new java.awt.geom.Rectangle2D$Double;

        $stack133 = stickWidth / 2.0;

        $stack135 = xx - $stack133;

        $stack134 = lastPos - i#168;

        specialinvoke $stack132.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(i#168, $stack135, $stack134, stickWidth);

        body = $stack132;

        $stack136 = new java.awt.geom.Rectangle2D$Double;

        $stack137 = stickWidth / 2.0;

        $stack138 = xx - $stack137;

        specialinvoke $stack136.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(base, $stack138, length, stickWidth);

        originalComposite#192 = $stack136;

        goto label28;

     label27:
        $stack111 = new java.awt.geom.Rectangle2D$Double;

        $stack112 = stickWidth / 2.0;

        $stack114 = xx - $stack112;

        $stack113 = lastPos - i#168;

        specialinvoke $stack111.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack114, i#168, stickWidth, $stack113);

        body = $stack111;

        $stack115 = new java.awt.geom.Rectangle2D$Double;

        $stack116 = stickWidth / 2.0;

        $stack117 = xx - $stack116;

        specialinvoke $stack115.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack117, base, stickWidth, length);

        originalComposite#192 = $stack115;

     label28:
        $stack118 = yClose cmpl yOpen;

        if $stack118 <= 0 goto label31;

        $stack128 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint upPaint>;

        if $stack128 == null goto label29;

        $stack129 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint upPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack129);

        goto label30;

     label29:
        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(xxWidth#141);

     label30:
        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(body);

        goto label34;

     label31:
        $stack119 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint downPaint>;

        if $stack119 == null goto label32;

        $stack124 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint downPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack124);

        goto label33;

     label32:
        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(xxWidth#141);

     label33:
        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(body);

     label34:
        $stack120 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean useOutlinePaint>;

        if $stack120 == 0 goto label35;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(outlinePaint);

        goto label36;

     label35:
        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(xxWidth#141);

     label36:
        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(body);

        if entities == null goto label37;

        virtualinvoke this.<org.jfree.chart.renderer.xy.CandlestickRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(entities, originalComposite#192, dataset, series, item, 0.0, 0.0);

     label37:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.CandlestickRenderer this, that;
        boolean $stack3, $stack9, $stack12, $stack13, $stack14, $stack26, $stack27, $stack30, $stack31;
        double $stack4, $stack5, $stack15, $stack16, $stack20, $stack21, $stack23, $stack24;
        byte $stack6, $stack17, $stack22, $stack25;
        java.awt.Paint $stack7, $stack8, $stack10, $stack11, $stack28, $stack29;
        int $stack18, $stack19;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.CandlestickRenderer;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.renderer.xy.CandlestickRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double candleWidth>;

        $stack4 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: double candleWidth>;

        $stack6 = $stack5 cmpl $stack4;

        if $stack6 == 0 goto label03;

        return 0;

     label03:
        $stack8 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint upPaint>;

        $stack7 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint upPaint>;

        $stack9 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack8, $stack7);

        if $stack9 != 0 goto label04;

        return 0;

     label04:
        $stack11 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint downPaint>;

        $stack10 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint downPaint>;

        $stack12 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack11, $stack10);

        if $stack12 != 0 goto label05;

        return 0;

     label05:
        $stack14 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean drawVolume>;

        $stack13 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean drawVolume>;

        if $stack14 == $stack13 goto label06;

        return 0;

     label06:
        $stack16 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidthInMilliseconds>;

        $stack15 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: double maxCandleWidthInMilliseconds>;

        $stack17 = $stack16 cmpl $stack15;

        if $stack17 == 0 goto label07;

        return 0;

     label07:
        $stack19 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: int autoWidthMethod>;

        $stack18 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: int autoWidthMethod>;

        if $stack19 == $stack18 goto label08;

        return 0;

     label08:
        $stack21 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthFactor>;

        $stack20 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthFactor>;

        $stack22 = $stack21 cmpl $stack20;

        if $stack22 == 0 goto label09;

        return 0;

     label09:
        $stack24 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthGap>;

        $stack23 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: double autoWidthGap>;

        $stack25 = $stack24 cmpl $stack23;

        if $stack25 == 0 goto label10;

        return 0;

     label10:
        $stack27 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean useOutlinePaint>;

        $stack26 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: boolean useOutlinePaint>;

        if $stack27 == $stack26 goto label11;

        return 0;

     label11:
        $stack29 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint volumePaint>;

        $stack28 = that.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint volumePaint>;

        $stack30 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack29, $stack28);

        if $stack30 != 0 goto label12;

        return 0;

     label12:
        $stack31 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack31;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        $stack1 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>();

        return $stack1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        java.awt.Paint $stack2, $stack3, $stack4;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint upPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint downPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint volumePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack4, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.renderer.xy.CandlestickRenderer this;
        java.awt.Paint $stack2, $stack3, $stack4;

        this := @this: org.jfree.chart.renderer.xy.CandlestickRenderer;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint upPaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint downPaint> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.CandlestickRenderer: java.awt.Paint volumePaint> = $stack4;

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.xy.CandlestickRenderer: int WIDTHMETHOD_INTERVALDATA> = 2;

        <org.jfree.chart.renderer.xy.CandlestickRenderer: int WIDTHMETHOD_SMALLEST> = 1;

        <org.jfree.chart.renderer.xy.CandlestickRenderer: int WIDTHMETHOD_AVERAGE> = 0;

        <org.jfree.chart.renderer.xy.CandlestickRenderer: long serialVersionUID> = 50390395841817121L;

        return;
    }
}
