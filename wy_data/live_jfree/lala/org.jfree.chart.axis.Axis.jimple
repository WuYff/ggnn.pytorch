public abstract class org.jfree.chart.axis.Axis extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final boolean DEFAULT_AXIS_VISIBLE;
    public static final java.awt.Font DEFAULT_AXIS_LABEL_FONT;
    public static final java.awt.Paint DEFAULT_AXIS_LABEL_PAINT;
    public static final org.jfree.chart.ui.RectangleInsets DEFAULT_AXIS_LABEL_INSETS;
    public static final java.awt.Paint DEFAULT_AXIS_LINE_PAINT;
    public static final java.awt.Stroke DEFAULT_AXIS_LINE_STROKE;
    public static final boolean DEFAULT_TICK_LABELS_VISIBLE;
    public static final java.awt.Font DEFAULT_TICK_LABEL_FONT;
    public static final java.awt.Paint DEFAULT_TICK_LABEL_PAINT;
    public static final org.jfree.chart.ui.RectangleInsets DEFAULT_TICK_LABEL_INSETS;
    public static final boolean DEFAULT_TICK_MARKS_VISIBLE;
    public static final java.awt.Stroke DEFAULT_TICK_MARK_STROKE;
    public static final java.awt.Paint DEFAULT_TICK_MARK_PAINT;
    public static final float DEFAULT_TICK_MARK_INSIDE_LENGTH;
    public static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH;
    private boolean visible;
    private java.lang.String label;
    private transient java.text.AttributedString attributedLabel;
    private java.awt.Font labelFont;
    private transient java.awt.Paint labelPaint;
    private org.jfree.chart.ui.RectangleInsets labelInsets;
    private double labelAngle;
    private org.jfree.chart.axis.AxisLabelLocation labelLocation;
    private boolean axisLineVisible;
    private transient java.awt.Stroke axisLineStroke;
    private transient java.awt.Paint axisLinePaint;
    private boolean tickLabelsVisible;
    private java.awt.Font tickLabelFont;
    private transient java.awt.Paint tickLabelPaint;
    private org.jfree.chart.ui.RectangleInsets tickLabelInsets;
    private boolean tickMarksVisible;
    private float tickMarkInsideLength;
    private float tickMarkOutsideLength;
    private boolean minorTickMarksVisible;
    private float minorTickMarkInsideLength;
    private float minorTickMarkOutsideLength;
    private transient java.awt.Stroke tickMarkStroke;
    private transient java.awt.Paint tickMarkPaint;
    private double fixedDimension;
    private transient org.jfree.chart.plot.Plot plot;
    private transient javax.swing.event.EventListenerList listenerList;

    protected void <init>(java.lang.String)
    {
        org.jfree.chart.axis.Axis this;
        java.lang.String label;
        java.awt.Font $stack2, $stack8;
        java.awt.Paint $stack3, $stack6, $stack9, $stack12;
        org.jfree.chart.ui.RectangleInsets $stack4, $stack10;
        org.jfree.chart.axis.AxisLabelLocation $stack5;
        java.awt.Stroke $stack7, $stack11;
        javax.swing.event.EventListenerList $stack13;

        this := @this: org.jfree.chart.axis.Axis;

        label := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.jfree.chart.axis.Axis: java.lang.String label> = label;

        this.<org.jfree.chart.axis.Axis: boolean visible> = 1;

        $stack2 = <org.jfree.chart.axis.Axis: java.awt.Font DEFAULT_AXIS_LABEL_FONT>;

        this.<org.jfree.chart.axis.Axis: java.awt.Font labelFont> = $stack2;

        $stack3 = <org.jfree.chart.axis.Axis: java.awt.Paint DEFAULT_AXIS_LABEL_PAINT>;

        this.<org.jfree.chart.axis.Axis: java.awt.Paint labelPaint> = $stack3;

        $stack4 = <org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets DEFAULT_AXIS_LABEL_INSETS>;

        this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets labelInsets> = $stack4;

        this.<org.jfree.chart.axis.Axis: double labelAngle> = 0.0;

        $stack5 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation MIDDLE>;

        this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation> = $stack5;

        this.<org.jfree.chart.axis.Axis: boolean axisLineVisible> = 1;

        $stack6 = <org.jfree.chart.axis.Axis: java.awt.Paint DEFAULT_AXIS_LINE_PAINT>;

        this.<org.jfree.chart.axis.Axis: java.awt.Paint axisLinePaint> = $stack6;

        $stack7 = <org.jfree.chart.axis.Axis: java.awt.Stroke DEFAULT_AXIS_LINE_STROKE>;

        this.<org.jfree.chart.axis.Axis: java.awt.Stroke axisLineStroke> = $stack7;

        this.<org.jfree.chart.axis.Axis: boolean tickLabelsVisible> = 1;

        $stack8 = <org.jfree.chart.axis.Axis: java.awt.Font DEFAULT_TICK_LABEL_FONT>;

        this.<org.jfree.chart.axis.Axis: java.awt.Font tickLabelFont> = $stack8;

        $stack9 = <org.jfree.chart.axis.Axis: java.awt.Paint DEFAULT_TICK_LABEL_PAINT>;

        this.<org.jfree.chart.axis.Axis: java.awt.Paint tickLabelPaint> = $stack9;

        $stack10 = <org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets DEFAULT_TICK_LABEL_INSETS>;

        this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets tickLabelInsets> = $stack10;

        this.<org.jfree.chart.axis.Axis: boolean tickMarksVisible> = 1;

        $stack11 = <org.jfree.chart.axis.Axis: java.awt.Stroke DEFAULT_TICK_MARK_STROKE>;

        this.<org.jfree.chart.axis.Axis: java.awt.Stroke tickMarkStroke> = $stack11;

        $stack12 = <org.jfree.chart.axis.Axis: java.awt.Paint DEFAULT_TICK_MARK_PAINT>;

        this.<org.jfree.chart.axis.Axis: java.awt.Paint tickMarkPaint> = $stack12;

        this.<org.jfree.chart.axis.Axis: float tickMarkInsideLength> = 0.0F;

        this.<org.jfree.chart.axis.Axis: float tickMarkOutsideLength> = 2.0F;

        this.<org.jfree.chart.axis.Axis: boolean minorTickMarksVisible> = 0;

        this.<org.jfree.chart.axis.Axis: float minorTickMarkInsideLength> = 0.0F;

        this.<org.jfree.chart.axis.Axis: float minorTickMarkOutsideLength> = 2.0F;

        this.<org.jfree.chart.axis.Axis: org.jfree.chart.plot.Plot plot> = null;

        $stack13 = new javax.swing.event.EventListenerList;

        specialinvoke $stack13.<javax.swing.event.EventListenerList: void <init>()>();

        this.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList> = $stack13;

        return;
    }

    public boolean isVisible()
    {
        org.jfree.chart.axis.Axis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: boolean visible>;

        return $stack1;
    }

    public void setVisible(boolean)
    {
        boolean flag, $stack2;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.axis.Axis: boolean visible>;

        if flag == $stack2 goto label1;

        this.<org.jfree.chart.axis.Axis: boolean visible> = flag;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.lang.String getLabel()
    {
        org.jfree.chart.axis.Axis this;
        java.lang.String $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.lang.String label>;

        return $stack1;
    }

    public void setLabel(java.lang.String)
    {
        org.jfree.chart.axis.Axis this;
        java.lang.String label;

        this := @this: org.jfree.chart.axis.Axis;

        label := @parameter0: java.lang.String;

        this.<org.jfree.chart.axis.Axis: java.lang.String label> = label;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public java.text.AttributedString getAttributedLabel()
    {
        org.jfree.chart.axis.Axis this;
        java.text.AttributedString $stack1, $stack2, $stack3;
        java.text.AttributedCharacterIterator $stack4;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel>;

        if $stack1 == null goto label1;

        $stack2 = new java.text.AttributedString;

        $stack3 = this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel>;

        $stack4 = virtualinvoke $stack3.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        specialinvoke $stack2.<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator)>($stack4);

        return $stack2;

     label1:
        return null;
    }

    public void setAttributedLabel(java.lang.String)
    {
        org.jfree.chart.axis.Axis this;
        java.lang.String label;
        java.text.AttributedString $stack2;

        this := @this: org.jfree.chart.axis.Axis;

        label := @parameter0: java.lang.String;

        $stack2 = virtualinvoke this.<org.jfree.chart.axis.Axis: java.text.AttributedString createAttributedLabel(java.lang.String)>(label);

        virtualinvoke this.<org.jfree.chart.axis.Axis: void setAttributedLabel(java.text.AttributedString)>($stack2);

        return;
    }

    public void setAttributedLabel(java.text.AttributedString)
    {
        java.text.AttributedString label, $stack2;
        org.jfree.chart.axis.Axis this;
        java.text.AttributedCharacterIterator $stack3;

        this := @this: org.jfree.chart.axis.Axis;

        label := @parameter0: java.text.AttributedString;

        if label == null goto label1;

        $stack2 = new java.text.AttributedString;

        $stack3 = virtualinvoke label.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        specialinvoke $stack2.<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator)>($stack3);

        this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel> = $stack2;

        goto label2;

     label1:
        this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel> = null;

     label2:
        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public java.text.AttributedString createAttributedLabel(java.lang.String)
    {
        java.lang.String label;
        java.text.AttributedString $stack3;
        org.jfree.chart.axis.Axis this;
        java.awt.Font $stack4;
        java.util.Map $stack5;
        int $stack7;

        this := @this: org.jfree.chart.axis.Axis;

        label := @parameter0: java.lang.String;

        if label != null goto label1;

        return null;

     label1:
        $stack3 = new java.text.AttributedString;

        specialinvoke $stack3.<java.text.AttributedString: void <init>(java.lang.String)>(label);

        $stack4 = this.<org.jfree.chart.axis.Axis: java.awt.Font labelFont>;

        $stack5 = virtualinvoke $stack4.<java.awt.Font: java.util.Map getAttributes()>();

        $stack7 = virtualinvoke label.<java.lang.String: int length()>();

        virtualinvoke $stack3.<java.text.AttributedString: void addAttributes(java.util.Map,int,int)>($stack5, 0, $stack7);

        return $stack3;
    }

    public java.awt.Font getLabelFont()
    {
        org.jfree.chart.axis.Axis this;
        java.awt.Font $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.awt.Font labelFont>;

        return $stack1;
    }

    public void setLabelFont(java.awt.Font)
    {
        java.awt.Font font, $stack2;
        org.jfree.chart.axis.Axis this;
        boolean $stack3;

        this := @this: org.jfree.chart.axis.Axis;

        font := @parameter0: java.awt.Font;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(font, "font");

        $stack2 = this.<org.jfree.chart.axis.Axis: java.awt.Font labelFont>;

        $stack3 = virtualinvoke $stack2.<java.awt.Font: boolean equals(java.lang.Object)>(font);

        if $stack3 != 0 goto label1;

        this.<org.jfree.chart.axis.Axis: java.awt.Font labelFont> = font;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getLabelPaint()
    {
        org.jfree.chart.axis.Axis this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.awt.Paint labelPaint>;

        return $stack1;
    }

    public void setLabelPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.axis.Axis: java.awt.Paint labelPaint> = paint;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.ui.RectangleInsets getLabelInsets()
    {
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets labelInsets>;

        return $stack1;
    }

    public void setLabelInsets(org.jfree.chart.ui.RectangleInsets)
    {
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.ui.RectangleInsets insets;

        this := @this: org.jfree.chart.axis.Axis;

        insets := @parameter0: org.jfree.chart.ui.RectangleInsets;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void setLabelInsets(org.jfree.chart.ui.RectangleInsets,boolean)>(insets, 1);

        return;
    }

    public void setLabelInsets(org.jfree.chart.ui.RectangleInsets, boolean)
    {
        org.jfree.chart.ui.RectangleInsets insets, $stack3;
        org.jfree.chart.axis.Axis this;
        boolean $stack4, notify;

        this := @this: org.jfree.chart.axis.Axis;

        insets := @parameter0: org.jfree.chart.ui.RectangleInsets;

        notify := @parameter1: boolean;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(insets, "insets");

        $stack3 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets labelInsets>;

        $stack4 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: boolean equals(java.lang.Object)>($stack3);

        if $stack4 != 0 goto label1;

        this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets labelInsets> = insets;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

     label1:
        return;
    }

    public double getLabelAngle()
    {
        org.jfree.chart.axis.Axis this;
        double $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: double labelAngle>;

        return $stack1;
    }

    public void setLabelAngle(double)
    {
        org.jfree.chart.axis.Axis this;
        double angle;

        this := @this: org.jfree.chart.axis.Axis;

        angle := @parameter0: double;

        this.<org.jfree.chart.axis.Axis: double labelAngle> = angle;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.axis.AxisLabelLocation getLabelLocation()
    {
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.axis.AxisLabelLocation $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        return $stack1;
    }

    public void setLabelLocation(org.jfree.chart.axis.AxisLabelLocation)
    {
        org.jfree.chart.axis.AxisLabelLocation location;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        location := @parameter0: org.jfree.chart.axis.AxisLabelLocation;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(location, "location");

        this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation> = location;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public boolean isAxisLineVisible()
    {
        org.jfree.chart.axis.Axis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: boolean axisLineVisible>;

        return $stack1;
    }

    public void setAxisLineVisible(boolean)
    {
        org.jfree.chart.axis.Axis this;
        boolean visible;

        this := @this: org.jfree.chart.axis.Axis;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.axis.Axis: boolean axisLineVisible> = visible;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getAxisLinePaint()
    {
        org.jfree.chart.axis.Axis this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.awt.Paint axisLinePaint>;

        return $stack1;
    }

    public void setAxisLinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.axis.Axis: java.awt.Paint axisLinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getAxisLineStroke()
    {
        org.jfree.chart.axis.Axis this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.awt.Stroke axisLineStroke>;

        return $stack1;
    }

    public void setAxisLineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.axis.Axis: java.awt.Stroke axisLineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public boolean isTickLabelsVisible()
    {
        org.jfree.chart.axis.Axis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: boolean tickLabelsVisible>;

        return $stack1;
    }

    public void setTickLabelsVisible(boolean)
    {
        boolean flag, $stack2;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.axis.Axis: boolean tickLabelsVisible>;

        if flag == $stack2 goto label1;

        this.<org.jfree.chart.axis.Axis: boolean tickLabelsVisible> = flag;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean isMinorTickMarksVisible()
    {
        org.jfree.chart.axis.Axis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: boolean minorTickMarksVisible>;

        return $stack1;
    }

    public void setMinorTickMarksVisible(boolean)
    {
        boolean flag, $stack2;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.axis.Axis: boolean minorTickMarksVisible>;

        if flag == $stack2 goto label1;

        this.<org.jfree.chart.axis.Axis: boolean minorTickMarksVisible> = flag;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Font getTickLabelFont()
    {
        org.jfree.chart.axis.Axis this;
        java.awt.Font $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.awt.Font tickLabelFont>;

        return $stack1;
    }

    public void setTickLabelFont(java.awt.Font)
    {
        java.awt.Font font, $stack2;
        org.jfree.chart.axis.Axis this;
        boolean $stack3;

        this := @this: org.jfree.chart.axis.Axis;

        font := @parameter0: java.awt.Font;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(font, "font");

        $stack2 = this.<org.jfree.chart.axis.Axis: java.awt.Font tickLabelFont>;

        $stack3 = virtualinvoke $stack2.<java.awt.Font: boolean equals(java.lang.Object)>(font);

        if $stack3 != 0 goto label1;

        this.<org.jfree.chart.axis.Axis: java.awt.Font tickLabelFont> = font;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getTickLabelPaint()
    {
        org.jfree.chart.axis.Axis this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.awt.Paint tickLabelPaint>;

        return $stack1;
    }

    public void setTickLabelPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.axis.Axis: java.awt.Paint tickLabelPaint> = paint;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.ui.RectangleInsets getTickLabelInsets()
    {
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets tickLabelInsets>;

        return $stack1;
    }

    public void setTickLabelInsets(org.jfree.chart.ui.RectangleInsets)
    {
        org.jfree.chart.ui.RectangleInsets insets, $stack2;
        org.jfree.chart.axis.Axis this;
        boolean $stack3;

        this := @this: org.jfree.chart.axis.Axis;

        insets := @parameter0: org.jfree.chart.ui.RectangleInsets;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(insets, "insets");

        $stack2 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets tickLabelInsets>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.ui.RectangleInsets: boolean equals(java.lang.Object)>(insets);

        if $stack3 != 0 goto label1;

        this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets tickLabelInsets> = insets;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean isTickMarksVisible()
    {
        org.jfree.chart.axis.Axis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: boolean tickMarksVisible>;

        return $stack1;
    }

    public void setTickMarksVisible(boolean)
    {
        boolean flag, $stack2;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.axis.Axis: boolean tickMarksVisible>;

        if flag == $stack2 goto label1;

        this.<org.jfree.chart.axis.Axis: boolean tickMarksVisible> = flag;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

     label1:
        return;
    }

    public float getTickMarkInsideLength()
    {
        org.jfree.chart.axis.Axis this;
        float $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: float tickMarkInsideLength>;

        return $stack1;
    }

    public void setTickMarkInsideLength(float)
    {
        org.jfree.chart.axis.Axis this;
        float length;

        this := @this: org.jfree.chart.axis.Axis;

        length := @parameter0: float;

        this.<org.jfree.chart.axis.Axis: float tickMarkInsideLength> = length;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public float getTickMarkOutsideLength()
    {
        org.jfree.chart.axis.Axis this;
        float $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: float tickMarkOutsideLength>;

        return $stack1;
    }

    public void setTickMarkOutsideLength(float)
    {
        org.jfree.chart.axis.Axis this;
        float length;

        this := @this: org.jfree.chart.axis.Axis;

        length := @parameter0: float;

        this.<org.jfree.chart.axis.Axis: float tickMarkOutsideLength> = length;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getTickMarkStroke()
    {
        org.jfree.chart.axis.Axis this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.awt.Stroke tickMarkStroke>;

        return $stack1;
    }

    public void setTickMarkStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke, $stack2;
        org.jfree.chart.axis.Axis this;
        boolean $stack3;

        this := @this: org.jfree.chart.axis.Axis;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        $stack2 = this.<org.jfree.chart.axis.Axis: java.awt.Stroke tickMarkStroke>;

        $stack3 = virtualinvoke $stack2.<java.lang.Object: boolean equals(java.lang.Object)>(stroke);

        if $stack3 != 0 goto label1;

        this.<org.jfree.chart.axis.Axis: java.awt.Stroke tickMarkStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getTickMarkPaint()
    {
        org.jfree.chart.axis.Axis this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: java.awt.Paint tickMarkPaint>;

        return $stack1;
    }

    public void setTickMarkPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.axis.Axis: java.awt.Paint tickMarkPaint> = paint;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public float getMinorTickMarkInsideLength()
    {
        org.jfree.chart.axis.Axis this;
        float $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: float minorTickMarkInsideLength>;

        return $stack1;
    }

    public void setMinorTickMarkInsideLength(float)
    {
        org.jfree.chart.axis.Axis this;
        float length;

        this := @this: org.jfree.chart.axis.Axis;

        length := @parameter0: float;

        this.<org.jfree.chart.axis.Axis: float minorTickMarkInsideLength> = length;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public float getMinorTickMarkOutsideLength()
    {
        org.jfree.chart.axis.Axis this;
        float $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: float minorTickMarkOutsideLength>;

        return $stack1;
    }

    public void setMinorTickMarkOutsideLength(float)
    {
        org.jfree.chart.axis.Axis this;
        float length;

        this := @this: org.jfree.chart.axis.Axis;

        length := @parameter0: float;

        this.<org.jfree.chart.axis.Axis: float minorTickMarkOutsideLength> = length;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.plot.Plot getPlot()
    {
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.plot.Plot $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.plot.Plot plot>;

        return $stack1;
    }

    public void setPlot(org.jfree.chart.plot.Plot)
    {
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.plot.Plot plot;

        this := @this: org.jfree.chart.axis.Axis;

        plot := @parameter0: org.jfree.chart.plot.Plot;

        this.<org.jfree.chart.axis.Axis: org.jfree.chart.plot.Plot plot> = plot;

        virtualinvoke this.<org.jfree.chart.axis.Axis: void configure()>();

        return;
    }

    public double getFixedDimension()
    {
        org.jfree.chart.axis.Axis this;
        double $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = this.<org.jfree.chart.axis.Axis: double fixedDimension>;

        return $stack1;
    }

    public void setFixedDimension(double)
    {
        org.jfree.chart.axis.Axis this;
        double dimension;

        this := @this: org.jfree.chart.axis.Axis;

        dimension := @parameter0: double;

        this.<org.jfree.chart.axis.Axis: double fixedDimension> = dimension;

        return;
    }

    public abstract void configure();

    public abstract org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D, org.jfree.chart.plot.Plot, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.axis.AxisSpace);

    public abstract org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo);

    public abstract java.util.List refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge);

    protected void createAndAddEntity(double, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.ui.RectangleEdge edge;
        org.jfree.chart.plot.PlotRenderingInfo plotState;
        org.jfree.chart.ChartRenderingInfo $stack9, $stack18;
        int[] $stack10;
        int $stack11, $stack12;
        java.awt.geom.Rectangle2D$Double $stack13, $stack21, $stack29, $stack34, hotspot;
        double cursor, $stack14, $stack15, $stack16, $stack17, $stack22, $stack23, $stack24, $stack25, $stack26, $stack30, $stack31, $stack32, $stack33, $stack35, $stack36, $stack37, $stack38, $stack39;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.axis.AxisState state;
        org.jfree.chart.entity.EntityCollection e;
        org.jfree.chart.entity.AxisEntity $stack20;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        cursor := @parameter0: double;

        state := @parameter1: org.jfree.chart.axis.AxisState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        plotState := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(edge, "edge");

        if plotState == null goto label1;

        $stack9 = virtualinvoke plotState.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        if $stack9 != null goto label2;

     label1:
        return;

     label2:
        hotspot = null;

        $stack10 = <org.jfree.chart.axis.Axis$1: int[] $SwitchMap$org$jfree$chart$ui$RectangleEdge>;

        $stack11 = virtualinvoke edge.<org.jfree.chart.ui.RectangleEdge: int ordinal()>();

        $stack12 = $stack10[$stack11];

        tableswitch($stack12)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label7;
        };

     label3:
        $stack34 = new java.awt.geom.Rectangle2D$Double;

        $stack35 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getX()>();

        $stack36 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack37 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack38 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack39 = cursor - $stack38;

        specialinvoke $stack34.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack35, $stack36, $stack37, $stack39);

        hotspot = $stack34;

        goto label7;

     label4:
        $stack29 = new java.awt.geom.Rectangle2D$Double;

        $stack30 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getX()>();

        $stack31 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack32 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack33 = $stack32 - cursor;

        specialinvoke $stack29.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack30, cursor, $stack31, $stack33);

        hotspot = $stack29;

        goto label7;

     label5:
        $stack21 = new java.awt.geom.Rectangle2D$Double;

        $stack22 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack23 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getY()>();

        $stack24 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack25 = cursor - $stack24;

        $stack26 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack21.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack22, $stack23, $stack25, $stack26);

        hotspot = $stack21;

        goto label7;

     label6:
        $stack13 = new java.awt.geom.Rectangle2D$Double;

        $stack14 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getY()>();

        $stack15 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack16 = $stack15 - cursor;

        $stack17 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack13.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(cursor, $stack14, $stack16, $stack17);

        hotspot = $stack13;

        goto label7;

     label7:
        $stack18 = virtualinvoke plotState.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        e = virtualinvoke $stack18.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if e == null goto label8;

        $stack20 = new org.jfree.chart.entity.AxisEntity;

        specialinvoke $stack20.<org.jfree.chart.entity.AxisEntity: void <init>(java.awt.Shape,org.jfree.chart.axis.Axis)>(hotspot, this);

        interfaceinvoke e.<org.jfree.chart.entity.EntityCollection: void add(org.jfree.chart.entity.ChartEntity)>($stack20);

     label8:
        return;
    }

    public void addChangeListener(org.jfree.chart.event.AxisChangeListener)
    {
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.event.AxisChangeListener listener;
        javax.swing.event.EventListenerList $stack2;

        this := @this: org.jfree.chart.axis.Axis;

        listener := @parameter0: org.jfree.chart.event.AxisChangeListener;

        $stack2 = this.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList>;

        virtualinvoke $stack2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "Lorg/jfree/chart/event/AxisChangeListener;", listener);

        return;
    }

    public void removeChangeListener(org.jfree.chart.event.AxisChangeListener)
    {
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.event.AxisChangeListener listener;
        javax.swing.event.EventListenerList $stack2;

        this := @this: org.jfree.chart.axis.Axis;

        listener := @parameter0: org.jfree.chart.event.AxisChangeListener;

        $stack2 = this.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList>;

        virtualinvoke $stack2.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>(class "Lorg/jfree/chart/event/AxisChangeListener;", listener);

        return;
    }

    public boolean hasListener(java.util.EventListener)
    {
        org.jfree.chart.axis.Axis this;
        javax.swing.event.EventListenerList $stack3;
        java.lang.Object[] $stack4;
        java.util.List list;
        java.util.EventListener listener;
        boolean $stack6;

        this := @this: org.jfree.chart.axis.Axis;

        listener := @parameter0: java.util.EventListener;

        $stack3 = this.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList>;

        $stack4 = virtualinvoke $stack3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        list = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        $stack6 = interfaceinvoke list.<java.util.List: boolean contains(java.lang.Object)>(listener);

        return $stack6;
    }

    protected void notifyListeners(org.jfree.chart.event.AxisChangeEvent)
    {
        org.jfree.chart.axis.Axis this;
        javax.swing.event.EventListenerList $stack4;
        java.lang.Object[] listeners;
        int $stack6, $stack9, i;
        java.lang.Object $stack7, $stack10;
        org.jfree.chart.event.AxisChangeEvent event;
        org.jfree.chart.event.AxisChangeListener $stack11;

        this := @this: org.jfree.chart.axis.Axis;

        event := @parameter0: org.jfree.chart.event.AxisChangeEvent;

        $stack4 = this.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList>;

        listeners = virtualinvoke $stack4.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        $stack6 = lengthof listeners;

        i = $stack6 - 2;

     label1:
        if i < 0 goto label3;

        $stack7 = listeners[i];

        if $stack7 != class "Lorg/jfree/chart/event/AxisChangeListener;" goto label2;

        $stack9 = i + 1;

        $stack10 = listeners[$stack9];

        $stack11 = (org.jfree.chart.event.AxisChangeListener) $stack10;

        interfaceinvoke $stack11.<org.jfree.chart.event.AxisChangeListener: void axisChanged(org.jfree.chart.event.AxisChangeEvent)>(event);

     label2:
        i = i + -2;

        goto label1;

     label3:
        return;
    }

    protected void fireChangeEvent()
    {
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.event.AxisChangeEvent $stack1;

        this := @this: org.jfree.chart.axis.Axis;

        $stack1 = new org.jfree.chart.event.AxisChangeEvent;

        specialinvoke $stack1.<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>(this);

        virtualinvoke this.<org.jfree.chart.axis.Axis: void notifyListeners(org.jfree.chart.event.AxisChangeEvent)>($stack1);

        return;
    }

    protected java.awt.geom.Rectangle2D getLabelEnclosure(java.awt.Graphics2D, org.jfree.chart.ui.RectangleEdge)
    {
        java.awt.geom.Rectangle2D$Double $stack14;
        org.jfree.chart.axis.Axis this;
        java.text.AttributedString $stack15, $stack45;
        org.jfree.chart.ui.RectangleEdge edge, $stack20, $stack27;
        double x, y, fm#11;
        java.awt.geom.AffineTransform transformer;
        java.awt.Shape labelBounds;
        boolean $stack39;
        java.awt.Graphics2D g2;
        java.awt.Font $stack41;
        java.awt.font.TextLayout $stack44;
        java.text.AttributedCharacterIterator $stack46;
        java.awt.font.FontRenderContext $stack47;
        java.awt.geom.Rectangle2D result, bounds;
        java.lang.String layout#4;
        java.awt.FontMetrics fm;
        org.jfree.chart.ui.RectangleInsets layout#9;

        this := @this: org.jfree.chart.axis.Axis;

        g2 := @parameter0: java.awt.Graphics2D;

        edge := @parameter1: org.jfree.chart.ui.RectangleEdge;

        $stack14 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack14.<java.awt.geom.Rectangle2D$Double: void <init>()>();

        result = $stack14;

        bounds = null;

        $stack15 = this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel>;

        if $stack15 == null goto label1;

        $stack44 = new java.awt.font.TextLayout;

        $stack45 = this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel>;

        $stack46 = virtualinvoke $stack45.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        $stack47 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        specialinvoke $stack44.<java.awt.font.TextLayout: void <init>(java.text.AttributedCharacterIterator,java.awt.font.FontRenderContext)>($stack46, $stack47);

        bounds = virtualinvoke $stack44.<java.awt.font.TextLayout: java.awt.geom.Rectangle2D getBounds()>();

        goto label2;

     label1:
        layout#4 = virtualinvoke this.<org.jfree.chart.axis.Axis: java.lang.String getLabel()>();

        if layout#4 == null goto label2;

        $stack39 = virtualinvoke layout#4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $stack39 != 0 goto label2;

        $stack41 = virtualinvoke this.<org.jfree.chart.axis.Axis: java.awt.Font getLabelFont()>();

        fm = virtualinvoke g2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($stack41);

        bounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>(layout#4, g2, fm);

     label2:
        if bounds == null goto label5;

        layout#9 = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets getLabelInsets()>();

        bounds = virtualinvoke layout#9.<org.jfree.chart.ui.RectangleInsets: java.awt.geom.Rectangle2D createOutsetRectangle(java.awt.geom.Rectangle2D)>(bounds);

        fm#11 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack20 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge == $stack20 goto label3;

        $stack27 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack27 goto label4;

     label3:
        fm#11 = fm#11 - 1.5707963267948966;

     label4:
        x = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        y = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        transformer = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>(fm#11, x, y);

        labelBounds = virtualinvoke transformer.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(bounds);

        result = interfaceinvoke labelBounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

     label5:
        return result;
    }

    protected double labelLocationX(org.jfree.chart.axis.AxisLabelLocation, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.axis.AxisLabelLocation location, $stack3, $stack5, $stack7;
        boolean $stack4, $stack6, $stack8;
        java.lang.RuntimeException $stack9;
        java.lang.StringBuilder $stack10, $stack11, $stack12;
        java.lang.String $stack13;
        java.awt.geom.Rectangle2D dataArea;
        double $stack14, $stack15, $stack16;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        location := @parameter0: org.jfree.chart.axis.AxisLabelLocation;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        $stack3 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation HIGH_END>;

        $stack4 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack3);

        if $stack4 == 0 goto label1;

        $stack16 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        return $stack16;

     label1:
        $stack5 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation MIDDLE>;

        $stack6 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack5);

        if $stack6 == 0 goto label2;

        $stack15 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getCenterX()>();

        return $stack15;

     label2:
        $stack7 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation LOW_END>;

        $stack8 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack7);

        if $stack8 == 0 goto label3;

        $stack14 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        return $stack14;

     label3:
        $stack9 = new java.lang.RuntimeException;

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected AxisLabelLocation: ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(location);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack9.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack13);

        throw $stack9;
    }

    protected double labelLocationY(org.jfree.chart.axis.AxisLabelLocation, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.axis.AxisLabelLocation location, $stack3, $stack5, $stack7;
        boolean $stack4, $stack6, $stack8;
        java.lang.RuntimeException $stack9;
        java.lang.StringBuilder $stack10, $stack11, $stack12;
        java.lang.String $stack13;
        java.awt.geom.Rectangle2D dataArea;
        double $stack14, $stack15, $stack16;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        location := @parameter0: org.jfree.chart.axis.AxisLabelLocation;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        $stack3 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation HIGH_END>;

        $stack4 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack3);

        if $stack4 == 0 goto label1;

        $stack16 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        return $stack16;

     label1:
        $stack5 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation MIDDLE>;

        $stack6 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack5);

        if $stack6 == 0 goto label2;

        $stack15 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getCenterY()>();

        return $stack15;

     label2:
        $stack7 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation LOW_END>;

        $stack8 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack7);

        if $stack8 == 0 goto label3;

        $stack14 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        return $stack14;

     label3:
        $stack9 = new java.lang.RuntimeException;

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected AxisLabelLocation: ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(location);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack9.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack13);

        throw $stack9;
    }

    protected org.jfree.chart.ui.TextAnchor labelAnchorH(org.jfree.chart.axis.AxisLabelLocation)
    {
        org.jfree.chart.axis.AxisLabelLocation location, $stack2, $stack4, $stack6;
        boolean $stack3, $stack5, $stack7;
        java.lang.RuntimeException $stack8;
        java.lang.StringBuilder $stack9, $stack10, $stack11;
        java.lang.String $stack12;
        org.jfree.chart.ui.TextAnchor $stack13, $stack14, $stack15;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        location := @parameter0: org.jfree.chart.axis.AxisLabelLocation;

        $stack2 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation HIGH_END>;

        $stack3 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack2);

        if $stack3 == 0 goto label1;

        $stack15 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_RIGHT>;

        return $stack15;

     label1:
        $stack4 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation MIDDLE>;

        $stack5 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack4);

        if $stack5 == 0 goto label2;

        $stack14 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER>;

        return $stack14;

     label2:
        $stack6 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation LOW_END>;

        $stack7 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack6);

        if $stack7 == 0 goto label3;

        $stack13 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_LEFT>;

        return $stack13;

     label3:
        $stack8 = new java.lang.RuntimeException;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected AxisLabelLocation: ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(location);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack8.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack12);

        throw $stack8;
    }

    protected org.jfree.chart.ui.TextAnchor labelAnchorV(org.jfree.chart.axis.AxisLabelLocation)
    {
        org.jfree.chart.axis.AxisLabelLocation location, $stack2, $stack4, $stack6;
        boolean $stack3, $stack5, $stack7;
        java.lang.RuntimeException $stack8;
        java.lang.StringBuilder $stack9, $stack10, $stack11;
        java.lang.String $stack12;
        org.jfree.chart.ui.TextAnchor $stack13, $stack14, $stack15;
        org.jfree.chart.axis.Axis this;

        this := @this: org.jfree.chart.axis.Axis;

        location := @parameter0: org.jfree.chart.axis.AxisLabelLocation;

        $stack2 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation HIGH_END>;

        $stack3 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack2);

        if $stack3 == 0 goto label1;

        $stack15 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_RIGHT>;

        return $stack15;

     label1:
        $stack4 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation MIDDLE>;

        $stack5 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack4);

        if $stack5 == 0 goto label2;

        $stack14 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER>;

        return $stack14;

     label2:
        $stack6 = <org.jfree.chart.axis.AxisLabelLocation: org.jfree.chart.axis.AxisLabelLocation LOW_END>;

        $stack7 = virtualinvoke location.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack6);

        if $stack7 == 0 goto label3;

        $stack13 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_LEFT>;

        return $stack13;

     label3:
        $stack8 = new java.lang.RuntimeException;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected AxisLabelLocation: ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(location);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack8.<java.lang.RuntimeException: void <init>(java.lang.String)>($stack12);

        throw $stack8;
    }

    protected org.jfree.chart.axis.AxisState drawLabel(java.lang.String, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.axis.AxisState)
    {
        org.jfree.chart.axis.AxisState state;
        java.lang.String label;
        boolean $stack18;
        org.jfree.chart.axis.Axis this;
        java.awt.Font font;
        org.jfree.chart.ui.RectangleInsets insets;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack21;
        java.awt.FontMetrics fm;
        org.jfree.chart.ui.RectangleEdge edge, $stack24, $stack25, $stack26, $stack27;
        double $stack28, $stack29, $stack30, $stack31, $stack35, $stack36, $stack37, $stack38, $stack39, $stack46, $stack47, $stack48, $stack49, $stack50, $stack51, $stack52, $stack54, $stack55, $stack56, $stack57, $stack61, $stack62, $stack63, $stack64, $stack65, $stack72, $stack73, $stack74, $stack75, $stack76, $stack77, $stack78, $stack79, $stack80, $stack81, $stack87, $stack88, $stack89, $stack90, $stack91, $stack96, $stack98, $stack99, $stack100, $stack101, $stack102, $stack103, $stack104, $stack105, $stack111, $stack112, $stack113, $stack114, $stack115, $stack120, $stack122, $stack123, $stack124, $stack125, $stack126, labelx, labely;
        java.awt.geom.Rectangle2D dataArea, plotArea, labelBounds;
        org.jfree.chart.axis.AxisLabelLocation $stack40, $stack42, $stack66, $stack68, $stack85, $stack92, $stack109, $stack116;
        float $stack44, $stack45, $stack70, $stack71, $stack94, $stack95, $stack118, $stack119;
        org.jfree.chart.ui.TextAnchor $stack97, $stack121, anchor;
        java.awt.geom.AffineTransform t;
        java.awt.Shape rotatedLabelBounds;

        this := @this: org.jfree.chart.axis.Axis;

        label := @parameter0: java.lang.String;

        g2 := @parameter1: java.awt.Graphics2D;

        plotArea := @parameter2: java.awt.geom.Rectangle2D;

        dataArea := @parameter3: java.awt.geom.Rectangle2D;

        edge := @parameter4: org.jfree.chart.ui.RectangleEdge;

        state := @parameter5: org.jfree.chart.axis.AxisState;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(state, "state");

        if label == null goto label1;

        $stack18 = virtualinvoke label.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $stack18 == 0 goto label2;

     label1:
        return state;

     label2:
        font = virtualinvoke this.<org.jfree.chart.axis.Axis: java.awt.Font getLabelFont()>();

        insets = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets getLabelInsets()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>(font);

        $stack21 = virtualinvoke this.<org.jfree.chart.axis.Axis: java.awt.Paint getLabelPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack21);

        fm = virtualinvoke g2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics()>();

        labelBounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>(label, g2, fm);

        $stack24 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack24 goto label3;

        $stack103 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack104 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack105 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        t = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($stack103, $stack104, $stack105);

        rotatedLabelBounds = virtualinvoke t.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(labelBounds);

        labelBounds = interfaceinvoke rotatedLabelBounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack109 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        labelx = virtualinvoke this.<org.jfree.chart.axis.Axis: double labelLocationX(org.jfree.chart.axis.AxisLabelLocation,java.awt.geom.Rectangle2D)>($stack109, dataArea);

        $stack111 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack112 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        $stack113 = $stack111 - $stack112;

        $stack114 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack115 = $stack114 / 2.0;

        labely = $stack113 - $stack115;

        $stack116 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        anchor = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.TextAnchor labelAnchorH(org.jfree.chart.axis.AxisLabelLocation)>($stack116);

        $stack118 = (float) labelx;

        $stack119 = (float) labely;

        $stack120 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack121 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER>;

        staticinvoke <org.jfree.chart.text.TextUtils: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack118, $stack119, anchor, $stack120, $stack121);

        $stack122 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack123 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack124 = $stack122 + $stack123;

        $stack125 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        $stack126 = $stack124 + $stack125;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorUp(double)>($stack126);

        goto label6;

     label3:
        $stack25 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack25 goto label4;

        $stack79 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack80 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack81 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        t = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($stack79, $stack80, $stack81);

        rotatedLabelBounds = virtualinvoke t.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(labelBounds);

        labelBounds = interfaceinvoke rotatedLabelBounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack85 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        labelx = virtualinvoke this.<org.jfree.chart.axis.Axis: double labelLocationX(org.jfree.chart.axis.AxisLabelLocation,java.awt.geom.Rectangle2D)>($stack85, dataArea);

        $stack87 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack88 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack89 = $stack87 + $stack88;

        $stack90 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack91 = $stack90 / 2.0;

        labely = $stack89 + $stack91;

        $stack92 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        anchor = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.TextAnchor labelAnchorH(org.jfree.chart.axis.AxisLabelLocation)>($stack92);

        $stack94 = (float) labelx;

        $stack95 = (float) labely;

        $stack96 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack97 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER>;

        staticinvoke <org.jfree.chart.text.TextUtils: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack94, $stack95, anchor, $stack96, $stack97);

        $stack98 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack99 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack100 = $stack98 + $stack99;

        $stack101 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        $stack102 = $stack100 + $stack101;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorDown(double)>($stack102);

        goto label6;

     label4:
        $stack26 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack26 goto label5;

        $stack54 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack55 = $stack54 - 1.5707963267948966;

        $stack56 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack57 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        t = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($stack55, $stack56, $stack57);

        rotatedLabelBounds = virtualinvoke t.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(labelBounds);

        labelBounds = interfaceinvoke rotatedLabelBounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack61 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack62 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        $stack63 = $stack61 - $stack62;

        $stack64 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack65 = $stack64 / 2.0;

        labelx = $stack63 - $stack65;

        $stack66 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        labely = virtualinvoke this.<org.jfree.chart.axis.Axis: double labelLocationY(org.jfree.chart.axis.AxisLabelLocation,java.awt.geom.Rectangle2D)>($stack66, dataArea);

        $stack68 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        anchor = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.TextAnchor labelAnchorV(org.jfree.chart.axis.AxisLabelLocation)>($stack68);

        $stack70 = (float) labelx;

        $stack71 = (float) labely;

        $stack72 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack73 = $stack72 - 1.5707963267948966;

        staticinvoke <org.jfree.chart.text.TextUtils: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack70, $stack71, anchor, $stack73, anchor);

        $stack74 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack75 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack76 = $stack74 + $stack75;

        $stack77 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        $stack78 = $stack76 + $stack77;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorLeft(double)>($stack78);

        goto label6;

     label5:
        $stack27 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack27 goto label6;

        $stack28 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack29 = $stack28 + 1.5707963267948966;

        $stack30 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack31 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        t = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($stack29, $stack30, $stack31);

        rotatedLabelBounds = virtualinvoke t.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(labelBounds);

        labelBounds = interfaceinvoke rotatedLabelBounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack35 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack36 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack37 = $stack35 + $stack36;

        $stack38 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack39 = $stack38 / 2.0;

        labelx = $stack37 + $stack39;

        $stack40 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        labely = virtualinvoke this.<org.jfree.chart.axis.Axis: double labelLocationY(org.jfree.chart.axis.AxisLabelLocation,java.awt.geom.Rectangle2D)>($stack40, dataArea);

        $stack42 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        anchor = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.TextAnchor labelAnchorV(org.jfree.chart.axis.AxisLabelLocation)>($stack42);

        $stack44 = (float) labelx;

        $stack45 = (float) labely;

        $stack46 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack47 = $stack46 + 1.5707963267948966;

        staticinvoke <org.jfree.chart.text.TextUtils: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack44, $stack45, anchor, $stack47, anchor);

        $stack48 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack49 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack50 = $stack48 + $stack49;

        $stack51 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        $stack52 = $stack50 + $stack51;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorRight(double)>($stack52);

     label6:
        return state;
    }

    protected org.jfree.chart.axis.AxisState drawAttributedLabel(java.text.AttributedString, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.axis.AxisState)
    {
        org.jfree.chart.axis.AxisState state;
        java.text.AttributedString label, $stack21;
        org.jfree.chart.axis.Axis this;
        org.jfree.chart.ui.RectangleInsets insets;
        java.awt.Graphics2D g2;
        java.awt.Font $stack18;
        java.awt.Paint $stack19;
        java.awt.font.TextLayout $stack20;
        java.text.AttributedCharacterIterator $stack22;
        java.awt.font.FontRenderContext $stack23;
        org.jfree.chart.ui.RectangleEdge edge, $stack25, $stack26, $stack27, $stack28;
        double $stack29, $stack30, $stack31, $stack32, $stack36, $stack37, $stack38, $stack39, $stack40, $stack47, $stack48, $stack49, $stack50, $stack51, $stack52, $stack53, $stack55, $stack56, $stack57, $stack58, $stack62, $stack63, $stack64, $stack65, $stack66, $stack73, $stack74, $stack75, $stack76, $stack77, $stack78, $stack79, $stack80, $stack81, $stack82, $stack88, $stack89, $stack90, $stack91, $stack92, $stack97, $stack99, $stack100, $stack101, $stack102, $stack103, $stack104, $stack105, $stack106, $stack112, $stack113, $stack114, $stack115, $stack116, $stack121, $stack123, $stack124, $stack125, $stack126, $stack127, labelx, labely;
        java.awt.geom.Rectangle2D dataArea, plotArea, labelBounds;
        org.jfree.chart.axis.AxisLabelLocation $stack41, $stack43, $stack67, $stack69, $stack86, $stack93, $stack110, $stack117;
        float $stack45, $stack46, $stack71, $stack72, $stack95, $stack96, $stack119, $stack120;
        org.jfree.chart.ui.TextAnchor $stack98, $stack122, anchor;
        java.awt.geom.AffineTransform t;
        java.awt.Shape rotatedLabelBounds;

        this := @this: org.jfree.chart.axis.Axis;

        label := @parameter0: java.text.AttributedString;

        g2 := @parameter1: java.awt.Graphics2D;

        plotArea := @parameter2: java.awt.geom.Rectangle2D;

        dataArea := @parameter3: java.awt.geom.Rectangle2D;

        edge := @parameter4: org.jfree.chart.ui.RectangleEdge;

        state := @parameter5: org.jfree.chart.axis.AxisState;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(state, "state");

        if label != null goto label1;

        return state;

     label1:
        insets = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets getLabelInsets()>();

        $stack18 = virtualinvoke this.<org.jfree.chart.axis.Axis: java.awt.Font getLabelFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack18);

        $stack19 = virtualinvoke this.<org.jfree.chart.axis.Axis: java.awt.Paint getLabelPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack19);

        $stack20 = new java.awt.font.TextLayout;

        $stack21 = this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel>;

        $stack22 = virtualinvoke $stack21.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        $stack23 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        specialinvoke $stack20.<java.awt.font.TextLayout: void <init>(java.text.AttributedCharacterIterator,java.awt.font.FontRenderContext)>($stack22, $stack23);

        labelBounds = virtualinvoke $stack20.<java.awt.font.TextLayout: java.awt.geom.Rectangle2D getBounds()>();

        $stack25 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack25 goto label2;

        $stack104 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack105 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack106 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        t = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($stack104, $stack105, $stack106);

        rotatedLabelBounds = virtualinvoke t.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(labelBounds);

        labelBounds = interfaceinvoke rotatedLabelBounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack110 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        labelx = virtualinvoke this.<org.jfree.chart.axis.Axis: double labelLocationX(org.jfree.chart.axis.AxisLabelLocation,java.awt.geom.Rectangle2D)>($stack110, dataArea);

        $stack112 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack113 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        $stack114 = $stack112 - $stack113;

        $stack115 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack116 = $stack115 / 2.0;

        labely = $stack114 - $stack116;

        $stack117 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        anchor = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.TextAnchor labelAnchorH(org.jfree.chart.axis.AxisLabelLocation)>($stack117);

        $stack119 = (float) labelx;

        $stack120 = (float) labely;

        $stack121 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack122 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER>;

        staticinvoke <org.jfree.chart.util.AttrStringUtils: void drawRotatedString(java.text.AttributedString,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack119, $stack120, anchor, $stack121, $stack122);

        $stack123 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack124 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack125 = $stack123 + $stack124;

        $stack126 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        $stack127 = $stack125 + $stack126;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorUp(double)>($stack127);

        goto label5;

     label2:
        $stack26 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack26 goto label3;

        $stack80 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack81 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack82 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        t = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($stack80, $stack81, $stack82);

        rotatedLabelBounds = virtualinvoke t.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(labelBounds);

        labelBounds = interfaceinvoke rotatedLabelBounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack86 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        labelx = virtualinvoke this.<org.jfree.chart.axis.Axis: double labelLocationX(org.jfree.chart.axis.AxisLabelLocation,java.awt.geom.Rectangle2D)>($stack86, dataArea);

        $stack88 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack89 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack90 = $stack88 + $stack89;

        $stack91 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack92 = $stack91 / 2.0;

        labely = $stack90 + $stack92;

        $stack93 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        anchor = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.TextAnchor labelAnchorH(org.jfree.chart.axis.AxisLabelLocation)>($stack93);

        $stack95 = (float) labelx;

        $stack96 = (float) labely;

        $stack97 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack98 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER>;

        staticinvoke <org.jfree.chart.util.AttrStringUtils: void drawRotatedString(java.text.AttributedString,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack95, $stack96, anchor, $stack97, $stack98);

        $stack99 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack100 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack101 = $stack99 + $stack100;

        $stack102 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        $stack103 = $stack101 + $stack102;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorDown(double)>($stack103);

        goto label5;

     label3:
        $stack27 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack27 goto label4;

        $stack55 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack56 = $stack55 - 1.5707963267948966;

        $stack57 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack58 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        t = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($stack56, $stack57, $stack58);

        rotatedLabelBounds = virtualinvoke t.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(labelBounds);

        labelBounds = interfaceinvoke rotatedLabelBounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack62 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack63 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        $stack64 = $stack62 - $stack63;

        $stack65 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack66 = $stack65 / 2.0;

        labelx = $stack64 - $stack66;

        $stack67 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        labely = virtualinvoke this.<org.jfree.chart.axis.Axis: double labelLocationY(org.jfree.chart.axis.AxisLabelLocation,java.awt.geom.Rectangle2D)>($stack67, dataArea);

        $stack69 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        anchor = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.TextAnchor labelAnchorV(org.jfree.chart.axis.AxisLabelLocation)>($stack69);

        $stack71 = (float) labelx;

        $stack72 = (float) labely;

        $stack73 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack74 = $stack73 - 1.5707963267948966;

        staticinvoke <org.jfree.chart.util.AttrStringUtils: void drawRotatedString(java.text.AttributedString,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack71, $stack72, anchor, $stack74, anchor);

        $stack75 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack76 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack77 = $stack75 + $stack76;

        $stack78 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        $stack79 = $stack77 + $stack78;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorLeft(double)>($stack79);

        goto label5;

     label4:
        $stack28 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack28 goto label5;

        $stack29 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack30 = $stack29 + 1.5707963267948966;

        $stack31 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack32 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        t = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($stack30, $stack31, $stack32);

        rotatedLabelBounds = virtualinvoke t.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(labelBounds);

        labelBounds = interfaceinvoke rotatedLabelBounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack36 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack37 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack38 = $stack36 + $stack37;

        $stack39 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack40 = $stack39 / 2.0;

        labelx = $stack38 + $stack40;

        $stack41 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        labely = virtualinvoke this.<org.jfree.chart.axis.Axis: double labelLocationY(org.jfree.chart.axis.AxisLabelLocation,java.awt.geom.Rectangle2D)>($stack41, dataArea);

        $stack43 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        anchor = virtualinvoke this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.TextAnchor labelAnchorV(org.jfree.chart.axis.AxisLabelLocation)>($stack43);

        $stack45 = (float) labelx;

        $stack46 = (float) labely;

        $stack47 = virtualinvoke this.<org.jfree.chart.axis.Axis: double getLabelAngle()>();

        $stack48 = $stack47 + 1.5707963267948966;

        staticinvoke <org.jfree.chart.util.AttrStringUtils: void drawRotatedString(java.text.AttributedString,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack45, $stack46, anchor, $stack48, anchor);

        $stack49 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack50 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack51 = $stack49 + $stack50;

        $stack52 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        $stack53 = $stack51 + $stack52;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorRight(double)>($stack53);

     label5:
        return state;
    }

    protected void drawAxisLine(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        java.awt.geom.Rectangle2D dataArea;
        double x, y, cursor, $stack26, $stack38, $stack40, $stack42;
        org.jfree.chart.ui.RectangleEdge edge, $stack14, $stack15, $stack16, $stack17;
        java.awt.Graphics2D g2;
        org.jfree.chart.axis.Axis this;
        java.lang.Object saved, $stack22;
        java.awt.geom.Line2D$Double $stack25, $stack37, $stack39, $stack41, axisLine;
        java.awt.Paint $stack18;
        java.awt.Stroke $stack19;
        java.awt.RenderingHints$Key $stack20, $stack23, $stack24;

        this := @this: org.jfree.chart.axis.Axis;

        g2 := @parameter0: java.awt.Graphics2D;

        cursor := @parameter1: double;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        axisLine = null;

        x = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getX()>();

        y = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getY()>();

        $stack14 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack14 goto label1;

        $stack41 = new java.awt.geom.Line2D$Double;

        $stack42 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack41.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(x, cursor, $stack42, cursor);

        axisLine = $stack41;

        goto label4;

     label1:
        $stack15 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack15 goto label2;

        $stack39 = new java.awt.geom.Line2D$Double;

        $stack40 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack39.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(x, cursor, $stack40, cursor);

        axisLine = $stack39;

        goto label4;

     label2:
        $stack16 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack16 goto label3;

        $stack37 = new java.awt.geom.Line2D$Double;

        $stack38 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack37.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(cursor, y, cursor, $stack38);

        axisLine = $stack37;

        goto label4;

     label3:
        $stack17 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack17 goto label4;

        $stack25 = new java.awt.geom.Line2D$Double;

        $stack26 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack25.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(cursor, y, cursor, $stack26);

        axisLine = $stack25;

     label4:
        $stack18 = this.<org.jfree.chart.axis.Axis: java.awt.Paint axisLinePaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack18);

        $stack19 = this.<org.jfree.chart.axis.Axis: java.awt.Stroke axisLineStroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack19);

        $stack20 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        saved = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack20);

        $stack23 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $stack22 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack23, $stack22);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(axisLine);

        $stack24 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack24, saved);

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.axis.Axis this, clone;
        java.lang.Object $stack2;
        javax.swing.event.EventListenerList $stack3;

        this := @this: org.jfree.chart.axis.Axis;

        $stack2 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        clone = (org.jfree.chart.axis.Axis) $stack2;

        clone.<org.jfree.chart.axis.Axis: org.jfree.chart.plot.Plot plot> = null;

        $stack3 = new javax.swing.event.EventListenerList;

        specialinvoke $stack3.<javax.swing.event.EventListenerList: void <init>()>();

        clone.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList> = $stack3;

        return clone;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.axis.Axis this, that;
        boolean $stack3, $stack4, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack26, $stack27, $stack28, $stack31, $stack34, $stack35, $stack36, $stack39, $stack42, $stack45, $stack46, $stack47, $stack56, $stack59, $stack60, $stack61;
        java.lang.String $stack6, $stack7;
        java.text.AttributedString $stack9, $stack10;
        java.awt.Font $stack12, $stack13, $stack37, $stack38;
        java.awt.Paint $stack15, $stack16, $stack32, $stack33, $stack40, $stack41, $stack54, $stack55;
        org.jfree.chart.ui.RectangleInsets $stack18, $stack19, $stack43, $stack44;
        double $stack21, $stack22, $stack68, $stack69;
        byte $stack23, $stack50, $stack53, $stack64, $stack67, $stack70;
        org.jfree.chart.axis.AxisLabelLocation $stack24, $stack25;
        java.awt.Stroke $stack29, $stack30, $stack57, $stack58;
        float $stack48, $stack49, $stack51, $stack52, $stack62, $stack63, $stack65, $stack66;

        this := @this: org.jfree.chart.axis.Axis;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.axis.Axis;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.axis.Axis) obj;

        $stack5 = this.<org.jfree.chart.axis.Axis: boolean visible>;

        $stack4 = that.<org.jfree.chart.axis.Axis: boolean visible>;

        if $stack5 == $stack4 goto label03;

        return 0;

     label03:
        $stack7 = this.<org.jfree.chart.axis.Axis: java.lang.String label>;

        $stack6 = that.<org.jfree.chart.axis.Axis: java.lang.String label>;

        $stack8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack7, $stack6);

        if $stack8 != 0 goto label04;

        return 0;

     label04:
        $stack10 = this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel>;

        $stack9 = that.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel>;

        $stack11 = staticinvoke <org.jfree.chart.text.AttributedStringUtils: boolean equal(java.text.AttributedString,java.text.AttributedString)>($stack10, $stack9);

        if $stack11 != 0 goto label05;

        return 0;

     label05:
        $stack13 = this.<org.jfree.chart.axis.Axis: java.awt.Font labelFont>;

        $stack12 = that.<org.jfree.chart.axis.Axis: java.awt.Font labelFont>;

        $stack14 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack13, $stack12);

        if $stack14 != 0 goto label06;

        return 0;

     label06:
        $stack16 = this.<org.jfree.chart.axis.Axis: java.awt.Paint labelPaint>;

        $stack15 = that.<org.jfree.chart.axis.Axis: java.awt.Paint labelPaint>;

        $stack17 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack16, $stack15);

        if $stack17 != 0 goto label07;

        return 0;

     label07:
        $stack19 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets labelInsets>;

        $stack18 = that.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets labelInsets>;

        $stack20 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack19, $stack18);

        if $stack20 != 0 goto label08;

        return 0;

     label08:
        $stack22 = this.<org.jfree.chart.axis.Axis: double labelAngle>;

        $stack21 = that.<org.jfree.chart.axis.Axis: double labelAngle>;

        $stack23 = $stack22 cmpl $stack21;

        if $stack23 == 0 goto label09;

        return 0;

     label09:
        $stack25 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        $stack24 = that.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisLabelLocation labelLocation>;

        $stack26 = virtualinvoke $stack25.<org.jfree.chart.axis.AxisLabelLocation: boolean equals(java.lang.Object)>($stack24);

        if $stack26 != 0 goto label10;

        return 0;

     label10:
        $stack28 = this.<org.jfree.chart.axis.Axis: boolean axisLineVisible>;

        $stack27 = that.<org.jfree.chart.axis.Axis: boolean axisLineVisible>;

        if $stack28 == $stack27 goto label11;

        return 0;

     label11:
        $stack30 = this.<org.jfree.chart.axis.Axis: java.awt.Stroke axisLineStroke>;

        $stack29 = that.<org.jfree.chart.axis.Axis: java.awt.Stroke axisLineStroke>;

        $stack31 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack30, $stack29);

        if $stack31 != 0 goto label12;

        return 0;

     label12:
        $stack33 = this.<org.jfree.chart.axis.Axis: java.awt.Paint axisLinePaint>;

        $stack32 = that.<org.jfree.chart.axis.Axis: java.awt.Paint axisLinePaint>;

        $stack34 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack33, $stack32);

        if $stack34 != 0 goto label13;

        return 0;

     label13:
        $stack36 = this.<org.jfree.chart.axis.Axis: boolean tickLabelsVisible>;

        $stack35 = that.<org.jfree.chart.axis.Axis: boolean tickLabelsVisible>;

        if $stack36 == $stack35 goto label14;

        return 0;

     label14:
        $stack38 = this.<org.jfree.chart.axis.Axis: java.awt.Font tickLabelFont>;

        $stack37 = that.<org.jfree.chart.axis.Axis: java.awt.Font tickLabelFont>;

        $stack39 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack38, $stack37);

        if $stack39 != 0 goto label15;

        return 0;

     label15:
        $stack41 = this.<org.jfree.chart.axis.Axis: java.awt.Paint tickLabelPaint>;

        $stack40 = that.<org.jfree.chart.axis.Axis: java.awt.Paint tickLabelPaint>;

        $stack42 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack41, $stack40);

        if $stack42 != 0 goto label16;

        return 0;

     label16:
        $stack44 = this.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets tickLabelInsets>;

        $stack43 = that.<org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets tickLabelInsets>;

        $stack45 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack44, $stack43);

        if $stack45 != 0 goto label17;

        return 0;

     label17:
        $stack47 = this.<org.jfree.chart.axis.Axis: boolean tickMarksVisible>;

        $stack46 = that.<org.jfree.chart.axis.Axis: boolean tickMarksVisible>;

        if $stack47 == $stack46 goto label18;

        return 0;

     label18:
        $stack49 = this.<org.jfree.chart.axis.Axis: float tickMarkInsideLength>;

        $stack48 = that.<org.jfree.chart.axis.Axis: float tickMarkInsideLength>;

        $stack50 = $stack49 cmpl $stack48;

        if $stack50 == 0 goto label19;

        return 0;

     label19:
        $stack52 = this.<org.jfree.chart.axis.Axis: float tickMarkOutsideLength>;

        $stack51 = that.<org.jfree.chart.axis.Axis: float tickMarkOutsideLength>;

        $stack53 = $stack52 cmpl $stack51;

        if $stack53 == 0 goto label20;

        return 0;

     label20:
        $stack55 = this.<org.jfree.chart.axis.Axis: java.awt.Paint tickMarkPaint>;

        $stack54 = that.<org.jfree.chart.axis.Axis: java.awt.Paint tickMarkPaint>;

        $stack56 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack55, $stack54);

        if $stack56 != 0 goto label21;

        return 0;

     label21:
        $stack58 = this.<org.jfree.chart.axis.Axis: java.awt.Stroke tickMarkStroke>;

        $stack57 = that.<org.jfree.chart.axis.Axis: java.awt.Stroke tickMarkStroke>;

        $stack59 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack58, $stack57);

        if $stack59 != 0 goto label22;

        return 0;

     label22:
        $stack61 = this.<org.jfree.chart.axis.Axis: boolean minorTickMarksVisible>;

        $stack60 = that.<org.jfree.chart.axis.Axis: boolean minorTickMarksVisible>;

        if $stack61 == $stack60 goto label23;

        return 0;

     label23:
        $stack63 = this.<org.jfree.chart.axis.Axis: float minorTickMarkInsideLength>;

        $stack62 = that.<org.jfree.chart.axis.Axis: float minorTickMarkInsideLength>;

        $stack64 = $stack63 cmpl $stack62;

        if $stack64 == 0 goto label24;

        return 0;

     label24:
        $stack66 = this.<org.jfree.chart.axis.Axis: float minorTickMarkOutsideLength>;

        $stack65 = that.<org.jfree.chart.axis.Axis: float minorTickMarkOutsideLength>;

        $stack67 = $stack66 cmpl $stack65;

        if $stack67 == 0 goto label25;

        return 0;

     label25:
        $stack69 = this.<org.jfree.chart.axis.Axis: double fixedDimension>;

        $stack68 = that.<org.jfree.chart.axis.Axis: double fixedDimension>;

        $stack70 = $stack69 cmpl $stack68;

        if $stack70 == 0 goto label26;

        return 0;

     label26:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.axis.Axis this;
        java.lang.String $stack2, $stack3;
        int $stack4, $stack5, hash;

        this := @this: org.jfree.chart.axis.Axis;

        hash = 3;

        $stack2 = this.<org.jfree.chart.axis.Axis: java.lang.String label>;

        if $stack2 == null goto label1;

        $stack4 = 83 * 3;

        $stack3 = this.<org.jfree.chart.axis.Axis: java.lang.String label>;

        $stack5 = virtualinvoke $stack3.<java.lang.String: int hashCode()>();

        hash = $stack4 + $stack5;

     label1:
        return hash;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.axis.Axis this;
        java.text.AttributedString $stack2;
        java.awt.Paint $stack3, $stack4, $stack6, $stack8;
        java.awt.Stroke $stack5, $stack7;

        this := @this: org.jfree.chart.axis.Axis;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeAttributedString(java.text.AttributedString,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.axis.Axis: java.awt.Paint labelPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.axis.Axis: java.awt.Paint tickLabelPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack4, stream);

        $stack5 = this.<org.jfree.chart.axis.Axis: java.awt.Stroke axisLineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack5, stream);

        $stack6 = this.<org.jfree.chart.axis.Axis: java.awt.Paint axisLinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack6, stream);

        $stack7 = this.<org.jfree.chart.axis.Axis: java.awt.Stroke tickMarkStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack7, stream);

        $stack8 = this.<org.jfree.chart.axis.Axis: java.awt.Paint tickMarkPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack8, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.axis.Axis this;
        java.text.AttributedString $stack2;
        java.awt.Paint $stack3, $stack4, $stack6, $stack8;
        java.awt.Stroke $stack5, $stack7;
        javax.swing.event.EventListenerList $stack9;

        this := @this: org.jfree.chart.axis.Axis;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.text.AttributedString readAttributedString(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.Axis: java.text.AttributedString attributedLabel> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.Axis: java.awt.Paint labelPaint> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.Axis: java.awt.Paint tickLabelPaint> = $stack4;

        $stack5 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.Axis: java.awt.Stroke axisLineStroke> = $stack5;

        $stack6 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.Axis: java.awt.Paint axisLinePaint> = $stack6;

        $stack7 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.Axis: java.awt.Stroke tickMarkStroke> = $stack7;

        $stack8 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.Axis: java.awt.Paint tickMarkPaint> = $stack8;

        $stack9 = new javax.swing.event.EventListenerList;

        specialinvoke $stack9.<javax.swing.event.EventListenerList: void <init>()>();

        this.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList> = $stack9;

        return;
    }

    static void <clinit>()
    {
        java.awt.Font $stack0, $stack5;
        java.awt.Color $stack1, $stack3, $stack6, $stack9;
        org.jfree.chart.ui.RectangleInsets $stack2, $stack7;
        java.awt.BasicStroke $stack4, $stack8;

        <org.jfree.chart.axis.Axis: float DEFAULT_TICK_MARK_OUTSIDE_LENGTH> = 2.0F;

        <org.jfree.chart.axis.Axis: float DEFAULT_TICK_MARK_INSIDE_LENGTH> = 0.0F;

        <org.jfree.chart.axis.Axis: boolean DEFAULT_TICK_MARKS_VISIBLE> = 1;

        <org.jfree.chart.axis.Axis: boolean DEFAULT_TICK_LABELS_VISIBLE> = 1;

        <org.jfree.chart.axis.Axis: boolean DEFAULT_AXIS_VISIBLE> = 1;

        <org.jfree.chart.axis.Axis: long serialVersionUID> = 7719289504573298271L;

        $stack0 = new java.awt.Font;

        specialinvoke $stack0.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 0, 12);

        <org.jfree.chart.axis.Axis: java.awt.Font DEFAULT_AXIS_LABEL_FONT> = $stack0;

        $stack1 = <java.awt.Color: java.awt.Color BLACK>;

        <org.jfree.chart.axis.Axis: java.awt.Paint DEFAULT_AXIS_LABEL_PAINT> = $stack1;

        $stack2 = new org.jfree.chart.ui.RectangleInsets;

        specialinvoke $stack2.<org.jfree.chart.ui.RectangleInsets: void <init>(double,double,double,double)>(3.0, 3.0, 3.0, 3.0);

        <org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets DEFAULT_AXIS_LABEL_INSETS> = $stack2;

        $stack3 = <java.awt.Color: java.awt.Color GRAY>;

        <org.jfree.chart.axis.Axis: java.awt.Paint DEFAULT_AXIS_LINE_PAINT> = $stack3;

        $stack4 = new java.awt.BasicStroke;

        specialinvoke $stack4.<java.awt.BasicStroke: void <init>(float)>(0.5F);

        <org.jfree.chart.axis.Axis: java.awt.Stroke DEFAULT_AXIS_LINE_STROKE> = $stack4;

        $stack5 = new java.awt.Font;

        specialinvoke $stack5.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 0, 10);

        <org.jfree.chart.axis.Axis: java.awt.Font DEFAULT_TICK_LABEL_FONT> = $stack5;

        $stack6 = <java.awt.Color: java.awt.Color BLACK>;

        <org.jfree.chart.axis.Axis: java.awt.Paint DEFAULT_TICK_LABEL_PAINT> = $stack6;

        $stack7 = new org.jfree.chart.ui.RectangleInsets;

        specialinvoke $stack7.<org.jfree.chart.ui.RectangleInsets: void <init>(double,double,double,double)>(2.0, 4.0, 2.0, 4.0);

        <org.jfree.chart.axis.Axis: org.jfree.chart.ui.RectangleInsets DEFAULT_TICK_LABEL_INSETS> = $stack7;

        $stack8 = new java.awt.BasicStroke;

        specialinvoke $stack8.<java.awt.BasicStroke: void <init>(float)>(0.5F);

        <org.jfree.chart.axis.Axis: java.awt.Stroke DEFAULT_TICK_MARK_STROKE> = $stack8;

        $stack9 = <java.awt.Color: java.awt.Color GRAY>;

        <org.jfree.chart.axis.Axis: java.awt.Paint DEFAULT_TICK_MARK_PAINT> = $stack9;

        return;
    }
}
