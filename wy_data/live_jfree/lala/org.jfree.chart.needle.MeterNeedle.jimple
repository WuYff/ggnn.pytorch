public abstract class org.jfree.chart.needle.MeterNeedle extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.awt.Paint outlinePaint;
    private transient java.awt.Stroke outlineStroke;
    private transient java.awt.Paint fillPaint;
    private transient java.awt.Paint highlightPaint;
    private int size;
    private double rotateX;
    private double rotateY;
    protected static java.awt.geom.AffineTransform transform;

    public void <init>()
    {
        org.jfree.chart.needle.MeterNeedle this;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        specialinvoke this.<org.jfree.chart.needle.MeterNeedle: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint)>(null, null, null);

        return;
    }

    public void <init>(java.awt.Paint, java.awt.Paint, java.awt.Paint)
    {
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Color $stack4;
        java.awt.BasicStroke $stack5;
        java.awt.Paint fill, highlight, outline;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        outline := @parameter0: java.awt.Paint;

        fill := @parameter1: java.awt.Paint;

        highlight := @parameter2: java.awt.Paint;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack4 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint> = $stack4;

        $stack5 = new java.awt.BasicStroke;

        specialinvoke $stack5.<java.awt.BasicStroke: void <init>(float)>(2.0F);

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Stroke outlineStroke> = $stack5;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint> = null;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint highlightPaint> = null;

        this.<org.jfree.chart.needle.MeterNeedle: int size> = 5;

        this.<org.jfree.chart.needle.MeterNeedle: double rotateX> = 0.5;

        this.<org.jfree.chart.needle.MeterNeedle: double rotateY> = 0.5;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint> = fill;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint highlightPaint> = highlight;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint> = outline;

        return;
    }

    public java.awt.Paint getOutlinePaint()
    {
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        $stack1 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint>;

        return $stack1;
    }

    public void setOutlinePaint(java.awt.Paint)
    {
        java.awt.Paint p;
        org.jfree.chart.needle.MeterNeedle this;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        p := @parameter0: java.awt.Paint;

        if p == null goto label1;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint> = p;

     label1:
        return;
    }

    public java.awt.Stroke getOutlineStroke()
    {
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        $stack1 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Stroke outlineStroke>;

        return $stack1;
    }

    public void setOutlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke s;
        org.jfree.chart.needle.MeterNeedle this;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        s := @parameter0: java.awt.Stroke;

        if s == null goto label1;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Stroke outlineStroke> = s;

     label1:
        return;
    }

    public java.awt.Paint getFillPaint()
    {
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        $stack1 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint>;

        return $stack1;
    }

    public void setFillPaint(java.awt.Paint)
    {
        java.awt.Paint p;
        org.jfree.chart.needle.MeterNeedle this;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        p := @parameter0: java.awt.Paint;

        if p == null goto label1;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint> = p;

     label1:
        return;
    }

    public java.awt.Paint getHighlightPaint()
    {
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        $stack1 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint highlightPaint>;

        return $stack1;
    }

    public void setHighlightPaint(java.awt.Paint)
    {
        java.awt.Paint p;
        org.jfree.chart.needle.MeterNeedle this;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        p := @parameter0: java.awt.Paint;

        if p == null goto label1;

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint highlightPaint> = p;

     label1:
        return;
    }

    public double getRotateX()
    {
        org.jfree.chart.needle.MeterNeedle this;
        double $stack1;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        $stack1 = this.<org.jfree.chart.needle.MeterNeedle: double rotateX>;

        return $stack1;
    }

    public void setRotateX(double)
    {
        org.jfree.chart.needle.MeterNeedle this;
        double x;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        x := @parameter0: double;

        this.<org.jfree.chart.needle.MeterNeedle: double rotateX> = x;

        return;
    }

    public void setRotateY(double)
    {
        org.jfree.chart.needle.MeterNeedle this;
        double y;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        y := @parameter0: double;

        this.<org.jfree.chart.needle.MeterNeedle: double rotateY> = y;

        return;
    }

    public double getRotateY()
    {
        org.jfree.chart.needle.MeterNeedle this;
        double $stack1;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        $stack1 = this.<org.jfree.chart.needle.MeterNeedle: double rotateY>;

        return $stack1;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        virtualinvoke this.<org.jfree.chart.needle.MeterNeedle: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)>(g2, plotArea, 0.0);

        return;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, double)
    {
        java.awt.geom.Point2D$Double $stack6;
        java.awt.geom.Rectangle2D plotArea;
        double $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, angle;
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Graphics2D g2;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        angle := @parameter2: double;

        $stack6 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack6.<java.awt.geom.Point2D$Double: void <init>()>();

        $stack7 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack8 = this.<org.jfree.chart.needle.MeterNeedle: double rotateX>;

        $stack9 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack10 = $stack8 * $stack9;

        $stack11 = $stack7 + $stack10;

        $stack12 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack13 = this.<org.jfree.chart.needle.MeterNeedle: double rotateY>;

        $stack14 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack15 = $stack13 * $stack14;

        $stack16 = $stack12 + $stack15;

        virtualinvoke $stack6.<java.awt.geom.Point2D$Double: void setLocation(double,double)>($stack11, $stack16);

        virtualinvoke this.<org.jfree.chart.needle.MeterNeedle: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)>(g2, plotArea, $stack6, angle);

        return;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, double)
    {
        java.awt.Graphics2D g2;
        java.awt.Color savePaint;
        java.awt.Stroke saveStroke;
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.geom.Rectangle2D plotArea;
        java.awt.geom.Point2D rotate;
        double angle, $stack10;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        rotate := @parameter2: java.awt.geom.Point2D;

        angle := @parameter3: double;

        savePaint = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Color getColor()>();

        saveStroke = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Stroke getStroke()>();

        $stack10 = staticinvoke <java.lang.Math: double toRadians(double)>(angle);

        virtualinvoke this.<org.jfree.chart.needle.MeterNeedle: void drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)>(g2, plotArea, rotate, $stack10);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(saveStroke);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(savePaint);

        return;
    }

    protected abstract void drawNeedle(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, double);

    protected void defaultDisplay(java.awt.Graphics2D, java.awt.Shape)
    {
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Paint $stack3, $stack4, $stack6, $stack7;
        java.awt.Graphics2D g2;
        java.awt.Stroke $stack5;
        java.awt.Shape shape;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        g2 := @parameter0: java.awt.Graphics2D;

        shape := @parameter1: java.awt.Shape;

        $stack3 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint>;

        if $stack3 == null goto label1;

        $stack7 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack7);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(shape);

     label1:
        $stack4 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint>;

        if $stack4 == null goto label2;

        $stack5 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Stroke outlineStroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack5);

        $stack6 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack6);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(shape);

     label2:
        return;
    }

    public int getSize()
    {
        org.jfree.chart.needle.MeterNeedle this;
        int $stack1;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        $stack1 = this.<org.jfree.chart.needle.MeterNeedle: int size>;

        return $stack1;
    }

    public void setSize(int)
    {
        org.jfree.chart.needle.MeterNeedle this;
        int pixels;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        pixels := @parameter0: int;

        this.<org.jfree.chart.needle.MeterNeedle: int size> = pixels;

        return;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        java.awt.geom.AffineTransform $stack1;
        org.jfree.chart.needle.MeterNeedle this;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        $stack1 = <org.jfree.chart.needle.MeterNeedle: java.awt.geom.AffineTransform transform>;

        return $stack1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.needle.MeterNeedle this, that;
        boolean $stack3, $stack6, $stack9, $stack12, $stack15;
        java.awt.Paint $stack4, $stack5, $stack10, $stack11, $stack13, $stack14;
        java.awt.Stroke $stack7, $stack8;
        int $stack16, $stack17;
        double $stack18, $stack19, $stack21, $stack22;
        byte $stack20, $stack23;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.needle.MeterNeedle;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.needle.MeterNeedle) obj;

        $stack5 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint>;

        $stack4 = that.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint>;

        $stack6 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack5, $stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Stroke outlineStroke>;

        $stack7 = that.<org.jfree.chart.needle.MeterNeedle: java.awt.Stroke outlineStroke>;

        $stack9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack8, $stack7);

        if $stack9 != 0 goto label4;

        return 0;

     label4:
        $stack11 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint>;

        $stack10 = that.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint>;

        $stack12 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack11, $stack10);

        if $stack12 != 0 goto label5;

        return 0;

     label5:
        $stack14 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint highlightPaint>;

        $stack13 = that.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint highlightPaint>;

        $stack15 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack14, $stack13);

        if $stack15 != 0 goto label6;

        return 0;

     label6:
        $stack17 = this.<org.jfree.chart.needle.MeterNeedle: int size>;

        $stack16 = that.<org.jfree.chart.needle.MeterNeedle: int size>;

        if $stack17 == $stack16 goto label7;

        return 0;

     label7:
        $stack19 = this.<org.jfree.chart.needle.MeterNeedle: double rotateX>;

        $stack18 = that.<org.jfree.chart.needle.MeterNeedle: double rotateX>;

        $stack20 = $stack19 cmpl $stack18;

        if $stack20 == 0 goto label8;

        return 0;

     label8:
        $stack22 = this.<org.jfree.chart.needle.MeterNeedle: double rotateY>;

        $stack21 = that.<org.jfree.chart.needle.MeterNeedle: double rotateY>;

        $stack23 = $stack22 cmpl $stack21;

        if $stack23 == 0 goto label9;

        return 0;

     label9:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Paint $stack2, $stack4, $stack6;
        java.awt.Stroke $stack8;
        double $stack10, $stack12;
        int $stack14, result;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        $stack2 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint>;

        result = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,java.awt.Paint)>(193, $stack2);

        $stack4 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint highlightPaint>;

        result = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,java.awt.Paint)>(result, $stack4);

        $stack6 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint>;

        result = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,java.awt.Paint)>(result, $stack6);

        $stack8 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Stroke outlineStroke>;

        result = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,java.awt.Stroke)>(result, $stack8);

        $stack10 = this.<org.jfree.chart.needle.MeterNeedle: double rotateX>;

        result = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,double)>(result, $stack10);

        $stack12 = this.<org.jfree.chart.needle.MeterNeedle: double rotateY>;

        result = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,double)>(result, $stack12);

        $stack14 = this.<org.jfree.chart.needle.MeterNeedle: int size>;

        result = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,int)>(result, $stack14);

        return result;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Stroke $stack2;
        java.awt.Paint $stack3, $stack4, $stack5;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Stroke outlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack4, stream);

        $stack5 = this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint highlightPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack5, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.needle.MeterNeedle this;
        java.awt.Stroke $stack2;
        java.awt.Paint $stack3, $stack4, $stack5;

        this := @this: org.jfree.chart.needle.MeterNeedle;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Stroke outlineStroke> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint outlinePaint> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint fillPaint> = $stack4;

        $stack5 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.needle.MeterNeedle: java.awt.Paint highlightPaint> = $stack5;

        return;
    }

    static void <clinit>()
    {
        java.awt.geom.AffineTransform $stack0;

        <org.jfree.chart.needle.MeterNeedle: long serialVersionUID> = 5203064851510951052L;

        $stack0 = new java.awt.geom.AffineTransform;

        specialinvoke $stack0.<java.awt.geom.AffineTransform: void <init>()>();

        <org.jfree.chart.needle.MeterNeedle: java.awt.geom.AffineTransform transform> = $stack0;

        return;
    }
}
