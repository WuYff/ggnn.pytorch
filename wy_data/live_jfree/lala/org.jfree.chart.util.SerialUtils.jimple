public class org.jfree.chart.util.SerialUtils extends java.lang.Object
{

    private void <init>()
    {
        org.jfree.chart.util.SerialUtils this;

        this := @this: org.jfree.chart.util.SerialUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isSerializable(java.lang.Class)
    {
        java.lang.Class c, $stack1;
        boolean $stack2;

        c := @parameter0: java.lang.Class;

        $stack1 = class "Ljava/io/Serializable;";

        $stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(c);

        return $stack2;
    }

    public static java.awt.Paint readPaint(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        boolean isNull, $stack13, $stack14, isCyclic;
        java.lang.Object $stack12, $stack18, $stack21, $stack24;
        java.lang.Class c;
        float x1, y1, x2, y2;
        java.awt.Color c1, c2;
        java.awt.GradientPaint $stack23;
        java.lang.IllegalArgumentException $stack25;
        java.awt.Paint result;

        stream := @parameter0: java.io.ObjectInputStream;

        if stream != null goto label1;

        $stack25 = new java.lang.IllegalArgumentException;

        specialinvoke $stack25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack25;

     label1:
        result = null;

        isNull = virtualinvoke stream.<java.io.ObjectInputStream: boolean readBoolean()>();

        if isNull != 0 goto label3;

        $stack12 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        c = (java.lang.Class) $stack12;

        $stack13 = staticinvoke <org.jfree.chart.util.SerialUtils: boolean isSerializable(java.lang.Class)>(c);

        if $stack13 == 0 goto label2;

        $stack24 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        result = (java.awt.Paint) $stack24;

        goto label3;

     label2:
        $stack14 = virtualinvoke c.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/awt/GradientPaint;");

        if $stack14 == 0 goto label3;

        x1 = virtualinvoke stream.<java.io.ObjectInputStream: float readFloat()>();

        y1 = virtualinvoke stream.<java.io.ObjectInputStream: float readFloat()>();

        $stack18 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        c1 = (java.awt.Color) $stack18;

        x2 = virtualinvoke stream.<java.io.ObjectInputStream: float readFloat()>();

        y2 = virtualinvoke stream.<java.io.ObjectInputStream: float readFloat()>();

        $stack21 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        c2 = (java.awt.Color) $stack21;

        isCyclic = virtualinvoke stream.<java.io.ObjectInputStream: boolean readBoolean()>();

        $stack23 = new java.awt.GradientPaint;

        specialinvoke $stack23.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color,boolean)>(x1, y1, c1, x2, y2, c2, isCyclic);

        result = $stack23;

     label3:
        return result;
    }

    public static void writePaint(java.awt.Paint, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        java.awt.Paint paint;
        java.lang.Class $stack3;
        boolean $stack4, $stack5, $stack20;
        java.awt.GradientPaint gp;
        java.awt.geom.Point2D $stack6, $stack9, $stack13, $stack16;
        double $stack7, $stack10, $stack14, $stack17;
        float $stack8, $stack11, $stack15, $stack18;
        java.awt.Color $stack12, $stack19;
        java.lang.IllegalArgumentException $stack21;

        paint := @parameter0: java.awt.Paint;

        stream := @parameter1: java.io.ObjectOutputStream;

        if stream != null goto label1;

        $stack21 = new java.lang.IllegalArgumentException;

        specialinvoke $stack21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack21;

     label1:
        if paint == null goto label3;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(0);

        $stack3 = virtualinvoke paint.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack3);

        $stack4 = paint instanceof java.io.Serializable;

        if $stack4 == 0 goto label2;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(paint);

        goto label4;

     label2:
        $stack5 = paint instanceof java.awt.GradientPaint;

        if $stack5 == 0 goto label4;

        gp = (java.awt.GradientPaint) paint;

        $stack6 = virtualinvoke gp.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint1()>();

        $stack7 = virtualinvoke $stack6.<java.awt.geom.Point2D: double getX()>();

        $stack8 = (float) $stack7;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeFloat(float)>($stack8);

        $stack9 = virtualinvoke gp.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint1()>();

        $stack10 = virtualinvoke $stack9.<java.awt.geom.Point2D: double getY()>();

        $stack11 = (float) $stack10;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeFloat(float)>($stack11);

        $stack12 = virtualinvoke gp.<java.awt.GradientPaint: java.awt.Color getColor1()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack12);

        $stack13 = virtualinvoke gp.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint2()>();

        $stack14 = virtualinvoke $stack13.<java.awt.geom.Point2D: double getX()>();

        $stack15 = (float) $stack14;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeFloat(float)>($stack15);

        $stack16 = virtualinvoke gp.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint2()>();

        $stack17 = virtualinvoke $stack16.<java.awt.geom.Point2D: double getY()>();

        $stack18 = (float) $stack17;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeFloat(float)>($stack18);

        $stack19 = virtualinvoke gp.<java.awt.GradientPaint: java.awt.Color getColor2()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack19);

        $stack20 = virtualinvoke gp.<java.awt.GradientPaint: boolean isCyclic()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($stack20);

        goto label4;

     label3:
        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(1);

     label4:
        return;
    }

    public static java.awt.Stroke readStroke(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        boolean isNull, $stack12;
        java.lang.Object $stack11, $stack13, $stack19;
        java.lang.Class c;
        float width, miterLimit, dashPhase;
        int cap, join;
        float[] $stack20, dash;
        java.awt.BasicStroke $stack22;
        java.lang.IllegalArgumentException $stack23;
        java.awt.Stroke result;

        stream := @parameter0: java.io.ObjectInputStream;

        if stream != null goto label1;

        $stack23 = new java.lang.IllegalArgumentException;

        specialinvoke $stack23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack23;

     label1:
        result = null;

        isNull = virtualinvoke stream.<java.io.ObjectInputStream: boolean readBoolean()>();

        if isNull != 0 goto label3;

        $stack11 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        c = (java.lang.Class) $stack11;

        $stack12 = virtualinvoke c.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/awt/BasicStroke;");

        if $stack12 == 0 goto label2;

        width = virtualinvoke stream.<java.io.ObjectInputStream: float readFloat()>();

        cap = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        join = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        miterLimit = virtualinvoke stream.<java.io.ObjectInputStream: float readFloat()>();

        $stack19 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $stack20 = (float[]) $stack19;

        dash = (float[]) $stack20;

        dashPhase = virtualinvoke stream.<java.io.ObjectInputStream: float readFloat()>();

        $stack22 = new java.awt.BasicStroke;

        specialinvoke $stack22.<java.awt.BasicStroke: void <init>(float,int,int,float,float[],float)>(width, cap, join, miterLimit, dash, dashPhase);

        result = $stack22;

        goto label3;

     label2:
        $stack13 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        result = (java.awt.Stroke) $stack13;

     label3:
        return result;
    }

    public static void writeStroke(java.awt.Stroke, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        java.awt.Stroke stroke;
        boolean $stack3;
        java.lang.Class $stack4;
        java.awt.BasicStroke s;
        float $stack5, $stack8, $stack10;
        int $stack6, $stack7;
        float[] $stack9;
        java.lang.IllegalArgumentException $stack11;

        stroke := @parameter0: java.awt.Stroke;

        stream := @parameter1: java.io.ObjectOutputStream;

        if stream != null goto label1;

        $stack11 = new java.lang.IllegalArgumentException;

        specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack11;

     label1:
        if stroke == null goto label3;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(0);

        $stack3 = stroke instanceof java.awt.BasicStroke;

        if $stack3 == 0 goto label2;

        s = (java.awt.BasicStroke) stroke;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(class "Ljava/awt/BasicStroke;");

        $stack5 = virtualinvoke s.<java.awt.BasicStroke: float getLineWidth()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeFloat(float)>($stack5);

        $stack6 = virtualinvoke s.<java.awt.BasicStroke: int getEndCap()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>($stack6);

        $stack7 = virtualinvoke s.<java.awt.BasicStroke: int getLineJoin()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>($stack7);

        $stack8 = virtualinvoke s.<java.awt.BasicStroke: float getMiterLimit()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeFloat(float)>($stack8);

        $stack9 = virtualinvoke s.<java.awt.BasicStroke: float[] getDashArray()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke s.<java.awt.BasicStroke: float getDashPhase()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeFloat(float)>($stack10);

        goto label4;

     label2:
        $stack4 = virtualinvoke stroke.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack4);

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(stroke);

        goto label4;

     label3:
        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(1);

     label4:
        return;
    }

    public static java.awt.Composite readComposite(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        boolean isNull, $stack8, $stack9;
        java.lang.Object $stack7, $stack14;
        java.lang.Class c;
        int rule;
        float alpha;
        java.lang.IllegalArgumentException $stack15;
        java.awt.Composite result;

        stream := @parameter0: java.io.ObjectInputStream;

        if stream != null goto label1;

        $stack15 = new java.lang.IllegalArgumentException;

        specialinvoke $stack15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack15;

     label1:
        result = null;

        isNull = virtualinvoke stream.<java.io.ObjectInputStream: boolean readBoolean()>();

        if isNull != 0 goto label3;

        $stack7 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        c = (java.lang.Class) $stack7;

        $stack8 = staticinvoke <org.jfree.chart.util.SerialUtils: boolean isSerializable(java.lang.Class)>(c);

        if $stack8 == 0 goto label2;

        $stack14 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        result = (java.awt.Composite) $stack14;

        goto label3;

     label2:
        $stack9 = virtualinvoke c.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/awt/AlphaComposite;");

        if $stack9 == 0 goto label3;

        rule = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        alpha = virtualinvoke stream.<java.io.ObjectInputStream: float readFloat()>();

        result = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(rule, alpha);

     label3:
        return result;
    }

    public static void writeComposite(java.awt.Composite, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        java.awt.Composite composite;
        java.lang.Class $stack3;
        boolean $stack4, $stack5;
        java.awt.AlphaComposite ac;
        int $stack6;
        float $stack7;
        java.lang.IllegalArgumentException $stack8;

        composite := @parameter0: java.awt.Composite;

        stream := @parameter1: java.io.ObjectOutputStream;

        if stream != null goto label1;

        $stack8 = new java.lang.IllegalArgumentException;

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack8;

     label1:
        if composite == null goto label3;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(0);

        $stack3 = virtualinvoke composite.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack3);

        $stack4 = composite instanceof java.io.Serializable;

        if $stack4 == 0 goto label2;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(composite);

        goto label4;

     label2:
        $stack5 = composite instanceof java.awt.AlphaComposite;

        if $stack5 == 0 goto label4;

        ac = (java.awt.AlphaComposite) composite;

        $stack6 = virtualinvoke ac.<java.awt.AlphaComposite: int getRule()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>($stack6);

        $stack7 = virtualinvoke ac.<java.awt.AlphaComposite: float getAlpha()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeFloat(float)>($stack7);

        goto label4;

     label3:
        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(1);

     label4:
        return;
    }

    public static java.awt.Shape readShape(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        boolean isNull, $stack19, $stack20, $stack21, $stack22, $stack23, y1#19;
        java.lang.Object $stack18, $stack24;
        java.lang.Class c;
        java.awt.geom.GeneralPath $stack26;
        float[] args;
        int type, at, x2#20, $stack29;
        float $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48, $stack50;
        java.lang.RuntimeException $stack49;
        double as, ae, x1, y1, x2, y2;
        java.awt.geom.Arc2D$Double $stack60;
        java.awt.geom.Ellipse2D$Double $stack65;
        java.awt.geom.Rectangle2D$Double $stack70;
        java.awt.geom.Line2D$Double $stack75;
        java.lang.IllegalArgumentException $stack76;
        java.awt.Shape result;

        stream := @parameter0: java.io.ObjectInputStream;

        if stream != null goto label01;

        $stack76 = new java.lang.IllegalArgumentException;

        specialinvoke $stack76.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack76;

     label01:
        result = null;

        isNull = virtualinvoke stream.<java.io.ObjectInputStream: boolean readBoolean()>();

        if isNull != 0 goto label18;

        $stack18 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        c = (java.lang.Class) $stack18;

        $stack19 = virtualinvoke c.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/awt/geom/Line2D;");

        if $stack19 == 0 goto label02;

        x1 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        y1 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        x2 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        y2 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        $stack75 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack75.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(x1, y1, x2, y2);

        result = $stack75;

        goto label18;

     label02:
        $stack20 = virtualinvoke c.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/awt/geom/Rectangle2D;");

        if $stack20 == 0 goto label03;

        x1 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        y1 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        x2 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        y2 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        $stack70 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack70.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(x1, y1, x2, y2);

        result = $stack70;

        goto label18;

     label03:
        $stack21 = virtualinvoke c.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/awt/geom/Ellipse2D;");

        if $stack21 == 0 goto label04;

        x1 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        y1 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        x2 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        y2 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        $stack65 = new java.awt.geom.Ellipse2D$Double;

        specialinvoke $stack65.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>(x1, y1, x2, y2);

        result = $stack65;

        goto label18;

     label04:
        $stack22 = virtualinvoke c.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/awt/geom/Arc2D;");

        if $stack22 == 0 goto label05;

        x1 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        y1 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        x2 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        y2 = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        as = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        ae = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        at = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        $stack60 = new java.awt.geom.Arc2D$Double;

        specialinvoke $stack60.<java.awt.geom.Arc2D$Double: void <init>(double,double,double,double,double,double,int)>(x1, y1, x2, y2, as, ae, at);

        result = $stack60;

        goto label18;

     label05:
        $stack23 = virtualinvoke c.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/awt/geom/GeneralPath;");

        if $stack23 == 0 goto label17;

        $stack26 = new java.awt.geom.GeneralPath;

        specialinvoke $stack26.<java.awt.geom.GeneralPath: void <init>()>();

        args = newarray (float)[6];

        y1#19 = virtualinvoke stream.<java.io.ObjectInputStream: boolean readBoolean()>();

     label06:
        if y1#19 != 0 goto label16;

        type = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        x2#20 = 0;

     label07:
        if x2#20 >= 6 goto label08;

        $stack50 = virtualinvoke stream.<java.io.ObjectInputStream: float readFloat()>();

        args[x2#20] = $stack50;

        x2#20 = x2#20 + 1;

        goto label07;

     label08:
        tableswitch(type)
        {
            case 0: goto label09;
            case 1: goto label10;
            case 2: goto label12;
            case 3: goto label11;
            case 4: goto label13;
            default: goto label14;
        };

     label09:
        $stack48 = args[0];

        $stack47 = args[1];

        virtualinvoke $stack26.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack48, $stack47);

        goto label15;

     label10:
        $stack46 = args[0];

        $stack45 = args[1];

        virtualinvoke $stack26.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack46, $stack45);

        goto label15;

     label11:
        $stack37 = args[0];

        $stack36 = args[1];

        $stack35 = args[2];

        $stack34 = args[3];

        $stack33 = args[4];

        $stack32 = args[5];

        virtualinvoke $stack26.<java.awt.geom.GeneralPath: void curveTo(float,float,float,float,float,float)>($stack37, $stack36, $stack35, $stack34, $stack33, $stack32);

        goto label15;

     label12:
        $stack44 = args[0];

        $stack43 = args[1];

        $stack42 = args[2];

        $stack41 = args[3];

        virtualinvoke $stack26.<java.awt.geom.GeneralPath: void quadTo(float,float,float,float)>($stack44, $stack43, $stack42, $stack41);

        goto label15;

     label13:
        virtualinvoke $stack26.<java.awt.geom.GeneralPath: void closePath()>();

        goto label15;

     label14:
        $stack49 = new java.lang.RuntimeException;

        specialinvoke $stack49.<java.lang.RuntimeException: void <init>(java.lang.String)>("JFreeChart - No path exists");

        throw $stack49;

     label15:
        $stack29 = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        virtualinvoke $stack26.<java.awt.geom.GeneralPath: void setWindingRule(int)>($stack29);

        y1#19 = virtualinvoke stream.<java.io.ObjectInputStream: boolean readBoolean()>();

        goto label06;

     label16:
        result = $stack26;

        goto label18;

     label17:
        $stack24 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        result = (java.awt.Shape) $stack24;

     label18:
        return result;
    }

    public static void writeShape(java.awt.Shape, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        java.awt.Shape shape;
        boolean $stack6, $stack7, $stack8, $stack9, $stack10, $stack13, $stack14, $stack17;
        java.lang.Class $stack11;
        float[] args;
        int type, $stack16, $stack28, i;
        float $stack19;
        double $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40;
        java.lang.IllegalArgumentException $stack41;
        java.awt.geom.Line2D line;
        java.awt.geom.Rectangle2D line#2;
        java.awt.geom.Ellipse2D line#3;
        java.awt.geom.Arc2D line#4;
        java.awt.geom.PathIterator line#5;

        shape := @parameter0: java.awt.Shape;

        stream := @parameter1: java.io.ObjectOutputStream;

        if stream != null goto label01;

        $stack41 = new java.lang.IllegalArgumentException;

        specialinvoke $stack41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack41;

     label01:
        if shape == null goto label11;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(0);

        $stack6 = shape instanceof java.awt.geom.Line2D;

        if $stack6 == 0 goto label02;

        line = (java.awt.geom.Line2D) shape;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(class "Ljava/awt/geom/Line2D;");

        $stack37 = virtualinvoke line.<java.awt.geom.Line2D: double getX1()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack37);

        $stack38 = virtualinvoke line.<java.awt.geom.Line2D: double getY1()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack38);

        $stack39 = virtualinvoke line.<java.awt.geom.Line2D: double getX2()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack39);

        $stack40 = virtualinvoke line.<java.awt.geom.Line2D: double getY2()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack40);

        goto label12;

     label02:
        $stack7 = shape instanceof java.awt.geom.Rectangle2D;

        if $stack7 == 0 goto label03;

        line#2 = (java.awt.geom.Rectangle2D) shape;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(class "Ljava/awt/geom/Rectangle2D;");

        $stack33 = virtualinvoke line#2.<java.awt.geom.Rectangle2D: double getX()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack33);

        $stack34 = virtualinvoke line#2.<java.awt.geom.Rectangle2D: double getY()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack34);

        $stack35 = virtualinvoke line#2.<java.awt.geom.Rectangle2D: double getWidth()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack35);

        $stack36 = virtualinvoke line#2.<java.awt.geom.Rectangle2D: double getHeight()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack36);

        goto label12;

     label03:
        $stack8 = shape instanceof java.awt.geom.Ellipse2D;

        if $stack8 == 0 goto label04;

        line#3 = (java.awt.geom.Ellipse2D) shape;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(class "Ljava/awt/geom/Ellipse2D;");

        $stack29 = virtualinvoke line#3.<java.awt.geom.Ellipse2D: double getX()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack29);

        $stack30 = virtualinvoke line#3.<java.awt.geom.Ellipse2D: double getY()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack30);

        $stack31 = virtualinvoke line#3.<java.awt.geom.Ellipse2D: double getWidth()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack31);

        $stack32 = virtualinvoke line#3.<java.awt.geom.Ellipse2D: double getHeight()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack32);

        goto label12;

     label04:
        $stack9 = shape instanceof java.awt.geom.Arc2D;

        if $stack9 == 0 goto label05;

        line#4 = (java.awt.geom.Arc2D) shape;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(class "Ljava/awt/geom/Arc2D;");

        $stack22 = virtualinvoke line#4.<java.awt.geom.Arc2D: double getX()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack22);

        $stack23 = virtualinvoke line#4.<java.awt.geom.Arc2D: double getY()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack23);

        $stack24 = virtualinvoke line#4.<java.awt.geom.Arc2D: double getWidth()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack24);

        $stack25 = virtualinvoke line#4.<java.awt.geom.Arc2D: double getHeight()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack25);

        $stack26 = virtualinvoke line#4.<java.awt.geom.Arc2D: double getAngleStart()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack26);

        $stack27 = virtualinvoke line#4.<java.awt.geom.Arc2D: double getAngleExtent()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack27);

        $stack28 = virtualinvoke line#4.<java.awt.geom.Arc2D: int getArcType()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>($stack28);

        goto label12;

     label05:
        $stack10 = shape instanceof java.awt.geom.GeneralPath;

        if $stack10 == 0 goto label10;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(class "Ljava/awt/geom/GeneralPath;");

        line#5 = interfaceinvoke shape.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        args = newarray (float)[6];

        $stack13 = interfaceinvoke line#5.<java.awt.geom.PathIterator: boolean isDone()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($stack13);

     label06:
        $stack14 = interfaceinvoke line#5.<java.awt.geom.PathIterator: boolean isDone()>();

        if $stack14 != 0 goto label09;

        type = interfaceinvoke line#5.<java.awt.geom.PathIterator: int currentSegment(float[])>(args);

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>(type);

        i = 0;

     label07:
        if i >= 6 goto label08;

        $stack19 = args[i];

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeFloat(float)>($stack19);

        i = i + 1;

        goto label07;

     label08:
        $stack16 = interfaceinvoke line#5.<java.awt.geom.PathIterator: int getWindingRule()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>($stack16);

        interfaceinvoke line#5.<java.awt.geom.PathIterator: void next()>();

        $stack17 = interfaceinvoke line#5.<java.awt.geom.PathIterator: boolean isDone()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($stack17);

        goto label06;

     label09:
        goto label12;

     label10:
        $stack11 = virtualinvoke shape.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack11);

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(shape);

        goto label12;

     label11:
        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(1);

     label12:
        return;
    }

    public static java.awt.geom.Point2D readPoint2D(java.io.ObjectInputStream) throws java.io.IOException
    {
        java.io.ObjectInputStream stream;
        boolean isNull;
        double x, y;
        java.awt.geom.Point2D$Double $stack10, result;
        java.lang.IllegalArgumentException $stack12;

        stream := @parameter0: java.io.ObjectInputStream;

        if stream != null goto label1;

        $stack12 = new java.lang.IllegalArgumentException;

        specialinvoke $stack12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack12;

     label1:
        result = null;

        isNull = virtualinvoke stream.<java.io.ObjectInputStream: boolean readBoolean()>();

        if isNull != 0 goto label2;

        x = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        y = virtualinvoke stream.<java.io.ObjectInputStream: double readDouble()>();

        $stack10 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack10.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x, y);

        result = $stack10;

     label2:
        return result;
    }

    public static void writePoint2D(java.awt.geom.Point2D, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        java.awt.geom.Point2D p;
        double $stack2, $stack3;
        java.lang.IllegalArgumentException $stack4;

        p := @parameter0: java.awt.geom.Point2D;

        stream := @parameter1: java.io.ObjectOutputStream;

        if stream != null goto label1;

        $stack4 = new java.lang.IllegalArgumentException;

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack4;

     label1:
        if p == null goto label2;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(0);

        $stack2 = virtualinvoke p.<java.awt.geom.Point2D: double getX()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack2);

        $stack3 = virtualinvoke p.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeDouble(double)>($stack3);

        goto label3;

     label2:
        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(1);

     label3:
        return;
    }

    public static java.text.AttributedString readAttributedString(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        boolean isNull;
        java.lang.Object $stack9, $stack14;
        java.lang.String plainStr;
        java.text.AttributedString $stack10, result;
        int limit, start;
        java.util.Map atts;
        java.lang.IllegalArgumentException $stack18;
        char c;

        stream := @parameter0: java.io.ObjectInputStream;

        if stream != null goto label1;

        $stack18 = new java.lang.IllegalArgumentException;

        specialinvoke $stack18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack18;

     label1:
        result = null;

        isNull = virtualinvoke stream.<java.io.ObjectInputStream: boolean readBoolean()>();

        if isNull != 0 goto label3;

        $stack9 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        plainStr = (java.lang.String) $stack9;

        $stack10 = new java.text.AttributedString;

        specialinvoke $stack10.<java.text.AttributedString: void <init>(java.lang.String)>(plainStr);

        result = $stack10;

        c = virtualinvoke stream.<java.io.ObjectInputStream: char readChar()>();

        start = 0;

     label2:
        if c == 65535 goto label3;

        limit = virtualinvoke stream.<java.io.ObjectInputStream: int readInt()>();

        $stack14 = virtualinvoke stream.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        atts = (java.util.Map) $stack14;

        virtualinvoke $stack10.<java.text.AttributedString: void addAttributes(java.util.Map,int,int)>(atts, start, limit);

        start = limit;

        c = virtualinvoke stream.<java.io.ObjectInputStream: char readChar()>();

        goto label2;

     label3:
        return result;
    }

    public static void writeAttributedString(java.text.AttributedString, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        java.text.AttributedString as;
        java.text.AttributedCharacterIterator aci;
        java.lang.StringBuffer $stack9, plainStr;
        java.lang.String $stack11;
        int begin, limit, $stack15;
        java.util.HashMap $stack16;
        java.util.Map $stack17;
        java.lang.IllegalArgumentException $stack25;
        char current;

        as := @parameter0: java.text.AttributedString;

        stream := @parameter1: java.io.ObjectOutputStream;

        if stream != null goto label1;

        $stack25 = new java.lang.IllegalArgumentException;

        specialinvoke $stack25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'stream\' argument.");

        throw $stack25;

     label1:
        if as == null goto label6;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(0);

        aci = virtualinvoke as.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        $stack9 = new java.lang.StringBuffer;

        specialinvoke $stack9.<java.lang.StringBuffer: void <init>()>();

        plainStr = $stack9;

        current = interfaceinvoke aci.<java.text.AttributedCharacterIterator: char first()>();

     label2:
        if current == 65535 goto label3;

        plainStr = virtualinvoke plainStr.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(current);

        current = interfaceinvoke aci.<java.text.AttributedCharacterIterator: char next()>();

        goto label2;

     label3:
        $stack11 = virtualinvoke plainStr.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack11);

        current = interfaceinvoke aci.<java.text.AttributedCharacterIterator: char first()>();

        begin = interfaceinvoke aci.<java.text.AttributedCharacterIterator: int getBeginIndex()>();

     label4:
        if current == 65535 goto label5;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeChar(int)>(current);

        limit = interfaceinvoke aci.<java.text.AttributedCharacterIterator: int getRunLimit()>();

        $stack15 = limit - begin;

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeInt(int)>($stack15);

        $stack16 = new java.util.HashMap;

        $stack17 = interfaceinvoke aci.<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>();

        specialinvoke $stack16.<java.util.HashMap: void <init>(java.util.Map)>($stack17);

        virtualinvoke stream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack16);

        current = interfaceinvoke aci.<java.text.AttributedCharacterIterator: char setIndex(int)>(limit);

        goto label4;

     label5:
        virtualinvoke stream.<java.io.ObjectOutputStream: void writeChar(int)>(65535);

        goto label7;

     label6:
        virtualinvoke stream.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(1);

     label7:
        return;
    }
}
