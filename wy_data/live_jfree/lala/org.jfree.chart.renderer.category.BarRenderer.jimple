public class org.jfree.chart.renderer.category.BarRenderer extends org.jfree.chart.renderer.category.AbstractCategoryItemRenderer implements java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final double DEFAULT_ITEM_MARGIN;
    public static final double BAR_OUTLINE_WIDTH_THRESHOLD;
    private static org.jfree.chart.renderer.category.BarPainter defaultBarPainter;
    private static boolean defaultShadowsVisible;
    private double itemMargin;
    private boolean drawBarOutline;
    private double maximumBarWidth;
    private double minimumBarLength;
    private org.jfree.chart.ui.GradientPaintTransformer gradientPaintTransformer;
    private org.jfree.chart.labels.ItemLabelPosition positiveItemLabelPositionFallback;
    private org.jfree.chart.labels.ItemLabelPosition negativeItemLabelPositionFallback;
    private double upperClip;
    private double lowerClip;
    private double base;
    private boolean includeBaseInRange;
    private org.jfree.chart.renderer.category.BarPainter barPainter;
    private boolean shadowsVisible;
    private transient java.awt.Paint shadowPaint;
    private double shadowXOffset;
    private double shadowYOffset;

    public static org.jfree.chart.renderer.category.BarPainter getDefaultBarPainter()
    {
        org.jfree.chart.renderer.category.BarPainter $stack0;

        $stack0 = <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter defaultBarPainter>;

        return $stack0;
    }

    public static void setDefaultBarPainter(org.jfree.chart.renderer.category.BarPainter)
    {
        org.jfree.chart.renderer.category.BarPainter painter;

        painter := @parameter0: org.jfree.chart.renderer.category.BarPainter;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(painter, "painter");

        <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter defaultBarPainter> = painter;

        return;
    }

    public static boolean getDefaultShadowsVisible()
    {
        boolean $stack0;

        $stack0 = <org.jfree.chart.renderer.category.BarRenderer: boolean defaultShadowsVisible>;

        return $stack0;
    }

    public static void setDefaultShadowsVisible(boolean)
    {
        boolean visible;

        visible := @parameter0: boolean;

        <org.jfree.chart.renderer.category.BarRenderer: boolean defaultShadowsVisible> = visible;

        return;
    }

    public void <init>()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.ui.StandardGradientPaintTransformer $stack1;
        java.awt.geom.Rectangle2D$Double $stack2;
        org.jfree.chart.renderer.category.BarPainter $stack3;
        boolean $stack4;
        java.awt.Color $stack5;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>();

        this.<org.jfree.chart.renderer.category.BarRenderer: double base> = 0.0;

        this.<org.jfree.chart.renderer.category.BarRenderer: boolean includeBaseInRange> = 1;

        this.<org.jfree.chart.renderer.category.BarRenderer: double itemMargin> = 0.2;

        this.<org.jfree.chart.renderer.category.BarRenderer: boolean drawBarOutline> = 0;

        this.<org.jfree.chart.renderer.category.BarRenderer: double maximumBarWidth> = 1.0;

        this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition positiveItemLabelPositionFallback> = null;

        this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition negativeItemLabelPositionFallback> = null;

        $stack1 = new org.jfree.chart.ui.StandardGradientPaintTransformer;

        specialinvoke $stack1.<org.jfree.chart.ui.StandardGradientPaintTransformer: void <init>()>();

        this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.ui.GradientPaintTransformer gradientPaintTransformer> = $stack1;

        this.<org.jfree.chart.renderer.category.BarRenderer: double minimumBarLength> = 0.0;

        $stack2 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack2.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(-4.0, -4.0, 8.0, 8.0);

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void setDefaultLegendShape(java.awt.Shape)>($stack2);

        $stack3 = staticinvoke <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter getDefaultBarPainter()>();

        this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter barPainter> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.renderer.category.BarRenderer: boolean getDefaultShadowsVisible()>();

        this.<org.jfree.chart.renderer.category.BarRenderer: boolean shadowsVisible> = $stack4;

        $stack5 = <java.awt.Color: java.awt.Color GRAY>;

        this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint shadowPaint> = $stack5;

        this.<org.jfree.chart.renderer.category.BarRenderer: double shadowXOffset> = 4.0;

        this.<org.jfree.chart.renderer.category.BarRenderer: double shadowYOffset> = 4.0;

        return;
    }

    public double getBase()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: double base>;

        return $stack1;
    }

    public void setBase(double)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double base;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        base := @parameter0: double;

        this.<org.jfree.chart.renderer.category.BarRenderer: double base> = base;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public double getItemMargin()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: double itemMargin>;

        return $stack1;
    }

    public void setItemMargin(double)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double percent;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        percent := @parameter0: double;

        this.<org.jfree.chart.renderer.category.BarRenderer: double itemMargin> = percent;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean isDrawBarOutline()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: boolean drawBarOutline>;

        return $stack1;
    }

    public void setDrawBarOutline(boolean)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        boolean draw;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        draw := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.BarRenderer: boolean drawBarOutline> = draw;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public double getMaximumBarWidth()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: double maximumBarWidth>;

        return $stack1;
    }

    public void setMaximumBarWidth(double)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double percent;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        percent := @parameter0: double;

        this.<org.jfree.chart.renderer.category.BarRenderer: double maximumBarWidth> = percent;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public double getMinimumBarLength()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: double minimumBarLength>;

        return $stack1;
    }

    public void setMinimumBarLength(double)
    {
        double min;
        byte $stack3;
        org.jfree.chart.renderer.category.BarRenderer this;
        java.lang.IllegalArgumentException $stack4;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        min := @parameter0: double;

        $stack3 = min cmpg 0.0;

        if $stack3 >= 0 goto label1;

        $stack4 = new java.lang.IllegalArgumentException;

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requires \'min\' >= 0.0");

        throw $stack4;

     label1:
        this.<org.jfree.chart.renderer.category.BarRenderer: double minimumBarLength> = min;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.ui.GradientPaintTransformer getGradientPaintTransformer()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.ui.GradientPaintTransformer $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.ui.GradientPaintTransformer gradientPaintTransformer>;

        return $stack1;
    }

    public void setGradientPaintTransformer(org.jfree.chart.ui.GradientPaintTransformer)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.ui.GradientPaintTransformer transformer;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        transformer := @parameter0: org.jfree.chart.ui.GradientPaintTransformer;

        this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.ui.GradientPaintTransformer gradientPaintTransformer> = transformer;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPositionFallback()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.labels.ItemLabelPosition $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition positiveItemLabelPositionFallback>;

        return $stack1;
    }

    public void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.labels.ItemLabelPosition position;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        position := @parameter0: org.jfree.chart.labels.ItemLabelPosition;

        this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition positiveItemLabelPositionFallback> = position;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPositionFallback()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.labels.ItemLabelPosition $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition negativeItemLabelPositionFallback>;

        return $stack1;
    }

    public void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.labels.ItemLabelPosition position;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        position := @parameter0: org.jfree.chart.labels.ItemLabelPosition;

        this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition negativeItemLabelPositionFallback> = position;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getIncludeBaseInRange()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: boolean includeBaseInRange>;

        return $stack1;
    }

    public void setIncludeBaseInRange(boolean)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        boolean include, $stack2;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        include := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.category.BarRenderer: boolean includeBaseInRange>;

        if $stack2 == include goto label1;

        this.<org.jfree.chart.renderer.category.BarRenderer: boolean includeBaseInRange> = include;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.renderer.category.BarPainter getBarPainter()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.renderer.category.BarPainter $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter barPainter>;

        return $stack1;
    }

    public void setBarPainter(org.jfree.chart.renderer.category.BarPainter)
    {
        org.jfree.chart.renderer.category.BarPainter painter;
        org.jfree.chart.renderer.category.BarRenderer this;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        painter := @parameter0: org.jfree.chart.renderer.category.BarPainter;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(painter, "painter");

        this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter barPainter> = painter;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getShadowsVisible()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: boolean shadowsVisible>;

        return $stack1;
    }

    public void setShadowVisible(boolean)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        boolean visible;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.BarRenderer: boolean shadowsVisible> = visible;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getShadowPaint()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint shadowPaint>;

        return $stack1;
    }

    public void setShadowPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.renderer.category.BarRenderer this;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint shadowPaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public double getShadowXOffset()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: double shadowXOffset>;

        return $stack1;
    }

    public void setShadowXOffset(double)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double offset;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        offset := @parameter0: double;

        this.<org.jfree.chart.renderer.category.BarRenderer: double shadowXOffset> = offset;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public double getShadowYOffset()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: double shadowYOffset>;

        return $stack1;
    }

    public void setShadowYOffset(double)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double offset;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        offset := @parameter0: double;

        this.<org.jfree.chart.renderer.category.BarRenderer: double shadowYOffset> = offset;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void fireChangeEvent()>();

        return;
    }

    public double getLowerClip()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: double lowerClip>;

        return $stack1;
    }

    public double getUpperClip()
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BarRenderer: double upperClip>;

        return $stack1;
    }

    public org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, int, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.CategoryPlot plot;
        int rendererIndex;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        org.jfree.data.Range $stack10, $stack12;
        double $stack11, $stack13;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        plot := @parameter2: org.jfree.chart.plot.CategoryPlot;

        rendererIndex := @parameter3: int;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        state = specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>(g2, dataArea, plot, rendererIndex, info);

        rangeAxis = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)>(rendererIndex);

        $stack10 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack11 = virtualinvoke $stack10.<org.jfree.data.Range: double getLowerBound()>();

        this.<org.jfree.chart.renderer.category.BarRenderer: double lowerClip> = $stack11;

        $stack12 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack13 = virtualinvoke $stack12.<org.jfree.data.Range: double getUpperBound()>();

        this.<org.jfree.chart.renderer.category.BarRenderer: double upperClip> = $stack13;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void calculateBarWidth(org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,int,org.jfree.chart.renderer.category.CategoryItemRendererState)>(plot, dataArea, rendererIndex, state);

        return state;
    }

    protected void calculateBarWidth(org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D, int, org.jfree.chart.renderer.category.CategoryItemRendererState)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.plot.CategoryPlot plot;
        int rendererIndex, columns, $stack23, rows, $stack36, $stack38, $stack24;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        org.jfree.chart.plot.PlotOrientation orientation, $stack26, $stack27;
        double maxWidth, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, used, $stack37, $stack39, $stack40, $stack41, space, $stack28, categoryMargin, currentItemMargin;
        java.awt.geom.Rectangle2D dataArea;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        plot := @parameter0: org.jfree.chart.plot.CategoryPlot;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        rendererIndex := @parameter2: int;

        state := @parameter3: org.jfree.chart.renderer.category.CategoryItemRendererState;

        domainAxis = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.axis.CategoryAxis getDomainAxis(org.jfree.chart.plot.CategoryPlot,int)>(plot, rendererIndex);

        dataset = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(rendererIndex);

        if dataset == null goto label8;

        columns = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        $stack23 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int getVisibleSeriesCount()>();

        if $stack23 < 0 goto label1;

        $stack24 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int getVisibleSeriesCount()>();

        goto label2;

     label1:
        $stack24 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getRowCount()>();

     label2:
        rows = $stack24;

        space = 0.0;

        orientation = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack26 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack26 goto label3;

        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        goto label4;

     label3:
        $stack27 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack27 goto label4;

        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

     label4:
        $stack28 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double getMaximumBarWidth()>();

        maxWidth = space * $stack28;

        categoryMargin = 0.0;

        currentItemMargin = 0.0;

        if columns <= 1 goto label5;

        categoryMargin = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryMargin()>();

     label5:
        if rows <= 1 goto label6;

        currentItemMargin = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double getItemMargin()>();

     label6:
        $stack30 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getLowerMargin()>();

        $stack31 = 1.0 - $stack30;

        $stack32 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getUpperMargin()>();

        $stack33 = $stack31 - $stack32;

        $stack34 = $stack33 - categoryMargin;

        $stack35 = $stack34 - currentItemMargin;

        used = space * $stack35;

        $stack36 = rows * columns;

        if $stack36 <= 0 goto label7;

        $stack38 = rows * columns;

        $stack39 = (double) $stack38;

        $stack40 = used / $stack39;

        $stack41 = staticinvoke <java.lang.Math: double min(double,double)>($stack40, maxWidth);

        virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: void setBarWidth(double)>($stack41);

        goto label8;

     label7:
        $stack37 = staticinvoke <java.lang.Math: double min(double,double)>(used, maxWidth);

        virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: void setBarWidth(double)>($stack37);

     label8:
        return;
    }

    protected double calculateBarW0(org.jfree.chart.plot.CategoryPlot, org.jfree.chart.plot.PlotOrientation, java.awt.geom.Rectangle2D, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.renderer.category.CategoryItemRendererState, int, int)
    {
        org.jfree.chart.plot.PlotOrientation orientation, $stack18;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        int column, $stack20, $stack23, categoryCount, $stack26, $stack32, $stack33, row, $stack24;
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack21, $stack27;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        double $stack28, $stack29, $stack30, $stack31, $stack34, $stack35, seriesGap, seriesW, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, space, barW0;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        plot := @parameter0: org.jfree.chart.plot.CategoryPlot;

        orientation := @parameter1: org.jfree.chart.plot.PlotOrientation;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        domainAxis := @parameter3: org.jfree.chart.axis.CategoryAxis;

        state := @parameter4: org.jfree.chart.renderer.category.CategoryItemRendererState;

        row := @parameter5: int;

        column := @parameter6: int;

        $stack18 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack18 goto label1;

        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        goto label2;

     label1:
        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

     label2:
        $stack20 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: int getColumnCount()>();

        $stack21 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        barW0 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack20, dataArea, $stack21);

        $stack23 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int getVisibleSeriesCount()>();

        if $stack23 < 0 goto label3;

        $stack24 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int getVisibleSeriesCount()>();

        goto label4;

     label3:
        $stack24 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: int getRowCount()>();

     label4:
        categoryCount = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: int getColumnCount()>();

        if $stack24 <= 1 goto label5;

        $stack31 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double getItemMargin()>();

        $stack35 = space * $stack31;

        $stack32 = $stack24 - 1;

        $stack33 = categoryCount * $stack32;

        $stack34 = (double) $stack33;

        seriesGap = $stack35 / $stack34;

        seriesW = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)>(space, domainAxis, categoryCount, $stack24);

        $stack38 = (double) row;

        $stack37 = seriesW + seriesGap;

        $stack39 = $stack38 * $stack37;

        $stack41 = barW0 + $stack39;

        $stack40 = seriesW / 2.0;

        $stack42 = $stack41 + $stack40;

        $stack43 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack44 = $stack43 / 2.0;

        barW0 = $stack42 - $stack44;

        goto label6;

     label5:
        $stack26 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: int getColumnCount()>();

        $stack27 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        $stack28 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack26, dataArea, $stack27);

        $stack29 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack30 = $stack29 / 2.0;

        barW0 = $stack28 - $stack30;

     label6:
        return barW0;
    }

    protected double[] calculateBarL0L1(double)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double lclip, uclip, value, $stack13, $stack15, barLow, barHigh;
        byte $stack17, $stack18;
        double[] $stack21;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        value := @parameter0: double;

        lclip = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double getLowerClip()>();

        uclip = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double getUpperClip()>();

        $stack13 = this.<org.jfree.chart.renderer.category.BarRenderer: double base>;

        barLow = staticinvoke <java.lang.Math: double min(double,double)>($stack13, value);

        $stack15 = this.<org.jfree.chart.renderer.category.BarRenderer: double base>;

        barHigh = staticinvoke <java.lang.Math: double max(double,double)>($stack15, value);

        $stack17 = barHigh cmpg lclip;

        if $stack17 >= 0 goto label1;

        return null;

     label1:
        $stack18 = barLow cmpl uclip;

        if $stack18 <= 0 goto label2;

        return null;

     label2:
        barLow = staticinvoke <java.lang.Math: double max(double,double)>(barLow, lclip);

        barHigh = staticinvoke <java.lang.Math: double min(double,double)>(barHigh, uclip);

        $stack21 = newarray (double)[2];

        $stack21[0] = barLow;

        $stack21[1] = barHigh;

        return $stack21;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset, boolean)
    {
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.renderer.category.BarRenderer this;
        boolean includeInterval, $stack5;
        double $stack7;
        org.jfree.data.Range result;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        includeInterval := @parameter1: boolean;

        if dataset != null goto label1;

        return null;

     label1:
        result = specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(dataset, includeInterval);

        if result == null goto label2;

        $stack5 = this.<org.jfree.chart.renderer.category.BarRenderer: boolean includeBaseInRange>;

        if $stack5 == 0 goto label2;

        $stack7 = this.<org.jfree.chart.renderer.category.BarRenderer: double base>;

        result = staticinvoke <org.jfree.data.Range: org.jfree.data.Range expandToInclude(org.jfree.data.Range,double)>(result, $stack7);

     label2:
        return result;
    }

    public org.jfree.chart.LegendItem getLegendItem(int, int)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        org.jfree.chart.plot.CategoryPlot cp;
        int series, datasetIndex;
        boolean $stack16, $stack17, $stack30;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.labels.CategorySeriesLabelGenerator $stack19, $stack21, $stack22, $stack51, $stack77;
        java.lang.String label, toolTipText, urlText;
        java.awt.Shape shape;
        java.awt.Paint paint, outlinePaint, labelPaint;
        java.awt.Stroke outlineStroke;
        org.jfree.chart.LegendItem $stack27;
        java.awt.geom.Line2D$Float $stack31;
        java.awt.BasicStroke $stack33;
        java.awt.Color $stack34;
        java.awt.Font $stack35;
        java.lang.Comparable $stack37;
        org.jfree.chart.ui.GradientPaintTransformer $stack38, $stack39;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        datasetIndex := @parameter0: int;

        series := @parameter1: int;

        cp = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.plot.CategoryPlot getPlot()>();

        if cp != null goto label1;

        return null;

     label1:
        $stack16 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: boolean isSeriesVisible(int)>(series);

        if $stack16 == 0 goto label2;

        $stack17 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: boolean isSeriesVisibleInLegend(int)>(series);

        if $stack17 != 0 goto label3;

     label2:
        return null;

     label3:
        dataset = virtualinvoke cp.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(datasetIndex);

        $stack19 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemLabelGenerator()>();

        label = interfaceinvoke $stack19.<org.jfree.chart.labels.CategorySeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)>(dataset, series);

        toolTipText = null;

        $stack21 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemToolTipGenerator()>();

        if $stack21 == null goto label4;

        $stack77 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemToolTipGenerator()>();

        toolTipText = interfaceinvoke $stack77.<org.jfree.chart.labels.CategorySeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)>(dataset, series);

     label4:
        urlText = null;

        $stack22 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemURLGenerator()>();

        if $stack22 == null goto label5;

        $stack51 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemURLGenerator()>();

        urlText = interfaceinvoke $stack51.<org.jfree.chart.labels.CategorySeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)>(dataset, series);

     label5:
        shape = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Shape lookupLegendShape(int)>(series);

        paint = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint lookupSeriesPaint(int)>(series);

        outlinePaint = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint lookupSeriesOutlinePaint(int)>(series);

        outlineStroke = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Stroke lookupSeriesOutlineStroke(int)>(series);

        $stack27 = new org.jfree.chart.LegendItem;

        $stack30 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: boolean isDrawBarOutline()>();

        $stack31 = new java.awt.geom.Line2D$Float;

        specialinvoke $stack31.<java.awt.geom.Line2D$Float: void <init>()>();

        $stack33 = new java.awt.BasicStroke;

        specialinvoke $stack33.<java.awt.BasicStroke: void <init>(float)>(1.0F);

        $stack34 = <java.awt.Color: java.awt.Color BLACK>;

        specialinvoke $stack27.<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>(label, label, toolTipText, urlText, 1, shape, 1, paint, $stack30, outlinePaint, outlineStroke, 0, $stack31, $stack33, $stack34);

        $stack35 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Font lookupLegendTextFont(int)>(series);

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setLabelFont(java.awt.Font)>($stack35);

        labelPaint = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint lookupLegendTextPaint(int)>(series);

        if labelPaint == null goto label6;

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setLabelPaint(java.awt.Paint)>(labelPaint);

     label6:
        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setDataset(org.jfree.data.general.Dataset)>(dataset);

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setDatasetIndex(int)>(datasetIndex);

        $stack37 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(series);

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setSeriesKey(java.lang.Comparable)>($stack37);

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setSeriesIndex(int)>(series);

        $stack38 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.ui.GradientPaintTransformer gradientPaintTransformer>;

        if $stack38 == null goto label7;

        $stack39 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.ui.GradientPaintTransformer gradientPaintTransformer>;

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setFillPaintTransformer(org.jfree.chart.ui.GradientPaintTransformer)>($stack39);

     label7:
        return $stack27;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, int)
    {
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        int row, visibleRow, column, datasetIndex, pass;
        org.jfree.data.category.CategoryDataset dataset;
        java.lang.Number dataValue;
        double value, barW0, $stack46, transL0, $stack48, transL1, $stack50, barL0, $stack54, barLength, $stack60, $stack61, $stack62, $stack117, $stack118, $stack119, $stack130, $stack134, barLengthAdj, barL0Adj;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.plot.PlotOrientation orientation, $stack57, $stack58;
        org.jfree.chart.renderer.category.BarRenderer this;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        double[] barL0L1;
        org.jfree.chart.ui.RectangleEdge edge, barBase;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        byte $stack51, $stack56, $stack89, $stack131;
        boolean positive, inverted, $stack63, $stack64, $stack66, $stack73, $stack135, $stack97;
        java.awt.geom.Rectangle2D$Double $stack59, $stack96, $stack116, bar;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.category.BarPainter $stack65, $stack103;
        org.jfree.chart.entity.EntityCollection entities;
        org.jfree.data.KeyedValues2DItemKey $stack112;
        java.lang.Comparable $stack113, $stack114, $stack70, $stack71;
        org.jfree.chart.labels.CategoryItemLabelGenerator key#21;
        org.jfree.chart.plot.CategoryCrosshairState $stack69;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.category.CategoryItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        plot := @parameter3: org.jfree.chart.plot.CategoryPlot;

        domainAxis := @parameter4: org.jfree.chart.axis.CategoryAxis;

        rangeAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter6: org.jfree.data.category.CategoryDataset;

        row := @parameter7: int;

        column := @parameter8: int;

        pass := @parameter9: int;

        visibleRow = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: int getVisibleSeriesIndex(int)>(row);

        if visibleRow >= 0 goto label01;

        return;

     label01:
        dataValue = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(row, column);

        if dataValue != null goto label02;

        return;

     label02:
        value = virtualinvoke dataValue.<java.lang.Number: double doubleValue()>();

        orientation = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        barW0 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)>(plot, orientation, dataArea, domainAxis, state, visibleRow, column);

        barL0L1 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double[] calculateBarL0L1(double)>(value);

        if barL0L1 != null goto label03;

        return;

     label03:
        edge = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        $stack46 = barL0L1[0];

        transL0 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack46, dataArea, edge);

        $stack48 = barL0L1[1];

        transL1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack48, dataArea, edge);

        $stack50 = this.<org.jfree.chart.renderer.category.BarRenderer: double base>;

        $stack51 = value cmpl $stack50;

        if $stack51 < 0 goto label04;

        $stack135 = 1;

        goto label05;

     label04:
        $stack135 = 0;

     label05:
        positive = $stack135;

        inverted = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        barL0 = staticinvoke <java.lang.Math: double min(double,double)>(transL0, transL1);

        $stack54 = transL1 - transL0;

        barLength = staticinvoke <java.lang.Math: double abs(double)>($stack54);

        barLengthAdj = 0.0;

        $stack56 = barLength cmpl 0.0;

        if $stack56 <= 0 goto label06;

        $stack130 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double getMinimumBarLength()>();

        $stack131 = barLength cmpg $stack130;

        if $stack131 >= 0 goto label06;

        $stack134 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double getMinimumBarLength()>();

        barLengthAdj = $stack134 - barLength;

     label06:
        barL0Adj = 0.0;

        $stack57 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack57 goto label10;

        if positive == 0 goto label07;

        if inverted != 0 goto label08;

     label07:
        if positive != 0 goto label09;

        if inverted != 0 goto label09;

     label08:
        barL0Adj = barLengthAdj;

        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        goto label14;

     label09:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        goto label14;

     label10:
        if positive == 0 goto label11;

        if inverted == 0 goto label12;

     label11:
        if positive != 0 goto label13;

        if inverted == 0 goto label13;

     label12:
        barL0Adj = barLengthAdj;

        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        goto label14;

     label13:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

     label14:
        $stack58 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack58 goto label15;

        $stack116 = new java.awt.geom.Rectangle2D$Double;

        $stack117 = barL0 - barL0Adj;

        $stack118 = barLength + barLengthAdj;

        $stack119 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        specialinvoke $stack116.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack117, barW0, $stack118, $stack119);

        bar = $stack116;

        goto label16;

     label15:
        $stack59 = new java.awt.geom.Rectangle2D$Double;

        $stack60 = barL0 - barL0Adj;

        $stack61 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack62 = barLength + barLengthAdj;

        specialinvoke $stack59.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(barW0, $stack60, $stack61, $stack62);

        bar = $stack59;

     label16:
        $stack63 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: boolean getElementHinting()>();

        if $stack63 == 0 goto label17;

        $stack112 = new org.jfree.data.KeyedValues2DItemKey;

        $stack113 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(row);

        $stack114 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getColumnKey(int)>(column);

        specialinvoke $stack112.<org.jfree.data.KeyedValues2DItemKey: void <init>(java.lang.Comparable,java.lang.Comparable)>($stack113, $stack114);

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void beginElementGroup(java.awt.Graphics2D,org.jfree.data.ItemKey)>(g2, $stack112);

     label17:
        $stack64 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: boolean getShadowsVisible()>();

        if $stack64 == 0 goto label18;

        $stack103 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter barPainter>;

        interfaceinvoke $stack103.<org.jfree.chart.renderer.category.BarPainter: void paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.chart.ui.RectangleEdge,boolean)>(g2, this, row, column, bar, barBase, 1);

     label18:
        $stack65 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter barPainter>;

        interfaceinvoke $stack65.<org.jfree.chart.renderer.category.BarPainter: void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.chart.ui.RectangleEdge)>(g2, this, row, column, bar, barBase);

        $stack66 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: boolean getElementHinting()>();

        if $stack66 == 0 goto label19;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void endElementGroup(java.awt.Graphics2D)>(g2);

     label19:
        key#21 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.CategoryItemLabelGenerator getItemLabelGenerator(int,int)>(row, column);

        if key#21 == null goto label22;

        $stack73 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: boolean isItemLabelVisible(int,int)>(row, column);

        if $stack73 == 0 goto label22;

        $stack96 = bar;

        $stack89 = value cmpg 0.0;

        if $stack89 >= 0 goto label20;

        $stack97 = 1;

        goto label21;

     label20:
        $stack97 = 0;

     label21:
        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>(g2, dataset, row, column, plot, key#21, $stack96, $stack97);

     label22:
        datasetIndex = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: int indexOf(org.jfree.data.category.CategoryDataset)>(dataset);

        $stack69 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.plot.CategoryCrosshairState getCrosshairState()>();

        $stack70 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(row);

        $stack71 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getColumnKey(int)>(column);

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void updateCrosshairValues(org.jfree.chart.plot.CategoryCrosshairState,java.lang.Comparable,java.lang.Comparable,double,int,double,double,org.jfree.chart.plot.PlotOrientation)>($stack69, $stack70, $stack71, value, datasetIndex, barW0, barL0, orientation);

        entities = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label23;

        virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: void addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)>(entities, dataset, row, column, bar);

     label23:
        return;
    }

    protected double calculateSeriesWidth(double, org.jfree.chart.axis.CategoryAxis, int, int)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double $stack9, $stack10, $stack11, $stack12, $stack13, space, $stack15, $stack16, $stack17, $stack18, factor;
        org.jfree.chart.axis.CategoryAxis axis;
        int categories, series, $stack14;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        space := @parameter0: double;

        axis := @parameter1: org.jfree.chart.axis.CategoryAxis;

        categories := @parameter2: int;

        series := @parameter3: int;

        $stack9 = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double getItemMargin()>();

        $stack10 = 1.0 - $stack9;

        $stack11 = virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: double getLowerMargin()>();

        $stack12 = $stack10 - $stack11;

        $stack13 = virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: double getUpperMargin()>();

        factor = $stack12 - $stack13;

        if categories <= 1 goto label1;

        $stack18 = virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: double getCategoryMargin()>();

        factor = factor - $stack18;

     label1:
        $stack16 = space * factor;

        $stack14 = categories * series;

        $stack15 = (double) $stack14;

        $stack17 = $stack16 / $stack15;

        return $stack17;
    }

    protected void drawItemLabel(java.awt.Graphics2D, org.jfree.data.category.CategoryDataset, int, int, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.labels.CategoryItemLabelGenerator, java.awt.geom.Rectangle2D, boolean)
    {
        org.jfree.chart.labels.CategoryItemLabelGenerator generator;
        org.jfree.data.category.CategoryDataset data;
        int row, column;
        java.lang.String label;
        org.jfree.chart.renderer.category.BarRenderer this;
        java.awt.Font labelFont;
        java.awt.Graphics2D g2;
        java.awt.Paint paint;
        boolean negative, $stack23, $stack41;
        org.jfree.chart.labels.ItemLabelAnchor $stack19, $stack22, $stack43;
        java.awt.geom.Rectangle2D bar, $stack40;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.plot.PlotOrientation $stack20, $stack44;
        double $stack24, $stack26, $stack29, $stack31, $stack33, $stack36;
        float $stack25, $stack27, $stack32, $stack34;
        org.jfree.chart.ui.TextAnchor $stack28, $stack30, $stack35, $stack37;
        java.awt.Shape bounds;
        org.jfree.chart.labels.ItemLabelPosition position;
        java.awt.geom.Point2D anchorPoint;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        data := @parameter1: org.jfree.data.category.CategoryDataset;

        row := @parameter2: int;

        column := @parameter3: int;

        plot := @parameter4: org.jfree.chart.plot.CategoryPlot;

        generator := @parameter5: org.jfree.chart.labels.CategoryItemLabelGenerator;

        bar := @parameter6: java.awt.geom.Rectangle2D;

        negative := @parameter7: boolean;

        label = interfaceinvoke generator.<org.jfree.chart.labels.CategoryItemLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int,int)>(data, row, column);

        if label != null goto label1;

        return;

     label1:
        labelFont = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Font getItemLabelFont(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>(labelFont);

        paint = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint getItemLabelPaint(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        if negative != 0 goto label2;

        position = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPosition(int,int)>(row, column);

        goto label3;

     label2:
        position = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPosition(int,int)>(row, column);

     label3:
        $stack19 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.labels.ItemLabelAnchor getItemLabelAnchor()>();

        $stack20 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        anchorPoint = specialinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>($stack19, bar, $stack20);

        $stack22 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.labels.ItemLabelAnchor getItemLabelAnchor()>();

        $stack23 = specialinvoke this.<org.jfree.chart.renderer.category.BarRenderer: boolean isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)>($stack22);

        if $stack23 == 0 goto label6;

        $stack31 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getX()>();

        $stack32 = (float) $stack31;

        $stack33 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getY()>();

        $stack34 = (float) $stack33;

        $stack35 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.ui.TextAnchor getTextAnchor()>();

        $stack36 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: double getAngle()>();

        $stack37 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.ui.TextAnchor getRotationAnchor()>();

        bounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack32, $stack34, $stack35, $stack36, $stack37);

        if bounds == null goto label6;

        $stack40 = interfaceinvoke bounds.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack41 = virtualinvoke bar.<java.awt.geom.Rectangle2D: boolean contains(java.awt.geom.Rectangle2D)>($stack40);

        if $stack41 != 0 goto label6;

        if negative != 0 goto label4;

        position = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPositionFallback()>();

        goto label5;

     label4:
        position = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPositionFallback()>();

     label5:
        if position == null goto label6;

        $stack43 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.labels.ItemLabelAnchor getItemLabelAnchor()>();

        $stack44 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        anchorPoint = specialinvoke this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>($stack43, bar, $stack44);

     label6:
        if position == null goto label7;

        $stack24 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getX()>();

        $stack25 = (float) $stack24;

        $stack26 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getY()>();

        $stack27 = (float) $stack26;

        $stack28 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.ui.TextAnchor getTextAnchor()>();

        $stack29 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: double getAngle()>();

        $stack30 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.ui.TextAnchor getRotationAnchor()>();

        staticinvoke <org.jfree.chart.text.TextUtils: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack25, $stack27, $stack28, $stack29, $stack30);

     label7:
        return;
    }

    private java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)
    {
        org.jfree.chart.renderer.category.BarRenderer this;
        double offset, $stack36, x0, x1, $stack38, x2, x3, $stack40, x4, x5, $stack42, x6, $stack43, y0, y1, $stack45, y2, y3, $stack47, y4, y5, $stack49, y6;
        java.awt.geom.Rectangle2D bar;
        org.jfree.chart.labels.ItemLabelAnchor anchor, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57, $stack58, $stack59, $stack60, $stack61, $stack62, $stack63, $stack64, $stack65, $stack66, $stack67, $stack68, $stack69, $stack70, $stack71, $stack72, $stack73, $stack74;
        java.awt.geom.Point2D$Double $stack75, $stack77, $stack78, $stack79, $stack80, $stack81, $stack82, $stack83, $stack84, $stack85, $stack86, $stack87, $stack88, $stack89, $stack90, $stack91, $stack92, $stack93, $stack94, $stack95, $stack96, $stack97, $stack98, $stack99, $stack100, result;
        org.jfree.chart.plot.PlotOrientation orientation;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        anchor := @parameter0: org.jfree.chart.labels.ItemLabelAnchor;

        bar := @parameter1: java.awt.geom.Rectangle2D;

        orientation := @parameter2: org.jfree.chart.plot.PlotOrientation;

        result = null;

        offset = virtualinvoke this.<org.jfree.chart.renderer.category.BarRenderer: double getItemLabelAnchorOffset()>();

        $stack36 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getX()>();

        x0 = $stack36 - offset;

        x1 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getX()>();

        $stack38 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getX()>();

        x2 = $stack38 + offset;

        x3 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack40 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getMaxX()>();

        x4 = $stack40 - offset;

        x5 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack42 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getMaxX()>();

        x6 = $stack42 + offset;

        $stack43 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getMaxY()>();

        y0 = $stack43 + offset;

        y1 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack45 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getMaxY()>();

        y2 = $stack45 - offset;

        y3 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getCenterY()>();

        $stack47 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getMinY()>();

        y4 = $stack47 + offset;

        y5 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack49 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getMinY()>();

        y6 = $stack49 - offset;

        $stack50 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor CENTER>;

        if anchor != $stack50 goto label01;

        $stack100 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack100.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x3, y3);

        result = $stack100;

        goto label25;

     label01:
        $stack51 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE1>;

        if anchor != $stack51 goto label02;

        $stack99 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack99.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x4, y4);

        result = $stack99;

        goto label25;

     label02:
        $stack52 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE2>;

        if anchor != $stack52 goto label03;

        $stack98 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack98.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x4, y4);

        result = $stack98;

        goto label25;

     label03:
        $stack53 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE3>;

        if anchor != $stack53 goto label04;

        $stack97 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack97.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x4, y3);

        result = $stack97;

        goto label25;

     label04:
        $stack54 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE4>;

        if anchor != $stack54 goto label05;

        $stack96 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack96.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x4, y2);

        result = $stack96;

        goto label25;

     label05:
        $stack55 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE5>;

        if anchor != $stack55 goto label06;

        $stack95 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack95.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x4, y2);

        result = $stack95;

        goto label25;

     label06:
        $stack56 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE6>;

        if anchor != $stack56 goto label07;

        $stack94 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack94.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x3, y2);

        result = $stack94;

        goto label25;

     label07:
        $stack57 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE7>;

        if anchor != $stack57 goto label08;

        $stack93 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack93.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x2, y2);

        result = $stack93;

        goto label25;

     label08:
        $stack58 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE8>;

        if anchor != $stack58 goto label09;

        $stack92 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack92.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x2, y2);

        result = $stack92;

        goto label25;

     label09:
        $stack59 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE9>;

        if anchor != $stack59 goto label10;

        $stack91 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack91.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x2, y3);

        result = $stack91;

        goto label25;

     label10:
        $stack60 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE10>;

        if anchor != $stack60 goto label11;

        $stack90 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack90.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x2, y4);

        result = $stack90;

        goto label25;

     label11:
        $stack61 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE11>;

        if anchor != $stack61 goto label12;

        $stack89 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack89.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x2, y4);

        result = $stack89;

        goto label25;

     label12:
        $stack62 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE12>;

        if anchor != $stack62 goto label13;

        $stack88 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack88.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x3, y4);

        result = $stack88;

        goto label25;

     label13:
        $stack63 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE1>;

        if anchor != $stack63 goto label14;

        $stack87 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack87.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x5, y6);

        result = $stack87;

        goto label25;

     label14:
        $stack64 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE2>;

        if anchor != $stack64 goto label15;

        $stack86 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack86.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x6, y5);

        result = $stack86;

        goto label25;

     label15:
        $stack65 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE3>;

        if anchor != $stack65 goto label16;

        $stack85 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack85.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x6, y3);

        result = $stack85;

        goto label25;

     label16:
        $stack66 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE4>;

        if anchor != $stack66 goto label17;

        $stack84 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack84.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x6, y1);

        result = $stack84;

        goto label25;

     label17:
        $stack67 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE5>;

        if anchor != $stack67 goto label18;

        $stack83 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack83.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x5, y0);

        result = $stack83;

        goto label25;

     label18:
        $stack68 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE6>;

        if anchor != $stack68 goto label19;

        $stack82 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack82.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x3, y0);

        result = $stack82;

        goto label25;

     label19:
        $stack69 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE7>;

        if anchor != $stack69 goto label20;

        $stack81 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack81.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x1, y0);

        result = $stack81;

        goto label25;

     label20:
        $stack70 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE8>;

        if anchor != $stack70 goto label21;

        $stack80 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack80.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x0, y1);

        result = $stack80;

        goto label25;

     label21:
        $stack71 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE9>;

        if anchor != $stack71 goto label22;

        $stack79 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack79.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x0, y3);

        result = $stack79;

        goto label25;

     label22:
        $stack72 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE10>;

        if anchor != $stack72 goto label23;

        $stack78 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack78.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x0, y5);

        result = $stack78;

        goto label25;

     label23:
        $stack73 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE11>;

        if anchor != $stack73 goto label24;

        $stack77 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack77.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x1, y6);

        result = $stack77;

        goto label25;

     label24:
        $stack74 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE12>;

        if anchor != $stack74 goto label25;

        $stack75 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack75.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x3, y6);

        result = $stack75;

     label25:
        return result;
    }

    private boolean isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)
    {
        org.jfree.chart.labels.ItemLabelAnchor anchor, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14;
        org.jfree.chart.renderer.category.BarRenderer this;
        boolean $stack15;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        anchor := @parameter0: org.jfree.chart.labels.ItemLabelAnchor;

        $stack2 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor CENTER>;

        if anchor == $stack2 goto label1;

        $stack3 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE1>;

        if anchor == $stack3 goto label1;

        $stack4 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE2>;

        if anchor == $stack4 goto label1;

        $stack5 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE3>;

        if anchor == $stack5 goto label1;

        $stack6 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE4>;

        if anchor == $stack6 goto label1;

        $stack7 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE5>;

        if anchor == $stack7 goto label1;

        $stack8 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE6>;

        if anchor == $stack8 goto label1;

        $stack9 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE7>;

        if anchor == $stack9 goto label1;

        $stack10 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE8>;

        if anchor == $stack10 goto label1;

        $stack11 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE9>;

        if anchor == $stack11 goto label1;

        $stack12 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE10>;

        if anchor == $stack12 goto label1;

        $stack13 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE11>;

        if anchor == $stack13 goto label1;

        $stack14 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE12>;

        if anchor != $stack14 goto label2;

     label1:
        $stack15 = 1;

        goto label3;

     label2:
        $stack15 = 0;

     label3:
        return $stack15;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.category.BarRenderer this, that;
        boolean $stack3, $stack10, $stack11, $stack20, $stack23, $stack26, $stack29, $stack30, $stack31, $stack34, $stack41;
        double $stack4, $stack5, $stack7, $stack8, $stack12, $stack13, $stack15, $stack16, $stack35, $stack36, $stack38, $stack39;
        byte $stack6, $stack9, $stack14, $stack17, $stack37, $stack40;
        org.jfree.chart.ui.GradientPaintTransformer $stack18, $stack19;
        org.jfree.chart.labels.ItemLabelPosition $stack21, $stack22, $stack24, $stack25;
        org.jfree.chart.renderer.category.BarPainter $stack27, $stack28;
        java.awt.Paint $stack32, $stack33;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.renderer.category.BarRenderer;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.renderer.category.BarRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.category.BarRenderer: double base>;

        $stack4 = that.<org.jfree.chart.renderer.category.BarRenderer: double base>;

        $stack6 = $stack5 cmpl $stack4;

        if $stack6 == 0 goto label03;

        return 0;

     label03:
        $stack8 = this.<org.jfree.chart.renderer.category.BarRenderer: double itemMargin>;

        $stack7 = that.<org.jfree.chart.renderer.category.BarRenderer: double itemMargin>;

        $stack9 = $stack8 cmpl $stack7;

        if $stack9 == 0 goto label04;

        return 0;

     label04:
        $stack11 = this.<org.jfree.chart.renderer.category.BarRenderer: boolean drawBarOutline>;

        $stack10 = that.<org.jfree.chart.renderer.category.BarRenderer: boolean drawBarOutline>;

        if $stack11 == $stack10 goto label05;

        return 0;

     label05:
        $stack13 = this.<org.jfree.chart.renderer.category.BarRenderer: double maximumBarWidth>;

        $stack12 = that.<org.jfree.chart.renderer.category.BarRenderer: double maximumBarWidth>;

        $stack14 = $stack13 cmpl $stack12;

        if $stack14 == 0 goto label06;

        return 0;

     label06:
        $stack16 = this.<org.jfree.chart.renderer.category.BarRenderer: double minimumBarLength>;

        $stack15 = that.<org.jfree.chart.renderer.category.BarRenderer: double minimumBarLength>;

        $stack17 = $stack16 cmpl $stack15;

        if $stack17 == 0 goto label07;

        return 0;

     label07:
        $stack19 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.ui.GradientPaintTransformer gradientPaintTransformer>;

        $stack18 = that.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.ui.GradientPaintTransformer gradientPaintTransformer>;

        $stack20 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack19, $stack18);

        if $stack20 != 0 goto label08;

        return 0;

     label08:
        $stack22 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition positiveItemLabelPositionFallback>;

        $stack21 = that.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition positiveItemLabelPositionFallback>;

        $stack23 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack22, $stack21);

        if $stack23 != 0 goto label09;

        return 0;

     label09:
        $stack25 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition negativeItemLabelPositionFallback>;

        $stack24 = that.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.labels.ItemLabelPosition negativeItemLabelPositionFallback>;

        $stack26 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack25, $stack24);

        if $stack26 != 0 goto label10;

        return 0;

     label10:
        $stack28 = this.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter barPainter>;

        $stack27 = that.<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter barPainter>;

        $stack29 = virtualinvoke $stack28.<java.lang.Object: boolean equals(java.lang.Object)>($stack27);

        if $stack29 != 0 goto label11;

        return 0;

     label11:
        $stack31 = this.<org.jfree.chart.renderer.category.BarRenderer: boolean shadowsVisible>;

        $stack30 = that.<org.jfree.chart.renderer.category.BarRenderer: boolean shadowsVisible>;

        if $stack31 == $stack30 goto label12;

        return 0;

     label12:
        $stack33 = this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint shadowPaint>;

        $stack32 = that.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint shadowPaint>;

        $stack34 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack33, $stack32);

        if $stack34 != 0 goto label13;

        return 0;

     label13:
        $stack36 = this.<org.jfree.chart.renderer.category.BarRenderer: double shadowXOffset>;

        $stack35 = that.<org.jfree.chart.renderer.category.BarRenderer: double shadowXOffset>;

        $stack37 = $stack36 cmpl $stack35;

        if $stack37 == 0 goto label14;

        return 0;

     label14:
        $stack39 = this.<org.jfree.chart.renderer.category.BarRenderer: double shadowYOffset>;

        $stack38 = that.<org.jfree.chart.renderer.category.BarRenderer: double shadowYOffset>;

        $stack40 = $stack39 cmpl $stack38;

        if $stack40 == 0 goto label15;

        return 0;

     label15:
        $stack41 = specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack41;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.renderer.category.BarRenderer this;
        java.awt.Paint $stack2;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint shadowPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.renderer.category.BarRenderer this;
        java.awt.Paint $stack2;

        this := @this: org.jfree.chart.renderer.category.BarRenderer;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.category.BarRenderer: java.awt.Paint shadowPaint> = $stack2;

        return;
    }

    static void <clinit>()
    {
        org.jfree.chart.renderer.category.GradientBarPainter $stack0;

        <org.jfree.chart.renderer.category.BarRenderer: double BAR_OUTLINE_WIDTH_THRESHOLD> = 3.0;

        <org.jfree.chart.renderer.category.BarRenderer: double DEFAULT_ITEM_MARGIN> = 0.2;

        <org.jfree.chart.renderer.category.BarRenderer: long serialVersionUID> = 6000649414965887481L;

        $stack0 = new org.jfree.chart.renderer.category.GradientBarPainter;

        specialinvoke $stack0.<org.jfree.chart.renderer.category.GradientBarPainter: void <init>()>();

        <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter defaultBarPainter> = $stack0;

        <org.jfree.chart.renderer.category.BarRenderer: boolean defaultShadowsVisible> = 1;

        return;
    }
}
