public class org.jfree.data.general.DefaultHeatMapDataset extends org.jfree.data.general.AbstractDataset implements org.jfree.data.general.HeatMapDataset, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private int xSamples;
    private int ySamples;
    private double minX;
    private double maxX;
    private double minY;
    private double maxY;
    private double[][] zValues;

    public void <init>(int, int, double, double, double, double)
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        int xSamples, ySamples, x;
        double minX, maxX, minY, maxY;
        boolean $stack12, $stack14, $stack15, $stack17, $stack18, $stack20, $stack21, $stack23;
        java.lang.IllegalArgumentException $stack13, $stack16, $stack19, $stack22, $stack33, $stack34;
        double[][] $stack24, $stack26;
        double[] $stack25;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        xSamples := @parameter0: int;

        ySamples := @parameter1: int;

        minX := @parameter2: double;

        maxX := @parameter3: double;

        minY := @parameter4: double;

        maxY := @parameter5: double;

        specialinvoke this.<org.jfree.data.general.AbstractDataset: void <init>()>();

        if xSamples >= 1 goto label01;

        $stack34 = new java.lang.IllegalArgumentException;

        specialinvoke $stack34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requires \'xSamples\' > 0");

        throw $stack34;

     label01:
        if ySamples >= 1 goto label02;

        $stack33 = new java.lang.IllegalArgumentException;

        specialinvoke $stack33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requires \'ySamples\' > 0");

        throw $stack33;

     label02:
        $stack12 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(minX);

        if $stack12 != 0 goto label03;

        $stack14 = staticinvoke <java.lang.Double: boolean isNaN(double)>(minX);

        if $stack14 == 0 goto label04;

     label03:
        $stack13 = new java.lang.IllegalArgumentException;

        specialinvoke $stack13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'minX\' cannot be INF or NaN.");

        throw $stack13;

     label04:
        $stack15 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(maxX);

        if $stack15 != 0 goto label05;

        $stack17 = staticinvoke <java.lang.Double: boolean isNaN(double)>(maxX);

        if $stack17 == 0 goto label06;

     label05:
        $stack16 = new java.lang.IllegalArgumentException;

        specialinvoke $stack16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'maxX\' cannot be INF or NaN.");

        throw $stack16;

     label06:
        $stack18 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(minY);

        if $stack18 != 0 goto label07;

        $stack20 = staticinvoke <java.lang.Double: boolean isNaN(double)>(minY);

        if $stack20 == 0 goto label08;

     label07:
        $stack19 = new java.lang.IllegalArgumentException;

        specialinvoke $stack19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'minY\' cannot be INF or NaN.");

        throw $stack19;

     label08:
        $stack21 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(maxY);

        if $stack21 != 0 goto label09;

        $stack23 = staticinvoke <java.lang.Double: boolean isNaN(double)>(maxY);

        if $stack23 == 0 goto label10;

     label09:
        $stack22 = new java.lang.IllegalArgumentException;

        specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'maxY\' cannot be INF or NaN.");

        throw $stack22;

     label10:
        this.<org.jfree.data.general.DefaultHeatMapDataset: int xSamples> = xSamples;

        this.<org.jfree.data.general.DefaultHeatMapDataset: int ySamples> = ySamples;

        this.<org.jfree.data.general.DefaultHeatMapDataset: double minX> = minX;

        this.<org.jfree.data.general.DefaultHeatMapDataset: double maxX> = maxX;

        this.<org.jfree.data.general.DefaultHeatMapDataset: double minY> = minY;

        this.<org.jfree.data.general.DefaultHeatMapDataset: double maxY> = maxY;

        $stack24 = newarray (double[])[xSamples];

        this.<org.jfree.data.general.DefaultHeatMapDataset: double[][] zValues> = $stack24;

        x = 0;

     label11:
        if x >= xSamples goto label12;

        $stack26 = this.<org.jfree.data.general.DefaultHeatMapDataset: double[][] zValues>;

        $stack25 = newarray (double)[ySamples];

        $stack26[x] = $stack25;

        x = x + 1;

        goto label11;

     label12:
        return;
    }

    public int getXSampleCount()
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        int $stack1;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        $stack1 = this.<org.jfree.data.general.DefaultHeatMapDataset: int xSamples>;

        return $stack1;
    }

    public int getYSampleCount()
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        int $stack1;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        $stack1 = this.<org.jfree.data.general.DefaultHeatMapDataset: int ySamples>;

        return $stack1;
    }

    public double getMinimumXValue()
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        double $stack1;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        $stack1 = this.<org.jfree.data.general.DefaultHeatMapDataset: double minX>;

        return $stack1;
    }

    public double getMaximumXValue()
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        double $stack1;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        $stack1 = this.<org.jfree.data.general.DefaultHeatMapDataset: double maxX>;

        return $stack1;
    }

    public double getMinimumYValue()
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        double $stack1;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        $stack1 = this.<org.jfree.data.general.DefaultHeatMapDataset: double minY>;

        return $stack1;
    }

    public double getMaximumYValue()
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        double $stack1;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        $stack1 = this.<org.jfree.data.general.DefaultHeatMapDataset: double maxY>;

        return $stack1;
    }

    public double getXValue(int)
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        double $stack4, $stack5, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, x;
        int xIndex, $stack6;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        xIndex := @parameter0: int;

        $stack12 = this.<org.jfree.data.general.DefaultHeatMapDataset: double minX>;

        $stack5 = this.<org.jfree.data.general.DefaultHeatMapDataset: double maxX>;

        $stack4 = this.<org.jfree.data.general.DefaultHeatMapDataset: double minX>;

        $stack10 = $stack5 - $stack4;

        $stack8 = (double) xIndex;

        $stack6 = this.<org.jfree.data.general.DefaultHeatMapDataset: int xSamples>;

        $stack7 = (double) $stack6;

        $stack9 = $stack8 / $stack7;

        $stack11 = $stack10 * $stack9;

        x = $stack12 + $stack11;

        return x;
    }

    public double getYValue(int)
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        double $stack4, $stack5, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, y;
        int yIndex, $stack6;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        yIndex := @parameter0: int;

        $stack12 = this.<org.jfree.data.general.DefaultHeatMapDataset: double minY>;

        $stack5 = this.<org.jfree.data.general.DefaultHeatMapDataset: double maxY>;

        $stack4 = this.<org.jfree.data.general.DefaultHeatMapDataset: double minY>;

        $stack10 = $stack5 - $stack4;

        $stack8 = (double) yIndex;

        $stack6 = this.<org.jfree.data.general.DefaultHeatMapDataset: int ySamples>;

        $stack7 = (double) $stack6;

        $stack9 = $stack8 / $stack7;

        $stack11 = $stack10 * $stack9;

        y = $stack12 + $stack11;

        return y;
    }

    public double getZValue(int, int)
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        int xIndex, yIndex;
        double[][] $stack3;
        double[] $stack4;
        double $stack5;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        xIndex := @parameter0: int;

        yIndex := @parameter1: int;

        $stack3 = this.<org.jfree.data.general.DefaultHeatMapDataset: double[][] zValues>;

        $stack4 = $stack3[xIndex];

        $stack5 = $stack4[yIndex];

        return $stack5;
    }

    public java.lang.Number getZ(int, int)
    {
        java.lang.Double $stack3;
        org.jfree.data.general.DefaultHeatMapDataset this;
        int xIndex, yIndex;
        double $stack4;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        xIndex := @parameter0: int;

        yIndex := @parameter1: int;

        $stack3 = new java.lang.Double;

        $stack4 = virtualinvoke this.<org.jfree.data.general.DefaultHeatMapDataset: double getZValue(int,int)>(xIndex, yIndex);

        specialinvoke $stack3.<java.lang.Double: void <init>(double)>($stack4);

        return $stack3;
    }

    public void setZValue(int, int, double)
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        int xIndex, yIndex;
        double z;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        xIndex := @parameter0: int;

        yIndex := @parameter1: int;

        z := @parameter2: double;

        virtualinvoke this.<org.jfree.data.general.DefaultHeatMapDataset: void setZValue(int,int,double,boolean)>(xIndex, yIndex, z, 1);

        return;
    }

    public void setZValue(int, int, double, boolean)
    {
        org.jfree.data.general.DefaultHeatMapDataset this;
        int xIndex, yIndex;
        double[][] $stack6;
        double z;
        double[] $stack7;
        boolean notify;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        xIndex := @parameter0: int;

        yIndex := @parameter1: int;

        z := @parameter2: double;

        notify := @parameter3: boolean;

        $stack6 = this.<org.jfree.data.general.DefaultHeatMapDataset: double[][] zValues>;

        $stack7 = $stack6[xIndex];

        $stack7[yIndex] = z;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.data.general.DefaultHeatMapDataset: void fireDatasetChanged()>();

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.data.general.DefaultHeatMapDataset this, that;
        boolean $stack3, $stack22;
        int $stack4, $stack5, $stack6, $stack7;
        double $stack8, $stack9, $stack11, $stack12, $stack14, $stack15, $stack17, $stack18;
        byte $stack10, $stack13, $stack16, $stack19;
        double[][] $stack20, $stack21;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.data.general.DefaultHeatMapDataset;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.data.general.DefaultHeatMapDataset) obj;

        $stack5 = this.<org.jfree.data.general.DefaultHeatMapDataset: int xSamples>;

        $stack4 = that.<org.jfree.data.general.DefaultHeatMapDataset: int xSamples>;

        if $stack5 == $stack4 goto label3;

        return 0;

     label3:
        $stack7 = this.<org.jfree.data.general.DefaultHeatMapDataset: int ySamples>;

        $stack6 = that.<org.jfree.data.general.DefaultHeatMapDataset: int ySamples>;

        if $stack7 == $stack6 goto label4;

        return 0;

     label4:
        $stack9 = this.<org.jfree.data.general.DefaultHeatMapDataset: double minX>;

        $stack8 = that.<org.jfree.data.general.DefaultHeatMapDataset: double minX>;

        $stack10 = $stack9 cmpl $stack8;

        if $stack10 == 0 goto label5;

        return 0;

     label5:
        $stack12 = this.<org.jfree.data.general.DefaultHeatMapDataset: double maxX>;

        $stack11 = that.<org.jfree.data.general.DefaultHeatMapDataset: double maxX>;

        $stack13 = $stack12 cmpl $stack11;

        if $stack13 == 0 goto label6;

        return 0;

     label6:
        $stack15 = this.<org.jfree.data.general.DefaultHeatMapDataset: double minY>;

        $stack14 = that.<org.jfree.data.general.DefaultHeatMapDataset: double minY>;

        $stack16 = $stack15 cmpl $stack14;

        if $stack16 == 0 goto label7;

        return 0;

     label7:
        $stack18 = this.<org.jfree.data.general.DefaultHeatMapDataset: double maxY>;

        $stack17 = that.<org.jfree.data.general.DefaultHeatMapDataset: double maxY>;

        $stack19 = $stack18 cmpl $stack17;

        if $stack19 == 0 goto label8;

        return 0;

     label8:
        $stack21 = this.<org.jfree.data.general.DefaultHeatMapDataset: double[][] zValues>;

        $stack20 = that.<org.jfree.data.general.DefaultHeatMapDataset: double[][] zValues>;

        $stack22 = staticinvoke <org.jfree.data.DataUtils: boolean equal(double[][],double[][])>($stack21, $stack20);

        if $stack22 != 0 goto label9;

        return 0;

     label9:
        return 1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.data.general.DefaultHeatMapDataset this, clone;
        java.lang.Object $stack2;
        double[][] $stack3, $stack4;

        this := @this: org.jfree.data.general.DefaultHeatMapDataset;

        $stack2 = specialinvoke this.<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>();

        clone = (org.jfree.data.general.DefaultHeatMapDataset) $stack2;

        $stack3 = this.<org.jfree.data.general.DefaultHeatMapDataset: double[][] zValues>;

        $stack4 = staticinvoke <org.jfree.data.DataUtils: double[][] clone(double[][])>($stack3);

        clone.<org.jfree.data.general.DefaultHeatMapDataset: double[][] zValues> = $stack4;

        return clone;
    }
}
