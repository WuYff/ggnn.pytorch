public class org.jfree.chart.needle.LineNeedle extends org.jfree.chart.needle.MeterNeedle implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.jfree.chart.needle.LineNeedle this;

        this := @this: org.jfree.chart.needle.LineNeedle;

        specialinvoke this.<org.jfree.chart.needle.MeterNeedle: void <init>()>();

        return;
    }

    protected void drawNeedle(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, double)
    {
        java.awt.geom.Line2D$Double $stack10;
        java.awt.geom.Rectangle2D plotArea;
        double $stack11, $stack12, $stack13, x, $stack14, $stack15, angle, $stack21, $stack22;
        java.awt.geom.Point2D rotate;
        org.jfree.chart.needle.LineNeedle this;
        java.awt.Graphics2D g2;
        byte $stack16;
        java.awt.geom.AffineTransform $stack20, $stack23;
        java.awt.Shape s;

        this := @this: org.jfree.chart.needle.LineNeedle;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        rotate := @parameter2: java.awt.geom.Point2D;

        angle := @parameter3: double;

        $stack10 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack10.<java.awt.geom.Line2D$Double: void <init>()>();

        $stack11 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack12 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack13 = $stack12 / 2.0;

        x = $stack11 + $stack13;

        $stack14 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack15 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        virtualinvoke $stack10.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(x, $stack14, x, $stack15);

        s = $stack10;

        if rotate == null goto label1;

        $stack16 = angle cmpl 0.0;

        if $stack16 == 0 goto label1;

        $stack20 = virtualinvoke this.<org.jfree.chart.needle.LineNeedle: java.awt.geom.AffineTransform getTransform()>();

        $stack21 = virtualinvoke rotate.<java.awt.geom.Point2D: double getX()>();

        $stack22 = virtualinvoke rotate.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $stack20.<java.awt.geom.AffineTransform: void setToRotation(double,double,double)>(angle, $stack21, $stack22);

        $stack23 = virtualinvoke this.<org.jfree.chart.needle.LineNeedle: java.awt.geom.AffineTransform getTransform()>();

        s = virtualinvoke $stack23.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($stack10);

     label1:
        virtualinvoke this.<org.jfree.chart.needle.LineNeedle: void defaultDisplay(java.awt.Graphics2D,java.awt.Shape)>(g2, s);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.needle.LineNeedle this;
        boolean $stack2, $stack3;

        this := @this: org.jfree.chart.needle.LineNeedle;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack2 = obj instanceof org.jfree.chart.needle.LineNeedle;

        if $stack2 != 0 goto label2;

        return 0;

     label2:
        $stack3 = specialinvoke this.<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>(obj);

        return $stack3;
    }

    public int hashCode()
    {
        org.jfree.chart.needle.LineNeedle this;
        int $stack1;

        this := @this: org.jfree.chart.needle.LineNeedle;

        $stack1 = specialinvoke this.<org.jfree.chart.needle.MeterNeedle: int hashCode()>();

        return $stack1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.needle.LineNeedle this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.needle.LineNeedle;

        $stack1 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.needle.LineNeedle: long serialVersionUID> = 6215321387896748945L;

        return;
    }
}
