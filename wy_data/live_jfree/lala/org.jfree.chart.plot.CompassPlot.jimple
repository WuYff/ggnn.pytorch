public class org.jfree.chart.plot.CompassPlot extends org.jfree.chart.plot.Plot implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.awt.Font DEFAULT_LABEL_FONT;
    public static final int NO_LABELS;
    public static final int VALUE_LABELS;
    private int labelType;
    private java.awt.Font labelFont;
    private boolean drawBorder;
    private transient java.awt.Paint roseHighlightPaint;
    private transient java.awt.Paint rosePaint;
    private transient java.awt.Paint roseCenterPaint;
    private java.awt.Font compassFont;
    private transient java.awt.geom.Ellipse2D circle1;
    private transient java.awt.geom.Ellipse2D circle2;
    private transient java.awt.geom.Area a1;
    private transient java.awt.geom.Area a2;
    private transient java.awt.geom.Rectangle2D rect1;
    private org.jfree.data.general.ValueDataset[] datasets;
    private org.jfree.chart.needle.MeterNeedle[] seriesNeedle;
    protected static java.util.ResourceBundle localizationResources;
    protected double revolutionDistance;

    public void <init>()
    {
        org.jfree.chart.plot.CompassPlot this;
        org.jfree.data.general.DefaultValueDataset $stack1;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = new org.jfree.data.general.DefaultValueDataset;

        specialinvoke $stack1.<org.jfree.data.general.DefaultValueDataset: void <init>()>();

        specialinvoke this.<org.jfree.chart.plot.CompassPlot: void <init>(org.jfree.data.general.ValueDataset)>($stack1);

        return;
    }

    public void <init>(org.jfree.data.general.ValueDataset)
    {
        org.jfree.chart.plot.CompassPlot this;
        java.awt.Color $stack2, $stack3, $stack4;
        java.awt.Font $stack5;
        org.jfree.data.general.ValueDataset[] $stack6, $stack11;
        org.jfree.chart.needle.MeterNeedle[] $stack7;
        org.jfree.data.general.ValueDataset dataset;
        java.awt.geom.Ellipse2D$Double $stack8, $stack9;
        java.awt.geom.Rectangle2D$Double $stack10;

        this := @this: org.jfree.chart.plot.CompassPlot;

        dataset := @parameter0: org.jfree.data.general.ValueDataset;

        specialinvoke this.<org.jfree.chart.plot.Plot: void <init>()>();

        this.<org.jfree.chart.plot.CompassPlot: boolean drawBorder> = 0;

        $stack2 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseHighlightPaint> = $stack2;

        $stack3 = <java.awt.Color: java.awt.Color YELLOW>;

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint rosePaint> = $stack3;

        $stack4 = <java.awt.Color: java.awt.Color WHITE>;

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseCenterPaint> = $stack4;

        $stack5 = new java.awt.Font;

        specialinvoke $stack5.<java.awt.Font: void <init>(java.lang.String,int,int)>("Arial", 0, 10);

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Font compassFont> = $stack5;

        $stack6 = newarray (org.jfree.data.general.ValueDataset)[1];

        this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets> = $stack6;

        $stack7 = newarray (org.jfree.chart.needle.MeterNeedle)[1];

        this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle> = $stack7;

        this.<org.jfree.chart.plot.CompassPlot: double revolutionDistance> = 360.0;

        if dataset == null goto label1;

        $stack11 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        $stack11[0] = dataset;

        interfaceinvoke dataset.<org.jfree.data.general.ValueDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label1:
        $stack8 = new java.awt.geom.Ellipse2D$Double;

        specialinvoke $stack8.<java.awt.geom.Ellipse2D$Double: void <init>()>();

        this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle1> = $stack8;

        $stack9 = new java.awt.geom.Ellipse2D$Double;

        specialinvoke $stack9.<java.awt.geom.Ellipse2D$Double: void <init>()>();

        this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle2> = $stack9;

        $stack10 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack10.<java.awt.geom.Rectangle2D$Double: void <init>()>();

        this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Rectangle2D rect1> = $stack10;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int)>(0);

        return;
    }

    public int getLabelType()
    {
        org.jfree.chart.plot.CompassPlot this;
        int $stack1;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = this.<org.jfree.chart.plot.CompassPlot: int labelType>;

        return $stack1;
    }

    public void setLabelType(int)
    {
        int type, $stack2;
        org.jfree.chart.plot.CompassPlot this;
        java.lang.IllegalArgumentException $stack5;

        this := @this: org.jfree.chart.plot.CompassPlot;

        type := @parameter0: int;

        if type == 0 goto label1;

        if type == 1 goto label1;

        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MeterPlot.setLabelType(int): unrecognised type.");

        throw $stack5;

     label1:
        $stack2 = this.<org.jfree.chart.plot.CompassPlot: int labelType>;

        if $stack2 == type goto label2;

        this.<org.jfree.chart.plot.CompassPlot: int labelType> = type;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void fireChangeEvent()>();

     label2:
        return;
    }

    public java.awt.Font getLabelFont()
    {
        org.jfree.chart.plot.CompassPlot this;
        java.awt.Font $stack1;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Font labelFont>;

        return $stack1;
    }

    public void setLabelFont(java.awt.Font)
    {
        java.awt.Font font;
        org.jfree.chart.plot.CompassPlot this;

        this := @this: org.jfree.chart.plot.CompassPlot;

        font := @parameter0: java.awt.Font;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(font, "font");

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Font labelFont> = font;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRosePaint()
    {
        org.jfree.chart.plot.CompassPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint rosePaint>;

        return $stack1;
    }

    public void setRosePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.CompassPlot this;

        this := @this: org.jfree.chart.plot.CompassPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint rosePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRoseCenterPaint()
    {
        org.jfree.chart.plot.CompassPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseCenterPaint>;

        return $stack1;
    }

    public void setRoseCenterPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.CompassPlot this;

        this := @this: org.jfree.chart.plot.CompassPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseCenterPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRoseHighlightPaint()
    {
        org.jfree.chart.plot.CompassPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseHighlightPaint>;

        return $stack1;
    }

    public void setRoseHighlightPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.CompassPlot this;

        this := @this: org.jfree.chart.plot.CompassPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseHighlightPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void fireChangeEvent()>();

        return;
    }

    public boolean getDrawBorder()
    {
        org.jfree.chart.plot.CompassPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = this.<org.jfree.chart.plot.CompassPlot: boolean drawBorder>;

        return $stack1;
    }

    public void setDrawBorder(boolean)
    {
        org.jfree.chart.plot.CompassPlot this;
        boolean status;

        this := @this: org.jfree.chart.plot.CompassPlot;

        status := @parameter0: boolean;

        this.<org.jfree.chart.plot.CompassPlot: boolean drawBorder> = status;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void fireChangeEvent()>();

        return;
    }

    public void setSeriesPaint(int, java.awt.Paint)
    {
        int series, $stack4;
        org.jfree.chart.plot.CompassPlot this;
        org.jfree.chart.needle.MeterNeedle[] $stack3, $stack5;
        java.awt.Paint paint;
        org.jfree.chart.needle.MeterNeedle $stack6;

        this := @this: org.jfree.chart.plot.CompassPlot;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        if series < 0 goto label1;

        $stack3 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack4 = lengthof $stack3;

        if series >= $stack4 goto label1;

        $stack5 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack6 = $stack5[series];

        virtualinvoke $stack6.<org.jfree.chart.needle.MeterNeedle: void setFillPaint(java.awt.Paint)>(paint);

     label1:
        return;
    }

    public void setSeriesOutlinePaint(int, java.awt.Paint)
    {
        int series, $stack4;
        org.jfree.chart.plot.CompassPlot this;
        org.jfree.chart.needle.MeterNeedle[] $stack3, $stack5;
        java.awt.Paint p;
        org.jfree.chart.needle.MeterNeedle $stack6;

        this := @this: org.jfree.chart.plot.CompassPlot;

        series := @parameter0: int;

        p := @parameter1: java.awt.Paint;

        if series < 0 goto label1;

        $stack3 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack4 = lengthof $stack3;

        if series >= $stack4 goto label1;

        $stack5 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack6 = $stack5[series];

        virtualinvoke $stack6.<org.jfree.chart.needle.MeterNeedle: void setOutlinePaint(java.awt.Paint)>(p);

     label1:
        return;
    }

    public void setSeriesOutlineStroke(int, java.awt.Stroke)
    {
        int series, $stack4;
        org.jfree.chart.plot.CompassPlot this;
        org.jfree.chart.needle.MeterNeedle[] $stack3, $stack5;
        java.awt.Stroke stroke;
        org.jfree.chart.needle.MeterNeedle $stack6;

        this := @this: org.jfree.chart.plot.CompassPlot;

        series := @parameter0: int;

        stroke := @parameter1: java.awt.Stroke;

        if series < 0 goto label1;

        $stack3 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack4 = lengthof $stack3;

        if series >= $stack4 goto label1;

        $stack5 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack6 = $stack5[series];

        virtualinvoke $stack6.<org.jfree.chart.needle.MeterNeedle: void setOutlineStroke(java.awt.Stroke)>(stroke);

     label1:
        return;
    }

    public void setSeriesNeedle(int)
    {
        org.jfree.chart.plot.CompassPlot this;
        int type;

        this := @this: org.jfree.chart.plot.CompassPlot;

        type := @parameter0: int;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,int)>(0, type);

        return;
    }

    public void setSeriesNeedle(int, int)
    {
        int type, index;
        org.jfree.chart.plot.CompassPlot this;
        org.jfree.chart.needle.MiddlePinNeedle $stack4;
        org.jfree.chart.needle.ArrowNeedle $stack5, $stack15;
        java.awt.Color $stack6, $stack16, $stack18;
        org.jfree.chart.needle.WindNeedle $stack7;
        java.awt.BasicStroke $stack8;
        org.jfree.chart.needle.ShipNeedle $stack9;
        org.jfree.chart.needle.PointerNeedle $stack10;
        org.jfree.chart.needle.PlumNeedle $stack11;
        org.jfree.chart.needle.PinNeedle $stack12;
        org.jfree.chart.needle.LongNeedle $stack13;
        org.jfree.chart.needle.LineNeedle $stack14;
        org.jfree.chart.needle.MeterNeedle[] $stack17;
        org.jfree.chart.needle.MeterNeedle $stack19;
        java.lang.IllegalArgumentException $stack20;

        this := @this: org.jfree.chart.plot.CompassPlot;

        index := @parameter0: int;

        type := @parameter1: int;

        tableswitch(type)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            default: goto label11;
        };

     label01:
        $stack15 = new org.jfree.chart.needle.ArrowNeedle;

        specialinvoke $stack15.<org.jfree.chart.needle.ArrowNeedle: void <init>(boolean)>(1);

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack15);

        $stack16 = <java.awt.Color: java.awt.Color RED>;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesPaint(int,java.awt.Paint)>(index, $stack16);

        $stack17 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack19 = $stack17[index];

        $stack18 = <java.awt.Color: java.awt.Color WHITE>;

        virtualinvoke $stack19.<org.jfree.chart.needle.MeterNeedle: void setHighlightPaint(java.awt.Paint)>($stack18);

        goto label12;

     label02:
        $stack14 = new org.jfree.chart.needle.LineNeedle;

        specialinvoke $stack14.<org.jfree.chart.needle.LineNeedle: void <init>()>();

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack14);

        goto label12;

     label03:
        $stack13 = new org.jfree.chart.needle.LongNeedle;

        specialinvoke $stack13.<org.jfree.chart.needle.LongNeedle: void <init>()>();

        virtualinvoke $stack13.<org.jfree.chart.needle.MeterNeedle: void setRotateY(double)>(0.5);

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack13);

        goto label12;

     label04:
        $stack12 = new org.jfree.chart.needle.PinNeedle;

        specialinvoke $stack12.<org.jfree.chart.needle.PinNeedle: void <init>()>();

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack12);

        goto label12;

     label05:
        $stack11 = new org.jfree.chart.needle.PlumNeedle;

        specialinvoke $stack11.<org.jfree.chart.needle.PlumNeedle: void <init>()>();

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack11);

        goto label12;

     label06:
        $stack10 = new org.jfree.chart.needle.PointerNeedle;

        specialinvoke $stack10.<org.jfree.chart.needle.PointerNeedle: void <init>()>();

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack10);

        goto label12;

     label07:
        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesPaint(int,java.awt.Paint)>(index, null);

        $stack8 = new java.awt.BasicStroke;

        specialinvoke $stack8.<java.awt.BasicStroke: void <init>(float)>(3.0F);

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesOutlineStroke(int,java.awt.Stroke)>(index, $stack8);

        $stack9 = new org.jfree.chart.needle.ShipNeedle;

        specialinvoke $stack9.<org.jfree.chart.needle.ShipNeedle: void <init>()>();

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack9);

        goto label12;

     label08:
        $stack6 = <java.awt.Color: java.awt.Color BLUE>;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesPaint(int,java.awt.Paint)>(index, $stack6);

        $stack7 = new org.jfree.chart.needle.WindNeedle;

        specialinvoke $stack7.<org.jfree.chart.needle.WindNeedle: void <init>()>();

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack7);

        goto label12;

     label09:
        $stack5 = new org.jfree.chart.needle.ArrowNeedle;

        specialinvoke $stack5.<org.jfree.chart.needle.ArrowNeedle: void <init>(boolean)>(1);

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack5);

        goto label12;

     label10:
        $stack4 = new org.jfree.chart.needle.MiddlePinNeedle;

        specialinvoke $stack4.<org.jfree.chart.needle.MiddlePinNeedle: void <init>()>();

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)>(index, $stack4);

        goto label12;

     label11:
        $stack20 = new java.lang.IllegalArgumentException;

        specialinvoke $stack20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognised type.");

        throw $stack20;

     label12:
        return;
    }

    public void setSeriesNeedle(int, org.jfree.chart.needle.MeterNeedle)
    {
        org.jfree.chart.needle.MeterNeedle needle;
        org.jfree.chart.plot.CompassPlot this;
        int index, $stack4;
        org.jfree.chart.needle.MeterNeedle[] $stack3, $stack6;

        this := @this: org.jfree.chart.plot.CompassPlot;

        index := @parameter0: int;

        needle := @parameter1: org.jfree.chart.needle.MeterNeedle;

        if needle == null goto label1;

        $stack3 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack4 = lengthof $stack3;

        if index >= $stack4 goto label1;

        $stack6 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack6[index] = needle;

     label1:
        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.data.general.ValueDataset[] getDatasets()
    {
        org.jfree.chart.plot.CompassPlot this;
        org.jfree.data.general.ValueDataset[] $stack1;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        return $stack1;
    }

    public void addDataset(org.jfree.data.general.ValueDataset)
    {
        org.jfree.chart.plot.CompassPlot this;
        org.jfree.data.general.ValueDataset dataset;

        this := @this: org.jfree.chart.plot.CompassPlot;

        dataset := @parameter0: org.jfree.data.general.ValueDataset;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void addDataset(org.jfree.data.general.ValueDataset,org.jfree.chart.needle.MeterNeedle)>(dataset, null);

        return;
    }

    public void addDataset(org.jfree.data.general.ValueDataset, org.jfree.chart.needle.MeterNeedle)
    {
        org.jfree.data.general.ValueDataset dataset, $stack25;
        org.jfree.chart.plot.CompassPlot this;
        org.jfree.data.general.ValueDataset[] $stack8, t, $stack10, a, $stack24;
        int $stack9, $stack11, $stack14, i;
        org.jfree.chart.needle.MeterNeedle[] p, b, $stack26;
        org.jfree.chart.needle.MeterNeedle needle, $stack27, $stack12;

        this := @this: org.jfree.chart.plot.CompassPlot;

        dataset := @parameter0: org.jfree.data.general.ValueDataset;

        needle := @parameter1: org.jfree.chart.needle.MeterNeedle;

        if dataset == null goto label7;

        $stack8 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        $stack9 = lengthof $stack8;

        i = $stack9 + 1;

        t = newarray (org.jfree.data.general.ValueDataset)[i];

        p = newarray (org.jfree.chart.needle.MeterNeedle)[i];

        i = i - 2;

     label1:
        if i < 0 goto label2;

        $stack24 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        $stack25 = $stack24[i];

        t[i] = $stack25;

        $stack26 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack27 = $stack26[i];

        p[i] = $stack27;

        i = i + -1;

        goto label1;

     label2:
        $stack10 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        i = lengthof $stack10;

        t[i] = dataset;

        $stack14 = i;

        if needle == null goto label3;

        $stack12 = needle;

        goto label4;

     label3:
        $stack11 = i - 1;

        $stack12 = p[$stack11];

     label4:
        p[$stack14] = $stack12;

        a = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        b = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets> = t;

        this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle> = p;

        i = i + -1;

     label5:
        if i < 0 goto label6;

        a[i] = null;

        b[i] = null;

        i = i + -1;

        goto label5;

     label6:
        interfaceinvoke dataset.<org.jfree.data.general.ValueDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label7:
        return;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.plot.CompassPlot this;
        org.jfree.chart.ui.RectangleInsets insets;
        java.awt.geom.Rectangle2D area;
        boolean $stack28, $stack119;
        double $stack29, $stack30, $stack31, $stack32, $stack33, $stack35, $stack39, $stack40, $stack41, $stack42, $stack50, $stack51, $stack52, $stack53, $stack112, $stack113, $stack114, $stack115, $stack124, $stack125, $stack126, $stack127, $stack130, $stack132, $stack133, $stack134, $stack136, $stack137, $stack138, $stack147, $stack149, $stack150, $stack151, $stack153, $stack154, $stack155, $stack163, $stack165, $stack166, $stack167, $stack169, $stack170, $stack171, $stack173, $stack174, $stack175, $stack177, $stack178, $stack179, a, value;
        int diameter, $stack34, $stack36, $stack37, $stack38, $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack64, $stack65, $stack66, $stack67, $stack69, $stack70, $stack71, $stack72, $stack73, $stack74, $stack75, $stack76, $stack77, $stack78, $stack79, $stack80, $stack81, $stack82, $stack87, $stack88, $stack89, $stack90, $stack93, $stack94, $stack95, $stack98, $stack99, $stack100, $stack103, $stack104, $stack105, $stack106, $stack108, $stack109, $stack110, $stack111, x, $stack118, current, $stack135, $stack139, $stack141, $stack142, $stack143, $stack144, $stack152, $stack156, $stack157, $stack158, $stack159, $stack160, $stack168, $stack172, x2, $stack176, $stack180, y2, midX, midY, radius, x1, outerRadius, innerRadius, w, y1, i;
        java.awt.geom.Ellipse2D $stack43, $stack54, $stack57, $stack59;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack55, $stack63, $stack68, $stack83;
        java.awt.geom.Area $stack56, $stack58, $stack60, $stack61, $stack62;
        java.util.ResourceBundle $stack85, $stack91, $stack96, $stack101;
        java.lang.String $stack86, $stack92, $stack97, $stack102;
        java.awt.geom.Rectangle2D$Double $stack107;
        org.jfree.chart.needle.MeterNeedle[] $stack116, $stack128;
        org.jfree.data.general.ValueDataset[] $stack117, $stack120;
        org.jfree.data.general.ValueDataset data;
        java.lang.Number $stack122, $stack123;
        org.jfree.chart.needle.MeterNeedle $stack129;
        java.awt.Polygon $stack140;
        java.awt.geom.Point2D anchor;
        org.jfree.chart.plot.PlotState parentState;
        java.awt.Font w#33;

        this := @this: org.jfree.chart.plot.CompassPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        anchor := @parameter2: java.awt.geom.Point2D;

        parentState := @parameter3: org.jfree.chart.plot.PlotState;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        if info == null goto label01;

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void setPlotArea(java.awt.geom.Rectangle2D)>(area);

     label01:
        insets = virtualinvoke this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.ui.RectangleInsets getInsets()>();

        virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(area);

        $stack28 = this.<org.jfree.chart.plot.CompassPlot: boolean drawBorder>;

        if $stack28 == 0 goto label02;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

     label02:
        $stack29 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack30 = $stack29 / 2.0;

        midX = (int) $stack30;

        $stack31 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack32 = $stack31 / 2.0;

        midY = (int) $stack32;

        radius = midX;

        if midY >= midX goto label03;

        radius = midY;

     label03:
        radius = radius + -1;

        diameter = 2 * radius;

        $stack33 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack34 = (int) $stack33;

        midX = midX + $stack34;

        $stack35 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack36 = (int) $stack35;

        midY = midY + $stack36;

        $stack43 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle1>;

        $stack37 = midX - radius;

        $stack42 = (double) $stack37;

        $stack38 = midY - radius;

        $stack41 = (double) $stack38;

        $stack40 = (double) diameter;

        $stack39 = (double) diameter;

        virtualinvoke $stack43.<java.awt.geom.Ellipse2D: void setFrame(double,double,double,double)>($stack42, $stack41, $stack40, $stack39);

        $stack54 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle2>;

        $stack44 = midX - radius;

        $stack45 = $stack44 + 15;

        $stack53 = (double) $stack45;

        $stack46 = midY - radius;

        $stack47 = $stack46 + 15;

        $stack52 = (double) $stack47;

        $stack48 = diameter - 30;

        $stack51 = (double) $stack48;

        $stack49 = diameter - 30;

        $stack50 = (double) $stack49;

        virtualinvoke $stack54.<java.awt.geom.Ellipse2D: void setFrame(double,double,double,double)>($stack53, $stack52, $stack51, $stack50);

        $stack55 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint rosePaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack55);

        $stack56 = new java.awt.geom.Area;

        $stack57 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle1>;

        specialinvoke $stack56.<java.awt.geom.Area: void <init>(java.awt.Shape)>($stack57);

        this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a1> = $stack56;

        $stack58 = new java.awt.geom.Area;

        $stack59 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle2>;

        specialinvoke $stack58.<java.awt.geom.Area: void <init>(java.awt.Shape)>($stack59);

        this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a2> = $stack58;

        $stack61 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a1>;

        $stack60 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a2>;

        virtualinvoke $stack61.<java.awt.geom.Area: void subtract(java.awt.geom.Area)>($stack60);

        $stack62 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a1>;

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack62);

        $stack63 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseCenterPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack63);

        x1 = diameter - 30;

        $stack64 = midX - radius;

        $stack67 = $stack64 + 15;

        $stack65 = midY - radius;

        $stack66 = $stack65 + 15;

        virtualinvoke g2.<java.awt.Graphics2D: void fillOval(int,int,int,int)>($stack67, $stack66, x1, x1);

        $stack68 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseHighlightPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack68);

        $stack70 = midX - radius;

        $stack69 = midY - radius;

        virtualinvoke g2.<java.awt.Graphics2D: void drawOval(int,int,int,int)>($stack70, $stack69, diameter, diameter);

        x1 = diameter - 20;

        $stack71 = midX - radius;

        $stack74 = $stack71 + 10;

        $stack72 = midY - radius;

        $stack73 = $stack72 + 10;

        virtualinvoke g2.<java.awt.Graphics2D: void drawOval(int,int,int,int)>($stack74, $stack73, x1, x1);

        x1 = diameter - 30;

        $stack75 = midX - radius;

        $stack78 = $stack75 + 15;

        $stack76 = midY - radius;

        $stack77 = $stack76 + 15;

        virtualinvoke g2.<java.awt.Graphics2D: void drawOval(int,int,int,int)>($stack78, $stack77, x1, x1);

        x1 = diameter - 80;

        $stack79 = midX - radius;

        $stack82 = $stack79 + 40;

        $stack80 = midY - radius;

        $stack81 = $stack80 + 40;

        virtualinvoke g2.<java.awt.Graphics2D: void drawOval(int,int,int,int)>($stack82, $stack81, x1, x1);

        outerRadius = radius - 20;

        innerRadius = radius - 32;

        w = 0;

     label04:
        if w >= 360 goto label05;

        $stack163 = (double) w;

        a = staticinvoke <java.lang.Math: double toRadians(double)>($stack163);

        $stack165 = staticinvoke <java.lang.Math: double sin(double)>(a);

        $stack166 = (double) innerRadius;

        $stack167 = $stack165 * $stack166;

        $stack168 = (int) $stack167;

        x1 = midX - $stack168;

        $stack169 = staticinvoke <java.lang.Math: double sin(double)>(a);

        $stack170 = (double) outerRadius;

        $stack171 = $stack169 * $stack170;

        $stack172 = (int) $stack171;

        x2 = midX - $stack172;

        $stack173 = staticinvoke <java.lang.Math: double cos(double)>(a);

        $stack174 = (double) innerRadius;

        $stack175 = $stack173 * $stack174;

        $stack176 = (int) $stack175;

        y1 = midY - $stack176;

        $stack177 = staticinvoke <java.lang.Math: double cos(double)>(a);

        $stack178 = (double) outerRadius;

        $stack179 = $stack177 * $stack178;

        $stack180 = (int) $stack179;

        y2 = midY - $stack180;

        virtualinvoke g2.<java.awt.Graphics2D: void drawLine(int,int,int,int)>(x1, y1, x2, y2);

        w = w + 15;

        goto label04;

     label05:
        $stack83 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseHighlightPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack83);

        innerRadius = radius - 26;

        w = 45;

     label06:
        if w >= 360 goto label07;

        $stack147 = (double) w;

        a = staticinvoke <java.lang.Math: double toRadians(double)>($stack147);

        $stack149 = staticinvoke <java.lang.Math: double sin(double)>(a);

        $stack150 = (double) innerRadius;

        $stack151 = $stack149 * $stack150;

        $stack152 = (int) $stack151;

        x1 = midX - $stack152;

        $stack153 = staticinvoke <java.lang.Math: double cos(double)>(a);

        $stack154 = (double) innerRadius;

        $stack155 = $stack153 * $stack154;

        $stack156 = (int) $stack155;

        y1 = midY - $stack156;

        $stack160 = x1 - 7;

        $stack159 = y1 - 7;

        $stack158 = 2 * 7;

        $stack157 = 2 * 7;

        virtualinvoke g2.<java.awt.Graphics2D: void fillOval(int,int,int,int)>($stack160, $stack159, $stack158, $stack157);

        w = w + 90;

        goto label06;

     label07:
        w = 0;

     label08:
        if w >= 360 goto label09;

        $stack130 = (double) w;

        a = staticinvoke <java.lang.Math: double toRadians(double)>($stack130);

        $stack132 = staticinvoke <java.lang.Math: double sin(double)>(a);

        $stack133 = (double) innerRadius;

        $stack134 = $stack132 * $stack133;

        $stack135 = (int) $stack134;

        x1 = midX - $stack135;

        $stack136 = staticinvoke <java.lang.Math: double cos(double)>(a);

        $stack137 = (double) innerRadius;

        $stack138 = $stack136 * $stack137;

        $stack139 = (int) $stack138;

        y1 = midY - $stack139;

        $stack140 = new java.awt.Polygon;

        specialinvoke $stack140.<java.awt.Polygon: void <init>()>();

        $stack141 = x1 - 7;

        virtualinvoke $stack140.<java.awt.Polygon: void addPoint(int,int)>($stack141, y1);

        $stack142 = y1 + 7;

        virtualinvoke $stack140.<java.awt.Polygon: void addPoint(int,int)>(x1, $stack142);

        $stack143 = x1 + 7;

        virtualinvoke $stack140.<java.awt.Polygon: void addPoint(int,int)>($stack143, y1);

        $stack144 = y1 - 7;

        virtualinvoke $stack140.<java.awt.Polygon: void addPoint(int,int)>(x1, $stack144);

        virtualinvoke g2.<java.awt.Graphics2D: void fillPolygon(java.awt.Polygon)>($stack140);

        w = w + 90;

        goto label08;

     label09:
        innerRadius = radius - 42;

        w#33 = virtualinvoke this.<org.jfree.chart.plot.CompassPlot: java.awt.Font getCompassFont(int)>(radius);

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>(w#33);

        $stack85 = <org.jfree.chart.plot.CompassPlot: java.util.ResourceBundle localizationResources>;

        $stack86 = virtualinvoke $stack85.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("N");

        $stack87 = midX - 5;

        $stack88 = midY - innerRadius;

        $stack89 = virtualinvoke w#33.<java.awt.Font: int getSize()>();

        $stack90 = $stack88 + $stack89;

        virtualinvoke g2.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>($stack86, $stack87, $stack90);

        $stack91 = <org.jfree.chart.plot.CompassPlot: java.util.ResourceBundle localizationResources>;

        $stack92 = virtualinvoke $stack91.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("S");

        $stack95 = midX - 5;

        $stack93 = midY + innerRadius;

        $stack94 = $stack93 - 5;

        virtualinvoke g2.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>($stack92, $stack95, $stack94);

        $stack96 = <org.jfree.chart.plot.CompassPlot: java.util.ResourceBundle localizationResources>;

        $stack97 = virtualinvoke $stack96.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("W");

        $stack98 = midX - innerRadius;

        $stack100 = $stack98 + 5;

        $stack99 = midY + 5;

        virtualinvoke g2.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>($stack97, $stack100, $stack99);

        $stack101 = <org.jfree.chart.plot.CompassPlot: java.util.ResourceBundle localizationResources>;

        $stack102 = virtualinvoke $stack101.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("E");

        $stack103 = midX + innerRadius;

        $stack104 = virtualinvoke w#33.<java.awt.Font: int getSize()>();

        $stack106 = $stack103 - $stack104;

        $stack105 = midY + 5;

        virtualinvoke g2.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>($stack102, $stack106, $stack105);

        y1 = radius / 2;

        x1 = radius / 6;

        $stack107 = new java.awt.geom.Rectangle2D$Double;

        $stack108 = midX - x1;

        $stack115 = (double) $stack108;

        $stack109 = midY - y1;

        $stack114 = (double) $stack109;

        $stack110 = 2 * x1;

        $stack113 = (double) $stack110;

        $stack111 = 2 * y1;

        $stack112 = (double) $stack111;

        specialinvoke $stack107.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack115, $stack114, $stack113, $stack112);

        $stack116 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        x = lengthof $stack116;

        $stack117 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        $stack118 = lengthof $stack117;

        i = $stack118 - 1;

     label10:
        if i < 0 goto label12;

        $stack120 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        data = $stack120[i];

        if data == null goto label11;

        $stack122 = interfaceinvoke data.<org.jfree.data.general.ValueDataset: java.lang.Number getValue()>();

        if $stack122 == null goto label11;

        $stack123 = interfaceinvoke data.<org.jfree.data.general.ValueDataset: java.lang.Number getValue()>();

        $stack124 = virtualinvoke $stack123.<java.lang.Number: double doubleValue()>();

        $stack125 = this.<org.jfree.chart.plot.CompassPlot: double revolutionDistance>;

        value = $stack124 % $stack125;

        $stack126 = this.<org.jfree.chart.plot.CompassPlot: double revolutionDistance>;

        $stack127 = value / $stack126;

        value = $stack127 * 360.0;

        current = i % x;

        $stack128 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack129 = $stack128[current];

        virtualinvoke $stack129.<org.jfree.chart.needle.MeterNeedle: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)>(g2, $stack107, value);

     label11:
        i = i + -1;

        goto label10;

     label12:
        $stack119 = this.<org.jfree.chart.plot.CompassPlot: boolean drawBorder>;

        if $stack119 == 0 goto label13;

        virtualinvoke this.<org.jfree.chart.plot.CompassPlot: void drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

     label13:
        return;
    }

    public java.lang.String getPlotType()
    {
        java.util.ResourceBundle $stack1;
        java.lang.String $stack2;
        org.jfree.chart.plot.CompassPlot this;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = <org.jfree.chart.plot.CompassPlot: java.util.ResourceBundle localizationResources>;

        $stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Compass_Plot");

        return $stack2;
    }

    public org.jfree.chart.LegendItemCollection getLegendItems()
    {
        org.jfree.chart.plot.CompassPlot this;

        this := @this: org.jfree.chart.plot.CompassPlot;

        return null;
    }

    public void zoom(double)
    {
        org.jfree.chart.plot.CompassPlot this;
        double percent;

        this := @this: org.jfree.chart.plot.CompassPlot;

        percent := @parameter0: double;

        return;
    }

    protected java.awt.Font getCompassFont(int)
    {
        int radius;
        float $stack4, fontSize;
        byte $stack5;
        org.jfree.chart.plot.CompassPlot this;
        java.awt.Font $stack6, newFont;

        this := @this: org.jfree.chart.plot.CompassPlot;

        radius := @parameter0: int;

        $stack4 = (float) radius;

        fontSize = $stack4 / 10.0F;

        $stack5 = fontSize cmpg 8.0F;

        if $stack5 >= 0 goto label1;

        fontSize = 8.0F;

     label1:
        $stack6 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Font compassFont>;

        newFont = virtualinvoke $stack6.<java.awt.Font: java.awt.Font deriveFont(float)>(fontSize);

        return newFont;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.plot.CompassPlot this, that;
        boolean $stack3, $stack4, $stack9, $stack10, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack5, $stack6;
        java.awt.Font $stack7, $stack8, $stack21, $stack22;
        java.awt.Paint $stack12, $stack13, $stack15, $stack16, $stack18, $stack19;
        org.jfree.chart.needle.MeterNeedle[] $stack24, $stack25;
        double $stack27, $stack28;
        byte $stack29;

        this := @this: org.jfree.chart.plot.CompassPlot;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.plot.CompassPlot;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        $stack4 = specialinvoke this.<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>(obj);

        if $stack4 != 0 goto label03;

        return 0;

     label03:
        that = (org.jfree.chart.plot.CompassPlot) obj;

        $stack6 = this.<org.jfree.chart.plot.CompassPlot: int labelType>;

        $stack5 = that.<org.jfree.chart.plot.CompassPlot: int labelType>;

        if $stack6 == $stack5 goto label04;

        return 0;

     label04:
        $stack8 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Font labelFont>;

        $stack7 = that.<org.jfree.chart.plot.CompassPlot: java.awt.Font labelFont>;

        $stack9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack8, $stack7);

        if $stack9 != 0 goto label05;

        return 0;

     label05:
        $stack11 = this.<org.jfree.chart.plot.CompassPlot: boolean drawBorder>;

        $stack10 = that.<org.jfree.chart.plot.CompassPlot: boolean drawBorder>;

        if $stack11 == $stack10 goto label06;

        return 0;

     label06:
        $stack13 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseHighlightPaint>;

        $stack12 = that.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseHighlightPaint>;

        $stack14 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack13, $stack12);

        if $stack14 != 0 goto label07;

        return 0;

     label07:
        $stack16 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint rosePaint>;

        $stack15 = that.<org.jfree.chart.plot.CompassPlot: java.awt.Paint rosePaint>;

        $stack17 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack16, $stack15);

        if $stack17 != 0 goto label08;

        return 0;

     label08:
        $stack19 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseCenterPaint>;

        $stack18 = that.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseCenterPaint>;

        $stack20 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack19, $stack18);

        if $stack20 != 0 goto label09;

        return 0;

     label09:
        $stack22 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Font compassFont>;

        $stack21 = that.<org.jfree.chart.plot.CompassPlot: java.awt.Font compassFont>;

        $stack23 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack22, $stack21);

        if $stack23 != 0 goto label10;

        return 0;

     label10:
        $stack25 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack24 = that.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack26 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack25, $stack24);

        if $stack26 != 0 goto label11;

        return 0;

     label11:
        $stack27 = virtualinvoke this.<org.jfree.chart.plot.CompassPlot: double getRevolutionDistance()>();

        $stack28 = virtualinvoke that.<org.jfree.chart.plot.CompassPlot: double getRevolutionDistance()>();

        $stack29 = $stack27 cmpl $stack28;

        if $stack29 == 0 goto label12;

        return 0;

     label12:
        return 1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.plot.CompassPlot this, clone;
        java.lang.Object $stack3, $stack10, $stack14, $stack26, $stack34, $stack38, $stack42, $stack46;
        java.awt.geom.Ellipse2D $stack4, $stack5, $stack41, $stack43, $stack45, $stack47;
        java.awt.geom.Area $stack6, $stack7, $stack33, $stack35, $stack37, $stack39;
        java.awt.geom.Rectangle2D $stack8, $stack25, $stack27;
        org.jfree.data.general.ValueDataset[] $stack9, $stack11, $stack12, $stack19, $stack23, $stack17;
        org.jfree.chart.needle.MeterNeedle[] $stack13, $stack15, $stack16;
        org.jfree.data.general.ValueDataset $stack20, $stack24;
        int i, $stack18;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack3 = specialinvoke this.<org.jfree.chart.plot.Plot: java.lang.Object clone()>();

        clone = (org.jfree.chart.plot.CompassPlot) $stack3;

        $stack4 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle1>;

        if $stack4 == null goto label1;

        $stack45 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle1>;

        $stack46 = virtualinvoke $stack45.<java.awt.geom.Ellipse2D: java.lang.Object clone()>();

        $stack47 = (java.awt.geom.Ellipse2D) $stack46;

        clone.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle1> = $stack47;

     label1:
        $stack5 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle2>;

        if $stack5 == null goto label2;

        $stack41 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle2>;

        $stack42 = virtualinvoke $stack41.<java.awt.geom.Ellipse2D: java.lang.Object clone()>();

        $stack43 = (java.awt.geom.Ellipse2D) $stack42;

        clone.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Ellipse2D circle2> = $stack43;

     label2:
        $stack6 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a1>;

        if $stack6 == null goto label3;

        $stack37 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a1>;

        $stack38 = virtualinvoke $stack37.<java.awt.geom.Area: java.lang.Object clone()>();

        $stack39 = (java.awt.geom.Area) $stack38;

        clone.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a1> = $stack39;

     label3:
        $stack7 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a2>;

        if $stack7 == null goto label4;

        $stack33 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a2>;

        $stack34 = virtualinvoke $stack33.<java.awt.geom.Area: java.lang.Object clone()>();

        $stack35 = (java.awt.geom.Area) $stack34;

        clone.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Area a2> = $stack35;

     label4:
        $stack8 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Rectangle2D rect1>;

        if $stack8 == null goto label5;

        $stack25 = this.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Rectangle2D rect1>;

        $stack26 = virtualinvoke $stack25.<java.awt.geom.Rectangle2D: java.lang.Object clone()>();

        $stack27 = (java.awt.geom.Rectangle2D) $stack26;

        clone.<org.jfree.chart.plot.CompassPlot: java.awt.geom.Rectangle2D rect1> = $stack27;

     label5:
        $stack9 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        $stack10 = virtualinvoke $stack9.<java.lang.Object: java.lang.Object clone()>();

        $stack11 = (org.jfree.data.general.ValueDataset[]) $stack10;

        $stack12 = (org.jfree.data.general.ValueDataset[]) $stack11;

        clone.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets> = $stack12;

        $stack13 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle>;

        $stack14 = virtualinvoke $stack13.<java.lang.Object: java.lang.Object clone()>();

        $stack15 = (org.jfree.chart.needle.MeterNeedle[]) $stack14;

        $stack16 = (org.jfree.chart.needle.MeterNeedle[]) $stack15;

        clone.<org.jfree.chart.plot.CompassPlot: org.jfree.chart.needle.MeterNeedle[] seriesNeedle> = $stack16;

        i = 0;

     label6:
        $stack17 = this.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        $stack18 = lengthof $stack17;

        if i >= $stack18 goto label8;

        $stack19 = clone.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        $stack20 = $stack19[i];

        if $stack20 == null goto label7;

        $stack23 = clone.<org.jfree.chart.plot.CompassPlot: org.jfree.data.general.ValueDataset[] datasets>;

        $stack24 = $stack23[i];

        interfaceinvoke $stack24.<org.jfree.data.general.ValueDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(clone);

     label7:
        i = i + 1;

        goto label6;

     label8:
        return clone;
    }

    public void setRevolutionDistance(double)
    {
        double size;
        byte $stack3;
        org.jfree.chart.plot.CompassPlot this;

        this := @this: org.jfree.chart.plot.CompassPlot;

        size := @parameter0: double;

        $stack3 = size cmpl 0.0;

        if $stack3 <= 0 goto label1;

        this.<org.jfree.chart.plot.CompassPlot: double revolutionDistance> = size;

     label1:
        return;
    }

    public double getRevolutionDistance()
    {
        org.jfree.chart.plot.CompassPlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.CompassPlot;

        $stack1 = this.<org.jfree.chart.plot.CompassPlot: double revolutionDistance>;

        return $stack1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.plot.CompassPlot this;
        java.awt.Paint $stack2, $stack3, $stack4;

        this := @this: org.jfree.chart.plot.CompassPlot;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint rosePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseCenterPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseHighlightPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack4, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.plot.CompassPlot this;
        java.awt.Paint $stack2, $stack3, $stack4;

        this := @this: org.jfree.chart.plot.CompassPlot;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint rosePaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseCenterPaint> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.CompassPlot: java.awt.Paint roseHighlightPaint> = $stack4;

        return;
    }

    static void <clinit>()
    {
        java.awt.Font $stack0;
        java.util.ResourceBundle $stack1;

        <org.jfree.chart.plot.CompassPlot: int VALUE_LABELS> = 1;

        <org.jfree.chart.plot.CompassPlot: int NO_LABELS> = 0;

        <org.jfree.chart.plot.CompassPlot: long serialVersionUID> = 6924382802125527395L;

        $stack0 = new java.awt.Font;

        specialinvoke $stack0.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 1, 10);

        <org.jfree.chart.plot.CompassPlot: java.awt.Font DEFAULT_LABEL_FONT> = $stack0;

        $stack1 = staticinvoke <org.jfree.chart.util.ResourceBundleWrapper: java.util.ResourceBundle getBundle(java.lang.String)>("org.jfree.chart.plot.LocalizationBundle");

        <org.jfree.chart.plot.CompassPlot: java.util.ResourceBundle localizationResources> = $stack1;

        return;
    }
}
