public class org.jfree.chart.plot.PieLabelDistributor extends org.jfree.chart.plot.AbstractPieLabelDistributor
{
    private double minGap;

    public void <init>(int)
    {
        org.jfree.chart.plot.PieLabelDistributor this;
        int labelCount;

        this := @this: org.jfree.chart.plot.PieLabelDistributor;

        labelCount := @parameter0: int;

        specialinvoke this.<org.jfree.chart.plot.AbstractPieLabelDistributor: void <init>()>();

        this.<org.jfree.chart.plot.PieLabelDistributor: double minGap> = 4.0;

        return;
    }

    public void distributeLabels(double, double)
    {
        org.jfree.chart.plot.PieLabelDistributor this;
        boolean $stack5, $stack6, $stack7;
        double minY, height;

        this := @this: org.jfree.chart.plot.PieLabelDistributor;

        minY := @parameter0: double;

        height := @parameter1: double;

        virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: void sort()>();

        $stack5 = specialinvoke this.<org.jfree.chart.plot.PieLabelDistributor: boolean isOverlap()>();

        if $stack5 == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: void adjustDownwards(double,double)>(minY, height);

     label1:
        $stack6 = specialinvoke this.<org.jfree.chart.plot.PieLabelDistributor: boolean isOverlap()>();

        if $stack6 == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: void adjustUpwards(double,double)>(minY, height);

     label2:
        $stack7 = specialinvoke this.<org.jfree.chart.plot.PieLabelDistributor: boolean isOverlap()>();

        if $stack7 == 0 goto label3;

        virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: void spreadEvenly(double,double)>(minY, height);

     label3:
        return;
    }

    private boolean isOverlap()
    {
        org.jfree.chart.plot.PieLabelDistributor this;
        java.util.List $stack5;
        int $stack6, i;
        org.jfree.chart.plot.PieLabelRecord plr;
        double $stack8, y;
        byte $stack9;

        this := @this: org.jfree.chart.plot.PieLabelDistributor;

        y = 0.0;

        i = 0;

     label1:
        $stack5 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        $stack6 = interfaceinvoke $stack5.<java.util.List: int size()>();

        if i >= $stack6 goto label3;

        plr = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(i);

        $stack8 = virtualinvoke plr.<org.jfree.chart.plot.PieLabelRecord: double getLowerY()>();

        $stack9 = y cmpl $stack8;

        if $stack9 <= 0 goto label2;

        return 1;

     label2:
        y = virtualinvoke plr.<org.jfree.chart.plot.PieLabelRecord: double getUpperY()>();

        i = i + 1;

        goto label1;

     label3:
        return 0;
    }

    protected void adjustInwards()
    {
        org.jfree.chart.plot.PieLabelDistributor this;
        java.util.List $stack7;
        int $stack8, $stack9, $stack25, lower, upper, $stack10;
        double $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack27, $stack28, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, adjust, $stack13, $stack14;
        byte $stack29, $stack15;
        org.jfree.chart.plot.PieLabelRecord r0, r1;

        this := @this: org.jfree.chart.plot.PieLabelDistributor;

        lower = 0;

        $stack7 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        $stack8 = interfaceinvoke $stack7.<java.util.List: int size()>();

        upper = $stack8 - 1;

     label1:
        if upper <= lower goto label4;

        $stack9 = upper - 1;

        if lower >= $stack9 goto label2;

        r0 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(lower);

        $stack25 = lower + 1;

        r1 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>($stack25);

        $stack27 = virtualinvoke r1.<org.jfree.chart.plot.PieLabelRecord: double getLowerY()>();

        $stack28 = virtualinvoke r0.<org.jfree.chart.plot.PieLabelRecord: double getUpperY()>();

        $stack29 = $stack27 cmpg $stack28;

        if $stack29 >= 0 goto label2;

        $stack37 = virtualinvoke r0.<org.jfree.chart.plot.PieLabelRecord: double getUpperY()>();

        $stack38 = virtualinvoke r1.<org.jfree.chart.plot.PieLabelRecord: double getLowerY()>();

        $stack40 = $stack37 - $stack38;

        $stack39 = this.<org.jfree.chart.plot.PieLabelDistributor: double minGap>;

        adjust = $stack40 + $stack39;

        $stack41 = virtualinvoke r1.<org.jfree.chart.plot.PieLabelRecord: double getAllocatedY()>();

        $stack42 = $stack41 + adjust;

        virtualinvoke r1.<org.jfree.chart.plot.PieLabelRecord: void setAllocatedY(double)>($stack42);

     label2:
        $stack10 = upper - 1;

        r0 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>($stack10);

        r1 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(upper);

        $stack13 = virtualinvoke r0.<org.jfree.chart.plot.PieLabelRecord: double getUpperY()>();

        $stack14 = virtualinvoke r1.<org.jfree.chart.plot.PieLabelRecord: double getLowerY()>();

        $stack15 = $stack13 cmpl $stack14;

        if $stack15 <= 0 goto label3;

        $stack18 = virtualinvoke r0.<org.jfree.chart.plot.PieLabelRecord: double getUpperY()>();

        $stack19 = virtualinvoke r1.<org.jfree.chart.plot.PieLabelRecord: double getLowerY()>();

        $stack21 = $stack18 - $stack19;

        $stack20 = this.<org.jfree.chart.plot.PieLabelDistributor: double minGap>;

        adjust = $stack21 + $stack20;

        $stack22 = virtualinvoke r1.<org.jfree.chart.plot.PieLabelRecord: double getAllocatedY()>();

        $stack23 = $stack22 + adjust;

        virtualinvoke r1.<org.jfree.chart.plot.PieLabelRecord: void setAllocatedY(double)>($stack23);

     label3:
        lower = lower + 1;

        upper = upper + -1;

        goto label1;

     label4:
        return;
    }

    protected void adjustDownwards(double, double)
    {
        org.jfree.chart.plot.PieLabelDistributor this;
        java.util.List $stack8;
        int $stack9, $stack10, $stack12, i;
        org.jfree.chart.plot.PieLabelRecord record0, record1;
        double $stack14, $stack15, minY, height, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30;
        byte $stack16;

        this := @this: org.jfree.chart.plot.PieLabelDistributor;

        minY := @parameter0: double;

        height := @parameter1: double;

        i = 0;

     label1:
        $stack8 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        $stack9 = interfaceinvoke $stack8.<java.util.List: int size()>();

        $stack10 = $stack9 - 1;

        if i >= $stack10 goto label3;

        record0 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(i);

        $stack12 = i + 1;

        record1 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>($stack12);

        $stack14 = virtualinvoke record1.<org.jfree.chart.plot.PieLabelRecord: double getLowerY()>();

        $stack15 = virtualinvoke record0.<org.jfree.chart.plot.PieLabelRecord: double getUpperY()>();

        $stack16 = $stack14 cmpg $stack15;

        if $stack16 >= 0 goto label2;

        $stack20 = minY + height;

        $stack21 = virtualinvoke record1.<org.jfree.chart.plot.PieLabelRecord: double getLabelHeight()>();

        $stack22 = $stack21 / 2.0;

        $stack23 = $stack20 - $stack22;

        $stack24 = virtualinvoke record0.<org.jfree.chart.plot.PieLabelRecord: double getUpperY()>();

        $stack25 = this.<org.jfree.chart.plot.PieLabelDistributor: double minGap>;

        $stack26 = $stack24 + $stack25;

        $stack27 = virtualinvoke record1.<org.jfree.chart.plot.PieLabelRecord: double getLabelHeight()>();

        $stack28 = $stack27 / 2.0;

        $stack29 = $stack26 + $stack28;

        $stack30 = staticinvoke <java.lang.Math: double min(double,double)>($stack23, $stack29);

        virtualinvoke record1.<org.jfree.chart.plot.PieLabelRecord: void setAllocatedY(double)>($stack30);

     label2:
        i = i + 1;

        goto label1;

     label3:
        return;
    }

    protected void adjustUpwards(double, double)
    {
        org.jfree.chart.plot.PieLabelDistributor this;
        java.util.List $stack8;
        int $stack9, $stack11, i;
        org.jfree.chart.plot.PieLabelRecord record0, record1;
        double $stack13, $stack14, minY, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, height;
        byte $stack15;

        this := @this: org.jfree.chart.plot.PieLabelDistributor;

        minY := @parameter0: double;

        height := @parameter1: double;

        $stack8 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        $stack9 = interfaceinvoke $stack8.<java.util.List: int size()>();

        i = $stack9 - 1;

     label1:
        if i <= 0 goto label3;

        record0 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(i);

        $stack11 = i - 1;

        record1 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>($stack11);

        $stack13 = virtualinvoke record1.<org.jfree.chart.plot.PieLabelRecord: double getUpperY()>();

        $stack14 = virtualinvoke record0.<org.jfree.chart.plot.PieLabelRecord: double getLowerY()>();

        $stack15 = $stack13 cmpl $stack14;

        if $stack15 <= 0 goto label2;

        $stack17 = virtualinvoke record1.<org.jfree.chart.plot.PieLabelRecord: double getLabelHeight()>();

        $stack18 = $stack17 / 2.0;

        $stack19 = minY + $stack18;

        $stack20 = virtualinvoke record0.<org.jfree.chart.plot.PieLabelRecord: double getLowerY()>();

        $stack21 = this.<org.jfree.chart.plot.PieLabelDistributor: double minGap>;

        $stack22 = $stack20 - $stack21;

        $stack23 = virtualinvoke record1.<org.jfree.chart.plot.PieLabelRecord: double getLabelHeight()>();

        $stack24 = $stack23 / 2.0;

        $stack25 = $stack22 - $stack24;

        $stack26 = staticinvoke <java.lang.Math: double max(double,double)>($stack19, $stack25);

        virtualinvoke record1.<org.jfree.chart.plot.PieLabelRecord: void setAllocatedY(double)>($stack26);

     label2:
        i = i + -1;

        goto label1;

     label3:
        return;
    }

    protected void spreadEvenly(double, double)
    {
        double minY, height, $stack20, $stack21, $stack22, $stack23, $stack24, $stack30, $stack33, y, sumOfLabelHeights, i#4;
        org.jfree.chart.plot.PieLabelDistributor this;
        java.util.List $stack13, $stack15, $stack27, $stack17;
        int $stack14, $stack16, $stack28, $stack29, i, $stack18;
        org.jfree.chart.plot.PieLabelRecord record, $stack32;

        this := @this: org.jfree.chart.plot.PieLabelDistributor;

        minY := @parameter0: double;

        height := @parameter1: double;

        y = minY;

        sumOfLabelHeights = 0.0;

        i = 0;

     label1:
        $stack13 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        $stack14 = interfaceinvoke $stack13.<java.util.List: int size()>();

        if i >= $stack14 goto label2;

        $stack32 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(i);

        $stack33 = virtualinvoke $stack32.<org.jfree.chart.plot.PieLabelRecord: double getLabelHeight()>();

        sumOfLabelHeights = sumOfLabelHeights + $stack33;

        i = i + 1;

        goto label1;

     label2:
        i#4 = height - sumOfLabelHeights;

        $stack15 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        $stack16 = interfaceinvoke $stack15.<java.util.List: int size()>();

        if $stack16 <= 1 goto label3;

        $stack27 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        $stack28 = interfaceinvoke $stack27.<java.util.List: int size()>();

        $stack29 = $stack28 - 1;

        $stack30 = (double) $stack29;

        i#4 = i#4 / $stack30;

     label3:
        i = 0;

     label4:
        $stack17 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        $stack18 = interfaceinvoke $stack17.<java.util.List: int size()>();

        if i >= $stack18 goto label5;

        record = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(i);

        $stack20 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getLabelHeight()>();

        $stack21 = $stack20 / 2.0;

        y = y + $stack21;

        virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: void setAllocatedY(double)>(y);

        $stack22 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getLabelHeight()>();

        $stack23 = $stack22 / 2.0;

        $stack24 = y + $stack23;

        y = $stack24 + i#4;

        i = i + 1;

        goto label4;

     label5:
        return;
    }

    public void sort()
    {
        org.jfree.chart.plot.PieLabelDistributor this;
        java.util.List $stack1;

        this := @this: org.jfree.chart.plot.PieLabelDistributor;

        $stack1 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($stack1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack3, $stack9;
        org.jfree.chart.plot.PieLabelDistributor this;
        java.util.List $stack4;
        int $stack5, i;
        java.lang.String $stack6, $stack8;
        org.jfree.chart.plot.PieLabelRecord $stack7;

        this := @this: org.jfree.chart.plot.PieLabelDistributor;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        i = 0;

     label1:
        $stack4 = this.<org.jfree.chart.plot.PieLabelDistributor: java.util.List labels>;

        $stack5 = interfaceinvoke $stack4.<java.util.List: int size()>();

        if i >= $stack5 goto label2;

        $stack7 = virtualinvoke this.<org.jfree.chart.plot.PieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(i);

        $stack8 = virtualinvoke $stack7.<org.jfree.chart.plot.PieLabelRecord: java.lang.String toString()>();

        $stack9 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i = i + 1;

        goto label1;

     label2:
        $stack6 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack6;
    }
}
