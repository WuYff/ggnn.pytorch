public class org.jfree.chart.plot.XYPlot extends org.jfree.chart.plot.Plot implements org.jfree.chart.plot.ValueAxisPlot, org.jfree.chart.plot.Pannable, org.jfree.chart.plot.Zoomable, org.jfree.chart.event.RendererChangeListener, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE;
    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT;
    public static final boolean DEFAULT_CROSSHAIR_VISIBLE;
    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE;
    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT;
    protected static java.util.ResourceBundle localizationResources;
    private org.jfree.chart.plot.PlotOrientation orientation;
    private org.jfree.chart.ui.RectangleInsets axisOffset;
    private java.util.Map domainAxes;
    private java.util.Map domainAxisLocations;
    private java.util.Map rangeAxes;
    private java.util.Map rangeAxisLocations;
    private java.util.Map datasets;
    private java.util.Map renderers;
    private java.util.Map datasetToDomainAxesMap;
    private java.util.Map datasetToRangeAxesMap;
    private transient java.awt.geom.Point2D quadrantOrigin;
    private transient java.awt.Paint[] quadrantPaint;
    private boolean domainGridlinesVisible;
    private transient java.awt.Stroke domainGridlineStroke;
    private transient java.awt.Paint domainGridlinePaint;
    private boolean rangeGridlinesVisible;
    private transient java.awt.Stroke rangeGridlineStroke;
    private transient java.awt.Paint rangeGridlinePaint;
    private boolean domainMinorGridlinesVisible;
    private transient java.awt.Stroke domainMinorGridlineStroke;
    private transient java.awt.Paint domainMinorGridlinePaint;
    private boolean rangeMinorGridlinesVisible;
    private transient java.awt.Stroke rangeMinorGridlineStroke;
    private transient java.awt.Paint rangeMinorGridlinePaint;
    private boolean domainZeroBaselineVisible;
    private transient java.awt.Stroke domainZeroBaselineStroke;
    private transient java.awt.Paint domainZeroBaselinePaint;
    private boolean rangeZeroBaselineVisible;
    private transient java.awt.Stroke rangeZeroBaselineStroke;
    private transient java.awt.Paint rangeZeroBaselinePaint;
    private boolean domainCrosshairVisible;
    private double domainCrosshairValue;
    private transient java.awt.Stroke domainCrosshairStroke;
    private transient java.awt.Paint domainCrosshairPaint;
    private boolean domainCrosshairLockedOnData;
    private boolean rangeCrosshairVisible;
    private double rangeCrosshairValue;
    private transient java.awt.Stroke rangeCrosshairStroke;
    private transient java.awt.Paint rangeCrosshairPaint;
    private boolean rangeCrosshairLockedOnData;
    private java.util.Map foregroundDomainMarkers;
    private java.util.Map backgroundDomainMarkers;
    private java.util.Map foregroundRangeMarkers;
    private java.util.Map backgroundRangeMarkers;
    private java.util.List annotations;
    private transient java.awt.Paint domainTickBandPaint;
    private transient java.awt.Paint rangeTickBandPaint;
    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;
    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;
    private org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder;
    private org.jfree.chart.plot.SeriesRenderingOrder seriesRenderingOrder;
    private int weight;
    private org.jfree.chart.LegendItemCollection fixedLegendItems;
    private boolean domainPannable;
    private boolean rangePannable;
    private org.jfree.chart.util.ShadowGenerator shadowGenerator;

    public void <init>()
    {
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        specialinvoke this.<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>(null, null, null, null);

        return;
    }

    public void <init>(org.jfree.data.xy.XYDataset, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.xy.XYItemRenderer)
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.geom.Point2D$Double $stack5;
        java.awt.Paint[] $stack6;
        org.jfree.chart.plot.DatasetRenderingOrder $stack7;
        org.jfree.chart.plot.SeriesRenderingOrder $stack8;
        org.jfree.chart.plot.PlotOrientation $stack9;
        org.jfree.chart.ui.RectangleInsets $stack10;
        java.util.HashMap $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20;
        java.util.TreeMap $stack21, $stack22;
        java.util.ArrayList $stack23;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.chart.renderer.xy.XYItemRenderer renderer;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.util.Map $stack24, $stack28, $stack48, $stack95, $stack101, $stack105;
        java.lang.Integer $stack25, $stack29, $stack49, $stack96, $stack102, $stack106;
        org.jfree.chart.axis.AxisLocation $stack26, $stack30;
        java.awt.Stroke $stack32, $stack34, $stack38, $stack40, $stack44, $stack46;
        java.awt.Paint $stack33, $stack39, $stack45, $stack47;
        java.awt.Color $stack35, $stack36, $stack41, $stack42;
        java.awt.BasicStroke $stack37, $stack43;

        this := @this: org.jfree.chart.plot.XYPlot;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        domainAxis := @parameter1: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter2: org.jfree.chart.axis.ValueAxis;

        renderer := @parameter3: org.jfree.chart.renderer.xy.XYItemRenderer;

        specialinvoke this.<org.jfree.chart.plot.Plot: void <init>()>();

        $stack5 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack5.<java.awt.geom.Point2D$Double: void <init>(double,double)>(0.0, 0.0);

        this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin> = $stack5;

        $stack6 = newarray (java.awt.Paint)[4];

        $stack6[0] = null;

        $stack6[1] = null;

        $stack6[2] = null;

        $stack6[3] = null;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint> = $stack6;

        this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairLockedOnData> = 1;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairLockedOnData> = 1;

        $stack7 = <org.jfree.chart.plot.DatasetRenderingOrder: org.jfree.chart.plot.DatasetRenderingOrder REVERSE>;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder> = $stack7;

        $stack8 = <org.jfree.chart.plot.SeriesRenderingOrder: org.jfree.chart.plot.SeriesRenderingOrder REVERSE>;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.SeriesRenderingOrder seriesRenderingOrder> = $stack8;

        $stack9 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation> = $stack9;

        this.<org.jfree.chart.plot.XYPlot: int weight> = 1;

        $stack10 = <org.jfree.chart.ui.RectangleInsets: org.jfree.chart.ui.RectangleInsets ZERO_INSETS>;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset> = $stack10;

        $stack11 = new java.util.HashMap;

        specialinvoke $stack11.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes> = $stack11;

        $stack12 = new java.util.HashMap;

        specialinvoke $stack12.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations> = $stack12;

        $stack13 = new java.util.HashMap;

        specialinvoke $stack13.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers> = $stack13;

        $stack14 = new java.util.HashMap;

        specialinvoke $stack14.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers> = $stack14;

        $stack15 = new java.util.HashMap;

        specialinvoke $stack15.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes> = $stack15;

        $stack16 = new java.util.HashMap;

        specialinvoke $stack16.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations> = $stack16;

        $stack17 = new java.util.HashMap;

        specialinvoke $stack17.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers> = $stack17;

        $stack18 = new java.util.HashMap;

        specialinvoke $stack18.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers> = $stack18;

        $stack19 = new java.util.HashMap;

        specialinvoke $stack19.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets> = $stack19;

        $stack20 = new java.util.HashMap;

        specialinvoke $stack20.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers> = $stack20;

        $stack21 = new java.util.TreeMap;

        specialinvoke $stack21.<java.util.TreeMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap> = $stack21;

        $stack22 = new java.util.TreeMap;

        specialinvoke $stack22.<java.util.TreeMap: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap> = $stack22;

        $stack23 = new java.util.ArrayList;

        specialinvoke $stack23.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.chart.plot.XYPlot: java.util.List annotations> = $stack23;

        if dataset == null goto label1;

        interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

        $stack105 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack106 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $stack105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack106, dataset);

     label1:
        if renderer == null goto label2;

        interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: void setPlot(org.jfree.chart.plot.XYPlot)>(this);

        interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>(this);

        $stack101 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack102 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $stack101.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack102, renderer);

     label2:
        if domainAxis == null goto label3;

        virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

        $stack95 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack96 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $stack95.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack96, domainAxis);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void mapDatasetToDomainAxis(int,int)>(0, 0);

     label3:
        $stack24 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations>;

        $stack25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack26 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation BOTTOM_OR_LEFT>;

        interfaceinvoke $stack24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack25, $stack26);

        if rangeAxis == null goto label4;

        virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

        $stack48 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $stack48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack49, rangeAxis);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void mapDatasetToRangeAxis(int,int)>(0, 0);

     label4:
        $stack28 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations>;

        $stack29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack30 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation BOTTOM_OR_LEFT>;

        interfaceinvoke $stack28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack29, $stack30);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void configureDomainAxes()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void configureRangeAxes()>();

        this.<org.jfree.chart.plot.XYPlot: boolean domainGridlinesVisible> = 1;

        $stack32 = <org.jfree.chart.plot.XYPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainGridlineStroke> = $stack32;

        $stack33 = <org.jfree.chart.plot.XYPlot: java.awt.Paint DEFAULT_GRIDLINE_PAINT>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainGridlinePaint> = $stack33;

        this.<org.jfree.chart.plot.XYPlot: boolean domainMinorGridlinesVisible> = 0;

        $stack34 = <org.jfree.chart.plot.XYPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainMinorGridlineStroke> = $stack34;

        $stack35 = <java.awt.Color: java.awt.Color WHITE>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainMinorGridlinePaint> = $stack35;

        this.<org.jfree.chart.plot.XYPlot: boolean domainZeroBaselineVisible> = 0;

        $stack36 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainZeroBaselinePaint> = $stack36;

        $stack37 = new java.awt.BasicStroke;

        specialinvoke $stack37.<java.awt.BasicStroke: void <init>(float)>(0.5F);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainZeroBaselineStroke> = $stack37;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeGridlinesVisible> = 1;

        $stack38 = <org.jfree.chart.plot.XYPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeGridlineStroke> = $stack38;

        $stack39 = <org.jfree.chart.plot.XYPlot: java.awt.Paint DEFAULT_GRIDLINE_PAINT>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeGridlinePaint> = $stack39;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeMinorGridlinesVisible> = 0;

        $stack40 = <org.jfree.chart.plot.XYPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeMinorGridlineStroke> = $stack40;

        $stack41 = <java.awt.Color: java.awt.Color WHITE>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeMinorGridlinePaint> = $stack41;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeZeroBaselineVisible> = 0;

        $stack42 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeZeroBaselinePaint> = $stack42;

        $stack43 = new java.awt.BasicStroke;

        specialinvoke $stack43.<java.awt.BasicStroke: void <init>(float)>(0.5F);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeZeroBaselineStroke> = $stack43;

        this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairVisible> = 0;

        this.<org.jfree.chart.plot.XYPlot: double domainCrosshairValue> = 0.0;

        $stack44 = <org.jfree.chart.plot.XYPlot: java.awt.Stroke DEFAULT_CROSSHAIR_STROKE>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainCrosshairStroke> = $stack44;

        $stack45 = <org.jfree.chart.plot.XYPlot: java.awt.Paint DEFAULT_CROSSHAIR_PAINT>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainCrosshairPaint> = $stack45;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairVisible> = 0;

        this.<org.jfree.chart.plot.XYPlot: double rangeCrosshairValue> = 0.0;

        $stack46 = <org.jfree.chart.plot.XYPlot: java.awt.Stroke DEFAULT_CROSSHAIR_STROKE>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeCrosshairStroke> = $stack46;

        $stack47 = <org.jfree.chart.plot.XYPlot: java.awt.Paint DEFAULT_CROSSHAIR_PAINT>;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeCrosshairPaint> = $stack47;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator> = null;

        return;
    }

    public java.lang.String getPlotType()
    {
        java.util.ResourceBundle $stack1;
        java.lang.String $stack2;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = <org.jfree.chart.plot.XYPlot: java.util.ResourceBundle localizationResources>;

        $stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("XY_Plot");

        return $stack2;
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.PlotOrientation $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        return $stack1;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation)
    {
        org.jfree.chart.plot.PlotOrientation orientation, $stack3;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        orientation := @parameter0: org.jfree.chart.plot.PlotOrientation;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(orientation, "orientation");

        $stack3 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        if orientation == $stack3 goto label1;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation> = orientation;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.ui.RectangleInsets getAxisOffset()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        return $stack1;
    }

    public void setAxisOffset(org.jfree.chart.ui.RectangleInsets)
    {
        org.jfree.chart.ui.RectangleInsets offset;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        offset := @parameter0: org.jfree.chart.ui.RectangleInsets;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(offset, "offset");

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset> = offset;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.ValueAxis $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis(int)>(0);

        return $stack1;
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis(int)
    {
        org.jfree.chart.plot.XYPlot this, xy;
        int index;
        java.util.Map $stack5;
        java.lang.Integer $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.plot.Plot parent;
        boolean $stack9;
        org.jfree.chart.axis.ValueAxis result;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        result = (org.jfree.chart.axis.ValueAxis) $stack7;

        if result != null goto label1;

        parent = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.Plot getParent()>();

        $stack9 = parent instanceof org.jfree.chart.plot.XYPlot;

        if $stack9 == 0 goto label1;

        xy = (org.jfree.chart.plot.XYPlot) parent;

        result = virtualinvoke xy.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis(int)>(index);

     label1:
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.XYPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDomainAxis(int,org.jfree.chart.axis.ValueAxis)>(0, axis);

        return;
    }

    public void setDomainAxis(int, org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        axis := @parameter1: org.jfree.chart.axis.ValueAxis;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)>(index, axis, 1);

        return;
    }

    public void setDomainAxis(int, org.jfree.chart.axis.ValueAxis, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.axis.ValueAxis existing, axis;
        java.util.Map $stack6;
        java.lang.Integer $stack7;
        boolean notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        axis := @parameter1: org.jfree.chart.axis.ValueAxis;

        notify := @parameter2: boolean;

        existing = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis(int)>(index);

        if existing == null goto label1;

        virtualinvoke existing.<org.jfree.chart.axis.ValueAxis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label1:
        if axis == null goto label2;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

     label2:
        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack7, axis);

        if axis == null goto label3;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void configure()>();

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label3:
        if notify == 0 goto label4;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label4:
        return;
    }

    public void setDomainAxes(org.jfree.chart.axis.ValueAxis[])
    {
        org.jfree.chart.axis.ValueAxis[] axes;
        int $stack3, i;
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.ValueAxis $stack4;

        this := @this: org.jfree.chart.plot.XYPlot;

        axes := @parameter0: org.jfree.chart.axis.ValueAxis[];

        i = 0;

     label1:
        $stack3 = lengthof axes;

        if i >= $stack3 goto label2;

        $stack4 = axes[i];

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)>(i, $stack4, 0);

        i = i + 1;

        goto label1;

     label2:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack1;
        java.lang.Integer $stack2;
        java.lang.Object $stack3;
        org.jfree.chart.axis.AxisLocation $stack4;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations>;

        $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack3 = interfaceinvoke $stack1.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack2);

        $stack4 = (org.jfree.chart.axis.AxisLocation) $stack3;

        return $stack4;
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisLocation location;

        this := @this: org.jfree.chart.plot.XYPlot;

        location := @parameter0: org.jfree.chart.axis.AxisLocation;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, location, 1);

        return;
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisLocation location;
        boolean notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        location := @parameter0: org.jfree.chart.axis.AxisLocation;

        notify := @parameter1: boolean;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, location, notify);

        return;
    }

    public org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisLocation $stack1;
        org.jfree.chart.plot.PlotOrientation $stack2;
        org.jfree.chart.ui.RectangleEdge $stack3;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation()>();

        $stack2 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack3 = staticinvoke <org.jfree.chart.plot.Plot: org.jfree.chart.ui.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>($stack1, $stack2);

        return $stack3;
    }

    public int getDomainAxisCount()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack1;
        int $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public void clearDomainAxes()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack3, $stack7;
        java.util.Collection $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack8;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.util.Collection values()>();

        l1 = interfaceinvoke $stack4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack8 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack8;

        if axis == null goto label2;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label2:
        goto label1;

     label3:
        $stack7 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        interfaceinvoke $stack7.<java.util.Map: void clear()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public void configureDomainAxes()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack3;
        java.util.Collection $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.util.Collection values()>();

        l1 = interfaceinvoke $stack4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack7;

        if axis == null goto label2;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void configure()>();

     label2:
        goto label1;

     label3:
        return;
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        java.lang.Object $stack5;
        org.jfree.chart.axis.AxisLocation $stack6, result;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4);

        result = (org.jfree.chart.axis.AxisLocation) $stack5;

        if result != null goto label1;

        $stack6 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation()>();

        result = staticinvoke <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>($stack6);

     label1:
        return result;
    }

    public void setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.axis.AxisLocation location;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        location := @parameter1: org.jfree.chart.axis.AxisLocation;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(index, location, 1);

        return;
    }

    public void setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)
    {
        int index;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack4;
        java.lang.Integer $stack5;
        org.jfree.chart.axis.AxisLocation location;
        boolean notify;
        java.lang.IllegalArgumentException $stack11;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        location := @parameter1: org.jfree.chart.axis.AxisLocation;

        notify := @parameter2: boolean;

        if index != 0 goto label1;

        if location != null goto label1;

        $stack11 = new java.lang.IllegalArgumentException;

        specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'location\' for index 0 not permitted.");

        throw $stack11;

     label1:
        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, location);

        if notify == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label2:
        return;
    }

    public org.jfree.chart.ui.RectangleEdge getDomainAxisEdge(int)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.axis.AxisLocation location;
        org.jfree.chart.plot.PlotOrientation $stack4;
        org.jfree.chart.ui.RectangleEdge $stack5;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        location = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)>(index);

        $stack4 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack5 = staticinvoke <org.jfree.chart.plot.Plot: org.jfree.chart.ui.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>(location, $stack4);

        return $stack5;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.ValueAxis $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(0);

        return $stack1;
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.axis.ValueAxis axis, existing;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack4;
        java.lang.Integer $stack5;

        this := @this: org.jfree.chart.plot.XYPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        if axis == null goto label1;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

     label1:
        existing = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        if existing == null goto label2;

        virtualinvoke existing.<org.jfree.chart.axis.ValueAxis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label2:
        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, axis);

        if axis == null goto label3;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void configure()>();

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label3:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack1;
        java.lang.Integer $stack2;
        java.lang.Object $stack3;
        org.jfree.chart.axis.AxisLocation $stack4;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations>;

        $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack3 = interfaceinvoke $stack1.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack2);

        $stack4 = (org.jfree.chart.axis.AxisLocation) $stack3;

        return $stack4;
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisLocation location;

        this := @this: org.jfree.chart.plot.XYPlot;

        location := @parameter0: org.jfree.chart.axis.AxisLocation;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, location, 1);

        return;
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisLocation location;
        boolean notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        location := @parameter0: org.jfree.chart.axis.AxisLocation;

        notify := @parameter1: boolean;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, location, notify);

        return;
    }

    public org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisLocation $stack1;
        org.jfree.chart.plot.PlotOrientation $stack2;
        org.jfree.chart.ui.RectangleEdge $stack3;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation()>();

        $stack2 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack3 = staticinvoke <org.jfree.chart.plot.Plot: org.jfree.chart.ui.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>($stack1, $stack2);

        return $stack3;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int)
    {
        org.jfree.chart.plot.XYPlot this, xy;
        int index;
        java.util.Map $stack5;
        java.lang.Integer $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.plot.Plot parent;
        boolean $stack9;
        org.jfree.chart.axis.ValueAxis result;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        result = (org.jfree.chart.axis.ValueAxis) $stack7;

        if result != null goto label1;

        parent = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.Plot getParent()>();

        $stack9 = parent instanceof org.jfree.chart.plot.XYPlot;

        if $stack9 == 0 goto label1;

        xy = (org.jfree.chart.plot.XYPlot) parent;

        result = virtualinvoke xy.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(index);

     label1:
        return result;
    }

    public void setRangeAxis(int, org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        axis := @parameter1: org.jfree.chart.axis.ValueAxis;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)>(index, axis, 1);

        return;
    }

    public void setRangeAxis(int, org.jfree.chart.axis.ValueAxis, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.axis.ValueAxis existing, axis;
        java.util.Map $stack6;
        java.lang.Integer $stack7;
        boolean notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        axis := @parameter1: org.jfree.chart.axis.ValueAxis;

        notify := @parameter2: boolean;

        existing = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(index);

        if existing == null goto label1;

        virtualinvoke existing.<org.jfree.chart.axis.ValueAxis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label1:
        if axis == null goto label2;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

     label2:
        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack7, axis);

        if axis == null goto label3;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void configure()>();

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label3:
        if notify == 0 goto label4;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label4:
        return;
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[])
    {
        org.jfree.chart.axis.ValueAxis[] axes;
        int $stack3, i;
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.ValueAxis $stack4;

        this := @this: org.jfree.chart.plot.XYPlot;

        axes := @parameter0: org.jfree.chart.axis.ValueAxis[];

        i = 0;

     label1:
        $stack3 = lengthof axes;

        if i >= $stack3 goto label2;

        $stack4 = axes[i];

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)>(i, $stack4, 0);

        i = i + 1;

        goto label1;

     label2:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public int getRangeAxisCount()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack1;
        int $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public void clearRangeAxes()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack3, $stack7;
        java.util.Collection $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack8;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.util.Collection values()>();

        l1 = interfaceinvoke $stack4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack8 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack8;

        if axis == null goto label2;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label2:
        goto label1;

     label3:
        $stack7 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        interfaceinvoke $stack7.<java.util.Map: void clear()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public void configureRangeAxes()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack3;
        java.util.Collection $stack4;
        java.util.Iterator l1;
        boolean $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.util.Collection values()>();

        l1 = interfaceinvoke $stack4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label3;

        $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack7;

        if axis == null goto label2;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void configure()>();

     label2:
        goto label1;

     label3:
        return;
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        java.lang.Object $stack5;
        org.jfree.chart.axis.AxisLocation $stack6, result;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4);

        result = (org.jfree.chart.axis.AxisLocation) $stack5;

        if result != null goto label1;

        $stack6 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation()>();

        result = staticinvoke <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>($stack6);

     label1:
        return result;
    }

    public void setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.axis.AxisLocation location;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        location := @parameter1: org.jfree.chart.axis.AxisLocation;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(index, location, 1);

        return;
    }

    public void setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)
    {
        int index;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack4;
        java.lang.Integer $stack5;
        org.jfree.chart.axis.AxisLocation location;
        boolean notify;
        java.lang.IllegalArgumentException $stack11;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        location := @parameter1: org.jfree.chart.axis.AxisLocation;

        notify := @parameter2: boolean;

        if index != 0 goto label1;

        if location != null goto label1;

        $stack11 = new java.lang.IllegalArgumentException;

        specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'location\' for index 0 not permitted.");

        throw $stack11;

     label1:
        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, location);

        if notify == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label2:
        return;
    }

    public org.jfree.chart.ui.RectangleEdge getRangeAxisEdge(int)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.axis.AxisLocation location;
        org.jfree.chart.plot.PlotOrientation $stack4;
        org.jfree.chart.ui.RectangleEdge $stack5;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        location = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)>(index);

        $stack4 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack5 = staticinvoke <org.jfree.chart.plot.Plot: org.jfree.chart.ui.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>(location, $stack4);

        return $stack5;
    }

    public org.jfree.data.xy.XYDataset getDataset()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.data.xy.XYDataset $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.data.xy.XYDataset getDataset(int)>(0);

        return $stack1;
    }

    public org.jfree.data.xy.XYDataset getDataset(int)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        java.util.Map $stack2;
        java.lang.Integer $stack3;
        java.lang.Object $stack4;
        org.jfree.data.xy.XYDataset $stack5;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack4 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack3);

        $stack5 = (org.jfree.data.xy.XYDataset) $stack4;

        return $stack5;
    }

    public void setDataset(org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.data.xy.XYDataset dataset;

        this := @this: org.jfree.chart.plot.XYPlot;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDataset(int,org.jfree.data.xy.XYDataset)>(0, dataset);

        return;
    }

    public void setDataset(int, org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.data.xy.XYDataset existing, dataset;
        java.util.Map $stack6;
        java.lang.Integer $stack7;
        org.jfree.data.general.DatasetChangeEvent $stack9;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        dataset := @parameter1: org.jfree.data.xy.XYDataset;

        existing = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.data.xy.XYDataset getDataset(int)>(index);

        if existing == null goto label1;

        interfaceinvoke existing.<org.jfree.data.xy.XYDataset: void removeChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label1:
        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack7, dataset);

        if dataset == null goto label2;

        interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label2:
        $stack9 = new org.jfree.data.general.DatasetChangeEvent;

        specialinvoke $stack9.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, dataset);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($stack9);

        return;
    }

    public int getDatasetCount()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack1;
        int $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public int indexOf(org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack4;
        java.util.Set $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8, $stack9, $stack11;
        java.util.Map$Entry entry;
        org.jfree.data.xy.XYDataset dataset;
        java.lang.Integer $stack12;
        int $stack13;

        this := @this: org.jfree.chart.plot.XYPlot;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack8;

        $stack9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if dataset != $stack9 goto label2;

        $stack11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        return $stack13;

     label2:
        goto label1;

     label3:
        return -1;
    }

    public void mapDatasetToDomainAxis(int, int)
    {
        java.util.ArrayList $stack4;
        int axisIndex, index;
        java.lang.Integer $stack5;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        axisIndex := @parameter1: int;

        $stack4 = new java.util.ArrayList;

        specialinvoke $stack4.<java.util.ArrayList: void <init>(int)>(1);

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(axisIndex);

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>($stack5);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void mapDatasetToDomainAxes(int,java.util.List)>(index, $stack4);

        return;
    }

    public void mapDatasetToDomainAxes(int, java.util.List)
    {
        int index;
        org.jfree.chart.plot.XYPlot this;
        java.util.List axisIndices;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        java.util.ArrayList $stack5;
        org.jfree.data.general.DatasetChangeEvent $stack7;
        org.jfree.data.xy.XYDataset $stack8;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        axisIndices := @parameter1: java.util.List;

        staticinvoke <org.jfree.chart.util.Args: void requireNonNegative(int,java.lang.String)>(index, "index");

        specialinvoke this.<org.jfree.chart.plot.XYPlot: void checkAxisIndices(java.util.List)>(axisIndices);

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>(java.util.Collection)>(axisIndices);

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack7 = new org.jfree.data.general.DatasetChangeEvent;

        $stack8 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.data.xy.XYDataset getDataset(int)>(index);

        specialinvoke $stack7.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, $stack8);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($stack7);

        return;
    }

    public void mapDatasetToRangeAxis(int, int)
    {
        java.util.ArrayList $stack4;
        int axisIndex, index;
        java.lang.Integer $stack5;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        axisIndex := @parameter1: int;

        $stack4 = new java.util.ArrayList;

        specialinvoke $stack4.<java.util.ArrayList: void <init>(int)>(1);

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(axisIndex);

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>($stack5);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void mapDatasetToRangeAxes(int,java.util.List)>(index, $stack4);

        return;
    }

    public void mapDatasetToRangeAxes(int, java.util.List)
    {
        int index;
        org.jfree.chart.plot.XYPlot this;
        java.util.List axisIndices;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        java.util.ArrayList $stack5;
        org.jfree.data.general.DatasetChangeEvent $stack7;
        org.jfree.data.xy.XYDataset $stack8;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        axisIndices := @parameter1: java.util.List;

        staticinvoke <org.jfree.chart.util.Args: void requireNonNegative(int,java.lang.String)>(index, "index");

        specialinvoke this.<org.jfree.chart.plot.XYPlot: void checkAxisIndices(java.util.List)>(axisIndices);

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>(java.util.Collection)>(axisIndices);

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack7 = new org.jfree.data.general.DatasetChangeEvent;

        $stack8 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.data.xy.XYDataset getDataset(int)>(index);

        specialinvoke $stack7.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, $stack8);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($stack7);

        return;
    }

    private void checkAxisIndices(java.util.List)
    {
        java.util.List indices;
        int count;
        java.util.HashSet $stack7;
        java.util.Iterator l4;
        boolean $stack9, $stack11;
        java.lang.Object $stack10;
        java.lang.Integer item;
        java.lang.IllegalArgumentException $stack14, $stack15;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        indices := @parameter0: java.util.List;

        if indices != null goto label1;

        return;

     label1:
        count = interfaceinvoke indices.<java.util.List: int size()>();

        if count != 0 goto label2;

        $stack15 = new java.lang.IllegalArgumentException;

        specialinvoke $stack15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty list not permitted.");

        throw $stack15;

     label2:
        $stack7 = new java.util.HashSet;

        specialinvoke $stack7.<java.util.HashSet: void <init>()>();

        l4 = interfaceinvoke indices.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack9 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label5;

        $stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        item = (java.lang.Integer) $stack10;

        $stack11 = interfaceinvoke $stack7.<java.util.Set: boolean contains(java.lang.Object)>(item);

        if $stack11 == 0 goto label4;

        $stack14 = new java.lang.IllegalArgumentException;

        specialinvoke $stack14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Indices must be unique.");

        throw $stack14;

     label4:
        interfaceinvoke $stack7.<java.util.Set: boolean add(java.lang.Object)>(item);

        goto label3;

     label5:
        return;
    }

    public int getRendererCount()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack1;
        int $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack2 = interfaceinvoke $stack1.<java.util.Map: int size()>();

        return $stack2;
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.renderer.xy.XYItemRenderer $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)>(0);

        return $stack1;
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        java.util.Map $stack2;
        java.lang.Integer $stack3;
        java.lang.Object $stack4;
        org.jfree.chart.renderer.xy.XYItemRenderer $stack5;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack4 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack3);

        $stack5 = (org.jfree.chart.renderer.xy.XYItemRenderer) $stack4;

        return $stack5;
    }

    public void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.renderer.xy.XYItemRenderer renderer;

        this := @this: org.jfree.chart.plot.XYPlot;

        renderer := @parameter0: org.jfree.chart.renderer.xy.XYItemRenderer;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)>(0, renderer);

        return;
    }

    public void setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.renderer.xy.XYItemRenderer renderer;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        renderer := @parameter1: org.jfree.chart.renderer.xy.XYItemRenderer;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)>(index, renderer, 1);

        return;
    }

    public void setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.renderer.xy.XYItemRenderer existing, renderer;
        java.util.Map $stack6;
        java.lang.Integer $stack7;
        boolean notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        renderer := @parameter1: org.jfree.chart.renderer.xy.XYItemRenderer;

        notify := @parameter2: boolean;

        existing = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)>(index);

        if existing == null goto label1;

        interfaceinvoke existing.<org.jfree.chart.renderer.xy.XYItemRenderer: void removeChangeListener(org.jfree.chart.event.RendererChangeListener)>(this);

     label1:
        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack7, renderer);

        if renderer == null goto label2;

        interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: void setPlot(org.jfree.chart.plot.XYPlot)>(this);

        interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>(this);

     label2:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void configureDomainAxes()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void configureRangeAxes()>();

        if notify == 0 goto label3;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label3:
        return;
    }

    public void setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])
    {
        org.jfree.chart.renderer.xy.XYItemRenderer[] renderers;
        int $stack3, i;
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.renderer.xy.XYItemRenderer $stack4;

        this := @this: org.jfree.chart.plot.XYPlot;

        renderers := @parameter0: org.jfree.chart.renderer.xy.XYItemRenderer[];

        i = 0;

     label1:
        $stack3 = lengthof renderers;

        if i >= $stack3 goto label2;

        $stack4 = renderers[i];

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)>(i, $stack4, 0);

        i = i + 1;

        goto label1;

     label2:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.DatasetRenderingOrder $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder>;

        return $stack1;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)
    {
        org.jfree.chart.plot.DatasetRenderingOrder order;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        order := @parameter0: org.jfree.chart.plot.DatasetRenderingOrder;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(order, "order");

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder> = order;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.plot.SeriesRenderingOrder getSeriesRenderingOrder()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.SeriesRenderingOrder $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.SeriesRenderingOrder seriesRenderingOrder>;

        return $stack1;
    }

    public void setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)
    {
        org.jfree.chart.plot.SeriesRenderingOrder order;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        order := @parameter0: org.jfree.chart.plot.SeriesRenderingOrder;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(order, "order");

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.SeriesRenderingOrder seriesRenderingOrder> = order;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public int getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack4;
        java.util.Set $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8, $stack9, $stack11;
        java.util.Map$Entry entry;
        org.jfree.chart.renderer.xy.XYItemRenderer renderer;
        java.lang.Integer $stack12;
        int $stack13;

        this := @this: org.jfree.chart.plot.XYPlot;

        renderer := @parameter0: org.jfree.chart.renderer.xy.XYItemRenderer;

        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack8;

        $stack9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack9 != renderer goto label2;

        $stack11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        return $stack13;

     label2:
        goto label1;

     label3:
        return -1;
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRendererForDataset(org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.data.xy.XYDataset dataset;
        int datasetIndex;
        java.util.Map $stack5;
        java.lang.Integer $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.renderer.xy.XYItemRenderer result;

        this := @this: org.jfree.chart.plot.XYPlot;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        datasetIndex = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int indexOf(org.jfree.data.xy.XYDataset)>(dataset);

        if datasetIndex >= 0 goto label1;

        return null;

     label1:
        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(datasetIndex);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        result = (org.jfree.chart.renderer.xy.XYItemRenderer) $stack7;

        if result != null goto label2;

        result = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

     label2:
        return result;
    }

    public int getWeight()
    {
        org.jfree.chart.plot.XYPlot this;
        int $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: int weight>;

        return $stack1;
    }

    public void setWeight(int)
    {
        org.jfree.chart.plot.XYPlot this;
        int weight;

        this := @this: org.jfree.chart.plot.XYPlot;

        weight := @parameter0: int;

        this.<org.jfree.chart.plot.XYPlot: int weight> = weight;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isDomainGridlinesVisible()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean domainGridlinesVisible>;

        return $stack1;
    }

    public void setDomainGridlinesVisible(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: boolean domainGridlinesVisible>;

        if $stack2 == visible goto label1;

        this.<org.jfree.chart.plot.XYPlot: boolean domainGridlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean isDomainMinorGridlinesVisible()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean domainMinorGridlinesVisible>;

        return $stack1;
    }

    public void setDomainMinorGridlinesVisible(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: boolean domainMinorGridlinesVisible>;

        if $stack2 == visible goto label1;

        this.<org.jfree.chart.plot.XYPlot: boolean domainMinorGridlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getDomainGridlineStroke()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainGridlineStroke>;

        return $stack1;
    }

    public void setDomainGridlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainGridlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getDomainMinorGridlineStroke()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainMinorGridlineStroke>;

        return $stack1;
    }

    public void setDomainMinorGridlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainMinorGridlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getDomainGridlinePaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainGridlinePaint>;

        return $stack1;
    }

    public void setDomainGridlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainGridlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getDomainMinorGridlinePaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainMinorGridlinePaint>;

        return $stack1;
    }

    public void setDomainMinorGridlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainMinorGridlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isRangeGridlinesVisible()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean rangeGridlinesVisible>;

        return $stack1;
    }

    public void setRangeGridlinesVisible(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: boolean rangeGridlinesVisible>;

        if $stack2 == visible goto label1;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeGridlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getRangeGridlineStroke()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeGridlineStroke>;

        return $stack1;
    }

    public void setRangeGridlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeGridlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeGridlinePaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeGridlinePaint>;

        return $stack1;
    }

    public void setRangeGridlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeGridlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isRangeMinorGridlinesVisible()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean rangeMinorGridlinesVisible>;

        return $stack1;
    }

    public void setRangeMinorGridlinesVisible(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: boolean rangeMinorGridlinesVisible>;

        if $stack2 == visible goto label1;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeMinorGridlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getRangeMinorGridlineStroke()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        return $stack1;
    }

    public void setRangeMinorGridlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeMinorGridlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeMinorGridlinePaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeMinorGridlinePaint>;

        return $stack1;
    }

    public void setRangeMinorGridlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeMinorGridlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isDomainZeroBaselineVisible()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean domainZeroBaselineVisible>;

        return $stack1;
    }

    public void setDomainZeroBaselineVisible(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean visible;

        this := @this: org.jfree.chart.plot.XYPlot;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.plot.XYPlot: boolean domainZeroBaselineVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getDomainZeroBaselineStroke()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainZeroBaselineStroke>;

        return $stack1;
    }

    public void setDomainZeroBaselineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainZeroBaselineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getDomainZeroBaselinePaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainZeroBaselinePaint>;

        return $stack1;
    }

    public void setDomainZeroBaselinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainZeroBaselinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isRangeZeroBaselineVisible()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean rangeZeroBaselineVisible>;

        return $stack1;
    }

    public void setRangeZeroBaselineVisible(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean visible;

        this := @this: org.jfree.chart.plot.XYPlot;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeZeroBaselineVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getRangeZeroBaselineStroke()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        return $stack1;
    }

    public void setRangeZeroBaselineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeZeroBaselineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeZeroBaselinePaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeZeroBaselinePaint>;

        return $stack1;
    }

    public void setRangeZeroBaselinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeZeroBaselinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getDomainTickBandPaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainTickBandPaint>;

        return $stack1;
    }

    public void setDomainTickBandPaint(java.awt.Paint)
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainTickBandPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeTickBandPaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeTickBandPaint>;

        return $stack1;
    }

    public void setRangeTickBandPaint(java.awt.Paint)
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeTickBandPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.geom.Point2D getQuadrantOrigin()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.geom.Point2D $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin>;

        return $stack1;
    }

    public void setQuadrantOrigin(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D origin;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        origin := @parameter0: java.awt.geom.Point2D;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(origin, "origin");

        this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin> = origin;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getQuadrantPaint(int)
    {
        int index;
        java.lang.IllegalArgumentException $stack2;
        java.lang.StringBuilder $stack3, $stack4, $stack5, $stack6;
        java.lang.String $stack7;
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint[] $stack8;
        java.awt.Paint $stack9;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        if index < 0 goto label1;

        if index <= 3 goto label2;

     label1:
        $stack2 = new java.lang.IllegalArgumentException;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The index value (");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") should be in the range 0 to 3.");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack7);

        throw $stack2;

     label2:
        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack9 = $stack8[index];

        return $stack9;
    }

    public void setQuadrantPaint(int, java.awt.Paint)
    {
        int index;
        java.lang.IllegalArgumentException $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack6, $stack7;
        java.lang.String $stack8;
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint paint;
        java.awt.Paint[] $stack9;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        if index < 0 goto label1;

        if index <= 3 goto label2;

     label1:
        $stack3 = new java.lang.IllegalArgumentException;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The index value (");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") should be in the range 0 to 3.");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack8);

        throw $stack3;

     label2:
        $stack9 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack9[index] = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        $stack2 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(marker, $stack2);

        return;
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;

        this := @this: org.jfree.chart.plot.XYPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(0, marker, layer);

        return;
    }

    public void clearDomainMarkers()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack4, $stack5, $stack6, $stack10, $stack15, $stack19;
        boolean $stack9, $stack18;
        java.lang.Object $stack12, $stack21;
        int $stack13, $stack22;
        java.util.Set keys;
        java.util.Iterator l2;
        java.lang.Integer key;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        if $stack4 == null goto label3;

        $stack15 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        keys = interfaceinvoke $stack15.<java.util.Map: java.util.Set keySet()>();

        l2 = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack18 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label2;

        $stack21 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Integer) $stack21;

        $stack22 = virtualinvoke key.<java.lang.Integer: int intValue()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void clearDomainMarkers(int)>($stack22);

        goto label1;

     label2:
        $stack19 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        interfaceinvoke $stack19.<java.util.Map: void clear()>();

     label3:
        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        if $stack5 == null goto label6;

        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        keys = interfaceinvoke $stack6.<java.util.Map: java.util.Set keySet()>();

        l2 = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $stack9 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label5;

        $stack12 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Integer) $stack12;

        $stack13 = virtualinvoke key.<java.lang.Integer: int intValue()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void clearDomainMarkers(int)>($stack13);

        goto label4;

     label5:
        $stack10 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        interfaceinvoke $stack10.<java.util.Map: void clear()>();

     label6:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public void clearDomainMarkers(int)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack5, $stack7, $stack15, $stack6;
        int index;
        java.lang.Integer $stack8, $stack16;
        java.lang.Object $stack9, $stack13, $stack17, $stack21;
        boolean $stack12, $stack20;
        java.util.List markers;
        java.util.Iterator l3;
        org.jfree.chart.plot.Marker m;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        if $stack5 == null goto label3;

        $stack15 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack17 = interfaceinvoke $stack15.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack16);

        markers = (java.util.List) $stack17;

        if markers == null goto label3;

        l3 = interfaceinvoke markers.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack20 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label2;

        $stack21 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        m = (org.jfree.chart.plot.Marker) $stack21;

        virtualinvoke m.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        goto label1;

     label2:
        interfaceinvoke markers.<java.util.List: void clear()>();

     label3:
        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        if $stack6 == null goto label6;

        $stack7 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack9 = interfaceinvoke $stack7.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack8);

        markers = (java.util.List) $stack9;

        if markers == null goto label6;

        l3 = interfaceinvoke markers.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label5;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        m = (org.jfree.chart.plot.Marker) $stack13;

        virtualinvoke m.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        goto label4;

     label5:
        interfaceinvoke markers.<java.util.List: void clear()>();

     label6:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public void addDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer,boolean)>(index, marker, layer, 1);

        return;
    }

    public void addDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer, boolean)
    {
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer, $stack8, $stack9;
        org.jfree.chart.plot.XYPlot this;
        boolean notify;
        int index;
        java.util.Map $stack10, $stack18, $stack23, $stack28;
        java.lang.Integer $stack11, $stack19, $stack24, $stack29;
        java.lang.Object $stack12, $stack25;
        java.util.ArrayList $stack17, $stack27;
        java.util.List markers;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        notify := @parameter3: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(marker, "marker");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(layer, "layer");

        $stack8 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack8 goto label2;

        $stack23 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack25 = interfaceinvoke $stack23.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack24);

        markers = (java.util.List) $stack25;

        if markers != null goto label1;

        $stack27 = new java.util.ArrayList;

        specialinvoke $stack27.<java.util.ArrayList: void <init>()>();

        markers = $stack27;

        $stack28 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack29, $stack27);

     label1:
        interfaceinvoke markers.<java.util.List: boolean add(java.lang.Object)>(marker);

        goto label4;

     label2:
        $stack9 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        if layer != $stack9 goto label4;

        $stack10 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack12 = interfaceinvoke $stack10.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack11);

        markers = (java.util.List) $stack12;

        if markers != null goto label3;

        $stack17 = new java.util.ArrayList;

        specialinvoke $stack17.<java.util.ArrayList: void <init>()>();

        markers = $stack17;

        $stack18 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack19, $stack17);

     label3:
        interfaceinvoke markers.<java.util.List: boolean add(java.lang.Object)>(marker);

     label4:
        virtualinvoke marker.<org.jfree.chart.plot.Marker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        if notify == 0 goto label5;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label5:
        return;
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer $stack2;
        boolean $stack3;

        this := @this: org.jfree.chart.plot.XYPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        $stack2 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(marker, $stack2);

        return $stack3;
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;
        boolean $stack3;

        this := @this: org.jfree.chart.plot.XYPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(0, marker, layer);

        return $stack3;
    }

    public boolean removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;
        boolean $stack4;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer,boolean)>(index, marker, layer, 1);

        return $stack4;
    }

    public boolean removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer, boolean)
    {
        org.jfree.chart.ui.Layer layer, $stack7;
        org.jfree.chart.plot.XYPlot this;
        int index;
        java.util.Map $stack8, $stack13;
        java.lang.Integer $stack9, $stack14;
        java.lang.Object $stack10, $stack15;
        org.jfree.chart.plot.Marker marker;
        boolean removed, notify;
        java.util.List markers;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        notify := @parameter3: boolean;

        $stack7 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack7 goto label1;

        $stack13 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack15 = interfaceinvoke $stack13.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack14);

        markers = (java.util.List) $stack15;

        goto label2;

     label1:
        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack10 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack9);

        markers = (java.util.List) $stack10;

     label2:
        if markers != null goto label3;

        return 0;

     label3:
        removed = interfaceinvoke markers.<java.util.List: boolean remove(java.lang.Object)>(marker);

        if removed == 0 goto label4;

        if notify == 0 goto label4;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label4:
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        $stack2 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(marker, $stack2);

        return;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;

        this := @this: org.jfree.chart.plot.XYPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(0, marker, layer);

        return;
    }

    public void clearRangeMarkers()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack4, $stack5, $stack6, $stack10, $stack15, $stack19;
        boolean $stack9, $stack18;
        java.lang.Object $stack12, $stack21;
        int $stack13, $stack22;
        java.util.Set keys;
        java.util.Iterator l2;
        java.lang.Integer key;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        if $stack4 == null goto label3;

        $stack15 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        keys = interfaceinvoke $stack15.<java.util.Map: java.util.Set keySet()>();

        l2 = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack18 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label2;

        $stack21 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Integer) $stack21;

        $stack22 = virtualinvoke key.<java.lang.Integer: int intValue()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void clearRangeMarkers(int)>($stack22);

        goto label1;

     label2:
        $stack19 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        interfaceinvoke $stack19.<java.util.Map: void clear()>();

     label3:
        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        if $stack5 == null goto label6;

        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        keys = interfaceinvoke $stack6.<java.util.Map: java.util.Set keySet()>();

        l2 = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $stack9 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label5;

        $stack12 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Integer) $stack12;

        $stack13 = virtualinvoke key.<java.lang.Integer: int intValue()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void clearRangeMarkers(int)>($stack13);

        goto label4;

     label5:
        $stack10 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        interfaceinvoke $stack10.<java.util.Map: void clear()>();

     label6:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public void addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer,boolean)>(index, marker, layer, 1);

        return;
    }

    public void addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer, boolean)
    {
        org.jfree.chart.ui.Layer layer, $stack6, $stack7;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.plot.XYPlot this;
        boolean notify;
        int index;
        java.util.Map $stack8, $stack16, $stack21, $stack26;
        java.lang.Integer $stack9, $stack17, $stack22, $stack27;
        java.lang.Object $stack10, $stack23;
        java.util.ArrayList $stack15, $stack25;
        java.util.List markers;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        notify := @parameter3: boolean;

        $stack6 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack6 goto label2;

        $stack21 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack23 = interfaceinvoke $stack21.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack22);

        markers = (java.util.List) $stack23;

        if markers != null goto label1;

        $stack25 = new java.util.ArrayList;

        specialinvoke $stack25.<java.util.ArrayList: void <init>()>();

        markers = $stack25;

        $stack26 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack27, $stack25);

     label1:
        interfaceinvoke markers.<java.util.List: boolean add(java.lang.Object)>(marker);

        goto label4;

     label2:
        $stack7 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        if layer != $stack7 goto label4;

        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack10 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack9);

        markers = (java.util.List) $stack10;

        if markers != null goto label3;

        $stack15 = new java.util.ArrayList;

        specialinvoke $stack15.<java.util.ArrayList: void <init>()>();

        markers = $stack15;

        $stack16 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        interfaceinvoke $stack16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack17, $stack15);

     label3:
        interfaceinvoke markers.<java.util.List: boolean add(java.lang.Object)>(marker);

     label4:
        virtualinvoke marker.<org.jfree.chart.plot.Marker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        if notify == 0 goto label5;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label5:
        return;
    }

    public void clearRangeMarkers(int)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack5, $stack7, $stack15, $stack6;
        int index;
        java.lang.Integer $stack8, $stack16;
        java.lang.Object $stack9, $stack13, $stack17, $stack21;
        boolean $stack12, $stack20;
        java.util.List markers;
        java.util.Iterator l3;
        org.jfree.chart.plot.Marker m;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        if $stack5 == null goto label3;

        $stack15 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack17 = interfaceinvoke $stack15.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack16);

        markers = (java.util.List) $stack17;

        if markers == null goto label3;

        l3 = interfaceinvoke markers.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack20 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label2;

        $stack21 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        m = (org.jfree.chart.plot.Marker) $stack21;

        virtualinvoke m.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        goto label1;

     label2:
        interfaceinvoke markers.<java.util.List: void clear()>();

     label3:
        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        if $stack6 == null goto label6;

        $stack7 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack9 = interfaceinvoke $stack7.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack8);

        markers = (java.util.List) $stack9;

        if markers == null goto label6;

        l3 = interfaceinvoke markers.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label5;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        m = (org.jfree.chart.plot.Marker) $stack13;

        virtualinvoke m.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(this);

        goto label4;

     label5:
        interfaceinvoke markers.<java.util.List: void clear()>();

     label6:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer $stack2;
        boolean $stack3;

        this := @this: org.jfree.chart.plot.XYPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        $stack2 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(marker, $stack2);

        return $stack3;
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;
        boolean $stack3;

        this := @this: org.jfree.chart.plot.XYPlot;

        marker := @parameter0: org.jfree.chart.plot.Marker;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer)>(0, marker, layer);

        return $stack3;
    }

    public boolean removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        int index;
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer;
        boolean $stack4;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.chart.ui.Layer,boolean)>(index, marker, layer, 1);

        return $stack4;
    }

    public boolean removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.ui.Layer, boolean)
    {
        org.jfree.chart.plot.Marker marker;
        org.jfree.chart.ui.Layer layer, $stack9;
        org.jfree.chart.plot.XYPlot this;
        int index;
        java.util.Map $stack10, $stack15;
        java.lang.Integer $stack11, $stack16;
        java.lang.Object $stack12, $stack17;
        boolean removed, notify;
        java.util.List markers;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        marker := @parameter1: org.jfree.chart.plot.Marker;

        layer := @parameter2: org.jfree.chart.ui.Layer;

        notify := @parameter3: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(marker, "marker");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(layer, "layer");

        $stack9 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack9 goto label1;

        $stack15 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack17 = interfaceinvoke $stack15.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack16);

        markers = (java.util.List) $stack17;

        goto label2;

     label1:
        $stack10 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack12 = interfaceinvoke $stack10.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack11);

        markers = (java.util.List) $stack12;

     label2:
        if markers != null goto label3;

        return 0;

     label3:
        removed = interfaceinvoke markers.<java.util.List: boolean remove(java.lang.Object)>(marker);

        if removed == 0 goto label4;

        if notify == 0 goto label4;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label4:
        return removed;
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.annotations.XYAnnotation 'annotation';

        this := @this: org.jfree.chart.plot.XYPlot;

        'annotation' := @parameter0: org.jfree.chart.annotations.XYAnnotation;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)>('annotation', 1);

        return;
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation, boolean)
    {
        org.jfree.chart.annotations.XYAnnotation 'annotation';
        org.jfree.chart.plot.XYPlot this;
        java.util.List $stack4;
        boolean notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        'annotation' := @parameter0: org.jfree.chart.annotations.XYAnnotation;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>('annotation', "annotation");

        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        interfaceinvoke $stack4.<java.util.List: boolean add(java.lang.Object)>('annotation');

        interfaceinvoke 'annotation'.<org.jfree.chart.annotations.XYAnnotation: void addChangeListener(org.jfree.chart.event.AnnotationChangeListener)>(this);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.annotations.XYAnnotation 'annotation';
        boolean $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        'annotation' := @parameter0: org.jfree.chart.annotations.XYAnnotation;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)>('annotation', 1);

        return $stack2;
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation, boolean)
    {
        org.jfree.chart.annotations.XYAnnotation 'annotation';
        org.jfree.chart.plot.XYPlot this;
        java.util.List $stack5;
        boolean removed, notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        'annotation' := @parameter0: org.jfree.chart.annotations.XYAnnotation;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>('annotation', "annotation");

        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        removed = interfaceinvoke $stack5.<java.util.List: boolean remove(java.lang.Object)>('annotation');

        interfaceinvoke 'annotation'.<org.jfree.chart.annotations.XYAnnotation: void removeChangeListener(org.jfree.chart.event.AnnotationChangeListener)>(this);

        if removed == 0 goto label1;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return removed;
    }

    public java.util.List getAnnotations()
    {
        java.util.ArrayList $stack1;
        org.jfree.chart.plot.XYPlot this;
        java.util.List $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = new java.util.ArrayList;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        specialinvoke $stack1.<java.util.ArrayList: void <init>(java.util.Collection)>($stack2);

        return $stack1;
    }

    public void clearAnnotations()
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.List $stack3, $stack6;
        java.util.Iterator l1;
        boolean $stack5;
        java.lang.Object $stack7;
        org.jfree.chart.annotations.XYAnnotation 'annotation';

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        l1 = interfaceinvoke $stack3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack5 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack5 == 0 goto label2;

        $stack7 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        'annotation' = (org.jfree.chart.annotations.XYAnnotation) $stack7;

        interfaceinvoke 'annotation'.<org.jfree.chart.annotations.XYAnnotation: void removeChangeListener(org.jfree.chart.event.AnnotationChangeListener)>(this);

        goto label1;

     label2:
        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        interfaceinvoke $stack6.<java.util.List: void clear()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.util.ShadowGenerator getShadowGenerator()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.util.ShadowGenerator $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        return $stack1;
    }

    public void setShadowGenerator(org.jfree.chart.util.ShadowGenerator)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.util.ShadowGenerator generator;

        this := @this: org.jfree.chart.plot.XYPlot;

        generator := @parameter0: org.jfree.chart.util.ShadowGenerator;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.axis.AxisSpace $stack5, space;
        org.jfree.chart.plot.XYPlot this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea, revPlotArea;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        $stack5 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack5.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        space = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>(g2, plotArea, $stack5);

        revPlotArea = virtualinvoke space.<org.jfree.chart.axis.AxisSpace: java.awt.geom.Rectangle2D shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(plotArea, null);

        space = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>(g2, revPlotArea, space);

        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisSpace $stack7, $stack22, $stack25, $stack28, $stack31, $stack34, space;
        java.util.Map $stack8;
        java.util.Collection $stack9;
        java.util.Iterator l4;
        boolean $stack11;
        java.lang.Object $stack12;
        org.jfree.chart.axis.ValueAxis axis;
        int $stack14;
        org.jfree.chart.ui.RectangleEdge edge, $stack24, $stack27, $stack30, $stack33;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;
        org.jfree.chart.plot.PlotOrientation $stack17, $stack18, $stack19, $stack20;
        double $stack23, $stack26, $stack29, $stack32;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        space := @parameter2: org.jfree.chart.axis.AxisSpace;

        if space != null goto label1;

        $stack34 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack34.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        space = $stack34;

     label1:
        $stack7 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        if $stack7 == null goto label3;

        $stack18 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack17 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack18 != $stack17 goto label2;

        $stack28 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack29 = virtualinvoke $stack28.<org.jfree.chart.axis.AxisSpace: double getLeft()>();

        $stack30 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack29, $stack30);

        $stack31 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack32 = virtualinvoke $stack31.<org.jfree.chart.axis.AxisSpace: double getRight()>();

        $stack33 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack32, $stack33);

        goto label6;

     label2:
        $stack20 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack19 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if $stack20 != $stack19 goto label6;

        $stack22 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack23 = virtualinvoke $stack22.<org.jfree.chart.axis.AxisSpace: double getTop()>();

        $stack24 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack23, $stack24);

        $stack25 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack26 = virtualinvoke $stack25.<org.jfree.chart.axis.AxisSpace: double getBottom()>();

        $stack27 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack26, $stack27);

        goto label6;

     label3:
        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack9 = interfaceinvoke $stack8.<java.util.Map: java.util.Collection values()>();

        l4 = interfaceinvoke $stack9.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $stack11 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label6;

        $stack12 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack12;

        if axis == null goto label5;

        $stack14 = specialinvoke this.<org.jfree.chart.plot.XYPlot: int findDomainAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        edge = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge(int)>($stack14);

        space = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)>(g2, this, plotArea, edge, space);

     label5:
        goto label4;

     label6:
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisSpace $stack7, $stack22, $stack25, $stack28, $stack31, $stack34, space;
        java.util.Map $stack8;
        java.util.Collection $stack9;
        java.util.Iterator l4;
        boolean $stack11;
        java.lang.Object $stack12;
        org.jfree.chart.axis.ValueAxis axis;
        int $stack14;
        org.jfree.chart.ui.RectangleEdge edge, $stack24, $stack27, $stack30, $stack33;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;
        org.jfree.chart.plot.PlotOrientation $stack17, $stack18, $stack19, $stack20;
        double $stack23, $stack26, $stack29, $stack32;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        space := @parameter2: org.jfree.chart.axis.AxisSpace;

        if space != null goto label1;

        $stack34 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack34.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        space = $stack34;

     label1:
        $stack7 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        if $stack7 == null goto label3;

        $stack18 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack17 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack18 != $stack17 goto label2;

        $stack28 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack29 = virtualinvoke $stack28.<org.jfree.chart.axis.AxisSpace: double getTop()>();

        $stack30 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack29, $stack30);

        $stack31 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack32 = virtualinvoke $stack31.<org.jfree.chart.axis.AxisSpace: double getBottom()>();

        $stack33 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack32, $stack33);

        goto label6;

     label2:
        $stack20 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack19 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if $stack20 != $stack19 goto label6;

        $stack22 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack23 = virtualinvoke $stack22.<org.jfree.chart.axis.AxisSpace: double getLeft()>();

        $stack24 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack23, $stack24);

        $stack25 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack26 = virtualinvoke $stack25.<org.jfree.chart.axis.AxisSpace: double getRight()>();

        $stack27 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(double,org.jfree.chart.ui.RectangleEdge)>($stack26, $stack27);

        goto label6;

     label3:
        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack9 = interfaceinvoke $stack8.<java.util.Map: java.util.Collection values()>();

        l4 = interfaceinvoke $stack9.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $stack11 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label6;

        $stack12 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack12;

        if axis == null goto label5;

        $stack14 = specialinvoke this.<org.jfree.chart.plot.XYPlot: int findRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        edge = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge(int)>($stack14);

        space = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)>(g2, this, plotArea, edge, space);

     label5:
        goto label4;

     label6:
        return space;
    }

    private java.awt.Rectangle integerise(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D rect;
        double $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13;
        int x0, y0, x1, y1, $stack15, $stack16;
        java.awt.Rectangle $stack14;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        rect := @parameter0: java.awt.geom.Rectangle2D;

        $stack6 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack7 = staticinvoke <java.lang.Math: double ceil(double)>($stack6);

        x0 = (int) $stack7;

        $stack8 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack9 = staticinvoke <java.lang.Math: double ceil(double)>($stack8);

        y0 = (int) $stack9;

        $stack10 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack11 = staticinvoke <java.lang.Math: double floor(double)>($stack10);

        x1 = (int) $stack11;

        $stack12 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack13 = staticinvoke <java.lang.Math: double floor(double)>($stack12);

        y1 = (int) $stack13;

        $stack14 = new java.awt.Rectangle;

        $stack16 = x1 - x0;

        $stack15 = y1 - y0;

        specialinvoke $stack14.<java.awt.Rectangle: void <init>(int,int,int,int)>(x0, y0, $stack16, $stack15);

        return $stack14;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)
    {
        java.awt.geom.Rectangle2D area, $stack45, dataArea;
        double $stack34, $stack36, $stack109, $stack114, $stack120, $stack122, $stack145, $stack147, $stack165, $stack167, $stack203, $stack205, $stack208, $stack209, $stack210, $stack211, $stack252, $stack255, $stack261, $stack266, x, y, $stack49, $stack50, domainAxis#165, $stack87, paint, $stack93;
        byte $stack35, $stack37;
        boolean b1, $stack43, suppressShadow, $stack72, $stack77, $stack79, $stack81, $stack86, $stack92, $stack98, $stack182, $stack271, $stack307, $stack305, $stack68, foundData#146, $stack184, $stack88, $stack94, $stack96;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.ui.RectangleInsets insets, $stack41;
        org.jfree.chart.axis.AxisSpace space;
        java.lang.Object $stack44, $stack62, $stack125, $stack130, $stack171, $stack179, $stack185, $stack193, $stack197, $stack227, $stack234, $stack57, $stack59;
        java.util.Map axisStateMap, $stack69, $stack225, $stack232, $stack65;
        org.jfree.chart.plot.PlotOrientation orient, $stack144, $stack164, $stack251, $stack260;
        java.awt.Graphics2D savedG2, g2;
        java.awt.RenderingHints$Key $stack60;
        java.lang.Boolean $stack61;
        org.jfree.chart.util.ShadowGenerator $stack64, $stack99, $stack107, $stack110, $stack115;
        java.util.Collection $stack70, $stack66;
        java.util.List datasetIndices, $stack213, $stack218, $stack220, $stack222, datasetIndex#148;
        int $stack84, $stack90, $stack111, $stack112, $stack113, $stack116, $stack117, $stack118, $stack121, $stack123, $stack204, $stack206, datasetIndex, i, stroke;
        java.lang.Integer $stack126, $stack131, $stack172, $stack180, $stack186;
        org.jfree.chart.ui.Layer $stack128, $stack133, $stack178, $stack192, $stack195, $stack199;
        java.awt.Paint paint;
        java.awt.Stroke stroke;
        java.awt.image.BufferedImage $stack202, dataImage, paint#217;
        java.awt.RenderingHints $stack212;
        org.jfree.chart.plot.PlotState parentState;
        org.jfree.chart.axis.ValueAxis $stack226, $stack233, domainAxis, x#34, $stack56, $stack58, rangeAxis, i#163;
        org.jfree.chart.ui.RectangleEdge $stack253, $stack256, $stack262, $stack267, renderer#164, rangeAxis#188;
        java.awt.geom.Point2D anchor;
        java.awt.Rectangle dataArea#6;
        org.jfree.chart.plot.CrosshairState $stack48;
        java.awt.Shape domainAxis#62;
        java.awt.Composite x#69;
        float $stack54;
        java.awt.AlphaComposite $stack55;
        org.jfree.chart.axis.AxisState y#106, rangeAxisState;
        java.util.Iterator foundData, datasetIndex#149, paint#209;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.chart.plot.DatasetRenderingOrder dataset#147;
        org.jfree.chart.renderer.xy.XYItemRenderer renderer;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        anchor := @parameter2: java.awt.geom.Point2D;

        parentState := @parameter3: org.jfree.chart.plot.PlotState;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        $stack34 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack35 = $stack34 cmpg 10.0;

        if $stack35 > 0 goto label01;

        $stack307 = 1;

        goto label02;

     label01:
        $stack307 = 0;

     label02:
        b1 = $stack307;

        $stack36 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack37 = $stack36 cmpg 10.0;

        if $stack37 > 0 goto label03;

        $stack305 = 1;

        goto label04;

     label03:
        $stack305 = 0;

     label04:
        if b1 != 0 goto label05;

        if $stack305 == 0 goto label06;

     label05:
        return;

     label06:
        if info == null goto label07;

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void setPlotArea(java.awt.geom.Rectangle2D)>(area);

     label07:
        insets = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets getInsets()>();

        virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(area);

        space = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        dataArea = virtualinvoke space.<org.jfree.chart.axis.AxisSpace: java.awt.geom.Rectangle2D shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(area, null);

        $stack41 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        virtualinvoke $stack41.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(dataArea);

        dataArea#6 = specialinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Rectangle integerise(java.awt.geom.Rectangle2D)>(dataArea);

        $stack43 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: boolean isEmpty()>();

        if $stack43 == 0 goto label08;

        return;

     label08:
        $stack44 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: java.lang.Object clone()>();

        $stack45 = (java.awt.geom.Rectangle2D) $stack44;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void createAndAddEntity(java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,java.lang.String,java.lang.String)>($stack45, info, null, null);

        if info == null goto label09;

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void setDataArea(java.awt.geom.Rectangle2D)>(dataArea#6);

     label09:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#6);

        axisStateMap = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.util.Map drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>(g2, area, dataArea#6, info);

        orient = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        if anchor == null goto label10;

        $stack271 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: boolean contains(java.awt.geom.Point2D)>(anchor);

        if $stack271 != 0 goto label10;

        anchor = null;

     label10:
        $stack48 = new org.jfree.chart.plot.CrosshairState;

        specialinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void <init>()>();

        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setCrosshairDistance(double)>(#Infinity);

        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setAnchor(java.awt.geom.Point2D)>(anchor);

        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setAnchorX(double)>(#NaN);

        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setAnchorY(double)>(#NaN);

        if anchor == null goto label16;

        domainAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        if domainAxis == null goto label13;

        $stack260 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orient != $stack260 goto label11;

        $stack266 = virtualinvoke anchor.<java.awt.geom.Point2D: double getX()>();

        $stack267 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        x = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack266, dataArea#6, $stack267);

        goto label12;

     label11:
        $stack261 = virtualinvoke anchor.<java.awt.geom.Point2D: double getY()>();

        $stack262 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        x = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack261, dataArea#6, $stack262);

     label12:
        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setAnchorX(double)>(x);

     label13:
        x#34 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        if x#34 == null goto label16;

        $stack251 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orient != $stack251 goto label14;

        $stack255 = virtualinvoke anchor.<java.awt.geom.Point2D: double getY()>();

        $stack256 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        y = virtualinvoke x#34.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack255, dataArea#6, $stack256);

        goto label15;

     label14:
        $stack252 = virtualinvoke anchor.<java.awt.geom.Point2D: double getX()>();

        $stack253 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        y = virtualinvoke x#34.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack252, dataArea#6, $stack253);

     label15:
        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setAnchorY(double)>(y);

     label16:
        $stack49 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: double getDomainCrosshairValue()>();

        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setCrosshairX(double)>($stack49);

        $stack50 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: double getRangeCrosshairValue()>();

        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setCrosshairY(double)>($stack50);

        domainAxis#62 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Shape getClip()>();

        x#69 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        virtualinvoke g2.<java.awt.Graphics2D: void clip(java.awt.Shape)>(dataArea#6);

        $stack54 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: float getForegroundAlpha()>();

        $stack55 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $stack54);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($stack55);

        $stack56 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        $stack57 = interfaceinvoke axisStateMap.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack56);

        y#106 = (org.jfree.chart.axis.AxisState) $stack57;

        if y#106 != null goto label17;

        if parentState == null goto label17;

        $stack232 = virtualinvoke parentState.<org.jfree.chart.plot.PlotState: java.util.Map getSharedAxisStates()>();

        $stack233 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        $stack234 = interfaceinvoke $stack232.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack233);

        y#106 = (org.jfree.chart.axis.AxisState) $stack234;

     label17:
        $stack58 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack59 = interfaceinvoke axisStateMap.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack58);

        rangeAxisState = (org.jfree.chart.axis.AxisState) $stack59;

        if rangeAxisState != null goto label18;

        if parentState == null goto label18;

        $stack225 = virtualinvoke parentState.<org.jfree.chart.plot.PlotState: java.util.Map getSharedAxisStates()>();

        $stack226 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack227 = interfaceinvoke $stack225.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack226);

        rangeAxisState = (org.jfree.chart.axis.AxisState) $stack227;

     label18:
        if y#106 == null goto label19;

        $stack222 = virtualinvoke y#106.<org.jfree.chart.axis.AxisState: java.util.List getTicks()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)>(g2, dataArea#6, $stack222);

     label19:
        if rangeAxisState == null goto label20;

        $stack220 = virtualinvoke rangeAxisState.<org.jfree.chart.axis.AxisState: java.util.List getTicks()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)>(g2, dataArea#6, $stack220);

     label20:
        if y#106 == null goto label21;

        $stack218 = virtualinvoke y#106.<org.jfree.chart.axis.AxisState: java.util.List getTicks()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)>(g2, dataArea#6, $stack218);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawZeroDomainBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#6);

     label21:
        if rangeAxisState == null goto label22;

        $stack213 = virtualinvoke rangeAxisState.<org.jfree.chart.axis.AxisState: java.util.List getTicks()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)>(g2, dataArea#6, $stack213);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawZeroRangeBaseline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#6);

     label22:
        savedG2 = g2;

        dataImage = null;

        $stack61 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack60 = <org.jfree.chart.JFreeChart: java.awt.RenderingHints$Key KEY_SUPPRESS_SHADOW_GENERATION>;

        $stack62 = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack60);

        suppressShadow = virtualinvoke $stack61.<java.lang.Boolean: boolean equals(java.lang.Object)>($stack62);

        $stack64 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack64 == null goto label23;

        if suppressShadow != 0 goto label23;

        $stack202 = new java.awt.image.BufferedImage;

        $stack203 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack204 = (int) $stack203;

        $stack205 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack206 = (int) $stack205;

        specialinvoke $stack202.<java.awt.image.BufferedImage: void <init>(int,int,int)>($stack204, $stack206, 2);

        dataImage = $stack202;

        g2 = virtualinvoke $stack202.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $stack208 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: double getX()>();

        $stack209 = neg $stack208;

        $stack210 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: double getY()>();

        $stack211 = neg $stack210;

        virtualinvoke g2.<java.awt.Graphics2D: void translate(double,double)>($stack209, $stack211);

        $stack212 = virtualinvoke savedG2.<java.awt.Graphics2D: java.awt.RenderingHints getRenderingHints()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHints(java.util.Map)>($stack212);

     label23:
        $stack65 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack66 = interfaceinvoke $stack65.<java.util.Map: java.util.Collection values()>();

        foundData = interfaceinvoke $stack66.<java.util.Collection: java.util.Iterator iterator()>();

     label24:
        $stack68 = interfaceinvoke foundData.<java.util.Iterator: boolean hasNext()>();

        if $stack68 == 0 goto label25;

        $stack197 = interfaceinvoke foundData.<java.util.Iterator: java.lang.Object next()>();

        dataset = (org.jfree.data.xy.XYDataset) $stack197;

        datasetIndex = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int indexOf(org.jfree.data.xy.XYDataset)>(dataset);

        $stack199 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.ui.Layer)>(g2, dataArea#6, datasetIndex, $stack199);

        goto label24;

     label25:
        $stack69 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack70 = interfaceinvoke $stack69.<java.util.Map: java.util.Collection values()>();

        foundData = interfaceinvoke $stack70.<java.util.Collection: java.util.Iterator iterator()>();

     label26:
        $stack72 = interfaceinvoke foundData.<java.util.Iterator: boolean hasNext()>();

        if $stack72 == 0 goto label27;

        $stack193 = interfaceinvoke foundData.<java.util.Iterator: java.lang.Object next()>();

        dataset = (org.jfree.data.xy.XYDataset) $stack193;

        datasetIndex = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int indexOf(org.jfree.data.xy.XYDataset)>(dataset);

        $stack195 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.ui.Layer)>(g2, dataArea#6, datasetIndex, $stack195);

        goto label26;

     label27:
        foundData#146 = 0;

        dataset#147 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder()>();

        datasetIndex#148 = specialinvoke this.<org.jfree.chart.plot.XYPlot: java.util.List getRendererIndices(org.jfree.chart.plot.DatasetRenderingOrder)>(dataset#147);

        datasetIndices = specialinvoke this.<org.jfree.chart.plot.XYPlot: java.util.List getDatasetIndices(org.jfree.chart.plot.DatasetRenderingOrder)>(dataset#147);

        datasetIndex#149 = interfaceinvoke datasetIndex#148.<java.util.List: java.util.Iterator iterator()>();

     label28:
        $stack77 = interfaceinvoke datasetIndex#149.<java.util.Iterator: boolean hasNext()>();

        if $stack77 == 0 goto label30;

        $stack185 = interfaceinvoke datasetIndex#149.<java.util.Iterator: java.lang.Object next()>();

        $stack186 = (java.lang.Integer) $stack185;

        i = virtualinvoke $stack186.<java.lang.Integer: int intValue()>();

        renderer = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)>(i);

        if renderer == null goto label29;

        domainAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int)>(i);

        rangeAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)>(i);

        $stack192 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: void drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.ui.Layer,org.jfree.chart.plot.PlotRenderingInfo)>(g2, dataArea#6, domainAxis, rangeAxis, $stack192, info);

     label29:
        goto label28;

     label30:
        datasetIndex#149 = interfaceinvoke datasetIndices.<java.util.List: java.util.Iterator iterator()>();

     label31:
        $stack79 = interfaceinvoke datasetIndex#149.<java.util.Iterator: boolean hasNext()>();

        if $stack79 == 0 goto label35;

        $stack179 = interfaceinvoke datasetIndex#149.<java.util.Iterator: java.lang.Object next()>();

        $stack180 = (java.lang.Integer) $stack179;

        i = virtualinvoke $stack180.<java.lang.Integer: int intValue()>();

        $stack182 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>(g2, dataArea#6, i, info, $stack48);

        if $stack182 != 0 goto label32;

        if foundData#146 == 0 goto label33;

     label32:
        $stack184 = 1;

        goto label34;

     label33:
        $stack184 = 0;

     label34:
        foundData#146 = $stack184;

        goto label31;

     label35:
        datasetIndex#149 = interfaceinvoke datasetIndex#148.<java.util.List: java.util.Iterator iterator()>();

     label36:
        $stack81 = interfaceinvoke datasetIndex#149.<java.util.Iterator: boolean hasNext()>();

        if $stack81 == 0 goto label38;

        $stack171 = interfaceinvoke datasetIndex#149.<java.util.Iterator: java.lang.Object next()>();

        $stack172 = (java.lang.Integer) $stack171;

        i = virtualinvoke $stack172.<java.lang.Integer: int intValue()>();

        renderer = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)>(i);

        if renderer == null goto label37;

        domainAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int)>(i);

        rangeAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)>(i);

        $stack178 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: void drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.ui.Layer,org.jfree.chart.plot.PlotRenderingInfo)>(g2, dataArea#6, domainAxis, rangeAxis, $stack178, info);

     label37:
        goto label36;

     label38:
        datasetIndex = virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: int getDatasetIndex()>();

        i#163 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int)>(datasetIndex);

        $stack84 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)>(i#163);

        renderer#164 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge(int)>($stack84);

        $stack86 = this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairLockedOnData>;

        if $stack86 != 0 goto label41;

        if anchor == null goto label41;

        $stack164 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orient != $stack164 goto label39;

        $stack167 = virtualinvoke anchor.<java.awt.geom.Point2D: double getX()>();

        domainAxis#165 = virtualinvoke i#163.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack167, dataArea#6, renderer#164);

        goto label40;

     label39:
        $stack165 = virtualinvoke anchor.<java.awt.geom.Point2D: double getY()>();

        domainAxis#165 = virtualinvoke i#163.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack165, dataArea#6, renderer#164);

     label40:
        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setCrosshairX(double)>(domainAxis#165);

     label41:
        $stack87 = virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: double getCrosshairX()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDomainCrosshairValue(double,boolean)>($stack87, 0);

        $stack88 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isDomainCrosshairVisible()>();

        if $stack88 == 0 goto label42;

        domainAxis#165 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: double getDomainCrosshairValue()>();

        paint = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Paint getDomainCrosshairPaint()>();

        stroke = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke getDomainCrosshairStroke()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawDomainCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)>(g2, dataArea#6, orient, domainAxis#165, i#163, stroke, paint);

     label42:
        domainAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)>(datasetIndex);

        $stack90 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(domainAxis);

        rangeAxis#188 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge(int)>($stack90);

        $stack92 = this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairLockedOnData>;

        if $stack92 != 0 goto label45;

        if anchor == null goto label45;

        $stack144 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orient != $stack144 goto label43;

        $stack147 = virtualinvoke anchor.<java.awt.geom.Point2D: double getY()>();

        paint = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack147, dataArea#6, rangeAxis#188);

        goto label44;

     label43:
        $stack145 = virtualinvoke anchor.<java.awt.geom.Point2D: double getX()>();

        paint = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack145, dataArea#6, rangeAxis#188);

     label44:
        virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: void setCrosshairY(double)>(paint);

     label45:
        $stack93 = virtualinvoke $stack48.<org.jfree.chart.plot.CrosshairState: double getCrosshairY()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRangeCrosshairValue(double,boolean)>($stack93, 0);

        $stack94 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isRangeCrosshairVisible()>();

        if $stack94 == 0 goto label46;

        paint = virtualinvoke this.<org.jfree.chart.plot.XYPlot: double getRangeCrosshairValue()>();

        paint = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Paint getRangeCrosshairPaint()>();

        stroke = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke getRangeCrosshairStroke()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawRangeCrosshair(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation,double,org.jfree.chart.axis.ValueAxis,java.awt.Stroke,java.awt.Paint)>(g2, dataArea#6, orient, paint, domainAxis, stroke, paint);

     label46:
        if foundData#146 != 0 goto label47;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#6);

     label47:
        paint#209 = interfaceinvoke datasetIndex#148.<java.util.List: java.util.Iterator iterator()>();

     label48:
        $stack96 = interfaceinvoke paint#209.<java.util.Iterator: boolean hasNext()>();

        if $stack96 == 0 goto label49;

        $stack130 = interfaceinvoke paint#209.<java.util.Iterator: java.lang.Object next()>();

        $stack131 = (java.lang.Integer) $stack130;

        stroke = virtualinvoke $stack131.<java.lang.Integer: int intValue()>();

        $stack133 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawDomainMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.ui.Layer)>(g2, dataArea#6, stroke, $stack133);

        goto label48;

     label49:
        paint#209 = interfaceinvoke datasetIndex#148.<java.util.List: java.util.Iterator iterator()>();

     label50:
        $stack98 = interfaceinvoke paint#209.<java.util.Iterator: boolean hasNext()>();

        if $stack98 == 0 goto label51;

        $stack125 = interfaceinvoke paint#209.<java.util.Iterator: java.lang.Object next()>();

        $stack126 = (java.lang.Integer) $stack125;

        stroke = virtualinvoke $stack126.<java.lang.Integer: int intValue()>();

        $stack128 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.ui.Layer)>(g2, dataArea#6, stroke, $stack128);

        goto label50;

     label51:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>(g2, dataArea#6, info);

        $stack99 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack99 == null goto label52;

        if suppressShadow != 0 goto label52;

        $stack107 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        paint#217 = interfaceinvoke $stack107.<org.jfree.chart.util.ShadowGenerator: java.awt.image.BufferedImage createDropShadow(java.awt.image.BufferedImage)>(dataImage);

        g2 = savedG2;

        $stack109 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: double getX()>();

        $stack111 = (int) $stack109;

        $stack110 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack112 = interfaceinvoke $stack110.<org.jfree.chart.util.ShadowGenerator: int calculateOffsetX()>();

        $stack113 = $stack111 + $stack112;

        $stack114 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: double getY()>();

        $stack116 = (int) $stack114;

        $stack115 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack117 = interfaceinvoke $stack115.<org.jfree.chart.util.ShadowGenerator: int calculateOffsetY()>();

        $stack118 = $stack116 + $stack117;

        virtualinvoke savedG2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(paint#217, $stack113, $stack118, null);

        $stack120 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: double getX()>();

        $stack121 = (int) $stack120;

        $stack122 = virtualinvoke dataArea#6.<java.awt.geom.Rectangle2D: double getY()>();

        $stack123 = (int) $stack122;

        virtualinvoke savedG2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(dataImage, $stack121, $stack123, null);

     label52:
        virtualinvoke g2.<java.awt.Graphics2D: void setClip(java.awt.Shape)>(domainAxis#62);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(x#69);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea#6);

        return;
    }

    private java.util.List getDatasetIndices(org.jfree.chart.plot.DatasetRenderingOrder)
    {
        java.util.ArrayList $stack5;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack6;
        java.util.Set $stack7;
        java.util.Iterator l3;
        boolean $stack9;
        org.jfree.chart.plot.DatasetRenderingOrder order, $stack10;
        java.lang.Object $stack12, $stack13, $stack15;
        java.util.Map$Entry entry;

        this := @this: org.jfree.chart.plot.XYPlot;

        order := @parameter0: org.jfree.chart.plot.DatasetRenderingOrder;

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack7 = interfaceinvoke $stack6.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack12 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack12;

        $stack13 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack13 == null goto label2;

        $stack15 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>($stack15);

     label2:
        goto label1;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($stack5);

        $stack10 = <org.jfree.chart.plot.DatasetRenderingOrder: org.jfree.chart.plot.DatasetRenderingOrder REVERSE>;

        if order != $stack10 goto label4;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($stack5);

     label4:
        return $stack5;
    }

    private java.util.List getRendererIndices(org.jfree.chart.plot.DatasetRenderingOrder)
    {
        java.util.ArrayList $stack5;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack6;
        java.util.Set $stack7;
        java.util.Iterator l3;
        boolean $stack9;
        org.jfree.chart.plot.DatasetRenderingOrder order, $stack10;
        java.lang.Object $stack12, $stack13, $stack15;
        java.util.Map$Entry entry;

        this := @this: org.jfree.chart.plot.XYPlot;

        order := @parameter0: org.jfree.chart.plot.DatasetRenderingOrder;

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack7 = interfaceinvoke $stack6.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label3;

        $stack12 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack12;

        $stack13 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack13 == null goto label2;

        $stack15 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>($stack15);

     label2:
        goto label1;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($stack5);

        $stack10 = <org.jfree.chart.plot.DatasetRenderingOrder: org.jfree.chart.plot.DatasetRenderingOrder REVERSE>;

        if order != $stack10 goto label4;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($stack5);

     label4:
        return $stack5;
    }

    public void drawBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.plot.PlotOrientation $stack3;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        $stack3 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fillBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>(g2, area, $stack3);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawQuadrants(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        return;
    }

    protected void drawQuadrants(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.ValueAxis xAxis, yAxis;
        org.jfree.data.Range $stack34, $stack41;
        java.awt.geom.Point2D $stack35, $stack42;
        double $stack36, x, xx, $stack43, y, yy, xmin, xxmin, xmax, xxmax, ymin, yymin, ymax, yymax, $stack87, $stack88, $stack89, $stack90, $stack91, $stack92, $stack95, $stack96, $stack97, $stack98, $stack99, $stack100, $stack110, $stack111, $stack112, $stack113, $stack114, $stack115, $stack118, $stack119, $stack120, $stack121, $stack122, $stack123, $stack133, $stack134, $stack135, $stack136, $stack137, $stack138, $stack141, $stack142, $stack143, $stack144, $stack145, $stack146, $stack156, $stack157, $stack158, $stack159, $stack160, $stack161, $stack164, $stack165, $stack166, $stack167, $stack168, $stack169;
        java.awt.geom.Rectangle2D area, $stack76, $stack79;
        org.jfree.chart.ui.RectangleEdge $stack38, $stack45, $stack48, $stack51, $stack54, $stack57;
        java.awt.geom.Rectangle2D[] $stack59;
        java.awt.Paint[] $stack60, $stack72, $stack77, $stack62, $stack64, $stack66;
        java.awt.Paint $stack61, $stack73, $stack78, $stack63, $stack65, $stack67;
        java.awt.Graphics2D g2;
        java.awt.Composite originalComposite;
        float $stack70;
        java.awt.AlphaComposite $stack71;
        byte $stack80, $stack82, $stack102, $stack105, $stack125, $stack128, $stack148, $stack151;
        org.jfree.chart.plot.PlotOrientation $stack83, $stack84, $stack106, $stack107, $stack129, $stack130, $stack152, $stack153;
        java.awt.geom.Rectangle2D$Double $stack85, $stack93, $stack108, $stack116, $stack131, $stack139, $stack154, $stack162;
        boolean somethingToDraw;
        int i;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        somethingToDraw = 0;

        xAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        if xAxis != null goto label01;

        return;

     label01:
        $stack34 = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack35 = this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin>;

        $stack36 = virtualinvoke $stack35.<java.awt.geom.Point2D: double getX()>();

        x = virtualinvoke $stack34.<org.jfree.data.Range: double constrain(double)>($stack36);

        $stack38 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x, area, $stack38);

        yAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        if yAxis != null goto label02;

        return;

     label02:
        $stack41 = virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack42 = this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin>;

        $stack43 = virtualinvoke $stack42.<java.awt.geom.Point2D: double getY()>();

        y = virtualinvoke $stack41.<org.jfree.data.Range: double constrain(double)>($stack43);

        $stack45 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yy = virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y, area, $stack45);

        xmin = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack48 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xxmin = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(xmin, area, $stack48);

        xmax = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        $stack51 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xxmax = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(xmax, area, $stack51);

        ymin = virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack54 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yymin = virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(ymin, area, $stack54);

        ymax = virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        $stack57 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yymax = virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(ymax, area, $stack57);

        $stack59 = newarray (java.awt.geom.Rectangle2D)[4];

        $stack59[0] = null;

        $stack59[1] = null;

        $stack59[2] = null;

        $stack59[3] = null;

        $stack60 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack61 = $stack60[0];

        if $stack61 == null goto label05;

        $stack148 = x cmpl xmin;

        if $stack148 <= 0 goto label05;

        $stack151 = y cmpg ymax;

        if $stack151 >= 0 goto label05;

        $stack153 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack152 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack153 != $stack152 goto label03;

        $stack162 = new java.awt.geom.Rectangle2D$Double;

        $stack164 = staticinvoke <java.lang.Math: double min(double,double)>(yymax, yy);

        $stack165 = staticinvoke <java.lang.Math: double min(double,double)>(xxmin, xx);

        $stack166 = yy - yymax;

        $stack167 = staticinvoke <java.lang.Math: double abs(double)>($stack166);

        $stack168 = xx - xxmin;

        $stack169 = staticinvoke <java.lang.Math: double abs(double)>($stack168);

        specialinvoke $stack162.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack164, $stack165, $stack167, $stack169);

        $stack59[0] = $stack162;

        goto label04;

     label03:
        $stack154 = new java.awt.geom.Rectangle2D$Double;

        $stack156 = staticinvoke <java.lang.Math: double min(double,double)>(xxmin, xx);

        $stack157 = staticinvoke <java.lang.Math: double min(double,double)>(yymax, yy);

        $stack158 = xx - xxmin;

        $stack159 = staticinvoke <java.lang.Math: double abs(double)>($stack158);

        $stack160 = yy - yymax;

        $stack161 = staticinvoke <java.lang.Math: double abs(double)>($stack160);

        specialinvoke $stack154.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack156, $stack157, $stack159, $stack161);

        $stack59[0] = $stack154;

     label04:
        somethingToDraw = 1;

     label05:
        $stack62 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack63 = $stack62[1];

        if $stack63 == null goto label08;

        $stack125 = x cmpg xmax;

        if $stack125 >= 0 goto label08;

        $stack128 = y cmpg ymax;

        if $stack128 >= 0 goto label08;

        $stack130 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack129 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack130 != $stack129 goto label06;

        $stack139 = new java.awt.geom.Rectangle2D$Double;

        $stack141 = staticinvoke <java.lang.Math: double min(double,double)>(yymax, yy);

        $stack142 = staticinvoke <java.lang.Math: double min(double,double)>(xxmax, xx);

        $stack143 = yy - yymax;

        $stack144 = staticinvoke <java.lang.Math: double abs(double)>($stack143);

        $stack145 = xx - xxmax;

        $stack146 = staticinvoke <java.lang.Math: double abs(double)>($stack145);

        specialinvoke $stack139.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack141, $stack142, $stack144, $stack146);

        $stack59[1] = $stack139;

        goto label07;

     label06:
        $stack131 = new java.awt.geom.Rectangle2D$Double;

        $stack133 = staticinvoke <java.lang.Math: double min(double,double)>(xx, xxmax);

        $stack134 = staticinvoke <java.lang.Math: double min(double,double)>(yymax, yy);

        $stack135 = xx - xxmax;

        $stack136 = staticinvoke <java.lang.Math: double abs(double)>($stack135);

        $stack137 = yy - yymax;

        $stack138 = staticinvoke <java.lang.Math: double abs(double)>($stack137);

        specialinvoke $stack131.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack133, $stack134, $stack136, $stack138);

        $stack59[1] = $stack131;

     label07:
        somethingToDraw = 1;

     label08:
        $stack64 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack65 = $stack64[2];

        if $stack65 == null goto label11;

        $stack102 = x cmpl xmin;

        if $stack102 <= 0 goto label11;

        $stack105 = y cmpl ymin;

        if $stack105 <= 0 goto label11;

        $stack107 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack106 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack107 != $stack106 goto label09;

        $stack116 = new java.awt.geom.Rectangle2D$Double;

        $stack118 = staticinvoke <java.lang.Math: double min(double,double)>(yymin, yy);

        $stack119 = staticinvoke <java.lang.Math: double min(double,double)>(xxmin, xx);

        $stack120 = yy - yymin;

        $stack121 = staticinvoke <java.lang.Math: double abs(double)>($stack120);

        $stack122 = xx - xxmin;

        $stack123 = staticinvoke <java.lang.Math: double abs(double)>($stack122);

        specialinvoke $stack116.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack118, $stack119, $stack121, $stack123);

        $stack59[2] = $stack116;

        goto label10;

     label09:
        $stack108 = new java.awt.geom.Rectangle2D$Double;

        $stack110 = staticinvoke <java.lang.Math: double min(double,double)>(xxmin, xx);

        $stack111 = staticinvoke <java.lang.Math: double min(double,double)>(yymin, yy);

        $stack112 = xx - xxmin;

        $stack113 = staticinvoke <java.lang.Math: double abs(double)>($stack112);

        $stack114 = yy - yymin;

        $stack115 = staticinvoke <java.lang.Math: double abs(double)>($stack114);

        specialinvoke $stack108.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack110, $stack111, $stack113, $stack115);

        $stack59[2] = $stack108;

     label10:
        somethingToDraw = 1;

     label11:
        $stack66 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack67 = $stack66[3];

        if $stack67 == null goto label14;

        $stack80 = x cmpg xmax;

        if $stack80 >= 0 goto label14;

        $stack82 = y cmpl ymin;

        if $stack82 <= 0 goto label14;

        $stack84 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack83 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack84 != $stack83 goto label12;

        $stack93 = new java.awt.geom.Rectangle2D$Double;

        $stack95 = staticinvoke <java.lang.Math: double min(double,double)>(yymin, yy);

        $stack96 = staticinvoke <java.lang.Math: double min(double,double)>(xxmax, xx);

        $stack97 = yy - yymin;

        $stack98 = staticinvoke <java.lang.Math: double abs(double)>($stack97);

        $stack99 = xx - xxmax;

        $stack100 = staticinvoke <java.lang.Math: double abs(double)>($stack99);

        specialinvoke $stack93.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack95, $stack96, $stack98, $stack100);

        $stack59[3] = $stack93;

        goto label13;

     label12:
        $stack85 = new java.awt.geom.Rectangle2D$Double;

        $stack87 = staticinvoke <java.lang.Math: double min(double,double)>(xx, xxmax);

        $stack88 = staticinvoke <java.lang.Math: double min(double,double)>(yymin, yy);

        $stack89 = xx - xxmax;

        $stack90 = staticinvoke <java.lang.Math: double abs(double)>($stack89);

        $stack91 = yy - yymin;

        $stack92 = staticinvoke <java.lang.Math: double abs(double)>($stack91);

        specialinvoke $stack85.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack87, $stack88, $stack90, $stack92);

        $stack59[3] = $stack85;

     label13:
        somethingToDraw = 1;

     label14:
        if somethingToDraw == 0 goto label18;

        originalComposite = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $stack70 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: float getBackgroundAlpha()>();

        $stack71 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $stack70);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($stack71);

        i = 0;

     label15:
        if i >= 4 goto label17;

        $stack72 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack73 = $stack72[i];

        if $stack73 == null goto label16;

        $stack76 = $stack59[i];

        if $stack76 == null goto label16;

        $stack77 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack78 = $stack77[i];

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack78);

        $stack79 = $stack59[i];

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack79);

     label16:
        i = i + 1;

        goto label15;

     label17:
        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(originalComposite);

     label18:
        return;
    }

    public void drawDomainTickBands(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint bandPaint;
        org.jfree.chart.axis.ValueAxis xAxis;
        java.util.List ticks;
        boolean $stack17, fillBand, $stack23;
        org.jfree.chart.renderer.xy.XYItemRenderer $stack19, $stack24;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        java.lang.Object $stack20;
        org.jfree.chart.axis.ValueTick tick;
        double current, previous, end#5;
        java.util.Iterator end;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        ticks := @parameter2: java.util.List;

        bandPaint = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Paint getDomainTickBandPaint()>();

        if bandPaint == null goto label6;

        fillBand = 0;

        xAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        previous = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        end = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack17 = interfaceinvoke end.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label5;

        $stack20 = interfaceinvoke end.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack20;

        current = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        if fillBand == 0 goto label2;

        $stack24 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        interfaceinvoke $stack24.<org.jfree.chart.renderer.xy.XYItemRenderer: void fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)>(g2, this, xAxis, dataArea, previous, current);

     label2:
        previous = current;

        if fillBand != 0 goto label3;

        $stack23 = 1;

        goto label4;

     label3:
        $stack23 = 0;

     label4:
        fillBand = $stack23;

        goto label1;

     label5:
        end#5 = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        if fillBand == 0 goto label6;

        $stack19 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        interfaceinvoke $stack19.<org.jfree.chart.renderer.xy.XYItemRenderer: void fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)>(g2, this, xAxis, dataArea, previous, end#5);

     label6:
        return;
    }

    public void drawRangeTickBands(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint bandPaint;
        org.jfree.chart.axis.ValueAxis axis;
        java.util.List ticks;
        boolean $stack17, fillBand, $stack23;
        org.jfree.chart.renderer.xy.XYItemRenderer $stack19, $stack24;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        java.lang.Object $stack20;
        org.jfree.chart.axis.ValueTick tick;
        double current, previous, end#5;
        java.util.Iterator end;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        ticks := @parameter2: java.util.List;

        bandPaint = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Paint getRangeTickBandPaint()>();

        if bandPaint == null goto label6;

        fillBand = 0;

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        previous = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        end = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack17 = interfaceinvoke end.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label5;

        $stack20 = interfaceinvoke end.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack20;

        current = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        if fillBand == 0 goto label2;

        $stack24 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        interfaceinvoke $stack24.<org.jfree.chart.renderer.xy.XYItemRenderer: void fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)>(g2, this, axis, dataArea, previous, current);

     label2:
        previous = current;

        if fillBand != 0 goto label3;

        $stack23 = 1;

        goto label4;

     label3:
        $stack23 = 0;

     label4:
        fillBand = $stack23;

        goto label1;

     label5:
        end#5 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        if fillBand == 0 goto label6;

        $stack19 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        interfaceinvoke $stack19.<org.jfree.chart.renderer.xy.XYItemRenderer: void fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)>(g2, this, axis, dataArea, previous, end#5);

     label6:
        return;
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.axis.AxisCollection $stack12;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack13, $stack17;
        java.util.Collection $stack14, $stack18;
        boolean $stack16, $stack20, $stack28, $stack35, $stack42, $stack49;
        java.util.HashMap $stack21;
        java.awt.geom.Rectangle2D dataArea, plotArea;
        double $stack22, $stack24, $stack25, $stack29, $stack31, $stack32, $stack36, $stack38, $stack39, $stack43, $stack45, $stack46, axis#8;
        org.jfree.chart.ui.RectangleInsets $stack23, $stack30, $stack37, $stack44;
        java.util.List $stack26, $stack33, $stack40, $stack47;
        java.lang.Object $stack50, $stack56, $stack62, $stack68, $stack74, $stack78;
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.PlotRenderingInfo plotState;
        org.jfree.chart.ui.RectangleEdge $stack51, $stack57, $stack63, $stack69, $stack77, $stack81;
        java.util.Iterator axisStateMap, l9;
        org.jfree.chart.axis.ValueAxis axis;
        int axisIndex;
        org.jfree.chart.axis.Axis axis#10;
        org.jfree.chart.axis.AxisState info;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        plotState := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        $stack12 = new org.jfree.chart.axis.AxisCollection;

        specialinvoke $stack12.<org.jfree.chart.axis.AxisCollection: void <init>()>();

        $stack13 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: java.util.Collection values()>();

        axisStateMap = interfaceinvoke $stack14.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $stack16 = interfaceinvoke axisStateMap.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label03;

        $stack78 = interfaceinvoke axisStateMap.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack78;

        if axis == null goto label02;

        axisIndex = specialinvoke this.<org.jfree.chart.plot.XYPlot: int findDomainAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        $stack81 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge(int)>(axisIndex);

        virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: void add(org.jfree.chart.axis.Axis,org.jfree.chart.ui.RectangleEdge)>(axis, $stack81);

     label02:
        goto label01;

     label03:
        $stack17 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack18 = interfaceinvoke $stack17.<java.util.Map: java.util.Collection values()>();

        axisStateMap = interfaceinvoke $stack18.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $stack20 = interfaceinvoke axisStateMap.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label06;

        $stack74 = interfaceinvoke axisStateMap.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack74;

        if axis == null goto label05;

        axisIndex = specialinvoke this.<org.jfree.chart.plot.XYPlot: int findRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        $stack77 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge(int)>(axisIndex);

        virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: void add(org.jfree.chart.axis.Axis,org.jfree.chart.ui.RectangleEdge)>(axis, $stack77);

     label05:
        goto label04;

     label06:
        $stack21 = new java.util.HashMap;

        specialinvoke $stack21.<java.util.HashMap: void <init>()>();

        $stack22 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack23 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack24 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack25 = virtualinvoke $stack23.<org.jfree.chart.ui.RectangleInsets: double calculateTopOutset(double)>($stack24);

        axis#8 = $stack22 - $stack25;

        $stack26 = virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: java.util.List getAxesAtTop()>();

        l9 = interfaceinvoke $stack26.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack28 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack28 == 0 goto label08;

        $stack68 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        axis#10 = (org.jfree.chart.axis.Axis) $stack68;

        $stack69 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        info = virtualinvoke axis#10.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, axis#8, plotArea, dataArea, $stack69, plotState);

        axis#8 = virtualinvoke info.<org.jfree.chart.axis.AxisState: double getCursor()>();

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(axis#10, info);

        goto label07;

     label08:
        $stack29 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack30 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack31 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack32 = virtualinvoke $stack30.<org.jfree.chart.ui.RectangleInsets: double calculateBottomOutset(double)>($stack31);

        axis#8 = $stack29 + $stack32;

        $stack33 = virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: java.util.List getAxesAtBottom()>();

        l9 = interfaceinvoke $stack33.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $stack35 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack35 == 0 goto label10;

        $stack62 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        axis#10 = (org.jfree.chart.axis.Axis) $stack62;

        $stack63 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        info = virtualinvoke axis#10.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, axis#8, plotArea, dataArea, $stack63, plotState);

        axis#8 = virtualinvoke info.<org.jfree.chart.axis.AxisState: double getCursor()>();

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(axis#10, info);

        goto label09;

     label10:
        $stack36 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack37 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack38 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack39 = virtualinvoke $stack37.<org.jfree.chart.ui.RectangleInsets: double calculateLeftOutset(double)>($stack38);

        axis#8 = $stack36 - $stack39;

        $stack40 = virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: java.util.List getAxesAtLeft()>();

        l9 = interfaceinvoke $stack40.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $stack42 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack42 == 0 goto label12;

        $stack56 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        axis#10 = (org.jfree.chart.axis.Axis) $stack56;

        $stack57 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        info = virtualinvoke axis#10.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, axis#8, plotArea, dataArea, $stack57, plotState);

        axis#8 = virtualinvoke info.<org.jfree.chart.axis.AxisState: double getCursor()>();

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(axis#10, info);

        goto label11;

     label12:
        $stack43 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack44 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack45 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack46 = virtualinvoke $stack44.<org.jfree.chart.ui.RectangleInsets: double calculateRightOutset(double)>($stack45);

        axis#8 = $stack43 + $stack46;

        $stack47 = virtualinvoke $stack12.<org.jfree.chart.axis.AxisCollection: java.util.List getAxesAtRight()>();

        l9 = interfaceinvoke $stack47.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $stack49 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack49 == 0 goto label14;

        $stack50 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        axis#10 = (org.jfree.chart.axis.Axis) $stack50;

        $stack51 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        info = virtualinvoke axis#10.<org.jfree.chart.axis.Axis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, axis#8, plotArea, dataArea, $stack51, plotState);

        axis#8 = virtualinvoke info.<org.jfree.chart.axis.AxisState: double getCursor()>();

        interfaceinvoke $stack21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(axis#10, info);

        goto label13;

     label14:
        return $stack21;
    }

    public boolean render(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.CrosshairState)
    {
        org.jfree.chart.plot.XYPlot this;
        int index, passCount, $stack33, $stack42, $stack43, $stack45, $stack46, $stack59, $stack67, $stack68, $stack70, $stack71, pass, seriesCount, series, firstItem, lastItem, itemBounds#9;
        org.jfree.data.xy.XYDataset dataset;
        boolean $stack21, $stack34, $stack60, foundData;
        org.jfree.chart.axis.ValueAxis xAxis, yAxis;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.plot.SeriesRenderingOrder seriesOrder, $stack28;
        org.jfree.chart.plot.CrosshairState crosshairState;
        double $stack39, $stack40, $stack64, $stack65;
        org.jfree.chart.renderer.xy.XYItemRenderer renderer;
        int[] itemBounds;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        index := @parameter2: int;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        crosshairState := @parameter4: org.jfree.chart.plot.CrosshairState;

        foundData = 0;

        dataset = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.data.xy.XYDataset getDataset(int)>(index);

        $stack21 = staticinvoke <org.jfree.data.general.DatasetUtils: boolean isEmptyOrNull(org.jfree.data.xy.XYDataset)>(dataset);

        if $stack21 != 0 goto label20;

        foundData = 1;

        xAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int)>(index);

        yAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)>(index);

        if xAxis == null goto label01;

        if yAxis != null goto label02;

     label01:
        return 1;

     label02:
        renderer = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)>(index);

        if renderer != null goto label03;

        renderer = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        if renderer != null goto label03;

        return 1;

     label03:
        state = interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>(g2, dataArea, this, dataset, info);

        passCount = interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: int getPassCount()>();

        seriesOrder = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.SeriesRenderingOrder getSeriesRenderingOrder()>();

        $stack28 = <org.jfree.chart.plot.SeriesRenderingOrder: org.jfree.chart.plot.SeriesRenderingOrder REVERSE>;

        if seriesOrder != $stack28 goto label13;

        pass = 0;

     label04:
        if pass >= passCount goto label12;

        seriesCount = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getSeriesCount()>();

        series = seriesCount - 1;

     label05:
        if series < 0 goto label11;

        firstItem = 0;

        $stack59 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(series);

        lastItem = $stack59 - 1;

        if lastItem != -1 goto label06;

        goto label10;

     label06:
        $stack60 = virtualinvoke state.<org.jfree.chart.renderer.xy.XYItemRendererState: boolean getProcessVisibleItemsOnly()>();

        if $stack60 == 0 goto label07;

        $stack64 = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack65 = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        itemBounds = staticinvoke <org.jfree.chart.renderer.RendererUtils: int[] findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)>(dataset, series, $stack64, $stack65);

        $stack67 = itemBounds[0];

        $stack68 = $stack67 - 1;

        firstItem = staticinvoke <java.lang.Math: int max(int,int)>($stack68, 0);

        $stack70 = itemBounds[1];

        $stack71 = $stack70 + 1;

        lastItem = staticinvoke <java.lang.Math: int min(int,int)>($stack71, lastItem);

     label07:
        virtualinvoke state.<org.jfree.chart.renderer.xy.XYItemRendererState: void startSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)>(dataset, series, firstItem, lastItem, pass, passCount);

        itemBounds#9 = firstItem;

     label08:
        if itemBounds#9 > lastItem goto label09;

        interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, itemBounds#9, crosshairState, pass);

        itemBounds#9 = itemBounds#9 + 1;

        goto label08;

     label09:
        virtualinvoke state.<org.jfree.chart.renderer.xy.XYItemRendererState: void endSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)>(dataset, series, firstItem, lastItem, pass, passCount);

     label10:
        series = series + -1;

        goto label05;

     label11:
        pass = pass + 1;

        goto label04;

     label12:
        goto label20;

     label13:
        pass = 0;

     label14:
        if pass >= passCount goto label20;

        seriesCount = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getSeriesCount()>();

        series = 0;

     label15:
        if series >= seriesCount goto label19;

        firstItem = 0;

        $stack33 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(series);

        lastItem = $stack33 - 1;

        $stack34 = virtualinvoke state.<org.jfree.chart.renderer.xy.XYItemRendererState: boolean getProcessVisibleItemsOnly()>();

        if $stack34 == 0 goto label16;

        $stack39 = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack40 = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        itemBounds = staticinvoke <org.jfree.chart.renderer.RendererUtils: int[] findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)>(dataset, series, $stack39, $stack40);

        $stack42 = itemBounds[0];

        $stack43 = $stack42 - 1;

        firstItem = staticinvoke <java.lang.Math: int max(int,int)>($stack43, 0);

        $stack45 = itemBounds[1];

        $stack46 = $stack45 + 1;

        lastItem = staticinvoke <java.lang.Math: int min(int,int)>($stack46, lastItem);

     label16:
        virtualinvoke state.<org.jfree.chart.renderer.xy.XYItemRendererState: void startSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)>(dataset, series, firstItem, lastItem, pass, passCount);

        itemBounds#9 = firstItem;

     label17:
        if itemBounds#9 > lastItem goto label18;

        interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, itemBounds#9, crosshairState, pass);

        itemBounds#9 = itemBounds#9 + 1;

        goto label17;

     label18:
        virtualinvoke state.<org.jfree.chart.renderer.xy.XYItemRendererState: void endSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)>(dataset, series, firstItem, lastItem, pass, passCount);

        series = series + 1;

        goto label15;

     label19:
        pass = pass + 1;

        goto label14;

     label20:
        return foundData;
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int)
    {
        int index, $stack10;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack5;
        java.lang.Integer $stack6, axisIndex;
        java.lang.Object $stack7, $stack9;
        java.util.List axisIndices;
        org.jfree.chart.axis.ValueAxis valueAxis;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        staticinvoke <org.jfree.chart.util.Args: void requireNonNegative(int,java.lang.String)>(index, "index");

        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        axisIndices = (java.util.List) $stack7;

        if axisIndices == null goto label1;

        $stack9 = interfaceinvoke axisIndices.<java.util.List: java.lang.Object get(int)>(0);

        axisIndex = (java.lang.Integer) $stack9;

        $stack10 = virtualinvoke axisIndex.<java.lang.Integer: int intValue()>();

        valueAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis(int)>($stack10);

        goto label2;

     label1:
        valueAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis(int)>(0);

     label2:
        return valueAxis;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)
    {
        int index, $stack10;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack5;
        java.lang.Integer $stack6, axisIndex;
        java.lang.Object $stack7, $stack9;
        java.util.List axisIndices;
        org.jfree.chart.axis.ValueAxis valueAxis;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        staticinvoke <org.jfree.chart.util.Args: void requireNonNegative(int,java.lang.String)>(index, "index");

        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap>;

        $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack7 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack6);

        axisIndices = (java.util.List) $stack7;

        if axisIndices == null goto label1;

        $stack9 = interfaceinvoke axisIndices.<java.util.List: java.lang.Object get(int)>(0);

        axisIndex = (java.lang.Integer) $stack9;

        $stack10 = virtualinvoke axisIndex.<java.lang.Integer: int intValue()>();

        valueAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>($stack10);

        goto label2;

     label1:
        valueAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(0);

     label2:
        return valueAxis;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.renderer.xy.XYItemRenderer $stack10, r;
        boolean $stack11, $stack25, $stack30, $stack34, $stack13, paintLine, $stack20;
        java.util.List ticks;
        java.util.Iterator l6;
        java.lang.Object $stack14;
        org.jfree.chart.axis.ValueTick tick;
        org.jfree.chart.axis.TickType $stack15, $stack16, $stack17, $stack18;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.xy.AbstractXYItemRenderer $stack22;
        org.jfree.chart.axis.ValueAxis $stack23;
        java.awt.geom.Rectangle2D dataArea;
        double $stack24;
        java.awt.Stroke gridStroke;
        java.awt.Paint gridPaint;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        ticks := @parameter2: java.util.List;

        $stack10 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        if $stack10 != null goto label1;

        return;

     label1:
        $stack11 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isDomainGridlinesVisible()>();

        if $stack11 != 0 goto label2;

        $stack34 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isDomainMinorGridlinesVisible()>();

        if $stack34 == 0 goto label7;

     label2:
        gridStroke = null;

        gridPaint = null;

        l6 = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack13 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label7;

        $stack14 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack14;

        paintLine = 0;

        $stack15 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack16 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MINOR>;

        if $stack15 != $stack16 goto label4;

        $stack30 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isDomainMinorGridlinesVisible()>();

        if $stack30 == 0 goto label4;

        gridStroke = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke getDomainMinorGridlineStroke()>();

        gridPaint = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Paint getDomainMinorGridlinePaint()>();

        paintLine = 1;

        goto label5;

     label4:
        $stack17 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack18 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MAJOR>;

        if $stack17 != $stack18 goto label5;

        $stack25 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isDomainGridlinesVisible()>();

        if $stack25 == 0 goto label5;

        gridStroke = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke getDomainGridlineStroke()>();

        gridPaint = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Paint getDomainGridlinePaint()>();

        paintLine = 1;

     label5:
        r = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        $stack20 = r instanceof org.jfree.chart.renderer.xy.AbstractXYItemRenderer;

        if $stack20 == 0 goto label6;

        if paintLine == 0 goto label6;

        $stack22 = (org.jfree.chart.renderer.xy.AbstractXYItemRenderer) r;

        $stack23 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        $stack24 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        virtualinvoke $stack22.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)>(g2, this, $stack23, dataArea, $stack24, gridPaint, gridStroke);

     label6:
        goto label3;

     label7:
        return;
    }

    protected void drawRangeGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.renderer.xy.XYItemRenderer $stack10, $stack23;
        boolean $stack11, $stack14, $stack26, $stack28, $stack33, $stack37, paintLine;
        org.jfree.chart.axis.ValueAxis axis, $stack24;
        java.util.List ticks;
        java.util.Iterator l7;
        java.lang.Object $stack15;
        org.jfree.chart.axis.ValueTick tick;
        org.jfree.chart.axis.TickType $stack16, $stack17, $stack18, $stack19;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D area;
        double $stack25, $stack20;
        java.awt.Stroke gridStroke;
        java.awt.Paint gridPaint;
        byte $stack21;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        ticks := @parameter2: java.util.List;

        $stack10 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        if $stack10 != null goto label1;

        return;

     label1:
        $stack11 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isRangeGridlinesVisible()>();

        if $stack11 != 0 goto label2;

        $stack37 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isRangeMinorGridlinesVisible()>();

        if $stack37 == 0 goto label8;

     label2:
        gridStroke = null;

        gridPaint = null;

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        if axis == null goto label8;

        l7 = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $stack14 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label8;

        $stack15 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack15;

        paintLine = 0;

        $stack16 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack17 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MINOR>;

        if $stack16 != $stack17 goto label4;

        $stack33 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isRangeMinorGridlinesVisible()>();

        if $stack33 == 0 goto label4;

        gridStroke = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke getRangeMinorGridlineStroke()>();

        gridPaint = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Paint getRangeMinorGridlinePaint()>();

        paintLine = 1;

        goto label5;

     label4:
        $stack18 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack19 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MAJOR>;

        if $stack18 != $stack19 goto label5;

        $stack28 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isRangeGridlinesVisible()>();

        if $stack28 == 0 goto label5;

        gridStroke = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke getRangeGridlineStroke()>();

        gridPaint = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.awt.Paint getRangeGridlinePaint()>();

        paintLine = 1;

     label5:
        $stack20 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack21 = $stack20 cmpl 0.0;

        if $stack21 != 0 goto label6;

        $stack26 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isRangeZeroBaselineVisible()>();

        if $stack26 != 0 goto label7;

     label6:
        if paintLine == 0 goto label7;

        $stack23 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        $stack24 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack25 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        interfaceinvoke $stack23.<org.jfree.chart.renderer.xy.XYItemRenderer: void drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)>(g2, this, $stack24, area, $stack25, gridPaint, gridStroke);

     label7:
        goto label3;

     label8:
        return;
    }

    protected void drawZeroDomainBaseline(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack3;
        org.jfree.chart.renderer.xy.XYItemRenderer $stack4, $stack5;
        java.awt.Graphics2D g2;
        org.jfree.chart.axis.ValueAxis $stack6;
        java.awt.geom.Rectangle2D area;
        java.awt.Stroke $stack7;
        java.awt.Paint $stack8;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isDomainZeroBaselineVisible()>();

        if $stack3 == 0 goto label1;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        if $stack4 == null goto label1;

        $stack5 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        $stack6 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainZeroBaselinePaint>;

        $stack7 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainZeroBaselineStroke>;

        interfaceinvoke $stack5.<org.jfree.chart.renderer.xy.XYItemRenderer: void drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)>(g2, this, $stack6, area, 0.0, $stack8, $stack7);

     label1:
        return;
    }

    protected void drawZeroRangeBaseline(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack3;
        org.jfree.chart.renderer.xy.XYItemRenderer $stack4;
        java.awt.Graphics2D g2;
        org.jfree.chart.axis.ValueAxis $stack5;
        java.awt.geom.Rectangle2D area;
        java.awt.Stroke $stack6;
        java.awt.Paint $stack7;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isRangeZeroBaselineVisible()>();

        if $stack3 == 0 goto label1;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()>();

        $stack5 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack7 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeZeroBaselinePaint>;

        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        interfaceinvoke $stack4.<org.jfree.chart.renderer.xy.XYItemRenderer: void drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)>(g2, this, $stack5, area, 0.0, $stack7, $stack6);

     label1:
        return;
    }

    public void drawAnnotations(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.List $stack8;
        java.util.Iterator l4;
        boolean $stack10;
        java.lang.Object $stack11;
        org.jfree.chart.annotations.XYAnnotation 'annotation';
        org.jfree.chart.axis.ValueAxis xAxis, yAxis;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.PlotRenderingInfo info;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        l4 = interfaceinvoke $stack8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack10 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label2;

        $stack11 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        'annotation' = (org.jfree.chart.annotations.XYAnnotation) $stack11;

        xAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        yAxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        interfaceinvoke 'annotation'.<org.jfree.chart.annotations.XYAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>(g2, this, dataArea, xAxis, yAxis, 0, info);

        goto label1;

     label2:
        return;
    }

    protected void drawDomainMarkers(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        int index, $stack11;
        org.jfree.chart.renderer.xy.XYItemRenderer r;
        org.jfree.chart.ui.Layer layer;
        java.util.Collection markers;
        org.jfree.chart.axis.ValueAxis axis;
        java.util.Iterator l8;
        boolean $stack15;
        java.lang.Object $stack16;
        org.jfree.chart.plot.Marker marker;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        index := @parameter2: int;

        layer := @parameter3: org.jfree.chart.ui.Layer;

        r = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)>(index);

        if r != null goto label1;

        return;

     label1:
        $stack11 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int getDatasetCount()>();

        if index < $stack11 goto label2;

        return;

     label2:
        markers = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.util.Collection getDomainMarkers(int,org.jfree.chart.ui.Layer)>(index, layer);

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int)>(index);

        if markers == null goto label4;

        if axis == null goto label4;

        l8 = interfaceinvoke markers.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $stack15 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label4;

        $stack16 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        marker = (org.jfree.chart.plot.Marker) $stack16;

        interfaceinvoke r.<org.jfree.chart.renderer.xy.XYItemRenderer: void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>(g2, this, axis, marker, dataArea);

        goto label3;

     label4:
        return;
    }

    protected void drawRangeMarkers(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        int index, $stack11;
        org.jfree.chart.renderer.xy.XYItemRenderer r;
        org.jfree.chart.ui.Layer layer;
        java.util.Collection markers;
        org.jfree.chart.axis.ValueAxis axis;
        java.util.Iterator l8;
        boolean $stack15;
        java.lang.Object $stack16;
        org.jfree.chart.plot.Marker marker;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        index := @parameter2: int;

        layer := @parameter3: org.jfree.chart.ui.Layer;

        r = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)>(index);

        if r != null goto label1;

        return;

     label1:
        $stack11 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int getDatasetCount()>();

        if index < $stack11 goto label2;

        return;

     label2:
        markers = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.util.Collection getRangeMarkers(int,org.jfree.chart.ui.Layer)>(index, layer);

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)>(index);

        if markers == null goto label4;

        if axis == null goto label4;

        l8 = interfaceinvoke markers.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $stack15 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label4;

        $stack16 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        marker = (org.jfree.chart.plot.Marker) $stack16;

        interfaceinvoke r.<org.jfree.chart.renderer.xy.XYItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>(g2, this, axis, marker, dataArea);

        goto label3;

     label4:
        return;
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.ui.Layer layer;
        java.util.Collection $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        layer := @parameter0: org.jfree.chart.ui.Layer;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.util.Collection getDomainMarkers(int,org.jfree.chart.ui.Layer)>(0, layer);

        return $stack2;
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.ui.Layer layer;
        java.util.Collection $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        layer := @parameter0: org.jfree.chart.ui.Layer;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: java.util.Collection getRangeMarkers(int,org.jfree.chart.ui.Layer)>(0, layer);

        return $stack2;
    }

    public java.util.Collection getDomainMarkers(int, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.ui.Layer layer, $stack4, $stack5;
        org.jfree.chart.plot.XYPlot this;
        int index;
        java.util.Map $stack8, $stack12;
        java.lang.Integer $stack9, $stack13;
        java.lang.Object $stack10, $stack14;
        java.util.Collection result;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        result = null;

        $stack4 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack4 goto label1;

        $stack12 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack14 = interfaceinvoke $stack12.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack13);

        result = (java.util.Collection) $stack14;

        goto label2;

     label1:
        $stack5 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        if layer != $stack5 goto label2;

        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack10 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack9);

        result = (java.util.Collection) $stack10;

     label2:
        if result == null goto label3;

        result = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(result);

     label3:
        return result;
    }

    public java.util.Collection getRangeMarkers(int, org.jfree.chart.ui.Layer)
    {
        org.jfree.chart.ui.Layer layer, $stack4, $stack5;
        org.jfree.chart.plot.XYPlot this;
        int index;
        java.util.Map $stack8, $stack12;
        java.lang.Integer $stack9, $stack13;
        java.lang.Object $stack10, $stack14;
        java.util.Collection result;

        this := @this: org.jfree.chart.plot.XYPlot;

        index := @parameter0: int;

        layer := @parameter1: org.jfree.chart.ui.Layer;

        result = null;

        $stack4 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer FOREGROUND>;

        if layer != $stack4 goto label1;

        $stack12 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack14 = interfaceinvoke $stack12.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack13);

        result = (java.util.Collection) $stack14;

        goto label2;

     label1:
        $stack5 = <org.jfree.chart.ui.Layer: org.jfree.chart.ui.Layer BACKGROUND>;

        if layer != $stack5 goto label2;

        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack10 = interfaceinvoke $stack8.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack9);

        result = (java.util.Collection) $stack10;

     label2:
        if result == null goto label3;

        result = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(result);

     label3:
        return result;
    }

    protected void drawHorizontalLine(java.awt.Graphics2D, java.awt.geom.Rectangle2D, double, java.awt.Stroke, java.awt.Paint)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.PlotOrientation $stack12, $stack13;
        org.jfree.data.Range $stack14;
        double value, yy, $stack19, $stack20;
        boolean $stack15;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack16;
        java.awt.geom.Line2D$Double $stack18;
        java.awt.Graphics2D g2;
        java.awt.Stroke stroke;
        java.awt.Paint paint;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        value := @parameter2: double;

        stroke := @parameter3: java.awt.Stroke;

        paint := @parameter4: java.awt.Paint;

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        $stack12 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack13 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack12 != $stack13 goto label1;

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

     label1:
        $stack14 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack15 = virtualinvoke $stack14.<org.jfree.data.Range: boolean contains(double)>(value);

        if $stack15 == 0 goto label2;

        $stack16 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        yy = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack16);

        $stack18 = new java.awt.geom.Line2D$Double;

        $stack19 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack20 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack18.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack19, yy, $stack20, yy);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(stroke);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack18);

     label2:
        return;
    }

    protected void drawDomainCrosshair(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation, double, org.jfree.chart.axis.ValueAxis, java.awt.Stroke, java.awt.Paint)
    {
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.data.Range $stack12;
        double value, $stack18, $stack19, $stack28, $stack29, xx;
        boolean $stack13;
        org.jfree.chart.plot.PlotOrientation orientation, $stack14;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack15, $stack25;
        java.awt.geom.Line2D$Double $stack17, $stack27, line;
        java.awt.Graphics2D g2;
        java.awt.RenderingHints$Key $stack20, $stack23, $stack24;
        java.lang.Object $stack22, xx#4;
        java.awt.Stroke stroke;
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        orientation := @parameter2: org.jfree.chart.plot.PlotOrientation;

        value := @parameter3: double;

        axis := @parameter4: org.jfree.chart.axis.ValueAxis;

        stroke := @parameter5: java.awt.Stroke;

        paint := @parameter6: java.awt.Paint;

        $stack12 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack13 = virtualinvoke $stack12.<org.jfree.data.Range: boolean contains(double)>(value);

        if $stack13 != 0 goto label1;

        return;

     label1:
        $stack14 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack14 goto label2;

        $stack25 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        xx = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack25);

        $stack27 = new java.awt.geom.Line2D$Double;

        $stack28 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack29 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack27.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, $stack28, xx, $stack29);

        line = $stack27;

        goto label3;

     label2:
        $stack15 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        xx = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack15);

        $stack17 = new java.awt.geom.Line2D$Double;

        $stack18 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack19 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack17.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack18, xx, $stack19, xx);

        line = $stack17;

     label3:
        $stack20 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        xx#4 = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack20);

        $stack23 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $stack22 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack23, $stack22);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(stroke);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

        $stack24 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack24, xx#4);

        return;
    }

    protected void drawVerticalLine(java.awt.Graphics2D, java.awt.geom.Rectangle2D, double, java.awt.Stroke, java.awt.Paint)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.PlotOrientation $stack12, $stack13;
        org.jfree.data.Range $stack14;
        double value, xx, $stack19, $stack20;
        boolean $stack15;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack16;
        java.awt.geom.Line2D$Double $stack18;
        java.awt.Graphics2D g2;
        java.awt.Stroke stroke;
        java.awt.Paint paint;
        org.jfree.chart.axis.ValueAxis axis;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        value := @parameter2: double;

        stroke := @parameter3: java.awt.Stroke;

        paint := @parameter4: java.awt.Paint;

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        $stack12 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack13 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack12 != $stack13 goto label1;

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

     label1:
        $stack14 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack15 = virtualinvoke $stack14.<org.jfree.data.Range: boolean contains(double)>(value);

        if $stack15 == 0 goto label2;

        $stack16 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        xx = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack16);

        $stack18 = new java.awt.geom.Line2D$Double;

        $stack19 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack20 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack18.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, $stack19, xx, $stack20);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(stroke);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack18);

     label2:
        return;
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation, double, org.jfree.chart.axis.ValueAxis, java.awt.Stroke, java.awt.Paint)
    {
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.data.Range $stack13;
        double value, $stack23, $stack24, $stack29, $stack30, xx;
        boolean $stack14;
        java.awt.Graphics2D g2;
        java.awt.RenderingHints$Key $stack15, $stack18, $stack25;
        java.lang.Object saved, $stack17;
        org.jfree.chart.plot.PlotOrientation orientation, $stack19;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack20, $stack26;
        java.awt.geom.Line2D$Double $stack22, $stack28, line;
        java.awt.Stroke stroke;
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        orientation := @parameter2: org.jfree.chart.plot.PlotOrientation;

        value := @parameter3: double;

        axis := @parameter4: org.jfree.chart.axis.ValueAxis;

        stroke := @parameter5: java.awt.Stroke;

        paint := @parameter6: java.awt.Paint;

        $stack13 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack14 = virtualinvoke $stack13.<org.jfree.data.Range: boolean contains(double)>(value);

        if $stack14 != 0 goto label1;

        return;

     label1:
        $stack15 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        saved = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack15);

        $stack18 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $stack17 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack18, $stack17);

        $stack19 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack19 goto label2;

        $stack26 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        xx = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack26);

        $stack28 = new java.awt.geom.Line2D$Double;

        $stack29 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack30 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack28.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, $stack29, xx, $stack30);

        line = $stack28;

        goto label3;

     label2:
        $stack20 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        xx = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(value, dataArea, $stack20);

        $stack22 = new java.awt.geom.Line2D$Double;

        $stack23 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack24 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack22.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack23, xx, $stack24, xx);

        line = $stack22;

     label3:
        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(stroke);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

        $stack25 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack25, saved);

        return;
    }

    public void handleClick(int, int, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Rectangle2D dataArea, $stack16, $stack20;
        int x, y;
        double $stack10, $stack11, $stack15, vvalue, $stack19, hvalue;
        boolean $stack12;
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.ValueAxis xaxis, hvalue#2;
        org.jfree.chart.ui.RectangleEdge $stack17, $stack21;

        this := @this: org.jfree.chart.plot.XYPlot;

        x := @parameter0: int;

        y := @parameter1: int;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        dataArea = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack11 = (double) x;

        $stack10 = (double) y;

        $stack12 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: boolean contains(double,double)>($stack11, $stack10);

        if $stack12 == 0 goto label2;

        xaxis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis()>();

        if xaxis == null goto label1;

        $stack19 = (double) x;

        $stack20 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack21 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        hvalue = virtualinvoke xaxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack19, $stack20, $stack21);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDomainCrosshairValue(double)>(hvalue);

     label1:
        hvalue#2 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis()>();

        if hvalue#2 == null goto label2;

        $stack15 = (double) y;

        $stack16 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack17 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        vvalue = virtualinvoke hvalue#2.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack15, $stack16, $stack17);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRangeCrosshairValue(double)>(vvalue);

     label2:
        return;
    }

    private java.util.List getDatasetsMappedToDomainAxis(java.lang.Integer)
    {
        java.lang.Integer axisIndex, $stack15, $stack18;
        java.util.ArrayList $stack8;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack9, $stack17;
        java.util.Set $stack10;
        java.util.Iterator l3;
        boolean $stack12, $stack20, $stack25;
        java.lang.Object $stack13, $stack14, $stack19, $stack22, $stack26;
        java.util.Map$Entry entry;
        int index;
        java.util.List mappedAxes;
        java.lang.Number $stack24;

        this := @this: org.jfree.chart.plot.XYPlot;

        axisIndex := @parameter0: java.lang.Integer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(axisIndex, "axisIndex");

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        $stack9 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label4;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack13;

        $stack14 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack15 = (java.lang.Integer) $stack14;

        index = virtualinvoke $stack15.<java.lang.Integer: int intValue()>();

        $stack17 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap>;

        $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack19 = interfaceinvoke $stack17.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack18);

        mappedAxes = (java.util.List) $stack19;

        if mappedAxes != null goto label2;

        $stack24 = <org.jfree.chart.plot.XYPlot: java.lang.Number ZERO>;

        $stack25 = virtualinvoke axisIndex.<java.lang.Integer: boolean equals(java.lang.Object)>($stack24);

        if $stack25 == 0 goto label3;

        $stack26 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>($stack26);

        goto label3;

     label2:
        $stack20 = interfaceinvoke mappedAxes.<java.util.List: boolean contains(java.lang.Object)>(axisIndex);

        if $stack20 == 0 goto label3;

        $stack22 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>($stack22);

     label3:
        goto label1;

     label4:
        return $stack8;
    }

    private java.util.List getDatasetsMappedToRangeAxis(java.lang.Integer)
    {
        java.lang.Integer axisIndex, $stack15, $stack18;
        java.util.ArrayList $stack8;
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack9, $stack17;
        java.util.Set $stack10;
        java.util.Iterator l3;
        boolean $stack12, $stack20, $stack25;
        java.lang.Object $stack13, $stack14, $stack19, $stack22, $stack26;
        java.util.Map$Entry entry;
        int index;
        java.util.List mappedAxes;
        java.lang.Number $stack24;

        this := @this: org.jfree.chart.plot.XYPlot;

        axisIndex := @parameter0: java.lang.Integer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(axisIndex, "axisIndex");

        $stack8 = new java.util.ArrayList;

        specialinvoke $stack8.<java.util.ArrayList: void <init>()>();

        $stack9 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $stack10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label4;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack13;

        $stack14 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack15 = (java.lang.Integer) $stack14;

        index = virtualinvoke $stack15.<java.lang.Integer: int intValue()>();

        $stack17 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap>;

        $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(index);

        $stack19 = interfaceinvoke $stack17.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack18);

        mappedAxes = (java.util.List) $stack19;

        if mappedAxes != null goto label2;

        $stack24 = <org.jfree.chart.plot.XYPlot: java.lang.Number ZERO>;

        $stack25 = virtualinvoke axisIndex.<java.lang.Integer: boolean equals(java.lang.Object)>($stack24);

        if $stack25 == 0 goto label3;

        $stack26 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>($stack26);

        goto label3;

     label2:
        $stack20 = interfaceinvoke mappedAxes.<java.util.List: boolean contains(java.lang.Object)>(axisIndex);

        if $stack20 == 0 goto label3;

        $stack22 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>($stack22);

     label3:
        goto label1;

     label4:
        return $stack8;
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.XYPlot this, p;
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.chart.plot.Plot parent;
        boolean $stack7;
        int result;

        this := @this: org.jfree.chart.plot.XYPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        result = specialinvoke this.<org.jfree.chart.plot.XYPlot: int findDomainAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        if result >= 0 goto label1;

        parent = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.Plot getParent()>();

        $stack7 = parent instanceof org.jfree.chart.plot.XYPlot;

        if $stack7 == 0 goto label1;

        p = (org.jfree.chart.plot.XYPlot) parent;

        result = virtualinvoke p.<org.jfree.chart.plot.XYPlot: int getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

     label1:
        return result;
    }

    private int findDomainAxisIndex(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack4;
        java.util.Set $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8, $stack9, $stack11;
        java.util.Map$Entry entry;
        org.jfree.chart.axis.ValueAxis axis;
        java.lang.Integer $stack12;
        int $stack13;

        this := @this: org.jfree.chart.plot.XYPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack8;

        $stack9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack9 != axis goto label2;

        $stack11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        return $stack13;

     label2:
        goto label1;

     label3:
        return -1;
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.XYPlot this, p;
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.chart.plot.Plot parent;
        boolean $stack7;
        int result;

        this := @this: org.jfree.chart.plot.XYPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        result = specialinvoke this.<org.jfree.chart.plot.XYPlot: int findRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        if result >= 0 goto label1;

        parent = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.Plot getParent()>();

        $stack7 = parent instanceof org.jfree.chart.plot.XYPlot;

        if $stack7 == 0 goto label1;

        p = (org.jfree.chart.plot.XYPlot) parent;

        result = virtualinvoke p.<org.jfree.chart.plot.XYPlot: int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

     label1:
        return result;
    }

    private int findRangeAxisIndex(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack4;
        java.util.Set $stack5;
        java.util.Iterator l2;
        boolean $stack7;
        java.lang.Object $stack8, $stack9, $stack11;
        java.util.Map$Entry entry;
        org.jfree.chart.axis.ValueAxis axis;
        java.lang.Integer $stack12;
        int $stack13;

        this := @this: org.jfree.chart.plot.XYPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label3;

        $stack8 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack8;

        $stack9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $stack9 != axis goto label2;

        $stack11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        return $stack13;

     label2:
        goto label1;

     label3:
        return -1;
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)
    {
        java.util.ArrayList $stack13, $stack14;
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.ValueAxis axis;
        int domainIndex, rangeIndex#11;
        boolean $stack20, $stack22, $stack35, $stack37, $stack53, $stack55, $stack66, $stack68, isDomainAxis, $stack18;
        java.lang.Object $stack21, $stack28, $stack36, $stack54, $stack67;
        org.jfree.data.Range $stack24, $stack26, $stack31, $stack40, $stack43, $stack45, result;
        org.jfree.chart.renderer.xy.XYItemRenderer r;
        java.util.Collection $stack33;
        java.util.Iterator l11, rangeIndex, 'annotation';
        org.jfree.chart.annotations.XYAnnotation 'annotation';
        java.lang.Integer $stack47, $stack58;
        java.util.List $stack48, $stack51, $stack59, $stack64;
        org.jfree.data.xy.XYDataset annotation#27;
        org.jfree.chart.annotations.XYAnnotationBoundsInfo annotation#32;

        this := @this: org.jfree.chart.plot.XYPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        result = null;

        $stack13 = new java.util.ArrayList;

        specialinvoke $stack13.<java.util.ArrayList: void <init>()>();

        $stack14 = new java.util.ArrayList;

        specialinvoke $stack14.<java.util.ArrayList: void <init>()>();

        isDomainAxis = 1;

        domainIndex = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        if domainIndex < 0 goto label03;

        isDomainAxis = 1;

        $stack58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(domainIndex);

        $stack59 = specialinvoke this.<org.jfree.chart.plot.XYPlot: java.util.List getDatasetsMappedToDomainAxis(java.lang.Integer)>($stack58);

        interfaceinvoke $stack13.<java.util.List: boolean addAll(java.util.Collection)>($stack59);

        if domainIndex != 0 goto label03;

        $stack64 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        rangeIndex = interfaceinvoke $stack64.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $stack66 = interfaceinvoke rangeIndex.<java.util.Iterator: boolean hasNext()>();

        if $stack66 == 0 goto label03;

        $stack67 = interfaceinvoke rangeIndex.<java.util.Iterator: java.lang.Object next()>();

        'annotation' = (org.jfree.chart.annotations.XYAnnotation) $stack67;

        $stack68 = 'annotation' instanceof org.jfree.chart.annotations.XYAnnotationBoundsInfo;

        if $stack68 == 0 goto label02;

        interfaceinvoke $stack14.<java.util.List: boolean add(java.lang.Object)>('annotation');

     label02:
        goto label01;

     label03:
        rangeIndex#11 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)>(axis);

        if rangeIndex#11 < 0 goto label06;

        isDomainAxis = 0;

        $stack47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(rangeIndex#11);

        $stack48 = specialinvoke this.<org.jfree.chart.plot.XYPlot: java.util.List getDatasetsMappedToRangeAxis(java.lang.Integer)>($stack47);

        interfaceinvoke $stack13.<java.util.List: boolean addAll(java.util.Collection)>($stack48);

        if rangeIndex#11 != 0 goto label06;

        $stack51 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        'annotation' = interfaceinvoke $stack51.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $stack53 = interfaceinvoke 'annotation'.<java.util.Iterator: boolean hasNext()>();

        if $stack53 == 0 goto label06;

        $stack54 = interfaceinvoke 'annotation'.<java.util.Iterator: java.lang.Object next()>();

        'annotation' = (org.jfree.chart.annotations.XYAnnotation) $stack54;

        $stack55 = 'annotation' instanceof org.jfree.chart.annotations.XYAnnotationBoundsInfo;

        if $stack55 == 0 goto label05;

        interfaceinvoke $stack14.<java.util.List: boolean add(java.lang.Object)>('annotation');

     label05:
        goto label04;

     label06:
        'annotation' = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke 'annotation'.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label15;

        $stack28 = interfaceinvoke 'annotation'.<java.util.Iterator: java.lang.Object next()>();

        annotation#27 = (org.jfree.data.xy.XYDataset) $stack28;

        if annotation#27 == null goto label14;

        r = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRendererForDataset(org.jfree.data.xy.XYDataset)>(annotation#27);

        if isDomainAxis == 0 goto label09;

        if r == null goto label08;

        $stack45 = interfaceinvoke r.<org.jfree.chart.renderer.xy.XYItemRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>(annotation#27);

        result = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>(result, $stack45);

        goto label11;

     label08:
        $stack43 = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>(annotation#27);

        result = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>(result, $stack43);

        goto label11;

     label09:
        if r == null goto label10;

        $stack40 = interfaceinvoke r.<org.jfree.chart.renderer.xy.XYItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>(annotation#27);

        result = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>(result, $stack40);

        goto label11;

     label10:
        $stack31 = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>(annotation#27);

        result = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>(result, $stack31);

     label11:
        if r == null goto label14;

        $stack33 = interfaceinvoke r.<org.jfree.chart.renderer.xy.XYItemRenderer: java.util.Collection getAnnotations()>();

        l11 = interfaceinvoke $stack33.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $stack35 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>();

        if $stack35 == 0 goto label14;

        $stack36 = interfaceinvoke l11.<java.util.Iterator: java.lang.Object next()>();

        'annotation' = (org.jfree.chart.annotations.XYAnnotation) $stack36;

        $stack37 = 'annotation' instanceof org.jfree.chart.annotations.XYAnnotationBoundsInfo;

        if $stack37 == 0 goto label13;

        interfaceinvoke $stack14.<java.util.List: boolean add(java.lang.Object)>('annotation');

     label13:
        goto label12;

     label14:
        goto label07;

     label15:
        'annotation' = interfaceinvoke $stack14.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $stack20 = interfaceinvoke 'annotation'.<java.util.Iterator: boolean hasNext()>();

        if $stack20 == 0 goto label19;

        $stack21 = interfaceinvoke 'annotation'.<java.util.Iterator: java.lang.Object next()>();

        annotation#32 = (org.jfree.chart.annotations.XYAnnotationBoundsInfo) $stack21;

        $stack22 = interfaceinvoke annotation#32.<org.jfree.chart.annotations.XYAnnotationBoundsInfo: boolean getIncludeInDataBounds()>();

        if $stack22 == 0 goto label18;

        if isDomainAxis == 0 goto label17;

        $stack26 = interfaceinvoke annotation#32.<org.jfree.chart.annotations.XYAnnotationBoundsInfo: org.jfree.data.Range getXRange()>();

        result = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>(result, $stack26);

        goto label18;

     label17:
        $stack24 = interfaceinvoke annotation#32.<org.jfree.chart.annotations.XYAnnotationBoundsInfo: org.jfree.data.Range getYRange()>();

        result = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>(result, $stack24);

     label18:
        goto label16;

     label19:
        return result;
    }

    public void annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Plot $stack3, $stack5;
        org.jfree.chart.event.PlotChangeEvent $stack4;
        org.jfree.chart.event.AnnotationChangeEvent event;

        this := @this: org.jfree.chart.plot.XYPlot;

        event := @parameter0: org.jfree.chart.event.AnnotationChangeEvent;

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.Plot getParent()>();

        if $stack3 == null goto label1;

        $stack5 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.Plot getParent()>();

        virtualinvoke $stack5.<org.jfree.chart.plot.Plot: void annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)>(event);

        goto label2;

     label1:
        $stack4 = new org.jfree.chart.event.PlotChangeEvent;

        specialinvoke $stack4.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>($stack4);

     label2:
        return;
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.Plot $stack3, $stack6;
        org.jfree.chart.event.PlotChangeEvent $stack4;
        org.jfree.chart.event.ChartChangeEventType $stack5;
        org.jfree.data.general.DatasetChangeEvent event;

        this := @this: org.jfree.chart.plot.XYPlot;

        event := @parameter0: org.jfree.data.general.DatasetChangeEvent;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void configureDomainAxes()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void configureRangeAxes()>();

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.Plot getParent()>();

        if $stack3 == null goto label1;

        $stack6 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.Plot getParent()>();

        virtualinvoke $stack6.<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>(event);

        goto label2;

     label1:
        $stack4 = new org.jfree.chart.event.PlotChangeEvent;

        specialinvoke $stack4.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(this);

        $stack5 = <org.jfree.chart.event.ChartChangeEventType: org.jfree.chart.event.ChartChangeEventType DATASET_UPDATED>;

        virtualinvoke $stack4.<org.jfree.chart.event.PlotChangeEvent: void setType(org.jfree.chart.event.ChartChangeEventType)>($stack5);

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>($stack4);

     label2:
        return;
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent)
    {
        org.jfree.chart.event.RendererChangeEvent event;
        boolean $stack2;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        event := @parameter0: org.jfree.chart.event.RendererChangeEvent;

        $stack2 = virtualinvoke event.<org.jfree.chart.event.RendererChangeEvent: boolean getSeriesVisibilityChanged()>();

        if $stack2 == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void configureDomainAxes()>();

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void configureRangeAxes()>();

     label1:
        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isDomainCrosshairVisible()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairVisible>;

        return $stack1;
    }

    public void setDomainCrosshairVisible(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairVisible>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairVisible> = flag;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean isDomainCrosshairLockedOnData()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairLockedOnData>;

        return $stack1;
    }

    public void setDomainCrosshairLockedOnData(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairLockedOnData>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairLockedOnData> = flag;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public double getDomainCrosshairValue()
    {
        org.jfree.chart.plot.XYPlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: double domainCrosshairValue>;

        return $stack1;
    }

    public void setDomainCrosshairValue(double)
    {
        org.jfree.chart.plot.XYPlot this;
        double value;

        this := @this: org.jfree.chart.plot.XYPlot;

        value := @parameter0: double;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setDomainCrosshairValue(double,boolean)>(value, 1);

        return;
    }

    public void setDomainCrosshairValue(double, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        double value;
        boolean $stack4, notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        value := @parameter0: double;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.XYPlot: double domainCrosshairValue> = value;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isDomainCrosshairVisible()>();

        if $stack4 == 0 goto label1;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getDomainCrosshairStroke()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainCrosshairStroke>;

        return $stack1;
    }

    public void setDomainCrosshairStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainCrosshairStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getDomainCrosshairPaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainCrosshairPaint>;

        return $stack1;
    }

    public void setDomainCrosshairPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainCrosshairPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isRangeCrosshairVisible()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairVisible>;

        return $stack1;
    }

    public void setRangeCrosshairVisible(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairVisible>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairVisible> = flag;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean isRangeCrosshairLockedOnData()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairLockedOnData>;

        return $stack1;
    }

    public void setRangeCrosshairLockedOnData(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.plot.XYPlot;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairLockedOnData>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairLockedOnData> = flag;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public double getRangeCrosshairValue()
    {
        org.jfree.chart.plot.XYPlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: double rangeCrosshairValue>;

        return $stack1;
    }

    public void setRangeCrosshairValue(double)
    {
        org.jfree.chart.plot.XYPlot this;
        double value;

        this := @this: org.jfree.chart.plot.XYPlot;

        value := @parameter0: double;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setRangeCrosshairValue(double,boolean)>(value, 1);

        return;
    }

    public void setRangeCrosshairValue(double, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        double value;
        boolean $stack4, notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        value := @parameter0: double;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.XYPlot: double rangeCrosshairValue> = value;

        $stack4 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isRangeCrosshairVisible()>();

        if $stack4 == 0 goto label1;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getRangeCrosshairStroke()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeCrosshairStroke>;

        return $stack1;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeCrosshairStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeCrosshairPaint()
    {
        org.jfree.chart.plot.XYPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeCrosshairPaint>;

        return $stack1;
    }

    public void setRangeCrosshairPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeCrosshairPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisSpace $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        return $stack1;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisSpace space;

        this := @this: org.jfree.chart.plot.XYPlot;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)>(space, 1);

        return;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisSpace space;
        boolean notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace> = space;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisSpace $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        return $stack1;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisSpace space;

        this := @this: org.jfree.chart.plot.XYPlot;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)>(space, 1);

        return;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.axis.AxisSpace space;
        boolean notify;

        this := @this: org.jfree.chart.plot.XYPlot;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace> = space;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean isDomainPannable()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean domainPannable>;

        return $stack1;
    }

    public void setDomainPannable(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean pannable;

        this := @this: org.jfree.chart.plot.XYPlot;

        pannable := @parameter0: boolean;

        this.<org.jfree.chart.plot.XYPlot: boolean domainPannable> = pannable;

        return;
    }

    public boolean isRangePannable()
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: boolean rangePannable>;

        return $stack1;
    }

    public void setRangePannable(boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean pannable;

        this := @this: org.jfree.chart.plot.XYPlot;

        pannable := @parameter0: boolean;

        this.<org.jfree.chart.plot.XYPlot: boolean rangePannable> = pannable;

        return;
    }

    public void panDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack8, $stack11;
        int domainAxisCount, i;
        org.jfree.chart.axis.ValueAxis axis;
        double percent, $stack14;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.XYPlot;

        percent := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        $stack8 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isDomainPannable()>();

        if $stack8 != 0 goto label1;

        return;

     label1:
        domainAxisCount = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int getDomainAxisCount()>();

        i = 0;

     label2:
        if i >= domainAxisCount goto label7;

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getDomainAxis(int)>(i);

        if axis != null goto label3;

        goto label6;

     label3:
        $stack11 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        if $stack11 == 0 goto label4;

        $stack14 = neg percent;

        goto label5;

     label4:
        $stack14 = percent;

     label5:
        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void pan(double)>($stack14);

     label6:
        i = i + 1;

        goto label2;

     label7:
        return;
    }

    public void panRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.XYPlot this;
        boolean $stack8, $stack11;
        int rangeAxisCount, i;
        org.jfree.chart.axis.ValueAxis axis;
        double percent, $stack14;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.XYPlot;

        percent := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        $stack8 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: boolean isRangePannable()>();

        if $stack8 != 0 goto label1;

        return;

     label1:
        rangeAxisCount = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int getRangeAxisCount()>();

        i = 0;

     label2:
        if i >= rangeAxisCount goto label7;

        axis = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(i);

        if axis != null goto label3;

        goto label6;

     label3:
        $stack11 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        if $stack11 == 0 goto label4;

        $stack14 = neg percent;

        goto label5;

     label4:
        $stack14 = percent;

     label5:
        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void pan(double)>($stack14);

     label6:
        i = i + 1;

        goto label2;

     label7:
        return;
    }

    public void zoomDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.XYPlot this;
        double factor;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.XYPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>(factor, info, source, 0);

        return;
    }

    public void zoomDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack12;
        java.util.Collection $stack13;
        java.util.Iterator l6;
        java.lang.Object $stack16;
        org.jfree.chart.axis.ValueAxis xAxis;
        boolean useAnchor, $stack15;
        double factor, anchorX, sourceX;
        java.awt.geom.Point2D source;
        org.jfree.chart.plot.PlotOrientation $stack19, $stack20;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Rectangle2D $stack21;
        org.jfree.chart.ui.RectangleEdge $stack22;

        this := @this: org.jfree.chart.plot.XYPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        useAnchor := @parameter3: boolean;

        $stack12 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack13 = interfaceinvoke $stack12.<java.util.Map: java.util.Collection values()>();

        l6 = interfaceinvoke $stack13.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack15 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label6;

        $stack16 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        xAxis = (org.jfree.chart.axis.ValueAxis) $stack16;

        if xAxis != null goto label2;

        goto label1;

     label2:
        if useAnchor == 0 goto label4;

        sourceX = virtualinvoke source.<java.awt.geom.Point2D: double getX()>();

        $stack20 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack19 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack20 != $stack19 goto label3;

        sourceX = virtualinvoke source.<java.awt.geom.Point2D: double getY()>();

     label3:
        $stack21 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack22 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        anchorX = virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(sourceX, $stack21, $stack22);

        virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: void resizeRange2(double,double)>(factor, anchorX);

        goto label5;

     label4:
        virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: void resizeRange(double)>(factor);

     label5:
        goto label1;

     label6:
        return;
    }

    public void zoomDomainAxes(double, double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack9;
        java.util.Collection $stack10;
        java.util.Iterator l7;
        boolean $stack12;
        java.lang.Object $stack13;
        org.jfree.chart.axis.ValueAxis xAxis;
        double lowerPercent, upperPercent;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.XYPlot;

        lowerPercent := @parameter0: double;

        upperPercent := @parameter1: double;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter3: java.awt.geom.Point2D;

        $stack9 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Collection values()>();

        l7 = interfaceinvoke $stack10.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label3;

        $stack13 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        xAxis = (org.jfree.chart.axis.ValueAxis) $stack13;

        if xAxis == null goto label2;

        virtualinvoke xAxis.<org.jfree.chart.axis.ValueAxis: void zoomRange(double,double)>(lowerPercent, upperPercent);

     label2:
        goto label1;

     label3:
        return;
    }

    public void zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.XYPlot this;
        double factor;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.XYPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>(factor, info, source, 0);

        return;
    }

    public void zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D, boolean)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack12;
        java.util.Collection $stack13;
        java.util.Iterator l6;
        java.lang.Object $stack16;
        org.jfree.chart.axis.ValueAxis yAxis;
        boolean useAnchor, $stack15;
        double factor, anchorY, sourceY;
        java.awt.geom.Point2D source;
        org.jfree.chart.plot.PlotOrientation $stack19, $stack20;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Rectangle2D $stack21;
        org.jfree.chart.ui.RectangleEdge $stack22;

        this := @this: org.jfree.chart.plot.XYPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        useAnchor := @parameter3: boolean;

        $stack12 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack13 = interfaceinvoke $stack12.<java.util.Map: java.util.Collection values()>();

        l6 = interfaceinvoke $stack13.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack15 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack15 == 0 goto label6;

        $stack16 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        yAxis = (org.jfree.chart.axis.ValueAxis) $stack16;

        if yAxis != null goto label2;

        goto label1;

     label2:
        if useAnchor == 0 goto label4;

        sourceY = virtualinvoke source.<java.awt.geom.Point2D: double getY()>();

        $stack20 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack19 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack20 != $stack19 goto label3;

        sourceY = virtualinvoke source.<java.awt.geom.Point2D: double getX()>();

     label3:
        $stack21 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack22 = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        anchorY = virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(sourceY, $stack21, $stack22);

        virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: void resizeRange2(double,double)>(factor, anchorY);

        goto label5;

     label4:
        virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: void resizeRange(double)>(factor);

     label5:
        goto label1;

     label6:
        return;
    }

    public void zoomRangeAxes(double, double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.XYPlot this;
        java.util.Map $stack9;
        java.util.Collection $stack10;
        java.util.Iterator l7;
        boolean $stack12;
        java.lang.Object $stack13;
        org.jfree.chart.axis.ValueAxis yAxis;
        double lowerPercent, upperPercent;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.XYPlot;

        lowerPercent := @parameter0: double;

        upperPercent := @parameter1: double;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter3: java.awt.geom.Point2D;

        $stack9 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Collection values()>();

        l7 = interfaceinvoke $stack10.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label3;

        $stack13 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        yAxis = (org.jfree.chart.axis.ValueAxis) $stack13;

        if yAxis == null goto label2;

        virtualinvoke yAxis.<org.jfree.chart.axis.ValueAxis: void zoomRange(double,double)>(lowerPercent, upperPercent);

     label2:
        goto label1;

     label3:
        return;
    }

    public boolean isDomainZoomable()
    {
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        return 1;
    }

    public boolean isRangeZoomable()
    {
        org.jfree.chart.plot.XYPlot this;

        this := @this: org.jfree.chart.plot.XYPlot;

        return 1;
    }

    public int getSeriesCount()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.data.xy.XYDataset dataset;
        int result;

        this := @this: org.jfree.chart.plot.XYPlot;

        result = 0;

        dataset = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.data.xy.XYDataset getDataset()>();

        if dataset == null goto label1;

        result = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getSeriesCount()>();

     label1:
        return result;
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.LegendItemCollection $stack1;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack1 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        return $stack1;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection)
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.LegendItemCollection items;

        this := @this: org.jfree.chart.plot.XYPlot;

        items := @parameter0: org.jfree.chart.LegendItemCollection;

        this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems> = items;

        virtualinvoke this.<org.jfree.chart.plot.XYPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.LegendItemCollection getLegendItems()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.LegendItemCollection $stack9, $stack10, $stack27;
        java.util.Map $stack11;
        java.util.Collection $stack12;
        java.util.Iterator l2;
        java.lang.Object $stack15;
        org.jfree.data.xy.XYDataset dataset;
        int datasetIndex, seriesCount, i;
        boolean $stack20, $stack23, $stack14;
        org.jfree.chart.LegendItem item;
        org.jfree.chart.renderer.xy.XYItemRenderer renderer;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack9 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        if $stack9 == null goto label1;

        $stack27 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        return $stack27;

     label1:
        $stack10 = new org.jfree.chart.LegendItemCollection;

        specialinvoke $stack10.<org.jfree.chart.LegendItemCollection: void <init>()>();

        $stack11 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack12 = interfaceinvoke $stack11.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack12.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $stack14 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack14 == 0 goto label8;

        $stack15 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        dataset = (org.jfree.data.xy.XYDataset) $stack15;

        if dataset != null goto label3;

        goto label2;

     label3:
        datasetIndex = virtualinvoke this.<org.jfree.chart.plot.XYPlot: int indexOf(org.jfree.data.xy.XYDataset)>(dataset);

        renderer = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)>(datasetIndex);

        if renderer != null goto label4;

        renderer = virtualinvoke this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)>(0);

     label4:
        if renderer == null goto label7;

        seriesCount = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getSeriesCount()>();

        i = 0;

     label5:
        if i >= seriesCount goto label7;

        $stack20 = interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: boolean isSeriesVisible(int)>(i);

        if $stack20 == 0 goto label6;

        $stack23 = interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: boolean isSeriesVisibleInLegend(int)>(i);

        if $stack23 == 0 goto label6;

        item = interfaceinvoke renderer.<org.jfree.chart.renderer.xy.XYItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>(datasetIndex, i);

        if item == null goto label6;

        virtualinvoke $stack10.<org.jfree.chart.LegendItemCollection: void add(org.jfree.chart.LegendItem)>(item);

     label6:
        i = i + 1;

        goto label5;

     label7:
        goto label2;

     label8:
        return $stack10;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.plot.XYPlot this, that;
        boolean $stack4, $stack11, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack34, $stack35, $stack36, $stack37, $stack43, $stack46, $stack49, $stack52, $stack55, $stack58, $stack61, $stack64, $stack67, $stack70, $stack73, $stack76, $stack79, $stack82, $stack85, $stack88, $stack91, $stack94, $stack97, $stack100, $stack103, $stack106, $stack109, $stack112, $stack115, $stack118, $stack121, $stack124, $stack127, $stack130, $stack133, $stack136, $stack139, $stack142, $stack145, $stack148, $stack149, $stack154;
        int $stack5, $stack6, i;
        org.jfree.chart.plot.PlotOrientation $stack7, $stack8;
        java.util.Map $stack9, $stack10, $stack12, $stack13, $stack44, $stack45, $stack47, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack107, $stack108, $stack110, $stack111, $stack113, $stack114, $stack116, $stack117, $stack119, $stack120, $stack122, $stack123, $stack125, $stack126, $stack128, $stack129;
        double $stack31, $stack32, $stack38, $stack39;
        byte $stack33, $stack40;
        org.jfree.chart.ui.RectangleInsets $stack41, $stack42;
        java.awt.Stroke $stack59, $stack60, $stack65, $stack66, $stack71, $stack72, $stack77, $stack78, $stack86, $stack87, $stack92, $stack93, $stack95, $stack96, $stack101, $stack102;
        java.awt.Paint $stack62, $stack63, $stack68, $stack69, $stack74, $stack75, $stack80, $stack81, $stack83, $stack84, $stack89, $stack90, $stack98, $stack99, $stack104, $stack105, $stack137, $stack138, $stack140, $stack141, $stack152, $stack153;
        java.util.List $stack131, $stack132;
        org.jfree.chart.LegendItemCollection $stack134, $stack135;
        java.awt.geom.Point2D $stack143, $stack144;
        org.jfree.chart.util.ShadowGenerator $stack146, $stack147;
        java.awt.Paint[] $stack150, $stack151;

        this := @this: org.jfree.chart.plot.XYPlot;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack4 = obj instanceof org.jfree.chart.plot.XYPlot;

        if $stack4 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.plot.XYPlot) obj;

        $stack6 = this.<org.jfree.chart.plot.XYPlot: int weight>;

        $stack5 = that.<org.jfree.chart.plot.XYPlot: int weight>;

        if $stack6 == $stack5 goto label03;

        return 0;

     label03:
        $stack8 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack7 = that.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        if $stack8 == $stack7 goto label04;

        return 0;

     label04:
        $stack10 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack9 = that.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack11 = interfaceinvoke $stack10.<java.util.Map: boolean equals(java.lang.Object)>($stack9);

        if $stack11 != 0 goto label05;

        return 0;

     label05:
        $stack13 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations>;

        $stack12 = that.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: boolean equals(java.lang.Object)>($stack12);

        if $stack14 != 0 goto label06;

        return 0;

     label06:
        $stack16 = this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairLockedOnData>;

        $stack15 = that.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairLockedOnData>;

        if $stack16 == $stack15 goto label07;

        return 0;

     label07:
        $stack18 = this.<org.jfree.chart.plot.XYPlot: boolean domainGridlinesVisible>;

        $stack17 = that.<org.jfree.chart.plot.XYPlot: boolean domainGridlinesVisible>;

        if $stack18 == $stack17 goto label08;

        return 0;

     label08:
        $stack20 = this.<org.jfree.chart.plot.XYPlot: boolean rangeGridlinesVisible>;

        $stack19 = that.<org.jfree.chart.plot.XYPlot: boolean rangeGridlinesVisible>;

        if $stack20 == $stack19 goto label09;

        return 0;

     label09:
        $stack22 = this.<org.jfree.chart.plot.XYPlot: boolean domainMinorGridlinesVisible>;

        $stack21 = that.<org.jfree.chart.plot.XYPlot: boolean domainMinorGridlinesVisible>;

        if $stack22 == $stack21 goto label10;

        return 0;

     label10:
        $stack24 = this.<org.jfree.chart.plot.XYPlot: boolean rangeMinorGridlinesVisible>;

        $stack23 = that.<org.jfree.chart.plot.XYPlot: boolean rangeMinorGridlinesVisible>;

        if $stack24 == $stack23 goto label11;

        return 0;

     label11:
        $stack26 = this.<org.jfree.chart.plot.XYPlot: boolean domainZeroBaselineVisible>;

        $stack25 = that.<org.jfree.chart.plot.XYPlot: boolean domainZeroBaselineVisible>;

        if $stack26 == $stack25 goto label12;

        return 0;

     label12:
        $stack28 = this.<org.jfree.chart.plot.XYPlot: boolean rangeZeroBaselineVisible>;

        $stack27 = that.<org.jfree.chart.plot.XYPlot: boolean rangeZeroBaselineVisible>;

        if $stack28 == $stack27 goto label13;

        return 0;

     label13:
        $stack30 = this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairVisible>;

        $stack29 = that.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairVisible>;

        if $stack30 == $stack29 goto label14;

        return 0;

     label14:
        $stack32 = this.<org.jfree.chart.plot.XYPlot: double domainCrosshairValue>;

        $stack31 = that.<org.jfree.chart.plot.XYPlot: double domainCrosshairValue>;

        $stack33 = $stack32 cmpl $stack31;

        if $stack33 == 0 goto label15;

        return 0;

     label15:
        $stack35 = this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairLockedOnData>;

        $stack34 = that.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairLockedOnData>;

        if $stack35 == $stack34 goto label16;

        return 0;

     label16:
        $stack37 = this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairVisible>;

        $stack36 = that.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairVisible>;

        if $stack37 == $stack36 goto label17;

        return 0;

     label17:
        $stack39 = this.<org.jfree.chart.plot.XYPlot: double rangeCrosshairValue>;

        $stack38 = that.<org.jfree.chart.plot.XYPlot: double rangeCrosshairValue>;

        $stack40 = $stack39 cmpl $stack38;

        if $stack40 == 0 goto label18;

        return 0;

     label18:
        $stack42 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack41 = that.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack43 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack42, $stack41);

        if $stack43 != 0 goto label19;

        return 0;

     label19:
        $stack45 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack44 = that.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack46 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack45, $stack44);

        if $stack46 != 0 goto label20;

        return 0;

     label20:
        $stack48 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack47 = that.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack49 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack48, $stack47);

        if $stack49 != 0 goto label21;

        return 0;

     label21:
        $stack51 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations>;

        $stack50 = that.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations>;

        $stack52 = interfaceinvoke $stack51.<java.util.Map: boolean equals(java.lang.Object)>($stack50);

        if $stack52 != 0 goto label22;

        return 0;

     label22:
        $stack54 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap>;

        $stack53 = that.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap>;

        $stack55 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack54, $stack53);

        if $stack55 != 0 goto label23;

        return 0;

     label23:
        $stack57 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap>;

        $stack56 = that.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap>;

        $stack58 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack57, $stack56);

        if $stack58 != 0 goto label24;

        return 0;

     label24:
        $stack60 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainGridlineStroke>;

        $stack59 = that.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainGridlineStroke>;

        $stack61 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack60, $stack59);

        if $stack61 != 0 goto label25;

        return 0;

     label25:
        $stack63 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainGridlinePaint>;

        $stack62 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainGridlinePaint>;

        $stack64 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack63, $stack62);

        if $stack64 != 0 goto label26;

        return 0;

     label26:
        $stack66 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeGridlineStroke>;

        $stack65 = that.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeGridlineStroke>;

        $stack67 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack66, $stack65);

        if $stack67 != 0 goto label27;

        return 0;

     label27:
        $stack69 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeGridlinePaint>;

        $stack68 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeGridlinePaint>;

        $stack70 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack69, $stack68);

        if $stack70 != 0 goto label28;

        return 0;

     label28:
        $stack72 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainMinorGridlineStroke>;

        $stack71 = that.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainMinorGridlineStroke>;

        $stack73 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack72, $stack71);

        if $stack73 != 0 goto label29;

        return 0;

     label29:
        $stack75 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainMinorGridlinePaint>;

        $stack74 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainMinorGridlinePaint>;

        $stack76 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack75, $stack74);

        if $stack76 != 0 goto label30;

        return 0;

     label30:
        $stack78 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        $stack77 = that.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        $stack79 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack78, $stack77);

        if $stack79 != 0 goto label31;

        return 0;

     label31:
        $stack81 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeMinorGridlinePaint>;

        $stack80 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeMinorGridlinePaint>;

        $stack82 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack81, $stack80);

        if $stack82 != 0 goto label32;

        return 0;

     label32:
        $stack84 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainZeroBaselinePaint>;

        $stack83 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainZeroBaselinePaint>;

        $stack85 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack84, $stack83);

        if $stack85 != 0 goto label33;

        return 0;

     label33:
        $stack87 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainZeroBaselineStroke>;

        $stack86 = that.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainZeroBaselineStroke>;

        $stack88 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack87, $stack86);

        if $stack88 != 0 goto label34;

        return 0;

     label34:
        $stack90 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeZeroBaselinePaint>;

        $stack89 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeZeroBaselinePaint>;

        $stack91 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack90, $stack89);

        if $stack91 != 0 goto label35;

        return 0;

     label35:
        $stack93 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        $stack92 = that.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        $stack94 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack93, $stack92);

        if $stack94 != 0 goto label36;

        return 0;

     label36:
        $stack96 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainCrosshairStroke>;

        $stack95 = that.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainCrosshairStroke>;

        $stack97 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack96, $stack95);

        if $stack97 != 0 goto label37;

        return 0;

     label37:
        $stack99 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainCrosshairPaint>;

        $stack98 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainCrosshairPaint>;

        $stack100 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack99, $stack98);

        if $stack100 != 0 goto label38;

        return 0;

     label38:
        $stack102 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeCrosshairStroke>;

        $stack101 = that.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeCrosshairStroke>;

        $stack103 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack102, $stack101);

        if $stack103 != 0 goto label39;

        return 0;

     label39:
        $stack105 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeCrosshairPaint>;

        $stack104 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeCrosshairPaint>;

        $stack106 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack105, $stack104);

        if $stack106 != 0 goto label40;

        return 0;

     label40:
        $stack108 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack107 = that.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack109 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack108, $stack107);

        if $stack109 != 0 goto label41;

        return 0;

     label41:
        $stack111 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack110 = that.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack112 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack111, $stack110);

        if $stack112 != 0 goto label42;

        return 0;

     label42:
        $stack114 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack113 = that.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack115 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack114, $stack113);

        if $stack115 != 0 goto label43;

        return 0;

     label43:
        $stack117 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack116 = that.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack118 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack117, $stack116);

        if $stack118 != 0 goto label44;

        return 0;

     label44:
        $stack120 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack119 = that.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack121 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack120, $stack119);

        if $stack121 != 0 goto label45;

        return 0;

     label45:
        $stack123 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack122 = that.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack124 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack123, $stack122);

        if $stack124 != 0 goto label46;

        return 0;

     label46:
        $stack126 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack125 = that.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack127 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack126, $stack125);

        if $stack127 != 0 goto label47;

        return 0;

     label47:
        $stack129 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack128 = that.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack130 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack129, $stack128);

        if $stack130 != 0 goto label48;

        return 0;

     label48:
        $stack132 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        $stack131 = that.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        $stack133 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack132, $stack131);

        if $stack133 != 0 goto label49;

        return 0;

     label49:
        $stack135 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        $stack134 = that.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        $stack136 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack135, $stack134);

        if $stack136 != 0 goto label50;

        return 0;

     label50:
        $stack138 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainTickBandPaint>;

        $stack137 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainTickBandPaint>;

        $stack139 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack138, $stack137);

        if $stack139 != 0 goto label51;

        return 0;

     label51:
        $stack141 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeTickBandPaint>;

        $stack140 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeTickBandPaint>;

        $stack142 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack141, $stack140);

        if $stack142 != 0 goto label52;

        return 0;

     label52:
        $stack144 = this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin>;

        $stack143 = that.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin>;

        $stack145 = virtualinvoke $stack144.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>($stack143);

        if $stack145 != 0 goto label53;

        return 0;

     label53:
        i = 0;

     label54:
        if i >= 4 goto label56;

        $stack150 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack153 = $stack150[i];

        $stack151 = that.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack152 = $stack151[i];

        $stack154 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack153, $stack152);

        if $stack154 != 0 goto label55;

        return 0;

     label55:
        i = i + 1;

        goto label54;

     label56:
        $stack147 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack146 = that.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack148 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack147, $stack146);

        if $stack148 != 0 goto label57;

        return 0;

     label57:
        $stack149 = specialinvoke this.<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>(obj);

        return $stack149;
    }

    public int hashCode()
    {
        org.jfree.chart.plot.XYPlot this;
        org.jfree.chart.plot.PlotOrientation $stack2;
        int $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack21, $stack22, $stack24, $stack25, $stack27, $stack28, $stack30, $stack31, $stack33, $stack34, $stack36, $stack38, $stack39, $stack41, $stack42, $stack44, $stack46, $stack47, $stack49, $stack50, $stack52, $stack54, $stack55, $stack57, $stack58, $stack60, $stack62, $stack63, $stack65, $stack66, $stack68, $stack70, $stack71, $stack73, $stack74, $stack76, $stack78, $stack79, $stack81, $stack82, $stack84, $stack86, $stack92, $stack94, $stack95, $stack97, $stack98, $stack100, $stack102, $stack104, $stack110, $stack112, $stack113, $stack115, $stack116, $stack118, $stack120, $stack121, $stack123, $stack124, $stack126, $stack127, $stack129, $stack130, $stack132, $stack133, $stack135, $stack136, $stack138, $stack139, $stack140, $stack141, $stack143, $stack144, $stack146, $stack147, hash#2;
        org.jfree.chart.ui.RectangleInsets $stack5;
        java.util.Map $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack119, $stack122, $stack125, $stack128;
        java.awt.geom.Point2D $stack29;
        java.awt.Paint[] $stack32;
        boolean $stack35, $stack43, $stack51, $stack59, $stack67, $stack75, $stack83, $stack99, $stack101, $stack117;
        java.awt.Stroke $stack37, $stack45, $stack53, $stack61, $stack69, $stack77, $stack93, $stack111;
        java.awt.Paint $stack40, $stack48, $stack56, $stack64, $stack72, $stack80, $stack96, $stack114, $stack134, $stack137;
        double $stack85, $stack88, $stack103, $stack106;
        long $stack87, $stack89, $stack90, $stack91, $stack105, $stack107, $stack108, $stack109;
        java.util.List $stack131;
        org.jfree.chart.LegendItemCollection $stack142;
        org.jfree.chart.util.ShadowGenerator $stack145;
        byte $stack299, $stack286, $stack273, $stack260, $stack247, $stack234, $stack215, $stack210, $stack191, $stack148;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack3 = 43 * 7;

        $stack2 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack4 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack2);

        hash#2 = $stack3 + $stack4;

        $stack6 = 43 * hash#2;

        $stack5 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleInsets axisOffset>;

        $stack7 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack5);

        hash#2 = $stack6 + $stack7;

        $stack9 = 43 * hash#2;

        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack10 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack8);

        hash#2 = $stack9 + $stack10;

        $stack12 = 43 * hash#2;

        $stack11 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations>;

        $stack13 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack11);

        hash#2 = $stack12 + $stack13;

        $stack15 = 43 * hash#2;

        $stack14 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack16 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack14);

        hash#2 = $stack15 + $stack16;

        $stack18 = 43 * hash#2;

        $stack17 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations>;

        $stack19 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack17);

        hash#2 = $stack18 + $stack19;

        $stack21 = 43 * hash#2;

        $stack20 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack22 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack20);

        hash#2 = $stack21 + $stack22;

        $stack24 = 43 * hash#2;

        $stack23 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap>;

        $stack25 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack23);

        hash#2 = $stack24 + $stack25;

        $stack27 = 43 * hash#2;

        $stack26 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap>;

        $stack28 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack26);

        hash#2 = $stack27 + $stack28;

        $stack30 = 43 * hash#2;

        $stack29 = this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin>;

        $stack31 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack29);

        hash#2 = $stack30 + $stack31;

        $stack33 = 43 * hash#2;

        $stack32 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack34 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($stack32);

        hash#2 = $stack33 + $stack34;

        $stack36 = 43 * hash#2;

        $stack35 = this.<org.jfree.chart.plot.XYPlot: boolean domainGridlinesVisible>;

        if $stack35 == 0 goto label01;

        $stack299 = 1;

        goto label02;

     label01:
        $stack299 = 0;

     label02:
        hash#2 = $stack36 + $stack299;

        $stack38 = 43 * hash#2;

        $stack37 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainGridlineStroke>;

        $stack39 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack37);

        hash#2 = $stack38 + $stack39;

        $stack41 = 43 * hash#2;

        $stack40 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainGridlinePaint>;

        $stack42 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack40);

        hash#2 = $stack41 + $stack42;

        $stack44 = 43 * hash#2;

        $stack43 = this.<org.jfree.chart.plot.XYPlot: boolean rangeGridlinesVisible>;

        if $stack43 == 0 goto label03;

        $stack286 = 1;

        goto label04;

     label03:
        $stack286 = 0;

     label04:
        hash#2 = $stack44 + $stack286;

        $stack46 = 43 * hash#2;

        $stack45 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeGridlineStroke>;

        $stack47 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack45);

        hash#2 = $stack46 + $stack47;

        $stack49 = 43 * hash#2;

        $stack48 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeGridlinePaint>;

        $stack50 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack48);

        hash#2 = $stack49 + $stack50;

        $stack52 = 43 * hash#2;

        $stack51 = this.<org.jfree.chart.plot.XYPlot: boolean domainMinorGridlinesVisible>;

        if $stack51 == 0 goto label05;

        $stack273 = 1;

        goto label06;

     label05:
        $stack273 = 0;

     label06:
        hash#2 = $stack52 + $stack273;

        $stack54 = 43 * hash#2;

        $stack53 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainMinorGridlineStroke>;

        $stack55 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack53);

        hash#2 = $stack54 + $stack55;

        $stack57 = 43 * hash#2;

        $stack56 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainMinorGridlinePaint>;

        $stack58 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack56);

        hash#2 = $stack57 + $stack58;

        $stack60 = 43 * hash#2;

        $stack59 = this.<org.jfree.chart.plot.XYPlot: boolean rangeMinorGridlinesVisible>;

        if $stack59 == 0 goto label07;

        $stack260 = 1;

        goto label08;

     label07:
        $stack260 = 0;

     label08:
        hash#2 = $stack60 + $stack260;

        $stack62 = 43 * hash#2;

        $stack61 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        $stack63 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack61);

        hash#2 = $stack62 + $stack63;

        $stack65 = 43 * hash#2;

        $stack64 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeMinorGridlinePaint>;

        $stack66 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack64);

        hash#2 = $stack65 + $stack66;

        $stack68 = 43 * hash#2;

        $stack67 = this.<org.jfree.chart.plot.XYPlot: boolean domainZeroBaselineVisible>;

        if $stack67 == 0 goto label09;

        $stack247 = 1;

        goto label10;

     label09:
        $stack247 = 0;

     label10:
        hash#2 = $stack68 + $stack247;

        $stack70 = 43 * hash#2;

        $stack69 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainZeroBaselineStroke>;

        $stack71 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack69);

        hash#2 = $stack70 + $stack71;

        $stack73 = 43 * hash#2;

        $stack72 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainZeroBaselinePaint>;

        $stack74 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack72);

        hash#2 = $stack73 + $stack74;

        $stack76 = 43 * hash#2;

        $stack75 = this.<org.jfree.chart.plot.XYPlot: boolean rangeZeroBaselineVisible>;

        if $stack75 == 0 goto label11;

        $stack234 = 1;

        goto label12;

     label11:
        $stack234 = 0;

     label12:
        hash#2 = $stack76 + $stack234;

        $stack78 = 43 * hash#2;

        $stack77 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        $stack79 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack77);

        hash#2 = $stack78 + $stack79;

        $stack81 = 43 * hash#2;

        $stack80 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeZeroBaselinePaint>;

        $stack82 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack80);

        hash#2 = $stack81 + $stack82;

        $stack84 = 43 * hash#2;

        $stack83 = this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairVisible>;

        if $stack83 == 0 goto label13;

        $stack215 = 1;

        goto label14;

     label13:
        $stack215 = 0;

     label14:
        hash#2 = $stack84 + $stack215;

        $stack86 = 43 * hash#2;

        $stack85 = this.<org.jfree.chart.plot.XYPlot: double domainCrosshairValue>;

        $stack87 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack85);

        $stack88 = this.<org.jfree.chart.plot.XYPlot: double domainCrosshairValue>;

        $stack89 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack88);

        $stack90 = $stack89 >>> 32;

        $stack91 = $stack87 ^ $stack90;

        $stack92 = (int) $stack91;

        hash#2 = $stack86 + $stack92;

        $stack94 = 43 * hash#2;

        $stack93 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainCrosshairStroke>;

        $stack95 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack93);

        hash#2 = $stack94 + $stack95;

        $stack97 = 43 * hash#2;

        $stack96 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainCrosshairPaint>;

        $stack98 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack96);

        hash#2 = $stack97 + $stack98;

        $stack100 = 43 * hash#2;

        $stack99 = this.<org.jfree.chart.plot.XYPlot: boolean domainCrosshairLockedOnData>;

        if $stack99 == 0 goto label15;

        $stack210 = 1;

        goto label16;

     label15:
        $stack210 = 0;

     label16:
        hash#2 = $stack100 + $stack210;

        $stack102 = 43 * hash#2;

        $stack101 = this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairVisible>;

        if $stack101 == 0 goto label17;

        $stack191 = 1;

        goto label18;

     label17:
        $stack191 = 0;

     label18:
        hash#2 = $stack102 + $stack191;

        $stack104 = 43 * hash#2;

        $stack103 = this.<org.jfree.chart.plot.XYPlot: double rangeCrosshairValue>;

        $stack105 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack103);

        $stack106 = this.<org.jfree.chart.plot.XYPlot: double rangeCrosshairValue>;

        $stack107 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack106);

        $stack108 = $stack107 >>> 32;

        $stack109 = $stack105 ^ $stack108;

        $stack110 = (int) $stack109;

        hash#2 = $stack104 + $stack110;

        $stack112 = 43 * hash#2;

        $stack111 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeCrosshairStroke>;

        $stack113 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack111);

        hash#2 = $stack112 + $stack113;

        $stack115 = 43 * hash#2;

        $stack114 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeCrosshairPaint>;

        $stack116 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack114);

        hash#2 = $stack115 + $stack116;

        $stack118 = 43 * hash#2;

        $stack117 = this.<org.jfree.chart.plot.XYPlot: boolean rangeCrosshairLockedOnData>;

        if $stack117 == 0 goto label19;

        $stack148 = 1;

        goto label20;

     label19:
        $stack148 = 0;

     label20:
        hash#2 = $stack118 + $stack148;

        $stack120 = 43 * hash#2;

        $stack119 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack121 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack119);

        hash#2 = $stack120 + $stack121;

        $stack123 = 43 * hash#2;

        $stack122 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack124 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack122);

        hash#2 = $stack123 + $stack124;

        $stack126 = 43 * hash#2;

        $stack125 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack127 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack125);

        hash#2 = $stack126 + $stack127;

        $stack129 = 43 * hash#2;

        $stack128 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack130 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack128);

        hash#2 = $stack129 + $stack130;

        $stack132 = 43 * hash#2;

        $stack131 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        $stack133 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack131);

        hash#2 = $stack132 + $stack133;

        $stack135 = 43 * hash#2;

        $stack134 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainTickBandPaint>;

        $stack136 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack134);

        hash#2 = $stack135 + $stack136;

        $stack138 = 43 * hash#2;

        $stack137 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeTickBandPaint>;

        $stack139 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack137);

        hash#2 = $stack138 + $stack139;

        $stack141 = 43 * hash#2;

        $stack140 = this.<org.jfree.chart.plot.XYPlot: int weight>;

        hash#2 = $stack141 + $stack140;

        $stack143 = 43 * hash#2;

        $stack142 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        $stack144 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack142);

        hash#2 = $stack143 + $stack144;

        $stack146 = 43 * hash#2;

        $stack145 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack147 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack145);

        hash#2 = $stack146 + $stack147;

        return hash#2;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.plot.XYPlot this, clone;
        java.lang.Object $stack4, $stack40, $stack43, $stack46, $stack49, $stack57, $stack60, $stack63, $stack71, $stack75, $stack78, $stack80, $stack82, $stack84;
        java.util.Map $stack5, $stack6, $stack7, $stack11, $stack12, $stack13, $stack18, $stack20, $stack22, $stack23, $stack28, $stack29, $stack31, $stack32, $stack33, $stack34, $stack35, $stack39, $stack41, $stack42, $stack44, $stack45, $stack47, $stack48, $stack50;
        java.util.Collection $stack8, $stack14, $stack24, $stack36;
        boolean $stack10, $stack16, $stack26, $stack38;
        java.util.HashMap $stack17, $stack19, $stack21;
        java.util.TreeMap $stack27, $stack30;
        java.util.List $stack51, $stack52;
        org.jfree.chart.axis.AxisSpace $stack53, $stack54, $stack70, $stack72, $stack74, $stack76;
        org.jfree.chart.LegendItemCollection $stack55, $stack62, $stack64;
        java.awt.geom.Point2D $stack56, $stack58;
        java.awt.Paint[] $stack59, $stack61;
        java.util.Iterator l2;
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.data.xy.XYDataset axis#6;
        org.jfree.chart.renderer.xy.XYItemRenderer axis#8;

        this := @this: org.jfree.chart.plot.XYPlot;

        $stack4 = specialinvoke this.<org.jfree.chart.plot.Plot: java.lang.Object clone()>();

        clone = (org.jfree.chart.plot.XYPlot) $stack4;

        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack6 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack5);

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes> = $stack6;

        $stack7 = clone.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack8 = interfaceinvoke $stack7.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack8.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $stack10 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label03;

        $stack84 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack84;

        if axis == null goto label02;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(clone);

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(clone);

     label02:
        goto label01;

     label03:
        $stack11 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack12 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack11);

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes> = $stack12;

        $stack13 = clone.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack14.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $stack16 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label06;

        $stack82 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack82;

        if axis == null goto label05;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(clone);

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(clone);

     label05:
        goto label04;

     label06:
        $stack17 = new java.util.HashMap;

        $stack18 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations>;

        specialinvoke $stack17.<java.util.HashMap: void <init>(java.util.Map)>($stack18);

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxisLocations> = $stack17;

        $stack19 = new java.util.HashMap;

        $stack20 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations>;

        specialinvoke $stack19.<java.util.HashMap: void <init>(java.util.Map)>($stack20);

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxisLocations> = $stack19;

        $stack21 = new java.util.HashMap;

        $stack22 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        specialinvoke $stack21.<java.util.HashMap: void <init>(java.util.Map)>($stack22);

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map datasets> = $stack21;

        $stack23 = clone.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack24 = interfaceinvoke $stack23.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack24.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $stack26 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label09;

        $stack80 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        axis#6 = (org.jfree.data.xy.XYDataset) $stack80;

        if axis#6 == null goto label08;

        interfaceinvoke axis#6.<org.jfree.data.xy.XYDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(clone);

     label08:
        goto label07;

     label09:
        $stack27 = new java.util.TreeMap;

        specialinvoke $stack27.<java.util.TreeMap: void <init>()>();

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap> = $stack27;

        $stack29 = clone.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap>;

        $stack28 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToDomainAxesMap>;

        interfaceinvoke $stack29.<java.util.Map: void putAll(java.util.Map)>($stack28);

        $stack30 = new java.util.TreeMap;

        specialinvoke $stack30.<java.util.TreeMap: void <init>()>();

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap> = $stack30;

        $stack32 = clone.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap>;

        $stack31 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasetToRangeAxesMap>;

        interfaceinvoke $stack32.<java.util.Map: void putAll(java.util.Map)>($stack31);

        $stack33 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack34 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.Map cloneMapValues(java.util.Map)>($stack33);

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map renderers> = $stack34;

        $stack35 = clone.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack36 = interfaceinvoke $stack35.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $stack36.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $stack38 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack38 == 0 goto label12;

        $stack78 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        axis#8 = (org.jfree.chart.renderer.xy.XYItemRenderer) $stack78;

        if axis#8 == null goto label11;

        interfaceinvoke axis#8.<org.jfree.chart.renderer.xy.XYItemRenderer: void setPlot(org.jfree.chart.plot.XYPlot)>(clone);

        interfaceinvoke axis#8.<org.jfree.chart.renderer.xy.XYItemRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>(clone);

     label11:
        goto label10;

     label12:
        $stack39 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers>;

        $stack40 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack39);

        $stack41 = (java.util.Map) $stack40;

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundDomainMarkers> = $stack41;

        $stack42 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers>;

        $stack43 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack42);

        $stack44 = (java.util.Map) $stack43;

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundDomainMarkers> = $stack44;

        $stack45 = this.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers>;

        $stack46 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack45);

        $stack47 = (java.util.Map) $stack46;

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map foregroundRangeMarkers> = $stack47;

        $stack48 = this.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers>;

        $stack49 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack48);

        $stack50 = (java.util.Map) $stack49;

        clone.<org.jfree.chart.plot.XYPlot: java.util.Map backgroundRangeMarkers> = $stack50;

        $stack51 = this.<org.jfree.chart.plot.XYPlot: java.util.List annotations>;

        $stack52 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.List cloneList(java.util.List)>($stack51);

        clone.<org.jfree.chart.plot.XYPlot: java.util.List annotations> = $stack52;

        $stack53 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        if $stack53 == null goto label13;

        $stack74 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace>;

        $stack75 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack74);

        $stack76 = (org.jfree.chart.axis.AxisSpace) $stack75;

        clone.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace> = $stack76;

     label13:
        $stack54 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        if $stack54 == null goto label14;

        $stack70 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace>;

        $stack71 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack70);

        $stack72 = (org.jfree.chart.axis.AxisSpace) $stack71;

        clone.<org.jfree.chart.plot.XYPlot: org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace> = $stack72;

     label14:
        $stack55 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        if $stack55 == null goto label15;

        $stack62 = this.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems>;

        $stack63 = virtualinvoke $stack62.<org.jfree.chart.LegendItemCollection: java.lang.Object clone()>();

        $stack64 = (org.jfree.chart.LegendItemCollection) $stack63;

        clone.<org.jfree.chart.plot.XYPlot: org.jfree.chart.LegendItemCollection fixedLegendItems> = $stack64;

     label15:
        $stack56 = this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin>;

        $stack57 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack56);

        $stack58 = (java.awt.geom.Point2D) $stack57;

        clone.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin> = $stack58;

        $stack59 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack60 = virtualinvoke $stack59.<java.lang.Object: java.lang.Object clone()>();

        $stack61 = (java.awt.Paint[]) $stack60;

        clone.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint> = $stack61;

        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack20;
        java.awt.Paint $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack17, $stack18, $stack21, $stack23;
        java.awt.geom.Point2D $stack19;
        java.awt.Paint[] $stack22;
        int i;

        this := @this: org.jfree.chart.plot.XYPlot;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack3 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainGridlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainGridlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack4, stream);

        $stack5 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeGridlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack5, stream);

        $stack6 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeGridlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack6, stream);

        $stack7 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainMinorGridlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack7, stream);

        $stack8 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainMinorGridlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack8, stream);

        $stack9 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeMinorGridlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack9, stream);

        $stack10 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeMinorGridlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack10, stream);

        $stack11 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeZeroBaselineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack11, stream);

        $stack12 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeZeroBaselinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack12, stream);

        $stack13 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainCrosshairStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack13, stream);

        $stack14 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainCrosshairPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack14, stream);

        $stack15 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeCrosshairStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack15, stream);

        $stack16 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeCrosshairPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack16, stream);

        $stack17 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainTickBandPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack17, stream);

        $stack18 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeTickBandPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack18, stream);

        $stack19 = this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePoint2D(java.awt.geom.Point2D,java.io.ObjectOutputStream)>($stack19, stream);

        i = 0;

     label1:
        if i >= 4 goto label2;

        $stack22 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack23 = $stack22[i];

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack23, stream);

        i = i + 1;

        goto label1;

     label2:
        $stack20 = this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainZeroBaselineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack20, stream);

        $stack21 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainZeroBaselinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack21, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.plot.XYPlot this;
        java.awt.Stroke $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack22;
        java.awt.Paint $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack18, $stack19, $stack23, $stack49;
        java.awt.geom.Point2D $stack20;
        java.awt.Paint[] $stack21, $stack48;
        java.util.Map $stack24, $stack28, $stack32, $stack36;
        java.util.Collection $stack25, $stack29, $stack33, $stack37;
        boolean $stack27, $stack31, $stack35, $stack39;
        java.lang.Object $stack40, $stack42, $stack44, $stack46;
        int i;
        java.util.Iterator i#2;
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.data.xy.XYDataset axis#7;
        org.jfree.chart.renderer.xy.XYItemRenderer axis#9;

        this := @this: org.jfree.chart.plot.XYPlot;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainGridlineStroke> = $stack4;

        $stack5 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainGridlinePaint> = $stack5;

        $stack6 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeGridlineStroke> = $stack6;

        $stack7 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeGridlinePaint> = $stack7;

        $stack8 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainMinorGridlineStroke> = $stack8;

        $stack9 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainMinorGridlinePaint> = $stack9;

        $stack10 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeMinorGridlineStroke> = $stack10;

        $stack11 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeMinorGridlinePaint> = $stack11;

        $stack12 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeZeroBaselineStroke> = $stack12;

        $stack13 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeZeroBaselinePaint> = $stack13;

        $stack14 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainCrosshairStroke> = $stack14;

        $stack15 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainCrosshairPaint> = $stack15;

        $stack16 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke rangeCrosshairStroke> = $stack16;

        $stack17 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeCrosshairPaint> = $stack17;

        $stack18 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainTickBandPaint> = $stack18;

        $stack19 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint rangeTickBandPaint> = $stack19;

        $stack20 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.geom.Point2D readPoint2D(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.geom.Point2D quadrantOrigin> = $stack20;

        $stack21 = newarray (java.awt.Paint)[4];

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint> = $stack21;

        i = 0;

     label01:
        if i >= 4 goto label02;

        $stack48 = this.<org.jfree.chart.plot.XYPlot: java.awt.Paint[] quadrantPaint>;

        $stack49 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        $stack48[i] = $stack49;

        i = i + 1;

        goto label01;

     label02:
        $stack22 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Stroke domainZeroBaselineStroke> = $stack22;

        $stack23 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.XYPlot: java.awt.Paint domainZeroBaselinePaint> = $stack23;

        $stack24 = this.<org.jfree.chart.plot.XYPlot: java.util.Map domainAxes>;

        $stack25 = interfaceinvoke $stack24.<java.util.Map: java.util.Collection values()>();

        i#2 = interfaceinvoke $stack25.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $stack27 = interfaceinvoke i#2.<java.util.Iterator: boolean hasNext()>();

        if $stack27 == 0 goto label05;

        $stack46 = interfaceinvoke i#2.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack46;

        if axis == null goto label04;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label04:
        goto label03;

     label05:
        $stack28 = this.<org.jfree.chart.plot.XYPlot: java.util.Map rangeAxes>;

        $stack29 = interfaceinvoke $stack28.<java.util.Map: java.util.Collection values()>();

        i#2 = interfaceinvoke $stack29.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $stack31 = interfaceinvoke i#2.<java.util.Iterator: boolean hasNext()>();

        if $stack31 == 0 goto label08;

        $stack44 = interfaceinvoke i#2.<java.util.Iterator: java.lang.Object next()>();

        axis = (org.jfree.chart.axis.ValueAxis) $stack44;

        if axis == null goto label07;

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label07:
        goto label06;

     label08:
        $stack32 = this.<org.jfree.chart.plot.XYPlot: java.util.Map datasets>;

        $stack33 = interfaceinvoke $stack32.<java.util.Map: java.util.Collection values()>();

        i#2 = interfaceinvoke $stack33.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $stack35 = interfaceinvoke i#2.<java.util.Iterator: boolean hasNext()>();

        if $stack35 == 0 goto label11;

        $stack42 = interfaceinvoke i#2.<java.util.Iterator: java.lang.Object next()>();

        axis#7 = (org.jfree.data.xy.XYDataset) $stack42;

        if axis#7 == null goto label10;

        interfaceinvoke axis#7.<org.jfree.data.xy.XYDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label10:
        goto label09;

     label11:
        $stack36 = this.<org.jfree.chart.plot.XYPlot: java.util.Map renderers>;

        $stack37 = interfaceinvoke $stack36.<java.util.Map: java.util.Collection values()>();

        i#2 = interfaceinvoke $stack37.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $stack39 = interfaceinvoke i#2.<java.util.Iterator: boolean hasNext()>();

        if $stack39 == 0 goto label14;

        $stack40 = interfaceinvoke i#2.<java.util.Iterator: java.lang.Object next()>();

        axis#9 = (org.jfree.chart.renderer.xy.XYItemRenderer) $stack40;

        if axis#9 == null goto label13;

        interfaceinvoke axis#9.<org.jfree.chart.renderer.xy.XYItemRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>(this);

     label13:
        goto label12;

     label14:
        return;
    }

    static void <clinit>()
    {
        java.awt.BasicStroke $stack0;
        float[] $stack1;
        java.awt.Color $stack2, $stack4;
        java.awt.Stroke $stack3;
        java.util.ResourceBundle $stack5;

        <org.jfree.chart.plot.XYPlot: boolean DEFAULT_CROSSHAIR_VISIBLE> = 0;

        <org.jfree.chart.plot.XYPlot: long serialVersionUID> = 7044148245716569264L;

        $stack0 = new java.awt.BasicStroke;

        $stack1 = newarray (float)[2];

        $stack1[0] = 2.0F;

        $stack1[1] = 2.0F;

        specialinvoke $stack0.<java.awt.BasicStroke: void <init>(float,int,int,float,float[],float)>(0.5F, 0, 2, 0.0F, $stack1, 0.0F);

        <org.jfree.chart.plot.XYPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE> = $stack0;

        $stack2 = <java.awt.Color: java.awt.Color LIGHT_GRAY>;

        <org.jfree.chart.plot.XYPlot: java.awt.Paint DEFAULT_GRIDLINE_PAINT> = $stack2;

        $stack3 = <org.jfree.chart.plot.XYPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        <org.jfree.chart.plot.XYPlot: java.awt.Stroke DEFAULT_CROSSHAIR_STROKE> = $stack3;

        $stack4 = <java.awt.Color: java.awt.Color BLUE>;

        <org.jfree.chart.plot.XYPlot: java.awt.Paint DEFAULT_CROSSHAIR_PAINT> = $stack4;

        $stack5 = staticinvoke <org.jfree.chart.util.ResourceBundleWrapper: java.util.ResourceBundle getBundle(java.lang.String)>("org.jfree.chart.plot.LocalizationBundle");

        <org.jfree.chart.plot.XYPlot: java.util.ResourceBundle localizationResources> = $stack5;

        return;
    }
}
