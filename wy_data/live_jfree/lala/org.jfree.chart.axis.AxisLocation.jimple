public final enum class org.jfree.chart.axis.AxisLocation extends java.lang.Enum
{
    public static final enum org.jfree.chart.axis.AxisLocation TOP_OR_LEFT;
    public static final enum org.jfree.chart.axis.AxisLocation TOP_OR_RIGHT;
    public static final enum org.jfree.chart.axis.AxisLocation BOTTOM_OR_LEFT;
    public static final enum org.jfree.chart.axis.AxisLocation BOTTOM_OR_RIGHT;
    private static final org.jfree.chart.axis.AxisLocation[] $VALUES;

    public static org.jfree.chart.axis.AxisLocation[] values()
    {
        org.jfree.chart.axis.AxisLocation[] $stack0, $stack2;
        java.lang.Object $stack1;

        $stack0 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation[] $VALUES>;

        $stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (org.jfree.chart.axis.AxisLocation[]) $stack1;

        return $stack2;
    }

    public static org.jfree.chart.axis.AxisLocation valueOf(java.lang.String)
    {
        java.lang.String name;
        java.lang.Enum $stack1;
        org.jfree.chart.axis.AxisLocation $stack2;

        name := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/jfree/chart/axis/AxisLocation;", name);

        $stack2 = (org.jfree.chart.axis.AxisLocation) $stack1;

        return $stack2;
    }

    private void <init>(java.lang.String, int)
    {
        org.jfree.chart.axis.AxisLocation this;
        java.lang.String l1;
        int l2;

        this := @this: org.jfree.chart.axis.AxisLocation;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }

    public org.jfree.chart.axis.AxisLocation getOpposite()
    {
        org.jfree.chart.axis.AxisLocation this, $stack1;

        this := @this: org.jfree.chart.axis.AxisLocation;

        $stack1 = staticinvoke <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>(this);

        return $stack1;
    }

    public static org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)
    {
        org.jfree.chart.axis.AxisLocation location, $stack4, $stack5, $stack6, $stack7;
        int[] $stack1;
        int $stack2, $stack3;
        java.lang.IllegalStateException $stack8;

        location := @parameter0: org.jfree.chart.axis.AxisLocation;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(location, "location");

        $stack1 = <org.jfree.chart.axis.AxisLocation$1: int[] $SwitchMap$org$jfree$chart$axis$AxisLocation>;

        $stack2 = virtualinvoke location.<org.jfree.chart.axis.AxisLocation: int ordinal()>();

        $stack3 = $stack1[$stack2];

        tableswitch($stack3)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $stack7 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation BOTTOM_OR_RIGHT>;

        return $stack7;

     label2:
        $stack6 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation BOTTOM_OR_LEFT>;

        return $stack6;

     label3:
        $stack5 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation TOP_OR_RIGHT>;

        return $stack5;

     label4:
        $stack4 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation TOP_OR_LEFT>;

        return $stack4;

     label5:
        $stack8 = new java.lang.IllegalStateException;

        specialinvoke $stack8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AxisLocation not recognised.");

        throw $stack8;
    }

    static void <clinit>()
    {
        org.jfree.chart.axis.AxisLocation $stack0, $stack1, $stack2, $stack3, $stack5, $stack6, $stack7, $stack8;
        org.jfree.chart.axis.AxisLocation[] $stack4;

        $stack0 = new org.jfree.chart.axis.AxisLocation;

        specialinvoke $stack0.<org.jfree.chart.axis.AxisLocation: void <init>(java.lang.String,int)>("TOP_OR_LEFT", 0);

        <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation TOP_OR_LEFT> = $stack0;

        $stack1 = new org.jfree.chart.axis.AxisLocation;

        specialinvoke $stack1.<org.jfree.chart.axis.AxisLocation: void <init>(java.lang.String,int)>("TOP_OR_RIGHT", 1);

        <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation TOP_OR_RIGHT> = $stack1;

        $stack2 = new org.jfree.chart.axis.AxisLocation;

        specialinvoke $stack2.<org.jfree.chart.axis.AxisLocation: void <init>(java.lang.String,int)>("BOTTOM_OR_LEFT", 2);

        <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation BOTTOM_OR_LEFT> = $stack2;

        $stack3 = new org.jfree.chart.axis.AxisLocation;

        specialinvoke $stack3.<org.jfree.chart.axis.AxisLocation: void <init>(java.lang.String,int)>("BOTTOM_OR_RIGHT", 3);

        <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation BOTTOM_OR_RIGHT> = $stack3;

        $stack4 = newarray (org.jfree.chart.axis.AxisLocation)[4];

        $stack5 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation TOP_OR_LEFT>;

        $stack4[0] = $stack5;

        $stack6 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation TOP_OR_RIGHT>;

        $stack4[1] = $stack6;

        $stack7 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation BOTTOM_OR_LEFT>;

        $stack4[2] = $stack7;

        $stack8 = <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation BOTTOM_OR_RIGHT>;

        $stack4[3] = $stack8;

        <org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation[] $VALUES> = $stack4;

        return;
    }
}
