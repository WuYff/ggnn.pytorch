public class org.jfree.chart.needle.WindNeedle extends org.jfree.chart.needle.ArrowNeedle implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.jfree.chart.needle.WindNeedle this;

        this := @this: org.jfree.chart.needle.WindNeedle;

        specialinvoke this.<org.jfree.chart.needle.ArrowNeedle: void <init>(boolean)>(0);

        return;
    }

    protected void drawNeedle(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, double)
    {
        org.jfree.chart.needle.WindNeedle this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;
        java.awt.geom.Point2D rotate;
        double angle, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        int $stack9, spacing;
        java.awt.geom.Rectangle2D$Double $stack10;

        this := @this: org.jfree.chart.needle.WindNeedle;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        rotate := @parameter2: java.awt.geom.Point2D;

        angle := @parameter3: double;

        specialinvoke this.<org.jfree.chart.needle.ArrowNeedle: void drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)>(g2, plotArea, rotate, angle);

        if rotate == null goto label1;

        if plotArea == null goto label1;

        $stack9 = virtualinvoke this.<org.jfree.chart.needle.WindNeedle: int getSize()>();

        spacing = $stack9 * 3;

        $stack10 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack10.<java.awt.geom.Rectangle2D$Double: void <init>()>();

        $stack11 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack12 = (double) spacing;

        $stack13 = $stack11 - $stack12;

        $stack14 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack15 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack16 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        virtualinvoke $stack10.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($stack13, $stack14, $stack15, $stack16);

        specialinvoke this.<org.jfree.chart.needle.ArrowNeedle: void drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)>(g2, $stack10, rotate, angle);

        $stack17 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack18 = (double) spacing;

        $stack19 = $stack17 + $stack18;

        $stack20 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack21 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack22 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        virtualinvoke $stack10.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($stack19, $stack20, $stack21, $stack22);

        specialinvoke this.<org.jfree.chart.needle.ArrowNeedle: void drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)>(g2, $stack10, rotate, angle);

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object object;
        org.jfree.chart.needle.WindNeedle this;
        boolean $stack2, $stack3;

        this := @this: org.jfree.chart.needle.WindNeedle;

        object := @parameter0: java.lang.Object;

        if object != null goto label1;

        return 0;

     label1:
        if object != this goto label2;

        return 1;

     label2:
        $stack2 = specialinvoke this.<org.jfree.chart.needle.ArrowNeedle: boolean equals(java.lang.Object)>(object);

        if $stack2 == 0 goto label3;

        $stack3 = object instanceof org.jfree.chart.needle.WindNeedle;

        if $stack3 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.jfree.chart.needle.WindNeedle this;
        int $stack1;

        this := @this: org.jfree.chart.needle.WindNeedle;

        $stack1 = specialinvoke this.<org.jfree.chart.needle.ArrowNeedle: int hashCode()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.needle.WindNeedle: long serialVersionUID> = -2861061368907167834L;

        return;
    }
}
