public class org.jfree.data.ComparableObjectItem extends java.lang.Object implements java.lang.Comparable, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private java.lang.Comparable x;
    private java.lang.Object obj;

    public void <init>(java.lang.Comparable, java.lang.Object)
    {
        org.jfree.data.ComparableObjectItem this;
        java.lang.Comparable x;
        java.lang.Object y;

        this := @this: org.jfree.data.ComparableObjectItem;

        x := @parameter0: java.lang.Comparable;

        y := @parameter1: java.lang.Object;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(x, "x");

        this.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x> = x;

        this.<org.jfree.data.ComparableObjectItem: java.lang.Object obj> = y;

        return;
    }

    protected java.lang.Comparable getComparable()
    {
        org.jfree.data.ComparableObjectItem this;
        java.lang.Comparable $stack1;

        this := @this: org.jfree.data.ComparableObjectItem;

        $stack1 = this.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x>;

        return $stack1;
    }

    protected java.lang.Object getObject()
    {
        org.jfree.data.ComparableObjectItem this;
        java.lang.Object $stack1;

        this := @this: org.jfree.data.ComparableObjectItem;

        $stack1 = this.<org.jfree.data.ComparableObjectItem: java.lang.Object obj>;

        return $stack1;
    }

    protected void setObject(java.lang.Object)
    {
        org.jfree.data.ComparableObjectItem this;
        java.lang.Object y;

        this := @this: org.jfree.data.ComparableObjectItem;

        y := @parameter0: java.lang.Object;

        this.<org.jfree.data.ComparableObjectItem: java.lang.Object obj> = y;

        return;
    }

    public int compareTo(org.jfree.data.ComparableObjectItem)
    {
        org.jfree.data.ComparableObjectItem this, other;
        java.lang.Comparable $stack2, $stack3;
        int $stack4;

        this := @this: org.jfree.data.ComparableObjectItem;

        other := @parameter0: org.jfree.data.ComparableObjectItem;

        $stack2 = this.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x>;

        $stack3 = virtualinvoke other.<org.jfree.data.ComparableObjectItem: java.lang.Comparable getComparable()>();

        $stack4 = interfaceinvoke $stack2.<java.lang.Comparable: int compareTo(java.lang.Object)>($stack3);

        return $stack4;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.data.ComparableObjectItem this;
        java.lang.Object $stack1;

        this := @this: org.jfree.data.ComparableObjectItem;

        $stack1 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        return $stack1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj, $stack7, $stack8;
        org.jfree.data.ComparableObjectItem this, that;
        boolean $stack3, $stack6, $stack9;
        java.lang.Comparable $stack4, $stack5;

        this := @this: org.jfree.data.ComparableObjectItem;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.data.ComparableObjectItem;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.data.ComparableObjectItem) obj;

        $stack5 = this.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x>;

        $stack4 = that.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x>;

        $stack6 = virtualinvoke $stack5.<java.lang.Object: boolean equals(java.lang.Object)>($stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.data.ComparableObjectItem: java.lang.Object obj>;

        $stack7 = that.<org.jfree.data.ComparableObjectItem: java.lang.Object obj>;

        $stack9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack8, $stack7);

        if $stack9 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.data.ComparableObjectItem this;
        java.lang.Comparable $stack2;
        java.lang.Object $stack4, $stack6;
        int $stack5, result, $stack7;

        this := @this: org.jfree.data.ComparableObjectItem;

        $stack2 = this.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x>;

        result = virtualinvoke $stack2.<java.lang.Object: int hashCode()>();

        $stack5 = 29 * result;

        $stack4 = this.<org.jfree.data.ComparableObjectItem: java.lang.Object obj>;

        if $stack4 == null goto label1;

        $stack6 = this.<org.jfree.data.ComparableObjectItem: java.lang.Object obj>;

        $stack7 = virtualinvoke $stack6.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $stack7 = 0;

     label2:
        result = $stack5 + $stack7;

        return result;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.jfree.data.ComparableObjectItem this, $stack2;
        java.lang.Object l1;
        int $stack3;

        this := @this: org.jfree.data.ComparableObjectItem;

        l1 := @parameter0: java.lang.Object;

        $stack2 = (org.jfree.data.ComparableObjectItem) l1;

        $stack3 = virtualinvoke this.<org.jfree.data.ComparableObjectItem: int compareTo(org.jfree.data.ComparableObjectItem)>($stack2);

        return $stack3;
    }

    public static void <clinit>()
    {
        <org.jfree.data.ComparableObjectItem: long serialVersionUID> = 2751513470325494890L;

        return;
    }
}
