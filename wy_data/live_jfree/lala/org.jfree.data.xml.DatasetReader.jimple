public class org.jfree.data.xml.DatasetReader extends java.lang.Object
{
    static javax.xml.parsers.SAXParserFactory factory;

    public void <init>()
    {
        org.jfree.data.xml.DatasetReader this;

        this := @this: org.jfree.data.xml.DatasetReader;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.xml.parsers.SAXParserFactory getSAXParserFactory()
    {
        javax.xml.parsers.SAXParserFactory $stack2, $stack3, f;
        javax.xml.parsers.ParserConfigurationException $stack5;
        java.lang.RuntimeException $stack6, $stack8, $stack10;
        org.xml.sax.SAXNotSupportedException $stack7;
        org.xml.sax.SAXNotRecognizedException $stack9;

        $stack2 = <org.jfree.data.xml.DatasetReader: javax.xml.parsers.SAXParserFactory factory>;

        if $stack2 != null goto label6;

        f = staticinvoke <javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>();

     label1:
        virtualinvoke f.<javax.xml.parsers.SAXParserFactory: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", 1);

        virtualinvoke f.<javax.xml.parsers.SAXParserFactory: void setFeature(java.lang.String,boolean)>("http://apache.org/xml/features/disallow-doctype-decl", 1);

        <org.jfree.data.xml.DatasetReader: javax.xml.parsers.SAXParserFactory factory> = f;

     label2:
        goto label6;

     label3:
        $stack9 := @caughtexception;

        $stack10 = new java.lang.RuntimeException;

        specialinvoke $stack10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack9);

        throw $stack10;

     label4:
        $stack7 := @caughtexception;

        $stack8 = new java.lang.RuntimeException;

        specialinvoke $stack8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack7);

        throw $stack8;

     label5:
        $stack5 := @caughtexception;

        $stack6 = new java.lang.RuntimeException;

        specialinvoke $stack6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack5);

        throw $stack6;

     label6:
        $stack3 = <org.jfree.data.xml.DatasetReader: javax.xml.parsers.SAXParserFactory factory>;

        return $stack3;

        catch org.xml.sax.SAXNotRecognizedException from label1 to label2 with label3;
        catch org.xml.sax.SAXNotSupportedException from label1 to label2 with label4;
        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label5;
    }

    public static void setSAXParserFactory(javax.xml.parsers.SAXParserFactory)
    {
        javax.xml.parsers.SAXParserFactory f;

        f := @parameter0: javax.xml.parsers.SAXParserFactory;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(f, "f");

        <org.jfree.data.xml.DatasetReader: javax.xml.parsers.SAXParserFactory factory> = f;

        return;
    }

    public static org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.File) throws java.io.IOException
    {
        java.io.FileInputStream $stack2;
        java.io.File file;
        org.jfree.data.general.PieDataset $stack3;

        file := @parameter0: java.io.File;

        $stack2 = new java.io.FileInputStream;

        specialinvoke $stack2.<java.io.FileInputStream: void <init>(java.io.File)>(file);

        $stack3 = staticinvoke <org.jfree.data.xml.DatasetReader: org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.InputStream)>($stack2);

        return $stack3;
    }

    public static org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.InputStream) throws java.io.IOException
    {
        javax.xml.parsers.SAXParserFactory $stack4;
        org.jfree.data.xml.PieDatasetHandler $stack6;
        java.io.InputStream in;
        javax.xml.parsers.ParserConfigurationException $stack8;
        java.lang.RuntimeException $stack9, $stack11;
        org.xml.sax.SAXException $stack10;
        javax.xml.parsers.SAXParser parser;
        org.jfree.data.general.PieDataset result;

        in := @parameter0: java.io.InputStream;

     label1:
        $stack4 = staticinvoke <org.jfree.data.xml.DatasetReader: javax.xml.parsers.SAXParserFactory getSAXParserFactory()>();

        parser = virtualinvoke $stack4.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

        $stack6 = new org.jfree.data.xml.PieDatasetHandler;

        specialinvoke $stack6.<org.jfree.data.xml.PieDatasetHandler: void <init>()>();

        virtualinvoke parser.<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)>(in, $stack6);

        result = virtualinvoke $stack6.<org.jfree.data.xml.PieDatasetHandler: org.jfree.data.general.PieDataset getDataset()>();

     label2:
        goto label5;

     label3:
        $stack10 := @caughtexception;

        $stack11 = new java.lang.RuntimeException;

        specialinvoke $stack11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack10);

        throw $stack11;

     label4:
        $stack8 := @caughtexception;

        $stack9 = new java.lang.RuntimeException;

        specialinvoke $stack9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack8);

        throw $stack9;

     label5:
        return result;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label4;
    }

    public static org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.File) throws java.io.IOException
    {
        java.io.FileInputStream $stack2;
        java.io.File file;
        org.jfree.data.category.CategoryDataset $stack3;

        file := @parameter0: java.io.File;

        $stack2 = new java.io.FileInputStream;

        specialinvoke $stack2.<java.io.FileInputStream: void <init>(java.io.File)>(file);

        $stack3 = staticinvoke <org.jfree.data.xml.DatasetReader: org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.InputStream)>($stack2);

        return $stack3;
    }

    public static org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.InputStream) throws java.io.IOException
    {
        javax.xml.parsers.SAXParserFactory $stack4;
        org.jfree.data.xml.CategoryDatasetHandler $stack6;
        java.io.InputStream in;
        javax.xml.parsers.ParserConfigurationException $stack8;
        java.lang.RuntimeException $stack9, $stack11;
        org.xml.sax.SAXException $stack10;
        javax.xml.parsers.SAXParser parser;
        org.jfree.data.category.CategoryDataset result;

        in := @parameter0: java.io.InputStream;

     label1:
        $stack4 = staticinvoke <org.jfree.data.xml.DatasetReader: javax.xml.parsers.SAXParserFactory getSAXParserFactory()>();

        parser = virtualinvoke $stack4.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

        $stack6 = new org.jfree.data.xml.CategoryDatasetHandler;

        specialinvoke $stack6.<org.jfree.data.xml.CategoryDatasetHandler: void <init>()>();

        virtualinvoke parser.<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)>(in, $stack6);

        result = virtualinvoke $stack6.<org.jfree.data.xml.CategoryDatasetHandler: org.jfree.data.category.CategoryDataset getDataset()>();

     label2:
        goto label5;

     label3:
        $stack10 := @caughtexception;

        $stack11 = new java.lang.RuntimeException;

        specialinvoke $stack11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack10);

        throw $stack11;

     label4:
        $stack8 := @caughtexception;

        $stack9 = new java.lang.RuntimeException;

        specialinvoke $stack9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack8);

        throw $stack9;

     label5:
        return result;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label4;
    }
}
