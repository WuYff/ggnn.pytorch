public class org.jfree.chart.needle.PlumNeedle extends org.jfree.chart.needle.MeterNeedle implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.jfree.chart.needle.PlumNeedle this;

        this := @this: org.jfree.chart.needle.PlumNeedle;

        specialinvoke this.<org.jfree.chart.needle.MeterNeedle: void <init>()>();

        return;
    }

    protected void drawNeedle(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, double)
    {
        java.awt.geom.Arc2D$Double $stack14;
        java.awt.geom.Rectangle2D plotArea;
        double $stack16, halfX, diameter, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack25, $stack26, angle, $stack33, $stack34, radius;
        java.awt.geom.Area $stack27;
        java.awt.geom.Point2D rotate;
        org.jfree.chart.needle.PlumNeedle this;
        java.awt.Graphics2D g2;
        byte $stack28;
        java.awt.geom.AffineTransform $stack32, $stack35;

        this := @this: org.jfree.chart.needle.PlumNeedle;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        rotate := @parameter2: java.awt.geom.Point2D;

        angle := @parameter3: double;

        $stack14 = new java.awt.geom.Arc2D$Double;

        specialinvoke $stack14.<java.awt.geom.Arc2D$Double: void <init>(int)>(2);

        radius = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack16 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        halfX = $stack16 / 2.0;

        diameter = 2.0 * radius;

        $stack17 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack18 = $stack17 + halfX;

        $stack19 = $stack18 - radius;

        $stack20 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack21 = $stack20 - radius;

        virtualinvoke $stack14.<java.awt.geom.Arc2D: void setFrame(double,double,double,double)>($stack19, $stack21, diameter, diameter);

        $stack22 = halfX / radius;

        $stack23 = staticinvoke <java.lang.Math: double asin(double)>($stack22);

        radius = staticinvoke <java.lang.Math: double toDegrees(double)>($stack23);

        $stack25 = 270.0 - radius;

        virtualinvoke $stack14.<java.awt.geom.Arc2D: void setAngleStart(double)>($stack25);

        $stack26 = 2.0 * radius;

        virtualinvoke $stack14.<java.awt.geom.Arc2D: void setAngleExtent(double)>($stack26);

        $stack27 = new java.awt.geom.Area;

        specialinvoke $stack27.<java.awt.geom.Area: void <init>(java.awt.Shape)>($stack14);

        if rotate == null goto label1;

        $stack28 = angle cmpl 0.0;

        if $stack28 == 0 goto label1;

        $stack32 = virtualinvoke this.<org.jfree.chart.needle.PlumNeedle: java.awt.geom.AffineTransform getTransform()>();

        $stack33 = virtualinvoke rotate.<java.awt.geom.Point2D: double getX()>();

        $stack34 = virtualinvoke rotate.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $stack32.<java.awt.geom.AffineTransform: void setToRotation(double,double,double)>(angle, $stack33, $stack34);

        $stack35 = virtualinvoke this.<org.jfree.chart.needle.PlumNeedle: java.awt.geom.AffineTransform getTransform()>();

        virtualinvoke $stack27.<java.awt.geom.Area: void transform(java.awt.geom.AffineTransform)>($stack35);

     label1:
        virtualinvoke this.<org.jfree.chart.needle.PlumNeedle: void defaultDisplay(java.awt.Graphics2D,java.awt.Shape)>(g2, $stack27);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.needle.PlumNeedle this;
        boolean $stack2, $stack3;

        this := @this: org.jfree.chart.needle.PlumNeedle;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack2 = obj instanceof org.jfree.chart.needle.PlumNeedle;

        if $stack2 != 0 goto label2;

        return 0;

     label2:
        $stack3 = specialinvoke this.<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>(obj);

        if $stack3 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.needle.PlumNeedle this;
        int $stack1;

        this := @this: org.jfree.chart.needle.PlumNeedle;

        $stack1 = specialinvoke this.<org.jfree.chart.needle.MeterNeedle: int hashCode()>();

        return $stack1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.needle.PlumNeedle this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.needle.PlumNeedle;

        $stack1 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.needle.PlumNeedle: long serialVersionUID> = -3082660488660600718L;

        return;
    }
}
