public class org.jfree.chart.title.ShortTextTitle extends org.jfree.chart.title.TextTitle
{
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String)
    {
        org.jfree.chart.title.ShortTextTitle this;
        java.lang.String text;

        this := @this: org.jfree.chart.title.ShortTextTitle;

        text := @parameter0: java.lang.String;

        specialinvoke this.<org.jfree.chart.title.TextTitle: void <init>()>();

        virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: void setText(java.lang.String)>(text);

        return;
    }

    public org.jfree.chart.ui.Size2D arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)
    {
        org.jfree.chart.title.ShortTextTitle this;
        org.jfree.chart.block.RectangleConstraint constraint, cc;
        org.jfree.chart.block.LengthConstraintType w, h, $stack10, $stack11, $stack12, $stack29, $stack30, $stack31, $stack36, $stack37, $stack38, $stack45, $stack46, $stack47;
        double $stack14, $stack17, $stack20, $stack21, $stack22, $stack23, $stack34;
        byte $stack15, $stack18;
        org.jfree.chart.ui.Size2D $stack16, $stack19, contentSize;
        java.lang.AssertionError $stack28;
        java.lang.RuntimeException $stack32, $stack33, $stack39, $stack48, $stack49;
        java.awt.Graphics2D g2;
        org.jfree.data.Range $stack40, $stack41, $stack43;
        boolean $stack13;

        this := @this: org.jfree.chart.title.ShortTextTitle;

        g2 := @parameter0: java.awt.Graphics2D;

        constraint := @parameter1: org.jfree.chart.block.RectangleConstraint;

        cc = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: org.jfree.chart.block.RectangleConstraint toContentConstraint(org.jfree.chart.block.RectangleConstraint)>(constraint);

        w = virtualinvoke cc.<org.jfree.chart.block.RectangleConstraint: org.jfree.chart.block.LengthConstraintType getWidthConstraintType()>();

        h = virtualinvoke cc.<org.jfree.chart.block.RectangleConstraint: org.jfree.chart.block.LengthConstraintType getHeightConstraintType()>();

        contentSize = null;

        $stack10 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType NONE>;

        if w != $stack10 goto label03;

        $stack45 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType NONE>;

        if h != $stack45 goto label01;

        contentSize = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: org.jfree.chart.ui.Size2D arrangeNN(java.awt.Graphics2D)>(g2);

        goto label09;

     label01:
        $stack46 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType RANGE>;

        if h != $stack46 goto label02;

        $stack49 = new java.lang.RuntimeException;

        specialinvoke $stack49.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not yet implemented.");

        throw $stack49;

     label02:
        $stack47 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType FIXED>;

        if h != $stack47 goto label09;

        $stack48 = new java.lang.RuntimeException;

        specialinvoke $stack48.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not yet implemented.");

        throw $stack48;

     label03:
        $stack11 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType RANGE>;

        if w != $stack11 goto label06;

        $stack36 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType NONE>;

        if h != $stack36 goto label04;

        $stack43 = virtualinvoke cc.<org.jfree.chart.block.RectangleConstraint: org.jfree.data.Range getWidthRange()>();

        contentSize = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: org.jfree.chart.ui.Size2D arrangeRN(java.awt.Graphics2D,org.jfree.data.Range)>(g2, $stack43);

        goto label09;

     label04:
        $stack37 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType RANGE>;

        if h != $stack37 goto label05;

        $stack40 = virtualinvoke cc.<org.jfree.chart.block.RectangleConstraint: org.jfree.data.Range getWidthRange()>();

        $stack41 = virtualinvoke cc.<org.jfree.chart.block.RectangleConstraint: org.jfree.data.Range getHeightRange()>();

        contentSize = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: org.jfree.chart.ui.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>(g2, $stack40, $stack41);

        goto label09;

     label05:
        $stack38 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType FIXED>;

        if h != $stack38 goto label09;

        $stack39 = new java.lang.RuntimeException;

        specialinvoke $stack39.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not yet implemented.");

        throw $stack39;

     label06:
        $stack12 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType FIXED>;

        if w != $stack12 goto label09;

        $stack29 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType NONE>;

        if h != $stack29 goto label07;

        $stack34 = virtualinvoke cc.<org.jfree.chart.block.RectangleConstraint: double getWidth()>();

        contentSize = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: org.jfree.chart.ui.Size2D arrangeFN(java.awt.Graphics2D,double)>(g2, $stack34);

        goto label09;

     label07:
        $stack30 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType RANGE>;

        if h != $stack30 goto label08;

        $stack33 = new java.lang.RuntimeException;

        specialinvoke $stack33.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not yet implemented.");

        throw $stack33;

     label08:
        $stack31 = <org.jfree.chart.block.LengthConstraintType: org.jfree.chart.block.LengthConstraintType FIXED>;

        if h != $stack31 goto label09;

        $stack32 = new java.lang.RuntimeException;

        specialinvoke $stack32.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not yet implemented.");

        throw $stack32;

     label09:
        $stack13 = <org.jfree.chart.title.ShortTextTitle: boolean $assertionsDisabled>;

        if $stack13 != 0 goto label10;

        if contentSize != null goto label10;

        $stack28 = new java.lang.AssertionError;

        specialinvoke $stack28.<java.lang.AssertionError: void <init>()>();

        throw $stack28;

     label10:
        $stack14 = contentSize.<org.jfree.chart.ui.Size2D: double width>;

        $stack15 = $stack14 cmpg 0.0;

        if $stack15 <= 0 goto label11;

        $stack17 = contentSize.<org.jfree.chart.ui.Size2D: double height>;

        $stack18 = $stack17 cmpg 0.0;

        if $stack18 > 0 goto label12;

     label11:
        $stack16 = new org.jfree.chart.ui.Size2D;

        specialinvoke $stack16.<org.jfree.chart.ui.Size2D: void <init>(double,double)>(0.0, 0.0);

        return $stack16;

     label12:
        $stack19 = new org.jfree.chart.ui.Size2D;

        $stack20 = virtualinvoke contentSize.<org.jfree.chart.ui.Size2D: double getWidth()>();

        $stack21 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: double calculateTotalWidth(double)>($stack20);

        $stack22 = virtualinvoke contentSize.<org.jfree.chart.ui.Size2D: double getHeight()>();

        $stack23 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: double calculateTotalHeight(double)>($stack22);

        specialinvoke $stack19.<org.jfree.chart.ui.Size2D: void <init>(double,double)>($stack21, $stack23);

        return $stack19;
    }

    protected org.jfree.chart.ui.Size2D arrangeNN(java.awt.Graphics2D)
    {
        org.jfree.data.Range $stack3;
        org.jfree.chart.title.ShortTextTitle this;
        java.awt.Graphics2D g2;
        org.jfree.chart.ui.Size2D $stack4;

        this := @this: org.jfree.chart.title.ShortTextTitle;

        g2 := @parameter0: java.awt.Graphics2D;

        $stack3 = new org.jfree.data.Range;

        specialinvoke $stack3.<org.jfree.data.Range: void <init>(double,double)>(0.0, 3.4028234663852886E38);

        $stack4 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: org.jfree.chart.ui.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>(g2, $stack3, $stack3);

        return $stack4;
    }

    protected org.jfree.chart.ui.Size2D arrangeRN(java.awt.Graphics2D, org.jfree.data.Range)
    {
        org.jfree.chart.title.ShortTextTitle this;
        java.awt.Graphics2D g2;
        org.jfree.chart.ui.Size2D s, $stack11;
        org.jfree.data.Range widthRange;
        double $stack7, $stack9, ww;
        boolean $stack8;

        this := @this: org.jfree.chart.title.ShortTextTitle;

        g2 := @parameter0: java.awt.Graphics2D;

        widthRange := @parameter1: org.jfree.data.Range;

        s = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: org.jfree.chart.ui.Size2D arrangeNN(java.awt.Graphics2D)>(g2);

        $stack7 = virtualinvoke s.<org.jfree.chart.ui.Size2D: double getWidth()>();

        $stack8 = virtualinvoke widthRange.<org.jfree.data.Range: boolean contains(double)>($stack7);

        if $stack8 == 0 goto label1;

        return s;

     label1:
        $stack9 = virtualinvoke s.<org.jfree.chart.ui.Size2D: double getWidth()>();

        ww = virtualinvoke widthRange.<org.jfree.data.Range: double constrain(double)>($stack9);

        $stack11 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: org.jfree.chart.ui.Size2D arrangeFN(java.awt.Graphics2D,double)>(g2, ww);

        return $stack11;
    }

    protected org.jfree.chart.ui.Size2D arrangeFN(java.awt.Graphics2D, double)
    {
        java.awt.Graphics2D g2;
        org.jfree.chart.title.ShortTextTitle this;
        java.awt.Font $stack6, $stack7;
        java.awt.FontMetrics fm;
        java.lang.String $stack9;
        java.awt.geom.Rectangle2D bounds;
        double $stack11, w, $stack15;
        byte $stack12;
        org.jfree.chart.ui.Size2D $stack13, $stack14;

        this := @this: org.jfree.chart.title.ShortTextTitle;

        g2 := @parameter0: java.awt.Graphics2D;

        w := @parameter1: double;

        $stack6 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.awt.Font getFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack6);

        $stack7 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.awt.Font getFont()>();

        fm = virtualinvoke g2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($stack7);

        $stack9 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.lang.String getText()>();

        bounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>($stack9, g2, fm);

        $stack11 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack12 = $stack11 cmpg w;

        if $stack12 > 0 goto label1;

        $stack14 = new org.jfree.chart.ui.Size2D;

        $stack15 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack14.<org.jfree.chart.ui.Size2D: void <init>(double,double)>(w, $stack15);

        return $stack14;

     label1:
        $stack13 = new org.jfree.chart.ui.Size2D;

        specialinvoke $stack13.<org.jfree.chart.ui.Size2D: void <init>(double,double)>(0.0, 0.0);

        return $stack13;
    }

    protected org.jfree.chart.ui.Size2D arrangeRR(java.awt.Graphics2D, org.jfree.data.Range, org.jfree.data.Range)
    {
        java.awt.Graphics2D g2;
        org.jfree.chart.title.ShortTextTitle this;
        java.awt.Font $stack6, $stack7;
        java.awt.FontMetrics fm;
        java.lang.String $stack9;
        java.awt.geom.Rectangle2D bounds;
        double $stack11, $stack12, $stack15, $stack16, $stack21, $stack22;
        org.jfree.data.Range widthRange, heightRange;
        byte $stack13, $stack17;
        org.jfree.chart.ui.Size2D $stack14, $stack20;

        this := @this: org.jfree.chart.title.ShortTextTitle;

        g2 := @parameter0: java.awt.Graphics2D;

        widthRange := @parameter1: org.jfree.data.Range;

        heightRange := @parameter2: org.jfree.data.Range;

        $stack6 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.awt.Font getFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack6);

        $stack7 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.awt.Font getFont()>();

        fm = virtualinvoke g2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($stack7);

        $stack9 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.lang.String getText()>();

        bounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>($stack9, g2, fm);

        $stack11 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack12 = virtualinvoke widthRange.<org.jfree.data.Range: double getUpperBound()>();

        $stack13 = $stack11 cmpg $stack12;

        if $stack13 > 0 goto label1;

        $stack15 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack16 = virtualinvoke heightRange.<org.jfree.data.Range: double getUpperBound()>();

        $stack17 = $stack15 cmpg $stack16;

        if $stack17 > 0 goto label1;

        $stack20 = new org.jfree.chart.ui.Size2D;

        $stack21 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack22 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack20.<org.jfree.chart.ui.Size2D: void <init>(double,double)>($stack21, $stack22);

        return $stack20;

     label1:
        $stack14 = new org.jfree.chart.ui.Size2D;

        specialinvoke $stack14.<org.jfree.chart.ui.Size2D: void <init>(double,double)>(0.0, 0.0);

        return $stack14;
    }

    public java.lang.Object draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)
    {
        boolean $stack4;
        org.jfree.chart.title.ShortTextTitle this;
        java.awt.Graphics2D g2;
        java.awt.Font $stack8;
        java.awt.Paint $stack9;
        java.lang.String $stack10;
        double $stack11, $stack13;
        float $stack12, $stack15;
        org.jfree.chart.ui.TextAnchor $stack14;
        java.lang.Object params;
        java.awt.geom.Rectangle2D area, area#2;

        this := @this: org.jfree.chart.title.ShortTextTitle;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        params := @parameter2: java.lang.Object;

        $stack4 = virtualinvoke area.<java.awt.geom.Rectangle2D: boolean isEmpty()>();

        if $stack4 == 0 goto label1;

        return null;

     label1:
        area#2 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.awt.geom.Rectangle2D trimMargin(java.awt.geom.Rectangle2D)>(area);

        virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: void drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area#2);

        area#2 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.awt.geom.Rectangle2D trimBorder(java.awt.geom.Rectangle2D)>(area#2);

        area#2 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.awt.geom.Rectangle2D trimPadding(java.awt.geom.Rectangle2D)>(area#2);

        $stack8 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.awt.Font getFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack8);

        $stack9 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.awt.Paint getPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack9);

        $stack10 = virtualinvoke this.<org.jfree.chart.title.ShortTextTitle: java.lang.String getText()>();

        $stack11 = virtualinvoke area#2.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack12 = (float) $stack11;

        $stack13 = virtualinvoke area#2.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack15 = (float) $stack13;

        $stack14 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor TOP_LEFT>;

        staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor)>($stack10, g2, $stack12, $stack15, $stack14);

        return null;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack2;

        $stack0 = class "Lorg/jfree/chart/title/ShortTextTitle;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        <org.jfree.chart.title.ShortTextTitle: boolean $assertionsDisabled> = $stack2;

        return;
    }
}
