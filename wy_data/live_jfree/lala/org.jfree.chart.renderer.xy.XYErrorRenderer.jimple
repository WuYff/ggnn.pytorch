public class org.jfree.chart.renderer.xy.XYErrorRenderer extends org.jfree.chart.renderer.xy.XYLineAndShapeRenderer
{
    static final long serialVersionUID;
    private boolean drawXError;
    private boolean drawYError;
    private double capLength;
    private transient java.awt.Paint errorPaint;
    private transient java.awt.Stroke errorStroke;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>(0, 1);

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawXError> = 1;

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawYError> = 1;

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint> = null;

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke> = null;

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: double capLength> = 4.0;

        return;
    }

    public boolean getDrawXError()
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawXError>;

        return $stack1;
    }

    public void setDrawXError(boolean)
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        boolean draw, $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        draw := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawXError>;

        if $stack2 == draw goto label1;

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawXError> = draw;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getDrawYError()
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawYError>;

        return $stack1;
    }

    public void setDrawYError(boolean)
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        boolean draw, $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        draw := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawYError>;

        if $stack2 == draw goto label1;

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawYError> = draw;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public double getCapLength()
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: double capLength>;

        return $stack1;
    }

    public void setCapLength(double)
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        double length;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        length := @parameter0: double;

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: double capLength> = length;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getErrorPaint()
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint>;

        return $stack1;
    }

    public void setErrorPaint(java.awt.Paint)
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getErrorStroke()
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke>;

        return $stack1;
    }

    public void setErrorStroke(java.awt.Stroke)
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        java.awt.Stroke stroke;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        stroke := @parameter0: java.awt.Stroke;

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.Range $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        $stack2 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>(dataset, 1);

        return $stack2;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.Range $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        $stack2 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>(dataset, 1);

        return $stack2;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        int pass, series, item;
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.chart.plot.CrosshairState crosshairState;
        boolean $stack33, $stack47, $stack49, $stack50;
        org.jfree.data.xy.IntervalXYDataset ixyd;
        org.jfree.chart.plot.PlotOrientation orientation, $stack60, $stack98;
        org.jfree.chart.ui.RectangleEdge $stack57, $stack95, edge;
        double $stack59, $stack63, $stack64, $stack66, $stack67, $stack83, $stack84, $stack86, $stack87, $stack97, $stack101, $stack102, $stack104, $stack105, $stack122, $stack123, $stack125, $stack126, x0, x1, y, xx0, xx1, yy, adj;
        java.awt.geom.Line2D$Double $stack61, $stack62, $stack65, $stack81, $stack82, $stack85, $stack99, $stack100, $stack103, $stack120, $stack121, $stack124, line, cap1, cap2;
        java.awt.Paint $stack68, $stack69, $stack79, $stack106, $stack107, $stack118;
        java.awt.Stroke $stack70, $stack71, $stack72, $stack108, $stack109, $stack111;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        if pass != 0 goto label14;

        $stack33 = dataset instanceof org.jfree.data.xy.IntervalXYDataset;

        if $stack33 == 0 goto label14;

        $stack47 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean getItemVisible(int,int)>(series, item);

        if $stack47 == 0 goto label14;

        ixyd = (org.jfree.data.xy.IntervalXYDataset) dataset;

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack49 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawXError>;

        if $stack49 == 0 goto label07;

        x0 = interfaceinvoke ixyd.<org.jfree.data.xy.IntervalXYDataset: double getStartXValue(int,int)>(series, item);

        x1 = interfaceinvoke ixyd.<org.jfree.data.xy.IntervalXYDataset: double getEndXValue(int,int)>(series, item);

        y = interfaceinvoke ixyd.<org.jfree.data.xy.IntervalXYDataset: double getYValue(int,int)>(series, item);

        edge = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx0 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x0, dataArea, edge);

        xx1 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x1, dataArea, edge);

        $stack95 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yy = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y, dataArea, $stack95);

        $stack97 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: double capLength>;

        adj = $stack97 / 2.0;

        $stack98 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack98 goto label01;

        $stack120 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack120.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx0, yy, xx1, yy);

        line = $stack120;

        $stack121 = new java.awt.geom.Line2D$Double;

        $stack123 = yy - adj;

        $stack122 = yy + adj;

        specialinvoke $stack121.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx0, $stack123, xx0, $stack122);

        cap1 = $stack121;

        $stack124 = new java.awt.geom.Line2D$Double;

        $stack126 = yy - adj;

        $stack125 = yy + adj;

        specialinvoke $stack124.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx1, $stack126, xx1, $stack125);

        cap2 = $stack124;

        goto label02;

     label01:
        $stack99 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack99.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yy, xx0, yy, xx1);

        line = $stack99;

        $stack100 = new java.awt.geom.Line2D$Double;

        $stack102 = yy - adj;

        $stack101 = yy + adj;

        specialinvoke $stack100.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack102, xx0, $stack101, xx0);

        cap1 = $stack100;

        $stack103 = new java.awt.geom.Line2D$Double;

        $stack105 = yy - adj;

        $stack104 = yy + adj;

        specialinvoke $stack103.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack105, xx1, $stack104, xx1);

        cap2 = $stack103;

     label02:
        $stack106 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint>;

        if $stack106 == null goto label03;

        $stack118 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack118);

        goto label04;

     label03:
        $stack107 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack107);

     label04:
        $stack108 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke>;

        if $stack108 == null goto label05;

        $stack111 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack111);

        goto label06;

     label05:
        $stack109 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke getItemStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack109);

     label06:
        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(cap1);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(cap2);

     label07:
        $stack50 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawYError>;

        if $stack50 == 0 goto label14;

        x0 = interfaceinvoke ixyd.<org.jfree.data.xy.IntervalXYDataset: double getStartYValue(int,int)>(series, item);

        x1 = interfaceinvoke ixyd.<org.jfree.data.xy.IntervalXYDataset: double getEndYValue(int,int)>(series, item);

        y = interfaceinvoke ixyd.<org.jfree.data.xy.IntervalXYDataset: double getXValue(int,int)>(series, item);

        edge = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        xx0 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x0, dataArea, edge);

        xx1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x1, dataArea, edge);

        $stack57 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        yy = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y, dataArea, $stack57);

        $stack59 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: double capLength>;

        adj = $stack59 / 2.0;

        $stack60 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack60 goto label08;

        $stack81 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack81.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yy, xx0, yy, xx1);

        line = $stack81;

        $stack82 = new java.awt.geom.Line2D$Double;

        $stack84 = yy - adj;

        $stack83 = yy + adj;

        specialinvoke $stack82.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack84, xx0, $stack83, xx0);

        cap1 = $stack82;

        $stack85 = new java.awt.geom.Line2D$Double;

        $stack87 = yy - adj;

        $stack86 = yy + adj;

        specialinvoke $stack85.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack87, xx1, $stack86, xx1);

        cap2 = $stack85;

        goto label09;

     label08:
        $stack61 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack61.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx0, yy, xx1, yy);

        line = $stack61;

        $stack62 = new java.awt.geom.Line2D$Double;

        $stack64 = yy - adj;

        $stack63 = yy + adj;

        specialinvoke $stack62.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx0, $stack64, xx0, $stack63);

        cap1 = $stack62;

        $stack65 = new java.awt.geom.Line2D$Double;

        $stack67 = yy - adj;

        $stack66 = yy + adj;

        specialinvoke $stack65.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx1, $stack67, xx1, $stack66);

        cap2 = $stack65;

     label09:
        $stack68 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint>;

        if $stack68 == null goto label10;

        $stack79 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack79);

        goto label11;

     label10:
        $stack69 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack69);

     label11:
        $stack70 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke>;

        if $stack70 == null goto label12;

        $stack72 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack72);

        goto label13;

     label12:
        $stack71 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke getItemStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack71);

     label13:
        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(cap1);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(cap2);

     label14:
        specialinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>(g2, state, dataArea, info, plot, domainAxis, rangeAxis, dataset, series, item, crosshairState, pass);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.XYErrorRenderer this, that;
        boolean $stack3, $stack4, $stack5, $stack6, $stack7, $stack13, $stack16, $stack17;
        double $stack8, $stack9;
        byte $stack10;
        java.awt.Paint $stack11, $stack12;
        java.awt.Stroke $stack14, $stack15;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.XYErrorRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.xy.XYErrorRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawXError>;

        $stack4 = that.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawXError>;

        if $stack5 == $stack4 goto label3;

        return 0;

     label3:
        $stack7 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawYError>;

        $stack6 = that.<org.jfree.chart.renderer.xy.XYErrorRenderer: boolean drawYError>;

        if $stack7 == $stack6 goto label4;

        return 0;

     label4:
        $stack9 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: double capLength>;

        $stack8 = that.<org.jfree.chart.renderer.xy.XYErrorRenderer: double capLength>;

        $stack10 = $stack9 cmpl $stack8;

        if $stack10 == 0 goto label5;

        return 0;

     label5:
        $stack12 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint>;

        $stack11 = that.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint>;

        $stack13 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack12, $stack11);

        if $stack13 != 0 goto label6;

        return 0;

     label6:
        $stack15 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke>;

        $stack14 = that.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke>;

        $stack16 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack15, $stack14);

        if $stack16 != 0 goto label7;

        return 0;

     label7:
        $stack17 = specialinvoke this.<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack17;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        java.awt.Paint $stack2;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke> = $stack3;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.renderer.xy.XYErrorRenderer this;
        java.awt.Paint $stack2;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYErrorRenderer;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Paint errorPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.renderer.xy.XYErrorRenderer: java.awt.Stroke errorStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack3, stream);

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.xy.XYErrorRenderer: long serialVersionUID> = 5162283570955172424L;

        return;
    }
}
