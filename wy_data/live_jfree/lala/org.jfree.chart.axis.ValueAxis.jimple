public abstract class org.jfree.chart.axis.ValueAxis extends org.jfree.chart.axis.Axis implements java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final org.jfree.data.Range DEFAULT_RANGE;
    public static final boolean DEFAULT_AUTO_RANGE;
    public static final boolean DEFAULT_INVERTED;
    public static final double DEFAULT_AUTO_RANGE_MINIMUM_SIZE;
    public static final double DEFAULT_LOWER_MARGIN;
    public static final double DEFAULT_UPPER_MARGIN;
    public static final boolean DEFAULT_AUTO_TICK_UNIT_SELECTION;
    public static final int MAXIMUM_TICK_COUNT;
    private boolean positiveArrowVisible;
    private boolean negativeArrowVisible;
    private transient java.awt.Shape upArrow;
    private transient java.awt.Shape downArrow;
    private transient java.awt.Shape leftArrow;
    private transient java.awt.Shape rightArrow;
    private boolean inverted;
    private org.jfree.data.Range range;
    private boolean autoRange;
    private double autoRangeMinimumSize;
    private org.jfree.data.Range defaultAutoRange;
    private double upperMargin;
    private double lowerMargin;
    private double fixedAutoRange;
    private boolean autoTickUnitSelection;
    private org.jfree.chart.axis.TickUnitSource standardTickUnits;
    private int autoTickIndex;
    private int minorTickCount;
    private boolean verticalTickLabels;

    protected void <init>(java.lang.String, org.jfree.chart.axis.TickUnitSource)
    {
        org.jfree.chart.axis.ValueAxis this;
        java.lang.String label;
        org.jfree.data.Range $stack7, $stack8;
        org.jfree.chart.axis.TickUnitSource standardTickUnits;
        java.awt.Polygon $stack9, $stack10, $stack11, $stack12;

        this := @this: org.jfree.chart.axis.ValueAxis;

        label := @parameter0: java.lang.String;

        standardTickUnits := @parameter1: org.jfree.chart.axis.TickUnitSource;

        specialinvoke this.<org.jfree.chart.axis.Axis: void <init>(java.lang.String)>(label);

        this.<org.jfree.chart.axis.ValueAxis: boolean positiveArrowVisible> = 0;

        this.<org.jfree.chart.axis.ValueAxis: boolean negativeArrowVisible> = 0;

        $stack7 = <org.jfree.chart.axis.ValueAxis: org.jfree.data.Range DEFAULT_RANGE>;

        this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range> = $stack7;

        this.<org.jfree.chart.axis.ValueAxis: boolean autoRange> = 1;

        $stack8 = <org.jfree.chart.axis.ValueAxis: org.jfree.data.Range DEFAULT_RANGE>;

        this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range defaultAutoRange> = $stack8;

        this.<org.jfree.chart.axis.ValueAxis: boolean inverted> = 0;

        this.<org.jfree.chart.axis.ValueAxis: double autoRangeMinimumSize> = 1.0E-8;

        this.<org.jfree.chart.axis.ValueAxis: double lowerMargin> = 0.05;

        this.<org.jfree.chart.axis.ValueAxis: double upperMargin> = 0.05;

        this.<org.jfree.chart.axis.ValueAxis: double fixedAutoRange> = 0.0;

        this.<org.jfree.chart.axis.ValueAxis: boolean autoTickUnitSelection> = 1;

        this.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.TickUnitSource standardTickUnits> = standardTickUnits;

        $stack9 = new java.awt.Polygon;

        specialinvoke $stack9.<java.awt.Polygon: void <init>()>();

        virtualinvoke $stack9.<java.awt.Polygon: void addPoint(int,int)>(0, 0);

        virtualinvoke $stack9.<java.awt.Polygon: void addPoint(int,int)>(-2, 2);

        virtualinvoke $stack9.<java.awt.Polygon: void addPoint(int,int)>(2, 2);

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape upArrow> = $stack9;

        $stack10 = new java.awt.Polygon;

        specialinvoke $stack10.<java.awt.Polygon: void <init>()>();

        virtualinvoke $stack10.<java.awt.Polygon: void addPoint(int,int)>(0, 0);

        virtualinvoke $stack10.<java.awt.Polygon: void addPoint(int,int)>(-2, -2);

        virtualinvoke $stack10.<java.awt.Polygon: void addPoint(int,int)>(2, -2);

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape downArrow> = $stack10;

        $stack11 = new java.awt.Polygon;

        specialinvoke $stack11.<java.awt.Polygon: void <init>()>();

        virtualinvoke $stack11.<java.awt.Polygon: void addPoint(int,int)>(0, 0);

        virtualinvoke $stack11.<java.awt.Polygon: void addPoint(int,int)>(-2, -2);

        virtualinvoke $stack11.<java.awt.Polygon: void addPoint(int,int)>(-2, 2);

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape rightArrow> = $stack11;

        $stack12 = new java.awt.Polygon;

        specialinvoke $stack12.<java.awt.Polygon: void <init>()>();

        virtualinvoke $stack12.<java.awt.Polygon: void addPoint(int,int)>(0, 0);

        virtualinvoke $stack12.<java.awt.Polygon: void addPoint(int,int)>(2, -2);

        virtualinvoke $stack12.<java.awt.Polygon: void addPoint(int,int)>(2, 2);

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape leftArrow> = $stack12;

        this.<org.jfree.chart.axis.ValueAxis: boolean verticalTickLabels> = 0;

        this.<org.jfree.chart.axis.ValueAxis: int minorTickCount> = 0;

        return;
    }

    public boolean isVerticalTickLabels()
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: boolean verticalTickLabels>;

        return $stack1;
    }

    public void setVerticalTickLabels(boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.axis.ValueAxis;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.axis.ValueAxis: boolean verticalTickLabels>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.axis.ValueAxis: boolean verticalTickLabels> = flag;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean isPositiveArrowVisible()
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: boolean positiveArrowVisible>;

        return $stack1;
    }

    public void setPositiveArrowVisible(boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean visible;

        this := @this: org.jfree.chart.axis.ValueAxis;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.axis.ValueAxis: boolean positiveArrowVisible> = visible;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public boolean isNegativeArrowVisible()
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: boolean negativeArrowVisible>;

        return $stack1;
    }

    public void setNegativeArrowVisible(boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean visible;

        this := @this: org.jfree.chart.axis.ValueAxis;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.axis.ValueAxis: boolean negativeArrowVisible> = visible;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Shape getUpArrow()
    {
        org.jfree.chart.axis.ValueAxis this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape upArrow>;

        return $stack1;
    }

    public void setUpArrow(java.awt.Shape)
    {
        java.awt.Shape arrow;
        org.jfree.chart.axis.ValueAxis this;

        this := @this: org.jfree.chart.axis.ValueAxis;

        arrow := @parameter0: java.awt.Shape;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(arrow, "arrow");

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape upArrow> = arrow;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Shape getDownArrow()
    {
        org.jfree.chart.axis.ValueAxis this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape downArrow>;

        return $stack1;
    }

    public void setDownArrow(java.awt.Shape)
    {
        java.awt.Shape arrow;
        org.jfree.chart.axis.ValueAxis this;

        this := @this: org.jfree.chart.axis.ValueAxis;

        arrow := @parameter0: java.awt.Shape;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(arrow, "arrow");

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape downArrow> = arrow;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Shape getLeftArrow()
    {
        org.jfree.chart.axis.ValueAxis this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape leftArrow>;

        return $stack1;
    }

    public void setLeftArrow(java.awt.Shape)
    {
        java.awt.Shape arrow;
        org.jfree.chart.axis.ValueAxis this;

        this := @this: org.jfree.chart.axis.ValueAxis;

        arrow := @parameter0: java.awt.Shape;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(arrow, "arrow");

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape leftArrow> = arrow;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Shape getRightArrow()
    {
        org.jfree.chart.axis.ValueAxis this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape rightArrow>;

        return $stack1;
    }

    public void setRightArrow(java.awt.Shape)
    {
        java.awt.Shape arrow;
        org.jfree.chart.axis.ValueAxis this;

        this := @this: org.jfree.chart.axis.ValueAxis;

        arrow := @parameter0: java.awt.Shape;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(arrow, "arrow");

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape rightArrow> = arrow;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    protected void drawAxisLine(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        double cursor, $stack88, $stack89, $stack104, $stack105, $stack107, $stack108, $stack110, $stack111, x, y;
        org.jfree.chart.ui.RectangleEdge edge, $stack19, $stack20, $stack21, $stack22, $stack32, $stack36, $stack37, $stack48, $stack57, $stack62, $stack63, $stack74;
        java.awt.Graphics2D g2;
        org.jfree.chart.axis.ValueAxis this;
        java.lang.Object saved, $stack27;
        java.awt.geom.Rectangle2D dataArea;
        boolean $stack83, $stack85, drawUpOrRight, drawDownOrLeft, $stack30, $stack31;
        java.awt.geom.Line2D$Double $stack87, $stack103, $stack106, $stack109, axisLine;
        java.awt.Paint $stack23;
        java.awt.Stroke $stack24;
        java.awt.RenderingHints$Key $stack25, $stack28, $stack29;
        java.awt.Shape arrow, shape;
        java.awt.geom.AffineTransform $stack59, $stack34;

        this := @this: org.jfree.chart.axis.ValueAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        cursor := @parameter1: double;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        axisLine = null;

        $stack19 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack19 goto label01;

        $stack109 = new java.awt.geom.Line2D$Double;

        $stack110 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getX()>();

        $stack111 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack109.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack110, cursor, $stack111, cursor);

        axisLine = $stack109;

        goto label04;

     label01:
        $stack20 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack20 goto label02;

        $stack106 = new java.awt.geom.Line2D$Double;

        $stack107 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getX()>();

        $stack108 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack106.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack107, cursor, $stack108, cursor);

        axisLine = $stack106;

        goto label04;

     label02:
        $stack21 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack21 goto label03;

        $stack103 = new java.awt.geom.Line2D$Double;

        $stack104 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getY()>();

        $stack105 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack103.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(cursor, $stack104, cursor, $stack105);

        axisLine = $stack103;

        goto label04;

     label03:
        $stack22 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack22 goto label04;

        $stack87 = new java.awt.geom.Line2D$Double;

        $stack88 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getY()>();

        $stack89 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack87.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(cursor, $stack88, cursor, $stack89);

        axisLine = $stack87;

     label04:
        $stack23 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.Paint getAxisLinePaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack23);

        $stack24 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.Stroke getAxisLineStroke()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack24);

        $stack25 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        saved = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack25);

        $stack28 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $stack27 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack28, $stack27);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(axisLine);

        $stack29 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack29, saved);

        drawUpOrRight = 0;

        drawDownOrLeft = 0;

        $stack30 = this.<org.jfree.chart.axis.ValueAxis: boolean positiveArrowVisible>;

        if $stack30 == 0 goto label06;

        $stack85 = this.<org.jfree.chart.axis.ValueAxis: boolean inverted>;

        if $stack85 == 0 goto label05;

        drawDownOrLeft = 1;

        goto label06;

     label05:
        drawUpOrRight = 1;

     label06:
        $stack31 = this.<org.jfree.chart.axis.ValueAxis: boolean negativeArrowVisible>;

        if $stack31 == 0 goto label08;

        $stack83 = this.<org.jfree.chart.axis.ValueAxis: boolean inverted>;

        if $stack83 == 0 goto label07;

        drawUpOrRight = 1;

        goto label08;

     label07:
        drawDownOrLeft = 1;

     label08:
        if drawUpOrRight == 0 goto label13;

        x = 0.0;

        y = 0.0;

        arrow = null;

        $stack57 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge == $stack57 goto label09;

        $stack62 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack62 goto label10;

     label09:
        x = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        y = cursor;

        arrow = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape rightArrow>;

        goto label12;

     label10:
        $stack63 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge == $stack63 goto label11;

        $stack74 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack74 goto label12;

     label11:
        x = cursor;

        y = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        arrow = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape upArrow>;

     label12:
        $stack59 = new java.awt.geom.AffineTransform;

        specialinvoke $stack59.<java.awt.geom.AffineTransform: void <init>()>();

        virtualinvoke $stack59.<java.awt.geom.AffineTransform: void setToTranslation(double,double)>(x, y);

        shape = virtualinvoke $stack59.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(arrow);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(shape);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(shape);

     label13:
        if drawDownOrLeft == 0 goto label18;

        x = 0.0;

        y = 0.0;

        arrow = null;

        $stack32 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge == $stack32 goto label14;

        $stack36 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack36 goto label15;

     label14:
        x = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        y = cursor;

        arrow = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape leftArrow>;

        goto label17;

     label15:
        $stack37 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge == $stack37 goto label16;

        $stack48 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack48 goto label17;

     label16:
        x = cursor;

        y = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        arrow = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape downArrow>;

     label17:
        $stack34 = new java.awt.geom.AffineTransform;

        specialinvoke $stack34.<java.awt.geom.AffineTransform: void <init>()>();

        virtualinvoke $stack34.<java.awt.geom.AffineTransform: void setToTranslation(double,double)>(x, y);

        shape = virtualinvoke $stack34.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(arrow);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(shape);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(shape);

     label18:
        return;
    }

    protected float[] calculateAnchorPoint(org.jfree.chart.axis.ValueTick, double, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.chart.ui.RectangleInsets insets;
        float[] result;
        org.jfree.chart.ui.RectangleEdge edge, $stack9, $stack10, $stack11, $stack12;
        double cursor, $stack14, $stack15, $stack16, $stack19, $stack20, $stack24, $stack25, $stack26, $stack29, $stack30, $stack33, $stack34, $stack37, $stack38, $stack39, $stack42, $stack43, $stack46, $stack47, $stack48;
        float $stack17, $stack21, $stack27, $stack31, $stack35, $stack40, $stack44, $stack49;
        org.jfree.chart.axis.ValueTick tick;
        java.awt.geom.Rectangle2D dataArea;

        this := @this: org.jfree.chart.axis.ValueAxis;

        tick := @parameter0: org.jfree.chart.axis.ValueTick;

        cursor := @parameter1: double;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        insets = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.ui.RectangleInsets getTickLabelInsets()>();

        result = newarray (float)[2];

        $stack9 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack9 goto label1;

        $stack42 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack43 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack42, dataArea, edge);

        $stack44 = (float) $stack43;

        result[0] = $stack44;

        $stack46 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        $stack47 = cursor - $stack46;

        $stack48 = $stack47 - 2.0;

        $stack49 = (float) $stack48;

        result[1] = $stack49;

        goto label4;

     label1:
        $stack10 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack10 goto label2;

        $stack33 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack34 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack33, dataArea, edge);

        $stack35 = (float) $stack34;

        result[0] = $stack35;

        $stack37 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack38 = cursor + $stack37;

        $stack39 = $stack38 + 2.0;

        $stack40 = (float) $stack39;

        result[1] = $stack40;

        goto label4;

     label2:
        $stack11 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack11 goto label3;

        $stack24 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack25 = cursor - $stack24;

        $stack26 = $stack25 - 2.0;

        $stack27 = (float) $stack26;

        result[0] = $stack27;

        $stack29 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack30 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack29, dataArea, edge);

        $stack31 = (float) $stack30;

        result[1] = $stack31;

        goto label4;

     label3:
        $stack12 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack12 goto label4;

        $stack14 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        $stack15 = cursor + $stack14;

        $stack16 = $stack15 + 2.0;

        $stack17 = (float) $stack16;

        result[0] = $stack17;

        $stack19 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack20 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack19, dataArea, edge);

        $stack21 = (float) $stack20;

        result[1] = $stack21;

     label4:
        return result;
    }

    protected org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.axis.AxisState $stack18;
        double cursor, $stack42, $stack59, $stack60, $stack68, $stack69, $stack70, $stack71, $stack75, $stack76, $stack77, $stack78, $stack80, $stack81, $stack82, $stack83, $stack85, $stack86, $stack87, $stack88, $stack118, $stack126, $stack103, anchorPoint#16, $stack90, tick#27;
        org.jfree.chart.axis.ValueAxis this;
        boolean $stack19, $stack29, $stack35, $stack37, $stack39, $stack41, $stack44, $stack46, $stack50, $stack53, $stack57, $stack107, $stack112, $stack27, $stack45;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea, plotArea;
        org.jfree.chart.ui.RectangleEdge edge, $stack30, $stack31, $stack32, $stack33, $stack63, $stack64, $stack65, $stack66;
        java.util.List ticks;
        java.awt.Font $stack21;
        java.awt.RenderingHints$Key $stack22, $stack25, $stack28;
        java.lang.Object saved, $stack24, $stack43;
        java.util.Iterator iterator;
        org.jfree.chart.axis.TickType $stack48, $stack49, $stack51, $stack52, $stack55, $stack56, $stack105, $stack106;
        float $stack54, $stack58, xx, $stack89, $stack102, $stack115, $stack116, $stack123, $stack124;
        java.awt.Stroke $stack61;
        java.awt.Paint $stack62, $stack110;
        java.awt.geom.Line2D$Double $stack67, $stack74, $stack79, $stack84, mark;
        java.lang.String $stack113, $stack114;
        org.jfree.chart.ui.TextAnchor $stack117, $stack119, $stack125, $stack127;
        org.jfree.chart.axis.LogTick lt;
        java.text.AttributedString $stack121, $stack122;
        org.jfree.chart.axis.ValueTick tick;
        float[] anchorPoint;

        this := @this: org.jfree.chart.axis.ValueAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        cursor := @parameter1: double;

        plotArea := @parameter2: java.awt.geom.Rectangle2D;

        dataArea := @parameter3: java.awt.geom.Rectangle2D;

        edge := @parameter4: org.jfree.chart.ui.RectangleEdge;

        $stack18 = new org.jfree.chart.axis.AxisState;

        specialinvoke $stack18.<org.jfree.chart.axis.AxisState: void <init>(double)>(cursor);

        $stack19 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isAxisLineVisible()>();

        if $stack19 == 0 goto label01;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(g2, cursor, dataArea, edge);

     label01:
        ticks = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(g2, $stack18, dataArea, edge);

        virtualinvoke $stack18.<org.jfree.chart.axis.AxisState: void setTicks(java.util.List)>(ticks);

        $stack21 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.Font getTickLabelFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack21);

        $stack22 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        saved = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack22);

        $stack25 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $stack24 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack25, $stack24);

        iterator = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack27 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack27 == 0 goto label18;

        $stack43 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack43;

        $stack44 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isTickLabelsVisible()>();

        if $stack44 == 0 goto label06;

        $stack110 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.Paint getTickLabelPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack110);

        anchorPoint = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: float[] calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(tick, cursor, dataArea, edge);

        $stack112 = tick instanceof org.jfree.chart.axis.LogTick;

        if $stack112 == 0 goto label04;

        lt = (org.jfree.chart.axis.LogTick) tick;

        $stack121 = virtualinvoke lt.<org.jfree.chart.axis.LogTick: java.text.AttributedString getAttributedLabel()>();

        if $stack121 != null goto label03;

        goto label02;

     label03:
        $stack122 = virtualinvoke lt.<org.jfree.chart.axis.LogTick: java.text.AttributedString getAttributedLabel()>();

        $stack123 = anchorPoint[0];

        $stack124 = anchorPoint[1];

        $stack125 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.ui.TextAnchor getTextAnchor()>();

        $stack126 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getAngle()>();

        $stack127 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.ui.TextAnchor getRotationAnchor()>();

        staticinvoke <org.jfree.chart.util.AttrStringUtils: void drawRotatedString(java.text.AttributedString,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>($stack122, g2, $stack123, $stack124, $stack125, $stack126, $stack127);

        goto label06;

     label04:
        $stack113 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: java.lang.String getText()>();

        if $stack113 != null goto label05;

        goto label02;

     label05:
        $stack114 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: java.lang.String getText()>();

        $stack115 = anchorPoint[0];

        $stack116 = anchorPoint[1];

        $stack117 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.ui.TextAnchor getTextAnchor()>();

        $stack118 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getAngle()>();

        $stack119 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.ui.TextAnchor getRotationAnchor()>();

        staticinvoke <org.jfree.chart.text.TextUtils: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>($stack114, g2, $stack115, $stack116, $stack117, $stack118, $stack119);

     label06:
        $stack45 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isTickMarksVisible()>();

        if $stack45 == 0 goto label07;

        $stack105 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack106 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MAJOR>;

        $stack107 = virtualinvoke $stack105.<org.jfree.chart.axis.TickType: boolean equals(java.lang.Object)>($stack106);

        if $stack107 != 0 goto label08;

     label07:
        $stack46 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isMinorTickMarksVisible()>();

        if $stack46 == 0 goto label17;

        $stack48 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack49 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MINOR>;

        $stack50 = virtualinvoke $stack48.<org.jfree.chart.axis.TickType: boolean equals(java.lang.Object)>($stack49);

        if $stack50 == 0 goto label17;

     label08:
        $stack51 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack52 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MINOR>;

        $stack53 = virtualinvoke $stack51.<org.jfree.chart.axis.TickType: boolean equals(java.lang.Object)>($stack52);

        if $stack53 == 0 goto label09;

        $stack102 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: float getMinorTickMarkOutsideLength()>();

        $stack103 = (double) $stack102;

        goto label10;

     label09:
        $stack54 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: float getTickMarkOutsideLength()>();

        $stack103 = (double) $stack54;

     label10:
        anchorPoint#16 = $stack103;

        $stack55 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: org.jfree.chart.axis.TickType getTickType()>();

        $stack56 = <org.jfree.chart.axis.TickType: org.jfree.chart.axis.TickType MINOR>;

        $stack57 = virtualinvoke $stack55.<org.jfree.chart.axis.TickType: boolean equals(java.lang.Object)>($stack56);

        if $stack57 == 0 goto label11;

        $stack89 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: float getMinorTickMarkInsideLength()>();

        $stack90 = (double) $stack89;

        goto label12;

     label11:
        $stack58 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: float getTickMarkInsideLength()>();

        $stack90 = (double) $stack58;

     label12:
        $stack59 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack60 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack59, dataArea, edge);

        xx = (float) $stack60;

        mark = null;

        $stack61 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.Stroke getTickMarkStroke()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack61);

        $stack62 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.Paint getTickMarkPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack62);

        $stack63 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack63 goto label13;

        $stack84 = new java.awt.geom.Line2D$Double;

        $stack88 = cursor - anchorPoint#16;

        $stack87 = (double) xx;

        $stack86 = cursor + $stack90;

        $stack85 = (double) xx;

        specialinvoke $stack84.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack88, $stack87, $stack86, $stack85);

        mark = $stack84;

        goto label16;

     label13:
        $stack64 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack64 goto label14;

        $stack79 = new java.awt.geom.Line2D$Double;

        $stack83 = cursor + anchorPoint#16;

        $stack82 = (double) xx;

        $stack81 = cursor - $stack90;

        $stack80 = (double) xx;

        specialinvoke $stack79.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack83, $stack82, $stack81, $stack80);

        mark = $stack79;

        goto label16;

     label14:
        $stack65 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack65 goto label15;

        $stack74 = new java.awt.geom.Line2D$Double;

        $stack78 = (double) xx;

        $stack77 = cursor - anchorPoint#16;

        $stack76 = (double) xx;

        $stack75 = cursor + $stack90;

        specialinvoke $stack74.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack78, $stack77, $stack76, $stack75);

        mark = $stack74;

        goto label16;

     label15:
        $stack66 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack66 goto label16;

        $stack67 = new java.awt.geom.Line2D$Double;

        $stack71 = (double) xx;

        $stack70 = cursor + anchorPoint#16;

        $stack69 = (double) xx;

        $stack68 = cursor - $stack90;

        specialinvoke $stack67.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack71, $stack70, $stack69, $stack68);

        mark = $stack67;

     label16:
        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(mark);

     label17:
        goto label02;

     label18:
        $stack28 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack28, saved);

        $stack29 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isTickLabelsVisible()>();

        if $stack29 == 0 goto label22;

        $stack30 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack30 goto label19;

        $stack41 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isVerticalTickLabels()>();

        $stack42 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>(ticks, g2, plotArea, $stack41);

        tick#27 = 0.0 + $stack42;

        virtualinvoke $stack18.<org.jfree.chart.axis.AxisState: void cursorLeft(double)>(tick#27);

        goto label22;

     label19:
        $stack31 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack31 goto label20;

        $stack39 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isVerticalTickLabels()>();

        tick#27 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>(ticks, g2, plotArea, $stack39);

        virtualinvoke $stack18.<org.jfree.chart.axis.AxisState: void cursorRight(double)>(tick#27);

        goto label22;

     label20:
        $stack32 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack32 goto label21;

        $stack37 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isVerticalTickLabels()>();

        tick#27 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>(ticks, g2, plotArea, $stack37);

        virtualinvoke $stack18.<org.jfree.chart.axis.AxisState: void cursorUp(double)>(tick#27);

        goto label22;

     label21:
        $stack33 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack33 goto label22;

        $stack35 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isVerticalTickLabels()>();

        tick#27 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>(ticks, g2, plotArea, $stack35);

        virtualinvoke $stack18.<org.jfree.chart.axis.AxisState: void cursorDown(double)>(tick#27);

     label22:
        return $stack18;
    }

    public org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D, org.jfree.chart.plot.Plot, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean $stack15, $stack18, $stack21, $stack30, $stack31, $stack36, $stack38, $stack20;
        double dimension, $stack23, $stack26, tickLabelHeight, tickLabelWidth, labelHeight;
        byte $stack17;
        java.awt.Graphics2D g2;
        org.jfree.chart.ui.RectangleEdge edge;
        java.awt.Font $stack27;
        org.jfree.chart.axis.AxisState $stack28;
        java.awt.geom.Rectangle2D plotArea, ticks#17;
        org.jfree.chart.axis.AxisSpace $stack40, space;
        org.jfree.chart.plot.Plot plot;
        java.util.List ticks;

        this := @this: org.jfree.chart.axis.ValueAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        plot := @parameter1: org.jfree.chart.plot.Plot;

        plotArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        space := @parameter4: org.jfree.chart.axis.AxisSpace;

        if space != null goto label1;

        $stack40 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack40.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        space = $stack40;

     label1:
        $stack15 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isVisible()>();

        if $stack15 != 0 goto label2;

        return space;

     label2:
        dimension = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double getFixedDimension()>();

        $stack17 = dimension cmpl 0.0;

        if $stack17 <= 0 goto label3;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void add(double,org.jfree.chart.ui.RectangleEdge)>(dimension, edge);

        return space;

     label3:
        tickLabelHeight = 0.0;

        tickLabelWidth = 0.0;

        $stack18 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isTickLabelsVisible()>();

        if $stack18 == 0 goto label5;

        $stack27 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.Font getTickLabelFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack27);

        $stack28 = new org.jfree.chart.axis.AxisState;

        specialinvoke $stack28.<org.jfree.chart.axis.AxisState: void <init>()>();

        ticks = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(g2, $stack28, plotArea, edge);

        $stack30 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack30 == 0 goto label4;

        $stack38 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isVerticalTickLabels()>();

        tickLabelHeight = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>(ticks, g2, plotArea, $stack38);

        goto label5;

     label4:
        $stack31 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack31 == 0 goto label5;

        $stack36 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isVerticalTickLabels()>();

        tickLabelWidth = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>(ticks, g2, plotArea, $stack36);

     label5:
        ticks#17 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.geom.Rectangle2D getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.ui.RectangleEdge)>(g2, edge);

        $stack20 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack20 == 0 goto label6;

        labelHeight = virtualinvoke ticks#17.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack26 = labelHeight + tickLabelHeight;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void add(double,org.jfree.chart.ui.RectangleEdge)>($stack26, edge);

        goto label7;

     label6:
        $stack21 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack21 == 0 goto label7;

        labelHeight = virtualinvoke ticks#17.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack23 = labelHeight + tickLabelWidth;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void add(double,org.jfree.chart.ui.RectangleEdge)>($stack23, edge);

     label7:
        return space;
    }

    protected double findMaximumTickLabelHeight(java.util.List, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.chart.ui.RectangleInsets insets;
        java.awt.Font font;
        java.awt.Graphics2D g2;
        boolean vertical, $stack26, $stack29;
        java.awt.font.FontRenderContext $stack17;
        float $stack19;
        double $stack20, $stack21, $stack22, $stack23, $stack32, $stack33, $stack34, $stack35, $stack36, $stack38, $stack39, $stack40, $stack41, maxHeight;
        java.util.List ticks;
        java.util.Iterator iterator;
        java.lang.Object $stack28;
        org.jfree.chart.axis.Tick tick;
        java.lang.String $stack30, $stack42;
        byte $stack37;
        org.jfree.chart.axis.LogTick lt;
        java.text.AttributedString $stack45, $stack46;
        java.awt.geom.Rectangle2D drawArea, labelBounds;
        java.awt.FontMetrics fm;
        java.awt.font.LineMetrics fm#6;

        this := @this: org.jfree.chart.axis.ValueAxis;

        ticks := @parameter0: java.util.List;

        g2 := @parameter1: java.awt.Graphics2D;

        drawArea := @parameter2: java.awt.geom.Rectangle2D;

        vertical := @parameter3: boolean;

        insets = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.ui.RectangleInsets getTickLabelInsets()>();

        font = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.Font getTickLabelFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>(font);

        maxHeight = 0.0;

        if vertical == 0 goto label7;

        fm = virtualinvoke g2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(font);

        iterator = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack26 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label6;

        $stack28 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.Tick) $stack28;

        labelBounds = null;

        $stack29 = tick instanceof org.jfree.chart.axis.LogTick;

        if $stack29 == 0 goto label3;

        lt = (org.jfree.chart.axis.LogTick) tick;

        $stack45 = virtualinvoke lt.<org.jfree.chart.axis.LogTick: java.text.AttributedString getAttributedLabel()>();

        if $stack45 == null goto label2;

        $stack46 = virtualinvoke lt.<org.jfree.chart.axis.LogTick: java.text.AttributedString getAttributedLabel()>();

        labelBounds = staticinvoke <org.jfree.chart.util.AttrStringUtils: java.awt.geom.Rectangle2D getTextBounds(java.text.AttributedString,java.awt.Graphics2D)>($stack46, g2);

     label2:
        goto label4;

     label3:
        $stack30 = virtualinvoke tick.<org.jfree.chart.axis.Tick: java.lang.String getText()>();

        if $stack30 == null goto label4;

        $stack42 = virtualinvoke tick.<org.jfree.chart.axis.Tick: java.lang.String getText()>();

        labelBounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>($stack42, g2, fm);

     label4:
        if labelBounds == null goto label5;

        $stack32 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack33 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack34 = $stack32 + $stack33;

        $stack35 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        $stack36 = $stack34 + $stack35;

        $stack37 = $stack36 cmpl maxHeight;

        if $stack37 <= 0 goto label5;

        $stack38 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack39 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack40 = $stack38 + $stack39;

        $stack41 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        maxHeight = $stack40 + $stack41;

     label5:
        goto label1;

     label6:
        goto label8;

     label7:
        $stack17 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        fm#6 = virtualinvoke font.<java.awt.Font: java.awt.font.LineMetrics getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)>("ABCxyz", $stack17);

        $stack19 = virtualinvoke fm#6.<java.awt.font.LineMetrics: float getHeight()>();

        $stack20 = (double) $stack19;

        $stack21 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack22 = $stack20 + $stack21;

        $stack23 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        maxHeight = $stack22 + $stack23;

     label8:
        return maxHeight;
    }

    protected double findMaximumTickLabelWidth(java.util.List, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.chart.ui.RectangleInsets insets;
        java.awt.Font font;
        boolean vertical, $stack26, $stack29;
        java.awt.Graphics2D g2;
        java.awt.font.FontRenderContext $stack17;
        float $stack19;
        double $stack20, $stack21, $stack22, $stack23, $stack32, $stack33, $stack34, $stack35, $stack36, $stack38, $stack39, $stack40, $stack41, maxWidth;
        java.util.List ticks;
        java.util.Iterator iterator;
        java.lang.Object $stack28;
        org.jfree.chart.axis.Tick tick;
        java.lang.String $stack30, $stack42;
        byte $stack37;
        org.jfree.chart.axis.LogTick lt;
        java.text.AttributedString $stack45, $stack46;
        java.awt.geom.Rectangle2D drawArea, labelBounds;
        java.awt.FontMetrics fm;
        java.awt.font.LineMetrics fm#6;

        this := @this: org.jfree.chart.axis.ValueAxis;

        ticks := @parameter0: java.util.List;

        g2 := @parameter1: java.awt.Graphics2D;

        drawArea := @parameter2: java.awt.geom.Rectangle2D;

        vertical := @parameter3: boolean;

        insets = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.ui.RectangleInsets getTickLabelInsets()>();

        font = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: java.awt.Font getTickLabelFont()>();

        maxWidth = 0.0;

        if vertical != 0 goto label7;

        fm = virtualinvoke g2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(font);

        iterator = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack26 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label6;

        $stack28 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.Tick) $stack28;

        labelBounds = null;

        $stack29 = tick instanceof org.jfree.chart.axis.LogTick;

        if $stack29 == 0 goto label3;

        lt = (org.jfree.chart.axis.LogTick) tick;

        $stack45 = virtualinvoke lt.<org.jfree.chart.axis.LogTick: java.text.AttributedString getAttributedLabel()>();

        if $stack45 == null goto label2;

        $stack46 = virtualinvoke lt.<org.jfree.chart.axis.LogTick: java.text.AttributedString getAttributedLabel()>();

        labelBounds = staticinvoke <org.jfree.chart.util.AttrStringUtils: java.awt.geom.Rectangle2D getTextBounds(java.text.AttributedString,java.awt.Graphics2D)>($stack46, g2);

     label2:
        goto label4;

     label3:
        $stack30 = virtualinvoke tick.<org.jfree.chart.axis.Tick: java.lang.String getText()>();

        if $stack30 == null goto label4;

        $stack42 = virtualinvoke tick.<org.jfree.chart.axis.Tick: java.lang.String getText()>();

        labelBounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>($stack42, g2, fm);

     label4:
        if labelBounds == null goto label5;

        $stack32 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack33 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack34 = $stack32 + $stack33;

        $stack35 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        $stack36 = $stack34 + $stack35;

        $stack37 = $stack36 cmpl maxWidth;

        if $stack37 <= 0 goto label5;

        $stack38 = virtualinvoke labelBounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack39 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack40 = $stack38 + $stack39;

        $stack41 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        maxWidth = $stack40 + $stack41;

     label5:
        goto label1;

     label6:
        goto label8;

     label7:
        $stack17 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        fm#6 = virtualinvoke font.<java.awt.Font: java.awt.font.LineMetrics getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)>("ABCxyz", $stack17);

        $stack19 = virtualinvoke fm#6.<java.awt.font.LineMetrics: float getHeight()>();

        $stack20 = (double) $stack19;

        $stack21 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack22 = $stack20 + $stack21;

        $stack23 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        maxWidth = $stack22 + $stack23;

     label8:
        return maxWidth;
    }

    public boolean isInverted()
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: boolean inverted>;

        return $stack1;
    }

    public void setInverted(boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.axis.ValueAxis;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.axis.ValueAxis: boolean inverted>;

        if $stack2 == flag goto label1;

        this.<org.jfree.chart.axis.ValueAxis: boolean inverted> = flag;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean isAutoRange()
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: boolean autoRange>;

        return $stack1;
    }

    public void setAutoRange(boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean auto;

        this := @this: org.jfree.chart.axis.ValueAxis;

        auto := @parameter0: boolean;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setAutoRange(boolean,boolean)>(auto, 1);

        return;
    }

    protected void setAutoRange(boolean, boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean auto, $stack3, notify;

        this := @this: org.jfree.chart.axis.ValueAxis;

        auto := @parameter0: boolean;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.axis.ValueAxis: boolean autoRange> = auto;

        $stack3 = this.<org.jfree.chart.axis.ValueAxis: boolean autoRange>;

        if $stack3 == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void autoAdjustRange()>();

     label1:
        if notify == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

     label2:
        return;
    }

    public double getAutoRangeMinimumSize()
    {
        org.jfree.chart.axis.ValueAxis this;
        double $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: double autoRangeMinimumSize>;

        return $stack1;
    }

    public void setAutoRangeMinimumSize(double)
    {
        org.jfree.chart.axis.ValueAxis this;
        double size;

        this := @this: org.jfree.chart.axis.ValueAxis;

        size := @parameter0: double;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setAutoRangeMinimumSize(double,boolean)>(size, 1);

        return;
    }

    public void setAutoRangeMinimumSize(double, boolean)
    {
        double size, $stack5;
        byte $stack4, $stack6;
        org.jfree.chart.axis.ValueAxis this;
        boolean $stack7, notify;
        java.lang.IllegalArgumentException $stack9;

        this := @this: org.jfree.chart.axis.ValueAxis;

        size := @parameter0: double;

        notify := @parameter1: boolean;

        $stack4 = size cmpg 0.0;

        if $stack4 > 0 goto label1;

        $stack9 = new java.lang.IllegalArgumentException;

        specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.");

        throw $stack9;

     label1:
        $stack5 = this.<org.jfree.chart.axis.ValueAxis: double autoRangeMinimumSize>;

        $stack6 = $stack5 cmpl size;

        if $stack6 == 0 goto label3;

        this.<org.jfree.chart.axis.ValueAxis: double autoRangeMinimumSize> = size;

        $stack7 = this.<org.jfree.chart.axis.ValueAxis: boolean autoRange>;

        if $stack7 == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void autoAdjustRange()>();

     label2:
        if notify == 0 goto label3;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

     label3:
        return;
    }

    public org.jfree.data.Range getDefaultAutoRange()
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range defaultAutoRange>;

        return $stack1;
    }

    public void setDefaultAutoRange(org.jfree.data.Range)
    {
        org.jfree.data.Range range;
        org.jfree.chart.axis.ValueAxis this;

        this := @this: org.jfree.chart.axis.ValueAxis;

        range := @parameter0: org.jfree.data.Range;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(range, "range");

        this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range defaultAutoRange> = range;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public double getLowerMargin()
    {
        org.jfree.chart.axis.ValueAxis this;
        double $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: double lowerMargin>;

        return $stack1;
    }

    public void setLowerMargin(double)
    {
        org.jfree.chart.axis.ValueAxis this;
        double margin;
        boolean $stack3;

        this := @this: org.jfree.chart.axis.ValueAxis;

        margin := @parameter0: double;

        this.<org.jfree.chart.axis.ValueAxis: double lowerMargin> = margin;

        $stack3 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isAutoRange()>();

        if $stack3 == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void autoAdjustRange()>();

     label1:
        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public double getUpperMargin()
    {
        org.jfree.chart.axis.ValueAxis this;
        double $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: double upperMargin>;

        return $stack1;
    }

    public void setUpperMargin(double)
    {
        org.jfree.chart.axis.ValueAxis this;
        double margin;
        boolean $stack3;

        this := @this: org.jfree.chart.axis.ValueAxis;

        margin := @parameter0: double;

        this.<org.jfree.chart.axis.ValueAxis: double upperMargin> = margin;

        $stack3 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isAutoRange()>();

        if $stack3 == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void autoAdjustRange()>();

     label1:
        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public double getFixedAutoRange()
    {
        org.jfree.chart.axis.ValueAxis this;
        double $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: double fixedAutoRange>;

        return $stack1;
    }

    public void setFixedAutoRange(double)
    {
        org.jfree.chart.axis.ValueAxis this;
        double length;
        boolean $stack3;

        this := @this: org.jfree.chart.axis.ValueAxis;

        length := @parameter0: double;

        this.<org.jfree.chart.axis.ValueAxis: double fixedAutoRange> = length;

        $stack3 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isAutoRange()>();

        if $stack3 == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void autoAdjustRange()>();

     label1:
        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public double getLowerBound()
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack1;
        double $stack2;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack2 = virtualinvoke $stack1.<org.jfree.data.Range: double getLowerBound()>();

        return $stack2;
    }

    public void setLowerBound(double)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack3, $stack6, $stack8, $stack9;
        double $stack4, min, $stack7, $stack10;
        byte $stack5;

        this := @this: org.jfree.chart.axis.ValueAxis;

        min := @parameter0: double;

        $stack3 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack4 = virtualinvoke $stack3.<org.jfree.data.Range: double getUpperBound()>();

        $stack5 = $stack4 cmpl min;

        if $stack5 <= 0 goto label1;

        $stack8 = new org.jfree.data.Range;

        $stack9 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack10 = virtualinvoke $stack9.<org.jfree.data.Range: double getUpperBound()>();

        specialinvoke $stack8.<org.jfree.data.Range: void <init>(double,double)>(min, $stack10);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range)>($stack8);

        goto label2;

     label1:
        $stack6 = new org.jfree.data.Range;

        $stack7 = min + 1.0;

        specialinvoke $stack6.<org.jfree.data.Range: void <init>(double,double)>(min, $stack7);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range)>($stack6);

     label2:
        return;
    }

    public double getUpperBound()
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack1;
        double $stack2;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack2 = virtualinvoke $stack1.<org.jfree.data.Range: double getUpperBound()>();

        return $stack2;
    }

    public void setUpperBound(double)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack3, $stack7, $stack8;
        double $stack4, max, $stack6, $stack9;
        byte $stack5;

        this := @this: org.jfree.chart.axis.ValueAxis;

        max := @parameter0: double;

        $stack3 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack4 = virtualinvoke $stack3.<org.jfree.data.Range: double getLowerBound()>();

        $stack5 = $stack4 cmpg max;

        if $stack5 >= 0 goto label1;

        $stack7 = new org.jfree.data.Range;

        $stack8 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack9 = virtualinvoke $stack8.<org.jfree.data.Range: double getLowerBound()>();

        specialinvoke $stack7.<org.jfree.data.Range: void <init>(double,double)>($stack9, max);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range)>($stack7);

        goto label2;

     label1:
        $stack6 = max - 1.0;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(double,double)>($stack6, max);

     label2:
        return;
    }

    public org.jfree.data.Range getRange()
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        return $stack1;
    }

    public void setRange(org.jfree.data.Range)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range range;

        this := @this: org.jfree.chart.axis.ValueAxis;

        range := @parameter0: org.jfree.data.Range;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>(range, 1, 1);

        return;
    }

    public void setRange(org.jfree.data.Range, boolean, boolean)
    {
        org.jfree.data.Range range;
        double $stack4;
        byte $stack5;
        boolean turnOffAutoRange, notify;
        org.jfree.chart.axis.ValueAxis this;
        java.lang.IllegalArgumentException $stack9;
        java.lang.StringBuilder $stack10, $stack11, $stack12;
        java.lang.String $stack13;

        this := @this: org.jfree.chart.axis.ValueAxis;

        range := @parameter0: org.jfree.data.Range;

        turnOffAutoRange := @parameter1: boolean;

        notify := @parameter2: boolean;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(range, "range");

        $stack4 = virtualinvoke range.<org.jfree.data.Range: double getLength()>();

        $stack5 = $stack4 cmpg 0.0;

        if $stack5 > 0 goto label1;

        $stack9 = new java.lang.IllegalArgumentException;

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A positive range length is required: ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(range);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13);

        throw $stack9;

     label1:
        if turnOffAutoRange == 0 goto label2;

        this.<org.jfree.chart.axis.ValueAxis: boolean autoRange> = 0;

     label2:
        this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range> = range;

        if notify == 0 goto label3;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

     label3:
        return;
    }

    public void setRange(double, double)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack5;
        double lower, upper;

        this := @this: org.jfree.chart.axis.ValueAxis;

        lower := @parameter0: double;

        upper := @parameter1: double;

        $stack5 = new org.jfree.data.Range;

        specialinvoke $stack5.<org.jfree.data.Range: void <init>(double,double)>(lower, upper);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range)>($stack5);

        return;
    }

    public void setRangeWithMargins(org.jfree.data.Range)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range range;

        this := @this: org.jfree.chart.axis.ValueAxis;

        range := @parameter0: org.jfree.data.Range;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRangeWithMargins(org.jfree.data.Range,boolean,boolean)>(range, 1, 1);

        return;
    }

    public void setRangeWithMargins(org.jfree.data.Range, boolean, boolean)
    {
        org.jfree.data.Range range, $stack6;
        org.jfree.chart.axis.ValueAxis this;
        double $stack4, $stack5;
        boolean turnOffAutoRange, notify;

        this := @this: org.jfree.chart.axis.ValueAxis;

        range := @parameter0: org.jfree.data.Range;

        turnOffAutoRange := @parameter1: boolean;

        notify := @parameter2: boolean;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(range, "range");

        $stack4 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double getLowerMargin()>();

        $stack5 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double getUpperMargin()>();

        $stack6 = staticinvoke <org.jfree.data.Range: org.jfree.data.Range expand(org.jfree.data.Range,double,double)>(range, $stack4, $stack5);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>($stack6, turnOffAutoRange, notify);

        return;
    }

    public void setRangeWithMargins(double, double)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack5;
        double lower, upper;

        this := @this: org.jfree.chart.axis.ValueAxis;

        lower := @parameter0: double;

        upper := @parameter1: double;

        $stack5 = new org.jfree.data.Range;

        specialinvoke $stack5.<org.jfree.data.Range: void <init>(double,double)>(lower, upper);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRangeWithMargins(org.jfree.data.Range)>($stack5);

        return;
    }

    public void setRangeAboutValue(double, double)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack5;
        double value, length, $stack6, $stack7, $stack8, $stack9;

        this := @this: org.jfree.chart.axis.ValueAxis;

        value := @parameter0: double;

        length := @parameter1: double;

        $stack5 = new org.jfree.data.Range;

        $stack6 = length / 2.0;

        $stack9 = value - $stack6;

        $stack7 = length / 2.0;

        $stack8 = value + $stack7;

        specialinvoke $stack5.<org.jfree.data.Range: void <init>(double,double)>($stack9, $stack8);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range)>($stack5);

        return;
    }

    public boolean isAutoTickUnitSelection()
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: boolean autoTickUnitSelection>;

        return $stack1;
    }

    public void setAutoTickUnitSelection(boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean flag;

        this := @this: org.jfree.chart.axis.ValueAxis;

        flag := @parameter0: boolean;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setAutoTickUnitSelection(boolean,boolean)>(flag, 1);

        return;
    }

    public void setAutoTickUnitSelection(boolean, boolean)
    {
        org.jfree.chart.axis.ValueAxis this;
        boolean flag, $stack3, notify;

        this := @this: org.jfree.chart.axis.ValueAxis;

        flag := @parameter0: boolean;

        notify := @parameter1: boolean;

        $stack3 = this.<org.jfree.chart.axis.ValueAxis: boolean autoTickUnitSelection>;

        if $stack3 == flag goto label1;

        this.<org.jfree.chart.axis.ValueAxis: boolean autoTickUnitSelection> = flag;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.axis.TickUnitSource getStandardTickUnits()
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.chart.axis.TickUnitSource $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.TickUnitSource standardTickUnits>;

        return $stack1;
    }

    public void setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.chart.axis.TickUnitSource source;

        this := @this: org.jfree.chart.axis.ValueAxis;

        source := @parameter0: org.jfree.chart.axis.TickUnitSource;

        this.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.TickUnitSource standardTickUnits> = source;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public int getMinorTickCount()
    {
        org.jfree.chart.axis.ValueAxis this;
        int $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: int minorTickCount>;

        return $stack1;
    }

    public void setMinorTickCount(int)
    {
        org.jfree.chart.axis.ValueAxis this;
        int count;

        this := @this: org.jfree.chart.axis.ValueAxis;

        count := @parameter0: int;

        this.<org.jfree.chart.axis.ValueAxis: int minorTickCount> = count;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void fireChangeEvent()>();

        return;
    }

    public abstract double valueToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge);

    public double lengthToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.axis.ValueAxis this;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.ui.RectangleEdge edge;
        double zero, length, l, $stack11, $stack12;

        this := @this: org.jfree.chart.axis.ValueAxis;

        length := @parameter0: double;

        area := @parameter1: java.awt.geom.Rectangle2D;

        edge := @parameter2: org.jfree.chart.ui.RectangleEdge;

        zero = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(0.0, area, edge);

        l = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(length, area, edge);

        $stack11 = l - zero;

        $stack12 = staticinvoke <java.lang.Math: double abs(double)>($stack11);

        return $stack12;
    }

    public abstract double java2DToValue(double, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge);

    protected abstract void autoAdjustRange();

    public void centerRange(double)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack6, $stack8, $stack9, $stack12;
        double central, $stack10, value, $stack11, $stack13, $stack14, $stack15, $stack16;

        this := @this: org.jfree.chart.axis.ValueAxis;

        value := @parameter0: double;

        $stack6 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        central = virtualinvoke $stack6.<org.jfree.data.Range: double getCentralValue()>();

        $stack8 = new org.jfree.data.Range;

        $stack9 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack10 = virtualinvoke $stack9.<org.jfree.data.Range: double getLowerBound()>();

        $stack11 = $stack10 + value;

        $stack13 = $stack11 - central;

        $stack12 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack14 = virtualinvoke $stack12.<org.jfree.data.Range: double getUpperBound()>();

        $stack15 = $stack14 + value;

        $stack16 = $stack15 - central;

        specialinvoke $stack8.<org.jfree.data.Range: void <init>(double,double)>($stack13, $stack16);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range)>($stack8);

        return;
    }

    public void resizeRange(double)
    {
        org.jfree.chart.axis.ValueAxis this;
        double percent, $stack4;
        org.jfree.data.Range $stack3;

        this := @this: org.jfree.chart.axis.ValueAxis;

        percent := @parameter0: double;

        $stack3 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack4 = virtualinvoke $stack3.<org.jfree.data.Range: double getCentralValue()>();

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void resizeRange(double,double)>(percent, $stack4);

        return;
    }

    public void resizeRange(double, double)
    {
        double percent, $stack10, $stack11, halfLength, anchorValue, $stack13, $stack14;
        byte $stack8;
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack9, $stack12;

        this := @this: org.jfree.chart.axis.ValueAxis;

        percent := @parameter0: double;

        anchorValue := @parameter1: double;

        $stack8 = percent cmpl 0.0;

        if $stack8 <= 0 goto label1;

        $stack9 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack10 = virtualinvoke $stack9.<org.jfree.data.Range: double getLength()>();

        $stack11 = $stack10 * percent;

        halfLength = $stack11 / 2.0;

        $stack12 = new org.jfree.data.Range;

        $stack14 = anchorValue - halfLength;

        $stack13 = anchorValue + halfLength;

        specialinvoke $stack12.<org.jfree.data.Range: void <init>(double,double)>($stack14, $stack13);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range)>($stack12);

        goto label2;

     label1:
        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setAutoRange(boolean)>(1);

     label2:
        return;
    }

    public void resizeRange2(double, double)
    {
        double percent, anchorValue, $stack11, left, $stack12, right, $stack14, $stack15, $stack16, $stack17;
        byte $stack10;
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack13;

        this := @this: org.jfree.chart.axis.ValueAxis;

        percent := @parameter0: double;

        anchorValue := @parameter1: double;

        $stack10 = percent cmpl 0.0;

        if $stack10 <= 0 goto label1;

        $stack11 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        left = anchorValue - $stack11;

        $stack12 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        right = $stack12 - anchorValue;

        $stack13 = new org.jfree.data.Range;

        $stack14 = left * percent;

        $stack17 = anchorValue - $stack14;

        $stack15 = right * percent;

        $stack16 = anchorValue + $stack15;

        specialinvoke $stack13.<org.jfree.data.Range: void <init>(double,double)>($stack17, $stack16);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range)>($stack13);

        goto label2;

     label1:
        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setAutoRange(boolean)>(1);

     label2:
        return;
    }

    public void zoomRange(double, double)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range $stack13, $stack15, $stack23;
        double start, length, lowerPercent, $stack18, upperPercent, $stack19, $stack21, $stack24, $stack25, $stack26, $stack27, r0, r1;
        boolean $stack17, $stack22;
        byte $stack20;

        this := @this: org.jfree.chart.axis.ValueAxis;

        lowerPercent := @parameter0: double;

        upperPercent := @parameter1: double;

        $stack13 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        start = virtualinvoke $stack13.<org.jfree.data.Range: double getLowerBound()>();

        $stack15 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        length = virtualinvoke $stack15.<org.jfree.data.Range: double getLength()>();

        $stack17 = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        if $stack17 == 0 goto label1;

        $stack24 = 1.0 - upperPercent;

        $stack25 = length * $stack24;

        r0 = start + $stack25;

        $stack26 = 1.0 - lowerPercent;

        $stack27 = length * $stack26;

        r1 = start + $stack27;

        goto label2;

     label1:
        $stack18 = length * lowerPercent;

        r0 = start + $stack18;

        $stack19 = length * upperPercent;

        r1 = start + $stack19;

     label2:
        $stack20 = r1 cmpl r0;

        if $stack20 <= 0 goto label3;

        $stack21 = r1 - r0;

        $stack22 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($stack21);

        if $stack22 != 0 goto label3;

        $stack23 = new org.jfree.data.Range;

        specialinvoke $stack23.<org.jfree.data.Range: void <init>(double,double)>(r0, r1);

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range)>($stack23);

     label3:
        return;
    }

    public void pan(double)
    {
        org.jfree.chart.axis.ValueAxis this;
        org.jfree.data.Range r, $stack13;
        double length, percent, adj, $stack15, lower, $stack16, upper;

        this := @this: org.jfree.chart.axis.ValueAxis;

        percent := @parameter0: double;

        r = virtualinvoke this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        $stack13 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        length = virtualinvoke $stack13.<org.jfree.data.Range: double getLength()>();

        adj = length * percent;

        $stack15 = virtualinvoke r.<org.jfree.data.Range: double getLowerBound()>();

        lower = $stack15 + adj;

        $stack16 = virtualinvoke r.<org.jfree.data.Range: double getUpperBound()>();

        upper = $stack16 + adj;

        virtualinvoke this.<org.jfree.chart.axis.ValueAxis: void setRange(double,double)>(lower, upper);

        return;
    }

    protected int getAutoTickIndex()
    {
        org.jfree.chart.axis.ValueAxis this;
        int $stack1;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack1 = this.<org.jfree.chart.axis.ValueAxis: int autoTickIndex>;

        return $stack1;
    }

    protected void setAutoTickIndex(int)
    {
        org.jfree.chart.axis.ValueAxis this;
        int index;

        this := @this: org.jfree.chart.axis.ValueAxis;

        index := @parameter0: int;

        this.<org.jfree.chart.axis.ValueAxis: int autoTickIndex> = index;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.axis.ValueAxis this, that;
        boolean $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack18, $stack28, $stack29, $stack32, $stack33, $stack34, $stack37, $stack40;
        double $stack13, $stack14, $stack19, $stack20, $stack22, $stack23, $stack25, $stack26;
        byte $stack15, $stack21, $stack24, $stack27;
        org.jfree.data.Range $stack16, $stack17, $stack38, $stack39;
        org.jfree.chart.axis.TickUnitSource $stack30, $stack31;
        int $stack35, $stack36;

        this := @this: org.jfree.chart.axis.ValueAxis;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.axis.ValueAxis;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.axis.ValueAxis) obj;

        $stack5 = this.<org.jfree.chart.axis.ValueAxis: boolean positiveArrowVisible>;

        $stack4 = that.<org.jfree.chart.axis.ValueAxis: boolean positiveArrowVisible>;

        if $stack5 == $stack4 goto label03;

        return 0;

     label03:
        $stack7 = this.<org.jfree.chart.axis.ValueAxis: boolean negativeArrowVisible>;

        $stack6 = that.<org.jfree.chart.axis.ValueAxis: boolean negativeArrowVisible>;

        if $stack7 == $stack6 goto label04;

        return 0;

     label04:
        $stack9 = this.<org.jfree.chart.axis.ValueAxis: boolean inverted>;

        $stack8 = that.<org.jfree.chart.axis.ValueAxis: boolean inverted>;

        if $stack9 == $stack8 goto label05;

        return 0;

     label05:
        $stack10 = this.<org.jfree.chart.axis.ValueAxis: boolean autoRange>;

        if $stack10 != 0 goto label06;

        $stack39 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack38 = that.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range>;

        $stack40 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack39, $stack38);

        if $stack40 != 0 goto label06;

        return 0;

     label06:
        $stack12 = this.<org.jfree.chart.axis.ValueAxis: boolean autoRange>;

        $stack11 = that.<org.jfree.chart.axis.ValueAxis: boolean autoRange>;

        if $stack12 == $stack11 goto label07;

        return 0;

     label07:
        $stack14 = this.<org.jfree.chart.axis.ValueAxis: double autoRangeMinimumSize>;

        $stack13 = that.<org.jfree.chart.axis.ValueAxis: double autoRangeMinimumSize>;

        $stack15 = $stack14 cmpl $stack13;

        if $stack15 == 0 goto label08;

        return 0;

     label08:
        $stack17 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range defaultAutoRange>;

        $stack16 = that.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range defaultAutoRange>;

        $stack18 = virtualinvoke $stack17.<org.jfree.data.Range: boolean equals(java.lang.Object)>($stack16);

        if $stack18 != 0 goto label09;

        return 0;

     label09:
        $stack20 = this.<org.jfree.chart.axis.ValueAxis: double upperMargin>;

        $stack19 = that.<org.jfree.chart.axis.ValueAxis: double upperMargin>;

        $stack21 = $stack20 cmpl $stack19;

        if $stack21 == 0 goto label10;

        return 0;

     label10:
        $stack23 = this.<org.jfree.chart.axis.ValueAxis: double lowerMargin>;

        $stack22 = that.<org.jfree.chart.axis.ValueAxis: double lowerMargin>;

        $stack24 = $stack23 cmpl $stack22;

        if $stack24 == 0 goto label11;

        return 0;

     label11:
        $stack26 = this.<org.jfree.chart.axis.ValueAxis: double fixedAutoRange>;

        $stack25 = that.<org.jfree.chart.axis.ValueAxis: double fixedAutoRange>;

        $stack27 = $stack26 cmpl $stack25;

        if $stack27 == 0 goto label12;

        return 0;

     label12:
        $stack29 = this.<org.jfree.chart.axis.ValueAxis: boolean autoTickUnitSelection>;

        $stack28 = that.<org.jfree.chart.axis.ValueAxis: boolean autoTickUnitSelection>;

        if $stack29 == $stack28 goto label13;

        return 0;

     label13:
        $stack31 = this.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.TickUnitSource standardTickUnits>;

        $stack30 = that.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.TickUnitSource standardTickUnits>;

        $stack32 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack31, $stack30);

        if $stack32 != 0 goto label14;

        return 0;

     label14:
        $stack34 = this.<org.jfree.chart.axis.ValueAxis: boolean verticalTickLabels>;

        $stack33 = that.<org.jfree.chart.axis.ValueAxis: boolean verticalTickLabels>;

        if $stack34 == $stack33 goto label15;

        return 0;

     label15:
        $stack36 = this.<org.jfree.chart.axis.ValueAxis: int minorTickCount>;

        $stack35 = that.<org.jfree.chart.axis.ValueAxis: int minorTickCount>;

        if $stack36 == $stack35 goto label16;

        return 0;

     label16:
        $stack37 = specialinvoke this.<org.jfree.chart.axis.Axis: boolean equals(java.lang.Object)>(obj);

        return $stack37;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.axis.ValueAxis this, clone;
        java.lang.Object $stack2;

        this := @this: org.jfree.chart.axis.ValueAxis;

        $stack2 = specialinvoke this.<org.jfree.chart.axis.Axis: java.lang.Object clone()>();

        clone = (org.jfree.chart.axis.ValueAxis) $stack2;

        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.axis.ValueAxis this;
        java.awt.Shape $stack2, $stack3, $stack4, $stack5;

        this := @this: org.jfree.chart.axis.ValueAxis;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape upArrow>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape downArrow>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape leftArrow>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack4, stream);

        $stack5 = this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape rightArrow>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack5, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.axis.ValueAxis this;
        java.awt.Shape $stack2, $stack3, $stack4, $stack5;

        this := @this: org.jfree.chart.axis.ValueAxis;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape upArrow> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape downArrow> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape leftArrow> = $stack4;

        $stack5 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.ValueAxis: java.awt.Shape rightArrow> = $stack5;

        return;
    }

    static void <clinit>()
    {
        org.jfree.data.Range $stack0;

        <org.jfree.chart.axis.ValueAxis: int MAXIMUM_TICK_COUNT> = 500;

        <org.jfree.chart.axis.ValueAxis: boolean DEFAULT_AUTO_TICK_UNIT_SELECTION> = 1;

        <org.jfree.chart.axis.ValueAxis: double DEFAULT_UPPER_MARGIN> = 0.05;

        <org.jfree.chart.axis.ValueAxis: double DEFAULT_LOWER_MARGIN> = 0.05;

        <org.jfree.chart.axis.ValueAxis: double DEFAULT_AUTO_RANGE_MINIMUM_SIZE> = 1.0E-8;

        <org.jfree.chart.axis.ValueAxis: boolean DEFAULT_INVERTED> = 0;

        <org.jfree.chart.axis.ValueAxis: boolean DEFAULT_AUTO_RANGE> = 1;

        <org.jfree.chart.axis.ValueAxis: long serialVersionUID> = 3698345477322391456L;

        $stack0 = new org.jfree.data.Range;

        specialinvoke $stack0.<org.jfree.data.Range: void <init>(double,double)>(0.0, 1.0);

        <org.jfree.chart.axis.ValueAxis: org.jfree.data.Range DEFAULT_RANGE> = $stack0;

        return;
    }
}
