public class org.jfree.chart.ChartPanel extends javax.swing.JPanel implements org.jfree.chart.event.ChartChangeListener, org.jfree.chart.event.ChartProgressListener, java.awt.event.ActionListener, java.awt.event.MouseListener, java.awt.event.MouseMotionListener, org.jfree.chart.event.OverlayChangeListener, java.awt.print.Printable, java.io.Serializable
{
    protected static final long serialVersionUID;
    public static final boolean DEFAULT_BUFFER_USED;
    public static final int DEFAULT_WIDTH;
    public static final int DEFAULT_HEIGHT;
    public static final int DEFAULT_MINIMUM_DRAW_WIDTH;
    public static final int DEFAULT_MINIMUM_DRAW_HEIGHT;
    public static final int DEFAULT_MAXIMUM_DRAW_WIDTH;
    public static final int DEFAULT_MAXIMUM_DRAW_HEIGHT;
    public static final int DEFAULT_ZOOM_TRIGGER_DISTANCE;
    public static final java.lang.String PROPERTIES_COMMAND;
    public static final java.lang.String COPY_COMMAND;
    public static final java.lang.String SAVE_COMMAND;
    protected static final java.lang.String SAVE_AS_PNG_COMMAND;
    protected static final java.lang.String SAVE_AS_PNG_SIZE_COMMAND;
    protected static final java.lang.String SAVE_AS_SVG_COMMAND;
    protected static final java.lang.String SAVE_AS_PDF_COMMAND;
    public static final java.lang.String PRINT_COMMAND;
    public static final java.lang.String ZOOM_IN_BOTH_COMMAND;
    public static final java.lang.String ZOOM_IN_DOMAIN_COMMAND;
    public static final java.lang.String ZOOM_IN_RANGE_COMMAND;
    public static final java.lang.String ZOOM_OUT_BOTH_COMMAND;
    public static final java.lang.String ZOOM_OUT_DOMAIN_COMMAND;
    public static final java.lang.String ZOOM_OUT_RANGE_COMMAND;
    public static final java.lang.String ZOOM_RESET_BOTH_COMMAND;
    public static final java.lang.String ZOOM_RESET_DOMAIN_COMMAND;
    public static final java.lang.String ZOOM_RESET_RANGE_COMMAND;
    protected org.jfree.chart.JFreeChart chart;
    protected transient javax.swing.event.EventListenerList chartMouseListeners;
    protected boolean useBuffer;
    protected boolean refreshBuffer;
    protected transient java.awt.Image chartBuffer;
    protected int chartBufferHeight;
    protected int chartBufferWidth;
    protected int minimumDrawWidth;
    protected int minimumDrawHeight;
    protected int maximumDrawWidth;
    protected int maximumDrawHeight;
    protected javax.swing.JPopupMenu popup;
    protected org.jfree.chart.ChartRenderingInfo info;
    protected java.awt.geom.Point2D anchor;
    protected double scaleX;
    protected double scaleY;
    protected org.jfree.chart.plot.PlotOrientation orientation;
    protected boolean domainZoomable;
    protected boolean rangeZoomable;
    protected java.awt.geom.Point2D zoomPoint;
    protected transient java.awt.geom.Rectangle2D zoomRectangle;
    protected boolean fillZoomRectangle;
    protected int zoomTriggerDistance;
    protected javax.swing.JMenuItem zoomInBothMenuItem;
    protected javax.swing.JMenuItem zoomInDomainMenuItem;
    protected javax.swing.JMenuItem zoomInRangeMenuItem;
    protected javax.swing.JMenuItem zoomOutBothMenuItem;
    protected javax.swing.JMenuItem zoomOutDomainMenuItem;
    protected javax.swing.JMenuItem zoomOutRangeMenuItem;
    protected javax.swing.JMenuItem zoomResetBothMenuItem;
    protected javax.swing.JMenuItem zoomResetDomainMenuItem;
    protected javax.swing.JMenuItem zoomResetRangeMenuItem;
    protected java.io.File defaultDirectoryForSaveAs;
    protected boolean enforceFileExtensions;
    protected boolean ownToolTipDelaysActive;
    protected int originalToolTipInitialDelay;
    protected int originalToolTipReshowDelay;
    protected int originalToolTipDismissDelay;
    protected int ownToolTipInitialDelay;
    protected int ownToolTipReshowDelay;
    protected int ownToolTipDismissDelay;
    protected double zoomInFactor;
    protected double zoomOutFactor;
    protected boolean zoomAroundAnchor;
    protected transient java.awt.Paint zoomOutlinePaint;
    protected transient java.awt.Paint zoomFillPaint;
    protected static java.util.ResourceBundle localizationResources;
    protected double panW;
    protected double panH;
    protected java.awt.Point panLast;
    protected int panMask;
    protected java.util.List overlays;
    protected org.jfree.chart.MouseWheelHandler mouseWheelHandler;

    public void <init>(org.jfree.chart.JFreeChart)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart chart;

        this := @this: org.jfree.chart.ChartPanel;

        chart := @parameter0: org.jfree.chart.JFreeChart;

        specialinvoke this.<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)>(chart, 1024, 768, 300, 200, 1024, 768, 1, 1, 1, 1, 1, 1);

        return;
    }

    public void <init>(org.jfree.chart.JFreeChart, boolean)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart chart;
        boolean useBuffer;

        this := @this: org.jfree.chart.ChartPanel;

        chart := @parameter0: org.jfree.chart.JFreeChart;

        useBuffer := @parameter1: boolean;

        specialinvoke this.<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)>(chart, 1024, 768, 300, 200, 1024, 768, useBuffer, 1, 1, 1, 1, 1);

        return;
    }

    public void <init>(org.jfree.chart.JFreeChart, boolean, boolean, boolean, boolean, boolean)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart chart;
        boolean properties, save, print, zoom, tooltips;

        this := @this: org.jfree.chart.ChartPanel;

        chart := @parameter0: org.jfree.chart.JFreeChart;

        properties := @parameter1: boolean;

        save := @parameter2: boolean;

        print := @parameter3: boolean;

        zoom := @parameter4: boolean;

        tooltips := @parameter5: boolean;

        specialinvoke this.<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)>(chart, 1024, 768, 300, 200, 1024, 768, 1, properties, save, print, zoom, tooltips);

        return;
    }

    public void <init>(org.jfree.chart.JFreeChart, int, int, int, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart chart;
        int width, height, minimumDrawWidth, minimumDrawHeight, maximumDrawWidth, maximumDrawHeight;
        boolean useBuffer, properties, save, print, zoom, tooltips;

        this := @this: org.jfree.chart.ChartPanel;

        chart := @parameter0: org.jfree.chart.JFreeChart;

        width := @parameter1: int;

        height := @parameter2: int;

        minimumDrawWidth := @parameter3: int;

        minimumDrawHeight := @parameter4: int;

        maximumDrawWidth := @parameter5: int;

        maximumDrawHeight := @parameter6: int;

        useBuffer := @parameter7: boolean;

        properties := @parameter8: boolean;

        save := @parameter9: boolean;

        print := @parameter10: boolean;

        zoom := @parameter11: boolean;

        tooltips := @parameter12: boolean;

        specialinvoke this.<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>(chart, width, height, minimumDrawWidth, minimumDrawHeight, maximumDrawWidth, maximumDrawHeight, useBuffer, properties, 1, save, print, zoom, tooltips);

        return;
    }

    public void <init>(org.jfree.chart.JFreeChart, int, int, int, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean, boolean)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.plot.PlotOrientation $stack17;
        org.jfree.chart.JFreeChart chart;
        javax.swing.event.EventListenerList $stack18;
        org.jfree.chart.ChartRenderingInfo $stack19;
        java.awt.Dimension $stack20;
        int width, height, minimumDrawWidth, minimumDrawHeight, maximumDrawWidth, maximumDrawHeight, $stack23, $stack24, $stack25;
        boolean useBuffer, properties, copy, save, print, zoom, tooltips, $stack30;
        javax.swing.ToolTipManager ttm;
        java.lang.String osName, $stack28;
        java.util.ArrayList $stack31;
        javax.swing.JPopupMenu $stack21;
        java.awt.Color $stack26, $stack27;

        this := @this: org.jfree.chart.ChartPanel;

        chart := @parameter0: org.jfree.chart.JFreeChart;

        width := @parameter1: int;

        height := @parameter2: int;

        minimumDrawWidth := @parameter3: int;

        minimumDrawHeight := @parameter4: int;

        maximumDrawWidth := @parameter5: int;

        maximumDrawHeight := @parameter6: int;

        useBuffer := @parameter7: boolean;

        properties := @parameter8: boolean;

        copy := @parameter9: boolean;

        save := @parameter10: boolean;

        print := @parameter11: boolean;

        zoom := @parameter12: boolean;

        tooltips := @parameter13: boolean;

        specialinvoke this.<javax.swing.JPanel: void <init>()>();

        $stack17 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        this.<org.jfree.chart.ChartPanel: org.jfree.chart.plot.PlotOrientation orientation> = $stack17;

        this.<org.jfree.chart.ChartPanel: boolean domainZoomable> = 0;

        this.<org.jfree.chart.ChartPanel: boolean rangeZoomable> = 0;

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint> = null;

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle> = null;

        this.<org.jfree.chart.ChartPanel: boolean fillZoomRectangle> = 1;

        this.<org.jfree.chart.ChartPanel: double zoomInFactor> = 0.5;

        this.<org.jfree.chart.ChartPanel: double zoomOutFactor> = 2.0;

        this.<org.jfree.chart.ChartPanel: int panMask> = 2;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void setChart(org.jfree.chart.JFreeChart)>(chart);

        $stack18 = new javax.swing.event.EventListenerList;

        specialinvoke $stack18.<javax.swing.event.EventListenerList: void <init>()>();

        this.<org.jfree.chart.ChartPanel: javax.swing.event.EventListenerList chartMouseListeners> = $stack18;

        $stack19 = new org.jfree.chart.ChartRenderingInfo;

        specialinvoke $stack19.<org.jfree.chart.ChartRenderingInfo: void <init>()>();

        this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info> = $stack19;

        $stack20 = new java.awt.Dimension;

        specialinvoke $stack20.<java.awt.Dimension: void <init>(int,int)>(width, height);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void setPreferredSize(java.awt.Dimension)>($stack20);

        this.<org.jfree.chart.ChartPanel: boolean useBuffer> = useBuffer;

        this.<org.jfree.chart.ChartPanel: boolean refreshBuffer> = 0;

        this.<org.jfree.chart.ChartPanel: int minimumDrawWidth> = minimumDrawWidth;

        this.<org.jfree.chart.ChartPanel: int minimumDrawHeight> = minimumDrawHeight;

        this.<org.jfree.chart.ChartPanel: int maximumDrawWidth> = maximumDrawWidth;

        this.<org.jfree.chart.ChartPanel: int maximumDrawHeight> = maximumDrawHeight;

        this.<org.jfree.chart.ChartPanel: int zoomTriggerDistance> = 10;

        this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup> = null;

        if properties != 0 goto label1;

        if copy != 0 goto label1;

        if save != 0 goto label1;

        if print != 0 goto label1;

        if zoom == 0 goto label2;

     label1:
        $stack21 = virtualinvoke this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu createPopupMenu(boolean,boolean,boolean,boolean,boolean)>(properties, copy, save, print, zoom);

        this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup> = $stack21;

     label2:
        virtualinvoke this.<org.jfree.chart.ChartPanel: void enableEvents(long)>(16L);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void enableEvents(long)>(32L);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void setDisplayToolTips(boolean)>(tooltips);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void addMouseListener(java.awt.event.MouseListener)>(this);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void addMouseMotionListener(java.awt.event.MouseMotionListener)>(this);

        this.<org.jfree.chart.ChartPanel: java.io.File defaultDirectoryForSaveAs> = null;

        this.<org.jfree.chart.ChartPanel: boolean enforceFileExtensions> = 1;

        ttm = staticinvoke <javax.swing.ToolTipManager: javax.swing.ToolTipManager sharedInstance()>();

        $stack23 = virtualinvoke ttm.<javax.swing.ToolTipManager: int getInitialDelay()>();

        this.<org.jfree.chart.ChartPanel: int ownToolTipInitialDelay> = $stack23;

        $stack24 = virtualinvoke ttm.<javax.swing.ToolTipManager: int getDismissDelay()>();

        this.<org.jfree.chart.ChartPanel: int ownToolTipDismissDelay> = $stack24;

        $stack25 = virtualinvoke ttm.<javax.swing.ToolTipManager: int getReshowDelay()>();

        this.<org.jfree.chart.ChartPanel: int ownToolTipReshowDelay> = $stack25;

        this.<org.jfree.chart.ChartPanel: boolean zoomAroundAnchor> = 0;

        $stack26 = <java.awt.Color: java.awt.Color BLUE>;

        this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomOutlinePaint> = $stack26;

        $stack27 = new java.awt.Color;

        specialinvoke $stack27.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 255, 63);

        this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomFillPaint> = $stack27;

        this.<org.jfree.chart.ChartPanel: int panMask> = 2;

        $stack28 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        osName = virtualinvoke $stack28.<java.lang.String: java.lang.String toLowerCase()>();

        $stack30 = virtualinvoke osName.<java.lang.String: boolean startsWith(java.lang.String)>("mac os x");

        if $stack30 == 0 goto label3;

        this.<org.jfree.chart.ChartPanel: int panMask> = 8;

     label3:
        $stack31 = new java.util.ArrayList;

        specialinvoke $stack31.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.chart.ChartPanel: java.util.List overlays> = $stack31;

        return;
    }

    public org.jfree.chart.JFreeChart getChart()
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        return $stack1;
    }

    public void setChart(org.jfree.chart.JFreeChart)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack4, chart, $stack7, $stack8, $stack15, $stack16;
        boolean $stack5, $stack10, $stack12, $stack13;
        org.jfree.chart.plot.Plot plot;
        org.jfree.chart.plot.Zoomable z;
        org.jfree.chart.plot.PlotOrientation $stack14;

        this := @this: org.jfree.chart.ChartPanel;

        chart := @parameter0: org.jfree.chart.JFreeChart;

        $stack4 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        if $stack4 == null goto label1;

        $stack15 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        virtualinvoke $stack15.<org.jfree.chart.JFreeChart: void removeChangeListener(org.jfree.chart.event.ChartChangeListener)>(this);

        $stack16 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        virtualinvoke $stack16.<org.jfree.chart.JFreeChart: void removeProgressListener(org.jfree.chart.event.ChartProgressListener)>(this);

     label1:
        this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart> = chart;

        if chart == null goto label3;

        $stack7 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        virtualinvoke $stack7.<org.jfree.chart.JFreeChart: void addChangeListener(org.jfree.chart.event.ChartChangeListener)>(this);

        $stack8 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        virtualinvoke $stack8.<org.jfree.chart.JFreeChart: void addProgressListener(org.jfree.chart.event.ChartProgressListener)>(this);

        plot = virtualinvoke chart.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        this.<org.jfree.chart.ChartPanel: boolean domainZoomable> = 0;

        this.<org.jfree.chart.ChartPanel: boolean rangeZoomable> = 0;

        $stack10 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack10 == 0 goto label2;

        z = (org.jfree.chart.plot.Zoomable) plot;

        $stack12 = interfaceinvoke z.<org.jfree.chart.plot.Zoomable: boolean isDomainZoomable()>();

        this.<org.jfree.chart.ChartPanel: boolean domainZoomable> = $stack12;

        $stack13 = interfaceinvoke z.<org.jfree.chart.plot.Zoomable: boolean isRangeZoomable()>();

        this.<org.jfree.chart.ChartPanel: boolean rangeZoomable> = $stack13;

        $stack14 = interfaceinvoke z.<org.jfree.chart.plot.Zoomable: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        this.<org.jfree.chart.ChartPanel: org.jfree.chart.plot.PlotOrientation orientation> = $stack14;

     label2:
        goto label4;

     label3:
        this.<org.jfree.chart.ChartPanel: boolean domainZoomable> = 0;

        this.<org.jfree.chart.ChartPanel: boolean rangeZoomable> = 0;

     label4:
        $stack5 = this.<org.jfree.chart.ChartPanel: boolean useBuffer>;

        if $stack5 == 0 goto label5;

        this.<org.jfree.chart.ChartPanel: boolean refreshBuffer> = 1;

     label5:
        virtualinvoke this.<org.jfree.chart.ChartPanel: void repaint()>();

        return;
    }

    public int getMinimumDrawWidth()
    {
        org.jfree.chart.ChartPanel this;
        int $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: int minimumDrawWidth>;

        return $stack1;
    }

    public void setMinimumDrawWidth(int)
    {
        org.jfree.chart.ChartPanel this;
        int width;

        this := @this: org.jfree.chart.ChartPanel;

        width := @parameter0: int;

        this.<org.jfree.chart.ChartPanel: int minimumDrawWidth> = width;

        return;
    }

    public int getMaximumDrawWidth()
    {
        org.jfree.chart.ChartPanel this;
        int $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: int maximumDrawWidth>;

        return $stack1;
    }

    public void setMaximumDrawWidth(int)
    {
        org.jfree.chart.ChartPanel this;
        int width;

        this := @this: org.jfree.chart.ChartPanel;

        width := @parameter0: int;

        this.<org.jfree.chart.ChartPanel: int maximumDrawWidth> = width;

        return;
    }

    public int getMinimumDrawHeight()
    {
        org.jfree.chart.ChartPanel this;
        int $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: int minimumDrawHeight>;

        return $stack1;
    }

    public void setMinimumDrawHeight(int)
    {
        org.jfree.chart.ChartPanel this;
        int height;

        this := @this: org.jfree.chart.ChartPanel;

        height := @parameter0: int;

        this.<org.jfree.chart.ChartPanel: int minimumDrawHeight> = height;

        return;
    }

    public int getMaximumDrawHeight()
    {
        org.jfree.chart.ChartPanel this;
        int $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: int maximumDrawHeight>;

        return $stack1;
    }

    public void setMaximumDrawHeight(int)
    {
        org.jfree.chart.ChartPanel this;
        int height;

        this := @this: org.jfree.chart.ChartPanel;

        height := @parameter0: int;

        this.<org.jfree.chart.ChartPanel: int maximumDrawHeight> = height;

        return;
    }

    public double getScaleX()
    {
        org.jfree.chart.ChartPanel this;
        double $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        return $stack1;
    }

    public double getScaleY()
    {
        org.jfree.chart.ChartPanel this;
        double $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        return $stack1;
    }

    public java.awt.geom.Point2D getAnchor()
    {
        org.jfree.chart.ChartPanel this;
        java.awt.geom.Point2D $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D anchor>;

        return $stack1;
    }

    protected void setAnchor(java.awt.geom.Point2D)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.geom.Point2D anchor;

        this := @this: org.jfree.chart.ChartPanel;

        anchor := @parameter0: java.awt.geom.Point2D;

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D anchor> = anchor;

        return;
    }

    public javax.swing.JPopupMenu getPopupMenu()
    {
        org.jfree.chart.ChartPanel this;
        javax.swing.JPopupMenu $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup>;

        return $stack1;
    }

    public void setPopupMenu(javax.swing.JPopupMenu)
    {
        org.jfree.chart.ChartPanel this;
        javax.swing.JPopupMenu popup;

        this := @this: org.jfree.chart.ChartPanel;

        popup := @parameter0: javax.swing.JPopupMenu;

        this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup> = popup;

        return;
    }

    public org.jfree.chart.ChartRenderingInfo getChartRenderingInfo()
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.ChartRenderingInfo $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        return $stack1;
    }

    public void setMouseZoomable(boolean)
    {
        org.jfree.chart.ChartPanel this;
        boolean flag;

        this := @this: org.jfree.chart.ChartPanel;

        flag := @parameter0: boolean;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void setMouseZoomable(boolean,boolean)>(flag, 1);

        return;
    }

    public void setMouseZoomable(boolean, boolean)
    {
        org.jfree.chart.ChartPanel this;
        boolean flag, fillRectangle;

        this := @this: org.jfree.chart.ChartPanel;

        flag := @parameter0: boolean;

        fillRectangle := @parameter1: boolean;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void setDomainZoomable(boolean)>(flag);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void setRangeZoomable(boolean)>(flag);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void setFillZoomRectangle(boolean)>(fillRectangle);

        return;
    }

    public boolean isDomainZoomable()
    {
        org.jfree.chart.ChartPanel this;
        boolean $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: boolean domainZoomable>;

        return $stack1;
    }

    public void setDomainZoomable(boolean)
    {
        boolean flag, $stack6, $stack7, $stack8;
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack4;
        org.jfree.chart.plot.Plot plot;
        org.jfree.chart.plot.Zoomable z;

        this := @this: org.jfree.chart.ChartPanel;

        flag := @parameter0: boolean;

        if flag == 0 goto label4;

        $stack4 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack4.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack6 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack6 == 0 goto label3;

        z = (org.jfree.chart.plot.Zoomable) plot;

        if flag == 0 goto label1;

        $stack7 = interfaceinvoke z.<org.jfree.chart.plot.Zoomable: boolean isDomainZoomable()>();

        if $stack7 == 0 goto label1;

        $stack8 = 1;

        goto label2;

     label1:
        $stack8 = 0;

     label2:
        this.<org.jfree.chart.ChartPanel: boolean domainZoomable> = $stack8;

     label3:
        goto label5;

     label4:
        this.<org.jfree.chart.ChartPanel: boolean domainZoomable> = 0;

     label5:
        return;
    }

    public boolean isRangeZoomable()
    {
        org.jfree.chart.ChartPanel this;
        boolean $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: boolean rangeZoomable>;

        return $stack1;
    }

    public void setRangeZoomable(boolean)
    {
        boolean flag, $stack6, $stack7, $stack8;
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack4;
        org.jfree.chart.plot.Plot plot;
        org.jfree.chart.plot.Zoomable z;

        this := @this: org.jfree.chart.ChartPanel;

        flag := @parameter0: boolean;

        if flag == 0 goto label4;

        $stack4 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack4.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack6 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack6 == 0 goto label3;

        z = (org.jfree.chart.plot.Zoomable) plot;

        if flag == 0 goto label1;

        $stack7 = interfaceinvoke z.<org.jfree.chart.plot.Zoomable: boolean isRangeZoomable()>();

        if $stack7 == 0 goto label1;

        $stack8 = 1;

        goto label2;

     label1:
        $stack8 = 0;

     label2:
        this.<org.jfree.chart.ChartPanel: boolean rangeZoomable> = $stack8;

     label3:
        goto label5;

     label4:
        this.<org.jfree.chart.ChartPanel: boolean rangeZoomable> = 0;

     label5:
        return;
    }

    public boolean getFillZoomRectangle()
    {
        org.jfree.chart.ChartPanel this;
        boolean $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: boolean fillZoomRectangle>;

        return $stack1;
    }

    public void setFillZoomRectangle(boolean)
    {
        org.jfree.chart.ChartPanel this;
        boolean flag;

        this := @this: org.jfree.chart.ChartPanel;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.ChartPanel: boolean fillZoomRectangle> = flag;

        return;
    }

    public int getZoomTriggerDistance()
    {
        org.jfree.chart.ChartPanel this;
        int $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: int zoomTriggerDistance>;

        return $stack1;
    }

    public void setZoomTriggerDistance(int)
    {
        org.jfree.chart.ChartPanel this;
        int distance;

        this := @this: org.jfree.chart.ChartPanel;

        distance := @parameter0: int;

        this.<org.jfree.chart.ChartPanel: int zoomTriggerDistance> = distance;

        return;
    }

    public java.io.File getDefaultDirectoryForSaveAs()
    {
        org.jfree.chart.ChartPanel this;
        java.io.File $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: java.io.File defaultDirectoryForSaveAs>;

        return $stack1;
    }

    public void setDefaultDirectoryForSaveAs(java.io.File)
    {
        java.io.File directory;
        org.jfree.chart.ChartPanel this;
        boolean $stack2;
        java.lang.IllegalArgumentException $stack5;

        this := @this: org.jfree.chart.ChartPanel;

        directory := @parameter0: java.io.File;

        if directory == null goto label1;

        $stack2 = virtualinvoke directory.<java.io.File: boolean isDirectory()>();

        if $stack2 != 0 goto label1;

        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'directory\' argument is not a directory.");

        throw $stack5;

     label1:
        this.<org.jfree.chart.ChartPanel: java.io.File defaultDirectoryForSaveAs> = directory;

        return;
    }

    public boolean isEnforceFileExtensions()
    {
        org.jfree.chart.ChartPanel this;
        boolean $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: boolean enforceFileExtensions>;

        return $stack1;
    }

    public void setEnforceFileExtensions(boolean)
    {
        org.jfree.chart.ChartPanel this;
        boolean enforce;

        this := @this: org.jfree.chart.ChartPanel;

        enforce := @parameter0: boolean;

        this.<org.jfree.chart.ChartPanel: boolean enforceFileExtensions> = enforce;

        return;
    }

    public boolean getZoomAroundAnchor()
    {
        org.jfree.chart.ChartPanel this;
        boolean $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: boolean zoomAroundAnchor>;

        return $stack1;
    }

    public void setZoomAroundAnchor(boolean)
    {
        org.jfree.chart.ChartPanel this;
        boolean zoomAroundAnchor;

        this := @this: org.jfree.chart.ChartPanel;

        zoomAroundAnchor := @parameter0: boolean;

        this.<org.jfree.chart.ChartPanel: boolean zoomAroundAnchor> = zoomAroundAnchor;

        return;
    }

    public java.awt.Paint getZoomFillPaint()
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomFillPaint>;

        return $stack1;
    }

    public void setZoomFillPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.ChartPanel this;

        this := @this: org.jfree.chart.ChartPanel;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomFillPaint> = paint;

        return;
    }

    public java.awt.Paint getZoomOutlinePaint()
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomOutlinePaint>;

        return $stack1;
    }

    public void setZoomOutlinePaint(java.awt.Paint)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.ChartPanel;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomOutlinePaint> = paint;

        return;
    }

    public boolean isMouseWheelEnabled()
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.MouseWheelHandler $stack1;
        boolean $stack2;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.MouseWheelHandler mouseWheelHandler>;

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public void setMouseWheelEnabled(boolean)
    {
        boolean flag;
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.MouseWheelHandler $stack2, $stack3, $stack4, $stack6;

        this := @this: org.jfree.chart.ChartPanel;

        flag := @parameter0: boolean;

        if flag == 0 goto label1;

        $stack4 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.MouseWheelHandler mouseWheelHandler>;

        if $stack4 != null goto label1;

        $stack6 = new org.jfree.chart.MouseWheelHandler;

        specialinvoke $stack6.<org.jfree.chart.MouseWheelHandler: void <init>(org.jfree.chart.ChartPanel)>(this);

        this.<org.jfree.chart.ChartPanel: org.jfree.chart.MouseWheelHandler mouseWheelHandler> = $stack6;

        goto label2;

     label1:
        if flag != 0 goto label2;

        $stack2 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.MouseWheelHandler mouseWheelHandler>;

        if $stack2 == null goto label2;

        $stack3 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.MouseWheelHandler mouseWheelHandler>;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void removeMouseWheelListener(java.awt.event.MouseWheelListener)>($stack3);

        this.<org.jfree.chart.ChartPanel: org.jfree.chart.MouseWheelHandler mouseWheelHandler> = null;

     label2:
        return;
    }

    public void addOverlay(org.jfree.chart.panel.Overlay)
    {
        org.jfree.chart.panel.Overlay overlay;
        org.jfree.chart.ChartPanel this;
        java.util.List $stack2;

        this := @this: org.jfree.chart.ChartPanel;

        overlay := @parameter0: org.jfree.chart.panel.Overlay;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(overlay, "overlay");

        $stack2 = this.<org.jfree.chart.ChartPanel: java.util.List overlays>;

        interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(overlay);

        interfaceinvoke overlay.<org.jfree.chart.panel.Overlay: void addChangeListener(org.jfree.chart.event.OverlayChangeListener)>(this);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void repaint()>();

        return;
    }

    public void removeOverlay(org.jfree.chart.panel.Overlay)
    {
        org.jfree.chart.panel.Overlay overlay;
        org.jfree.chart.ChartPanel this;
        java.util.List $stack3;
        boolean removed;

        this := @this: org.jfree.chart.ChartPanel;

        overlay := @parameter0: org.jfree.chart.panel.Overlay;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(overlay, "overlay");

        $stack3 = this.<org.jfree.chart.ChartPanel: java.util.List overlays>;

        removed = interfaceinvoke $stack3.<java.util.List: boolean remove(java.lang.Object)>(overlay);

        if removed == 0 goto label1;

        interfaceinvoke overlay.<org.jfree.chart.panel.Overlay: void removeChangeListener(org.jfree.chart.event.OverlayChangeListener)>(this);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void repaint()>();

     label1:
        return;
    }

    public void overlayChanged(org.jfree.chart.event.OverlayChangeEvent)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.event.OverlayChangeEvent event;

        this := @this: org.jfree.chart.ChartPanel;

        event := @parameter0: org.jfree.chart.event.OverlayChangeEvent;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void repaint()>();

        return;
    }

    public void setDisplayToolTips(boolean)
    {
        boolean flag;
        javax.swing.ToolTipManager $stack2, $stack3;
        org.jfree.chart.ChartPanel this;

        this := @this: org.jfree.chart.ChartPanel;

        flag := @parameter0: boolean;

        if flag == 0 goto label1;

        $stack3 = staticinvoke <javax.swing.ToolTipManager: javax.swing.ToolTipManager sharedInstance()>();

        virtualinvoke $stack3.<javax.swing.ToolTipManager: void registerComponent(javax.swing.JComponent)>(this);

        goto label2;

     label1:
        $stack2 = staticinvoke <javax.swing.ToolTipManager: javax.swing.ToolTipManager sharedInstance()>();

        virtualinvoke $stack2.<javax.swing.ToolTipManager: void unregisterComponent(javax.swing.JComponent)>(this);

     label2:
        return;
    }

    public java.lang.String getToolTipText(java.awt.event.MouseEvent)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.ChartRenderingInfo $stack6, $stack7;
        org.jfree.chart.entity.EntityCollection entities;
        java.awt.Insets insets;
        java.awt.event.MouseEvent e;
        int $stack11, $stack12, $stack13, $stack17, $stack19, $stack20, $stack21, $stack25;
        double $stack14, $stack15, $stack16, $stack18, $stack22, $stack23, $stack24, $stack26;
        org.jfree.chart.entity.ChartEntity entity;
        java.lang.String result;

        this := @this: org.jfree.chart.ChartPanel;

        e := @parameter0: java.awt.event.MouseEvent;

        result = null;

        $stack6 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        if $stack6 == null goto label1;

        $stack7 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        entities = virtualinvoke $stack7.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label1;

        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack11 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack12 = insets.<java.awt.Insets: int left>;

        $stack13 = $stack11 - $stack12;

        $stack15 = (double) $stack13;

        $stack14 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        $stack16 = $stack15 / $stack14;

        $stack17 = (int) $stack16;

        $stack18 = (double) $stack17;

        $stack19 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        $stack20 = insets.<java.awt.Insets: int top>;

        $stack21 = $stack19 - $stack20;

        $stack23 = (double) $stack21;

        $stack22 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        $stack24 = $stack23 / $stack22;

        $stack25 = (int) $stack24;

        $stack26 = (double) $stack25;

        entity = interfaceinvoke entities.<org.jfree.chart.entity.EntityCollection: org.jfree.chart.entity.ChartEntity getEntity(double,double)>($stack18, $stack26);

        if entity == null goto label1;

        result = virtualinvoke entity.<org.jfree.chart.entity.ChartEntity: java.lang.String getToolTipText()>();

     label1:
        return result;
    }

    public java.awt.Point translateJava2DToScreen(java.awt.geom.Point2D)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Insets insets;
        java.awt.geom.Point2D java2DPoint;
        double $stack6, $stack7, $stack9, $stack10, $stack11, $stack12, $stack13, $stack15, $stack16, $stack17;
        int $stack8, x, $stack14, y;
        java.awt.Point $stack18;

        this := @this: org.jfree.chart.ChartPanel;

        java2DPoint := @parameter0: java.awt.geom.Point2D;

        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack6 = virtualinvoke java2DPoint.<java.awt.geom.Point2D: double getX()>();

        $stack7 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        $stack10 = $stack6 * $stack7;

        $stack8 = insets.<java.awt.Insets: int left>;

        $stack9 = (double) $stack8;

        $stack11 = $stack10 + $stack9;

        x = (int) $stack11;

        $stack12 = virtualinvoke java2DPoint.<java.awt.geom.Point2D: double getY()>();

        $stack13 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        $stack16 = $stack12 * $stack13;

        $stack14 = insets.<java.awt.Insets: int top>;

        $stack15 = (double) $stack14;

        $stack17 = $stack16 + $stack15;

        y = (int) $stack17;

        $stack18 = new java.awt.Point;

        specialinvoke $stack18.<java.awt.Point: void <init>(int,int)>(x, y);

        return $stack18;
    }

    public java.awt.geom.Point2D translateScreenToJava2D(java.awt.Point)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Insets insets;
        java.awt.Point screenPoint;
        double $stack8, $stack10, $stack11, $stack12, x, $stack13, $stack15, $stack16, $stack17, y;
        int $stack9, $stack14;
        java.awt.geom.Point2D$Double $stack18;

        this := @this: org.jfree.chart.ChartPanel;

        screenPoint := @parameter0: java.awt.Point;

        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack8 = virtualinvoke screenPoint.<java.awt.Point: double getX()>();

        $stack9 = insets.<java.awt.Insets: int left>;

        $stack10 = (double) $stack9;

        $stack12 = $stack8 - $stack10;

        $stack11 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        x = $stack12 / $stack11;

        $stack13 = virtualinvoke screenPoint.<java.awt.Point: double getY()>();

        $stack14 = insets.<java.awt.Insets: int top>;

        $stack15 = (double) $stack14;

        $stack17 = $stack13 - $stack15;

        $stack16 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        y = $stack17 / $stack16;

        $stack18 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack18.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x, y);

        return $stack18;
    }

    public java.awt.geom.Rectangle2D scale(java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Insets insets;
        java.awt.geom.Rectangle2D rect;
        double $stack12, $stack13, $stack15, $stack16, x, $stack17, $stack18, $stack20, $stack21, y, $stack22, $stack23, w, $stack24, $stack25, h;
        int $stack14, $stack19;
        java.awt.geom.Rectangle2D$Double $stack26;

        this := @this: org.jfree.chart.ChartPanel;

        rect := @parameter0: java.awt.geom.Rectangle2D;

        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack12 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getX()>();

        $stack13 = virtualinvoke this.<org.jfree.chart.ChartPanel: double getScaleX()>();

        $stack16 = $stack12 * $stack13;

        $stack14 = insets.<java.awt.Insets: int left>;

        $stack15 = (double) $stack14;

        x = $stack16 + $stack15;

        $stack17 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getY()>();

        $stack18 = virtualinvoke this.<org.jfree.chart.ChartPanel: double getScaleY()>();

        $stack21 = $stack17 * $stack18;

        $stack19 = insets.<java.awt.Insets: int top>;

        $stack20 = (double) $stack19;

        y = $stack21 + $stack20;

        $stack22 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack23 = virtualinvoke this.<org.jfree.chart.ChartPanel: double getScaleX()>();

        w = $stack22 * $stack23;

        $stack24 = virtualinvoke rect.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack25 = virtualinvoke this.<org.jfree.chart.ChartPanel: double getScaleY()>();

        h = $stack24 * $stack25;

        $stack26 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack26.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(x, y, w, h);

        return $stack26;
    }

    public org.jfree.chart.entity.ChartEntity getEntityForPoint(int, int)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.ChartRenderingInfo $stack10, $stack20;
        java.awt.Insets insets;
        int viewX, $stack12, $stack13, viewY, $stack16, $stack17;
        double $stack14, $stack15, x, $stack18, $stack19, y;
        org.jfree.chart.entity.EntityCollection entities;
        org.jfree.chart.entity.ChartEntity result, $stack23;

        this := @this: org.jfree.chart.ChartPanel;

        viewX := @parameter0: int;

        viewY := @parameter1: int;

        result = null;

        $stack10 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        if $stack10 == null goto label3;

        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack12 = insets.<java.awt.Insets: int left>;

        $stack13 = viewX - $stack12;

        $stack15 = (double) $stack13;

        $stack14 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        x = $stack15 / $stack14;

        $stack16 = insets.<java.awt.Insets: int top>;

        $stack17 = viewY - $stack16;

        $stack19 = (double) $stack17;

        $stack18 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        y = $stack19 / $stack18;

        $stack20 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        entities = virtualinvoke $stack20.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label1;

        $stack23 = interfaceinvoke entities.<org.jfree.chart.entity.EntityCollection: org.jfree.chart.entity.ChartEntity getEntity(double,double)>(x, y);

        goto label2;

     label1:
        $stack23 = null;

     label2:
        result = $stack23;

     label3:
        return result;
    }

    public boolean getRefreshBuffer()
    {
        org.jfree.chart.ChartPanel this;
        boolean $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: boolean refreshBuffer>;

        return $stack1;
    }

    public void setRefreshBuffer(boolean)
    {
        org.jfree.chart.ChartPanel this;
        boolean flag;

        this := @this: org.jfree.chart.ChartPanel;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.ChartPanel: boolean refreshBuffer> = flag;

        return;
    }

    public void paintComponent(java.awt.Graphics)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Graphics g, $stack19, $stack106;
        org.jfree.chart.JFreeChart $stack18, $stack62, $stack114, $stack126;
        java.awt.Graphics2D g2, bufferG2;
        java.awt.Dimension size;
        java.awt.Insets insets;
        java.awt.geom.Rectangle2D$Double $stack22, $stack100, $stack55;
        int $stack23, $stack24, $stack28, $stack30, $stack35, $stack37, $stack43, $stack46, $stack52, $stack58, $stack59, $stack101, $stack102, $stack110, $stack111, $stack128, $stack145, $stack149, $stack152, $stack158, $stack161, $stack162, $stack165, $stack168, $stack171, $stack49, $stack88, $stack90, $stack93, $stack92, $stack97, $stack96;
        double $stack25, $stack26, $stack27, $stack29, $stack31, $stack32, $stack33, $stack34, $stack36, $stack38, $stack39, $stack40, $stack44, $stack47, $stack53, $stack75, $stack76, $stack103, $stack104, $stack121, $stack122, $stack129, $stack130, $stack146, $stack147, $stack150, $stack151, $stack159, $stack160, $stack163, $stack164, $stack169, $stack170, drawWidth, drawHeight, $stack50, $stack87, $stack89;
        byte $stack45, $stack48, $stack54, $stack131, $stack148, $stack51;
        org.jfree.chart.ChartRenderingInfo $stack60, $stack112, $stack124;
        java.awt.geom.Point2D $stack61, $stack113, $stack125;
        boolean $stack66, scale, $stack56, $stack95, $stack65, $stack68;
        java.lang.Object $stack73;
        java.awt.Image $stack86, $stack105, $stack98;
        java.awt.Composite savedComposite;
        java.awt.AlphaComposite $stack108;
        java.awt.Rectangle $stack109;
        java.awt.geom.AffineTransform saved, st, gc#94, bufferG2#95;
        java.awt.GraphicsConfiguration gc;
        java.awt.image.BufferedImage $stack94;
        java.util.List $stack63;
        java.util.Iterator gc#102;
        org.jfree.chart.panel.Overlay bufferG2#109;

        this := @this: org.jfree.chart.ChartPanel;

        g := @parameter0: java.awt.Graphics;

        specialinvoke this.<javax.swing.JPanel: void paintComponent(java.awt.Graphics)>(g);

        $stack18 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        if $stack18 != null goto label01;

        return;

     label01:
        $stack19 = virtualinvoke g.<java.awt.Graphics: java.awt.Graphics create()>();

        g2 = (java.awt.Graphics2D) $stack19;

        size = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Dimension getSize()>();

        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack22 = new java.awt.geom.Rectangle2D$Double;

        $stack23 = insets.<java.awt.Insets: int left>;

        $stack25 = (double) $stack23;

        $stack24 = insets.<java.awt.Insets: int top>;

        $stack26 = (double) $stack24;

        $stack27 = virtualinvoke size.<java.awt.Dimension: double getWidth()>();

        $stack28 = insets.<java.awt.Insets: int left>;

        $stack29 = (double) $stack28;

        $stack32 = $stack27 - $stack29;

        $stack30 = insets.<java.awt.Insets: int right>;

        $stack31 = (double) $stack30;

        $stack33 = $stack32 - $stack31;

        $stack34 = virtualinvoke size.<java.awt.Dimension: double getHeight()>();

        $stack35 = insets.<java.awt.Insets: int top>;

        $stack36 = (double) $stack35;

        $stack39 = $stack34 - $stack36;

        $stack37 = insets.<java.awt.Insets: int bottom>;

        $stack38 = (double) $stack37;

        $stack40 = $stack39 - $stack38;

        specialinvoke $stack22.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack25, $stack26, $stack33, $stack40);

        scale = 0;

        drawWidth = virtualinvoke $stack22.<java.awt.geom.Rectangle2D: double getWidth()>();

        drawHeight = virtualinvoke $stack22.<java.awt.geom.Rectangle2D: double getHeight()>();

        this.<org.jfree.chart.ChartPanel: double scaleX> = 1.0;

        this.<org.jfree.chart.ChartPanel: double scaleY> = 1.0;

        $stack43 = this.<org.jfree.chart.ChartPanel: int minimumDrawWidth>;

        $stack44 = (double) $stack43;

        $stack45 = drawWidth cmpg $stack44;

        if $stack45 >= 0 goto label02;

        $stack168 = this.<org.jfree.chart.ChartPanel: int minimumDrawWidth>;

        $stack169 = (double) $stack168;

        $stack170 = drawWidth / $stack169;

        this.<org.jfree.chart.ChartPanel: double scaleX> = $stack170;

        $stack171 = this.<org.jfree.chart.ChartPanel: int minimumDrawWidth>;

        drawWidth = (double) $stack171;

        scale = 1;

        goto label03;

     label02:
        $stack46 = this.<org.jfree.chart.ChartPanel: int maximumDrawWidth>;

        $stack47 = (double) $stack46;

        $stack48 = drawWidth cmpl $stack47;

        if $stack48 <= 0 goto label03;

        $stack162 = this.<org.jfree.chart.ChartPanel: int maximumDrawWidth>;

        $stack163 = (double) $stack162;

        $stack164 = drawWidth / $stack163;

        this.<org.jfree.chart.ChartPanel: double scaleX> = $stack164;

        $stack165 = this.<org.jfree.chart.ChartPanel: int maximumDrawWidth>;

        drawWidth = (double) $stack165;

        scale = 1;

     label03:
        $stack49 = this.<org.jfree.chart.ChartPanel: int minimumDrawHeight>;

        $stack50 = (double) $stack49;

        $stack51 = drawHeight cmpg $stack50;

        if $stack51 >= 0 goto label04;

        $stack158 = this.<org.jfree.chart.ChartPanel: int minimumDrawHeight>;

        $stack159 = (double) $stack158;

        $stack160 = drawHeight / $stack159;

        this.<org.jfree.chart.ChartPanel: double scaleY> = $stack160;

        $stack161 = this.<org.jfree.chart.ChartPanel: int minimumDrawHeight>;

        drawHeight = (double) $stack161;

        scale = 1;

        goto label05;

     label04:
        $stack52 = this.<org.jfree.chart.ChartPanel: int maximumDrawHeight>;

        $stack53 = (double) $stack52;

        $stack54 = drawHeight cmpl $stack53;

        if $stack54 <= 0 goto label05;

        $stack149 = this.<org.jfree.chart.ChartPanel: int maximumDrawHeight>;

        $stack150 = (double) $stack149;

        $stack151 = drawHeight / $stack150;

        this.<org.jfree.chart.ChartPanel: double scaleY> = $stack151;

        $stack152 = this.<org.jfree.chart.ChartPanel: int maximumDrawHeight>;

        drawHeight = (double) $stack152;

        scale = 1;

     label05:
        $stack55 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack55.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, drawWidth, drawHeight);

        $stack56 = this.<org.jfree.chart.ChartPanel: boolean useBuffer>;

        if $stack56 == 0 goto label11;

        $stack86 = this.<org.jfree.chart.ChartPanel: java.awt.Image chartBuffer>;

        if $stack86 == null goto label06;

        $stack128 = this.<org.jfree.chart.ChartPanel: int chartBufferWidth>;

        $stack129 = (double) $stack128;

        $stack130 = virtualinvoke $stack22.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack131 = $stack129 cmpl $stack130;

        if $stack131 != 0 goto label06;

        $stack145 = this.<org.jfree.chart.ChartPanel: int chartBufferHeight>;

        $stack146 = (double) $stack145;

        $stack147 = virtualinvoke $stack22.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack148 = $stack146 cmpl $stack147;

        if $stack148 == 0 goto label07;

     label06:
        $stack87 = virtualinvoke $stack22.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack88 = (int) $stack87;

        this.<org.jfree.chart.ChartPanel: int chartBufferWidth> = $stack88;

        $stack89 = virtualinvoke $stack22.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack90 = (int) $stack89;

        this.<org.jfree.chart.ChartPanel: int chartBufferHeight> = $stack90;

        gc = virtualinvoke g2.<java.awt.Graphics2D: java.awt.GraphicsConfiguration getDeviceConfiguration()>();

        $stack93 = this.<org.jfree.chart.ChartPanel: int chartBufferWidth>;

        $stack92 = this.<org.jfree.chart.ChartPanel: int chartBufferHeight>;

        $stack94 = virtualinvoke gc.<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)>($stack93, $stack92, 3);

        this.<org.jfree.chart.ChartPanel: java.awt.Image chartBuffer> = $stack94;

        this.<org.jfree.chart.ChartPanel: boolean refreshBuffer> = 1;

     label07:
        $stack95 = this.<org.jfree.chart.ChartPanel: boolean refreshBuffer>;

        if $stack95 == 0 goto label10;

        this.<org.jfree.chart.ChartPanel: boolean refreshBuffer> = 0;

        $stack100 = new java.awt.geom.Rectangle2D$Double;

        $stack101 = this.<org.jfree.chart.ChartPanel: int chartBufferWidth>;

        $stack104 = (double) $stack101;

        $stack102 = this.<org.jfree.chart.ChartPanel: int chartBufferHeight>;

        $stack103 = (double) $stack102;

        specialinvoke $stack100.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $stack104, $stack103);

        $stack105 = this.<org.jfree.chart.ChartPanel: java.awt.Image chartBuffer>;

        $stack106 = virtualinvoke $stack105.<java.awt.Image: java.awt.Graphics getGraphics()>();

        bufferG2 = (java.awt.Graphics2D) $stack106;

        savedComposite = virtualinvoke bufferG2.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $stack108 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(1, 0.0F);

        virtualinvoke bufferG2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($stack108);

        $stack109 = new java.awt.Rectangle;

        $stack111 = this.<org.jfree.chart.ChartPanel: int chartBufferWidth>;

        $stack110 = this.<org.jfree.chart.ChartPanel: int chartBufferHeight>;

        specialinvoke $stack109.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $stack111, $stack110);

        virtualinvoke bufferG2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack109);

        virtualinvoke bufferG2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(savedComposite);

        if scale == 0 goto label08;

        saved = virtualinvoke bufferG2.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $stack122 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        $stack121 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        st = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($stack122, $stack121);

        virtualinvoke bufferG2.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>(st);

        $stack126 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack125 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D anchor>;

        $stack124 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        virtualinvoke $stack126.<org.jfree.chart.JFreeChart: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)>(bufferG2, $stack55, $stack125, $stack124);

        virtualinvoke bufferG2.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>(saved);

        goto label09;

     label08:
        $stack114 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack113 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D anchor>;

        $stack112 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        virtualinvoke $stack114.<org.jfree.chart.JFreeChart: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)>(bufferG2, $stack100, $stack113, $stack112);

     label09:
        virtualinvoke bufferG2.<java.awt.Graphics2D: void dispose()>();

     label10:
        $stack98 = this.<org.jfree.chart.ChartPanel: java.awt.Image chartBuffer>;

        $stack97 = insets.<java.awt.Insets: int left>;

        $stack96 = insets.<java.awt.Insets: int top>;

        virtualinvoke g2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($stack98, $stack97, $stack96, this);

        goto label13;

     label11:
        gc#94 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $stack59 = insets.<java.awt.Insets: int left>;

        $stack58 = insets.<java.awt.Insets: int top>;

        virtualinvoke g2.<java.awt.Graphics2D: void translate(int,int)>($stack59, $stack58);

        if scale == 0 goto label12;

        $stack76 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        $stack75 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        bufferG2#95 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($stack76, $stack75);

        virtualinvoke g2.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>(bufferG2#95);

     label12:
        $stack62 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack61 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D anchor>;

        $stack60 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        virtualinvoke $stack62.<org.jfree.chart.JFreeChart: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)>(g2, $stack55, $stack61, $stack60);

        virtualinvoke g2.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>(gc#94);

     label13:
        $stack63 = this.<org.jfree.chart.ChartPanel: java.util.List overlays>;

        gc#102 = interfaceinvoke $stack63.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $stack65 = interfaceinvoke gc#102.<java.util.Iterator: boolean hasNext()>();

        if $stack65 == 0 goto label15;

        $stack73 = interfaceinvoke gc#102.<java.util.Iterator: java.lang.Object next()>();

        bufferG2#109 = (org.jfree.chart.panel.Overlay) $stack73;

        interfaceinvoke bufferG2#109.<org.jfree.chart.panel.Overlay: void paintOverlay(java.awt.Graphics2D,org.jfree.chart.ChartPanel)>(g2, this);

        goto label14;

     label15:
        $stack66 = this.<org.jfree.chart.ChartPanel: boolean useBuffer>;

        if $stack66 != 0 goto label16;

        $stack68 = 1;

        goto label17;

     label16:
        $stack68 = 0;

     label17:
        virtualinvoke this.<org.jfree.chart.ChartPanel: void drawZoomRectangle(java.awt.Graphics2D,boolean)>(g2, $stack68);

        virtualinvoke g2.<java.awt.Graphics2D: void dispose()>();

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D anchor> = null;

        return;
    }

    public void chartChanged(org.jfree.chart.event.ChartChangeEvent)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack4;
        org.jfree.chart.plot.Plot plot;
        boolean $stack6;
        org.jfree.chart.plot.Zoomable z;
        org.jfree.chart.plot.PlotOrientation $stack7;
        org.jfree.chart.event.ChartChangeEvent event;

        this := @this: org.jfree.chart.ChartPanel;

        event := @parameter0: org.jfree.chart.event.ChartChangeEvent;

        this.<org.jfree.chart.ChartPanel: boolean refreshBuffer> = 1;

        $stack4 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack4.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack6 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack6 == 0 goto label1;

        z = (org.jfree.chart.plot.Zoomable) plot;

        $stack7 = interfaceinvoke z.<org.jfree.chart.plot.Zoomable: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        this.<org.jfree.chart.ChartPanel: org.jfree.chart.plot.PlotOrientation orientation> = $stack7;

     label1:
        virtualinvoke this.<org.jfree.chart.ChartPanel: void repaint()>();

        return;
    }

    public void chartProgress(org.jfree.chart.event.ChartProgressEvent)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.event.ChartProgressEvent event;

        this := @this: org.jfree.chart.ChartPanel;

        event := @parameter0: org.jfree.chart.event.ChartProgressEvent;

        return;
    }

    public void actionPerformed(java.awt.event.ActionEvent)
    {
        java.awt.event.ActionEvent event;
        java.lang.String command, $stack39, $stack43, $stack47;
        org.jfree.chart.ChartPanel this;
        java.awt.geom.Point2D $stack9, $stack30, $stack32;
        boolean $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25;
        java.awt.Toolkit $stack26;
        int $stack28, $stack29;
        java.io.IOException $stack36, $stack40, $stack44;
        java.util.ResourceBundle $stack37, $stack41, $stack45;
        double screenX, screenY;
        java.awt.Dimension e#4;

        this := @this: org.jfree.chart.ChartPanel;

        event := @parameter0: java.awt.event.ActionEvent;

        command = virtualinvoke event.<java.awt.event.ActionEvent: java.lang.String getActionCommand()>();

        screenX = -1.0;

        screenY = -1.0;

        $stack9 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        if $stack9 == null goto label01;

        $stack30 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        screenX = virtualinvoke $stack30.<java.awt.geom.Point2D: double getX()>();

        $stack32 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        screenY = virtualinvoke $stack32.<java.awt.geom.Point2D: double getY()>();

     label01:
        $stack10 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("PROPERTIES");

        if $stack10 == 0 goto label02;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void doEditChartProperties()>();

        goto label26;

     label02:
        $stack11 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("COPY");

        if $stack11 == 0 goto label03;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void doCopy()>();

        goto label26;

     label03:
        $stack12 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("SAVE_AS_PNG");

        if $stack12 == 0 goto label07;

     label04:
        virtualinvoke this.<org.jfree.chart.ChartPanel: void doSaveAs()>();

     label05:
        goto label26;

     label06:
        $stack44 := @caughtexception;

        $stack45 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack47 = virtualinvoke $stack45.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Save_as_PNG");

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>(this, "I/O error occurred.", $stack47, 2);

        goto label26;

     label07:
        $stack13 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("SAVE_AS_PNG_SIZE");

        if $stack13 == 0 goto label11;

     label08:
        $stack26 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        e#4 = virtualinvoke $stack26.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>();

        $stack29 = e#4.<java.awt.Dimension: int width>;

        $stack28 = e#4.<java.awt.Dimension: int height>;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void doSaveAs(int,int)>($stack29, $stack28);

     label09:
        goto label26;

     label10:
        $stack40 := @caughtexception;

        $stack41 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack43 = virtualinvoke $stack41.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Save_as_PNG");

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>(this, "I/O error occurred.", $stack43, 2);

        goto label26;

     label11:
        $stack14 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("SAVE_AS_SVG");

        if $stack14 == 0 goto label15;

     label12:
        virtualinvoke this.<org.jfree.chart.ChartPanel: void saveAsSVG(java.io.File)>(null);

     label13:
        goto label26;

     label14:
        $stack36 := @caughtexception;

        $stack37 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack39 = virtualinvoke $stack37.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Save_as_SVG");

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>(this, "I/O error occurred.", $stack39, 2);

        goto label26;

     label15:
        $stack15 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("SAVE_AS_PDF");

        if $stack15 == 0 goto label16;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void saveAsPDF(java.io.File)>(null);

        goto label26;

     label16:
        $stack16 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("PRINT");

        if $stack16 == 0 goto label17;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void createChartPrintJob()>();

        goto label26;

     label17:
        $stack17 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("ZOOM_IN_BOTH");

        if $stack17 == 0 goto label18;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomInBoth(double,double)>(screenX, screenY);

        goto label26;

     label18:
        $stack18 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("ZOOM_IN_DOMAIN");

        if $stack18 == 0 goto label19;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomInDomain(double,double)>(screenX, screenY);

        goto label26;

     label19:
        $stack19 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("ZOOM_IN_RANGE");

        if $stack19 == 0 goto label20;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomInRange(double,double)>(screenX, screenY);

        goto label26;

     label20:
        $stack20 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("ZOOM_OUT_BOTH");

        if $stack20 == 0 goto label21;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomOutBoth(double,double)>(screenX, screenY);

        goto label26;

     label21:
        $stack21 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("ZOOM_DOMAIN_BOTH");

        if $stack21 == 0 goto label22;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomOutDomain(double,double)>(screenX, screenY);

        goto label26;

     label22:
        $stack22 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("ZOOM_RANGE_BOTH");

        if $stack22 == 0 goto label23;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomOutRange(double,double)>(screenX, screenY);

        goto label26;

     label23:
        $stack23 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("ZOOM_RESET_BOTH");

        if $stack23 == 0 goto label24;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void restoreAutoBounds()>();

        goto label26;

     label24:
        $stack24 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("ZOOM_RESET_DOMAIN");

        if $stack24 == 0 goto label25;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void restoreAutoDomainBounds()>();

        goto label26;

     label25:
        $stack25 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("ZOOM_RESET_RANGE");

        if $stack25 == 0 goto label26;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void restoreAutoRangeBounds()>();

     label26:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label12 to label13 with label14;
    }

    public void mouseEntered(java.awt.event.MouseEvent)
    {
        org.jfree.chart.ChartPanel this;
        boolean $stack3;
        javax.swing.ToolTipManager ttm;
        int $stack5, $stack6, $stack7, $stack8, $stack9, $stack10;
        java.awt.event.MouseEvent e;

        this := @this: org.jfree.chart.ChartPanel;

        e := @parameter0: java.awt.event.MouseEvent;

        $stack3 = this.<org.jfree.chart.ChartPanel: boolean ownToolTipDelaysActive>;

        if $stack3 != 0 goto label1;

        ttm = staticinvoke <javax.swing.ToolTipManager: javax.swing.ToolTipManager sharedInstance()>();

        $stack5 = virtualinvoke ttm.<javax.swing.ToolTipManager: int getInitialDelay()>();

        this.<org.jfree.chart.ChartPanel: int originalToolTipInitialDelay> = $stack5;

        $stack6 = this.<org.jfree.chart.ChartPanel: int ownToolTipInitialDelay>;

        virtualinvoke ttm.<javax.swing.ToolTipManager: void setInitialDelay(int)>($stack6);

        $stack7 = virtualinvoke ttm.<javax.swing.ToolTipManager: int getReshowDelay()>();

        this.<org.jfree.chart.ChartPanel: int originalToolTipReshowDelay> = $stack7;

        $stack8 = this.<org.jfree.chart.ChartPanel: int ownToolTipReshowDelay>;

        virtualinvoke ttm.<javax.swing.ToolTipManager: void setReshowDelay(int)>($stack8);

        $stack9 = virtualinvoke ttm.<javax.swing.ToolTipManager: int getDismissDelay()>();

        this.<org.jfree.chart.ChartPanel: int originalToolTipDismissDelay> = $stack9;

        $stack10 = this.<org.jfree.chart.ChartPanel: int ownToolTipDismissDelay>;

        virtualinvoke ttm.<javax.swing.ToolTipManager: void setDismissDelay(int)>($stack10);

        this.<org.jfree.chart.ChartPanel: boolean ownToolTipDelaysActive> = 1;

     label1:
        return;
    }

    public void mouseExited(java.awt.event.MouseEvent)
    {
        org.jfree.chart.ChartPanel this;
        boolean $stack3;
        javax.swing.ToolTipManager ttm;
        int $stack5, $stack6, $stack7;
        java.awt.event.MouseEvent e;

        this := @this: org.jfree.chart.ChartPanel;

        e := @parameter0: java.awt.event.MouseEvent;

        $stack3 = this.<org.jfree.chart.ChartPanel: boolean ownToolTipDelaysActive>;

        if $stack3 == 0 goto label1;

        ttm = staticinvoke <javax.swing.ToolTipManager: javax.swing.ToolTipManager sharedInstance()>();

        $stack5 = this.<org.jfree.chart.ChartPanel: int originalToolTipInitialDelay>;

        virtualinvoke ttm.<javax.swing.ToolTipManager: void setInitialDelay(int)>($stack5);

        $stack6 = this.<org.jfree.chart.ChartPanel: int originalToolTipReshowDelay>;

        virtualinvoke ttm.<javax.swing.ToolTipManager: void setReshowDelay(int)>($stack6);

        $stack7 = this.<org.jfree.chart.ChartPanel: int originalToolTipDismissDelay>;

        virtualinvoke ttm.<javax.swing.ToolTipManager: void setDismissDelay(int)>($stack7);

        this.<org.jfree.chart.ChartPanel: boolean ownToolTipDelaysActive> = 0;

     label1:
        return;
    }

    public void mousePressed(java.awt.event.MouseEvent)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack6, $stack7;
        org.jfree.chart.plot.Plot plot;
        java.awt.event.MouseEvent e;
        int mods, $stack10, $stack11, $stack12, $stack14, $stack15, $stack19, $stack20, $stack21, $stack22, $stack27, $stack28;
        java.awt.geom.Rectangle2D $stack13, screenDataArea, pannable#2;
        boolean $stack17, $stack25, $stack26, $stack31, $stack36;
        javax.swing.JPopupMenu $stack18;
        java.awt.geom.Point2D $stack23;
        java.awt.Point $stack30, $stack34;
        double $stack32, $stack33;
        java.awt.Cursor $stack35;
        org.jfree.chart.plot.Pannable pannable;

        this := @this: org.jfree.chart.ChartPanel;

        e := @parameter0: java.awt.event.MouseEvent;

        $stack6 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        if $stack6 != null goto label1;

        return;

     label1:
        $stack7 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack7.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        mods = virtualinvoke e.<java.awt.event.MouseEvent: int getModifiers()>();

        $stack10 = this.<org.jfree.chart.ChartPanel: int panMask>;

        $stack12 = mods & $stack10;

        $stack11 = this.<org.jfree.chart.ChartPanel: int panMask>;

        if $stack12 != $stack11 goto label4;

        $stack25 = plot instanceof org.jfree.chart.plot.Pannable;

        if $stack25 == 0 goto label7;

        pannable = (org.jfree.chart.plot.Pannable) plot;

        $stack26 = interfaceinvoke pannable.<org.jfree.chart.plot.Pannable: boolean isDomainPannable()>();

        if $stack26 != 0 goto label2;

        $stack36 = interfaceinvoke pannable.<org.jfree.chart.plot.Pannable: boolean isRangePannable()>();

        if $stack36 == 0 goto label3;

     label2:
        $stack27 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack28 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        screenDataArea = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D getScreenDataArea(int,int)>($stack27, $stack28);

        if screenDataArea == null goto label3;

        $stack30 = virtualinvoke e.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        $stack31 = virtualinvoke screenDataArea.<java.awt.geom.Rectangle2D: boolean contains(java.awt.geom.Point2D)>($stack30);

        if $stack31 == 0 goto label3;

        $stack32 = virtualinvoke screenDataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        this.<org.jfree.chart.ChartPanel: double panW> = $stack32;

        $stack33 = virtualinvoke screenDataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        this.<org.jfree.chart.ChartPanel: double panH> = $stack33;

        $stack34 = virtualinvoke e.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        this.<org.jfree.chart.ChartPanel: java.awt.Point panLast> = $stack34;

        $stack35 = staticinvoke <java.awt.Cursor: java.awt.Cursor getPredefinedCursor(int)>(13);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void setCursor(java.awt.Cursor)>($stack35);

     label3:
        goto label7;

     label4:
        $stack13 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle>;

        if $stack13 != null goto label7;

        $stack14 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack15 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        pannable#2 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D getScreenDataArea(int,int)>($stack14, $stack15);

        if pannable#2 == null goto label5;

        $stack21 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack22 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        $stack23 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D getPointInRectangle(int,int,java.awt.geom.Rectangle2D)>($stack21, $stack22, pannable#2);

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint> = $stack23;

        goto label6;

     label5:
        this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint> = null;

     label6:
        $stack17 = virtualinvoke e.<java.awt.event.MouseEvent: boolean isPopupTrigger()>();

        if $stack17 == 0 goto label7;

        $stack18 = this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup>;

        if $stack18 == null goto label7;

        $stack19 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack20 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        virtualinvoke this.<org.jfree.chart.ChartPanel: void displayPopupMenu(int,int)>($stack19, $stack20);

     label7:
        return;
    }

    protected java.awt.geom.Point2D getPointInRectangle(int, int, java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D area;
        double $stack8, $stack9, $stack10, $stack11, xx, $stack13, $stack14, $stack15, $stack16, yy;
        int x, y;
        java.awt.geom.Point2D$Double $stack18;
        org.jfree.chart.ChartPanel this;

        this := @this: org.jfree.chart.ChartPanel;

        x := @parameter0: int;

        y := @parameter1: int;

        area := @parameter2: java.awt.geom.Rectangle2D;

        $stack8 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack9 = (double) x;

        $stack10 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack11 = staticinvoke <java.lang.Math: double min(double,double)>($stack9, $stack10);

        xx = staticinvoke <java.lang.Math: double max(double,double)>($stack8, $stack11);

        $stack13 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack14 = (double) y;

        $stack15 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack16 = staticinvoke <java.lang.Math: double min(double,double)>($stack14, $stack15);

        yy = staticinvoke <java.lang.Math: double max(double,double)>($stack13, $stack16);

        $stack18 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack18.<java.awt.geom.Point2D$Double: void <init>(double,double)>(xx, yy);

        return $stack18;
    }

    public void mouseDragged(java.awt.event.MouseEvent)
    {
        org.jfree.chart.ChartPanel this;
        javax.swing.JPopupMenu $stack12, $stack131;
        java.awt.Point $stack13, $stack79, $stack83, $stack101, $stack104, $stack105, $stack110, $stack113;
        java.awt.geom.Point2D $stack14, $stack19, $stack21, $stack34, $stack37, $stack46, $stack49, $stack63, $stack65, $stack67, $stack69;
        java.awt.Graphics $stack15;
        boolean $stack16, old, $stack132, hZoom, dy#7, $stack26;
        org.jfree.chart.plot.PlotOrientation $stack17, $stack18, $stack97, $stack98;
        double $stack20, $stack23, $stack29, $stack30, $stack33, $stack35, $stack36, $stack38, $stack39, $stack42, $stack43, $stack47, $stack48, $stack50, $stack51, $stack52, $stack55, $stack56, $stack59, $stack60, $stack64, $stack66, $stack68, $stack70, $stack71, $stack72, $stack80, $stack81, $stack84, $stack85, $stack87, $stack88, $stack89, dx, dy, wPercent, hPercent;
        int $stack22, $stack24, $stack28, $stack41, $stack54, $stack58, $stack78, $stack82;
        java.awt.geom.Rectangle2D scaledDataArea;
        java.awt.event.MouseEvent e;
        java.awt.geom.Rectangle2D$Double $stack32, $stack45, $stack62;
        byte $stack86, $stack118;
        org.jfree.chart.JFreeChart $stack90, $stack93, $stack95, $stack106;
        org.jfree.chart.plot.Plot $stack91, $stack94, $stack96, $stack107;
        org.jfree.chart.plot.Pannable p;
        org.jfree.chart.ChartRenderingInfo $stack99, $stack102, $stack108, $stack111;
        org.jfree.chart.plot.PlotRenderingInfo $stack100, $stack103, $stack109, $stack112;
        java.awt.Graphics2D dx#5;

        this := @this: org.jfree.chart.ChartPanel;

        e := @parameter0: java.awt.event.MouseEvent;

        $stack12 = this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup>;

        if $stack12 == null goto label01;

        $stack131 = this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup>;

        $stack132 = virtualinvoke $stack131.<javax.swing.JPopupMenu: boolean isShowing()>();

        if $stack132 == 0 goto label01;

        return;

     label01:
        $stack13 = this.<org.jfree.chart.ChartPanel: java.awt.Point panLast>;

        if $stack13 == null goto label05;

        $stack78 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack80 = (double) $stack78;

        $stack79 = this.<org.jfree.chart.ChartPanel: java.awt.Point panLast>;

        $stack81 = virtualinvoke $stack79.<java.awt.Point: double getX()>();

        dx = $stack80 - $stack81;

        $stack82 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        $stack84 = (double) $stack82;

        $stack83 = this.<org.jfree.chart.ChartPanel: java.awt.Point panLast>;

        $stack85 = virtualinvoke $stack83.<java.awt.Point: double getY()>();

        dy = $stack84 - $stack85;

        $stack86 = dx cmpl 0.0;

        if $stack86 != 0 goto label02;

        $stack118 = dy cmpl 0.0;

        if $stack118 != 0 goto label02;

        return;

     label02:
        $stack88 = neg dx;

        $stack87 = this.<org.jfree.chart.ChartPanel: double panW>;

        wPercent = $stack88 / $stack87;

        $stack89 = this.<org.jfree.chart.ChartPanel: double panH>;

        hPercent = dy / $stack89;

        $stack90 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack91 = virtualinvoke $stack90.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        old = virtualinvoke $stack91.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        $stack93 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack94 = virtualinvoke $stack93.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        virtualinvoke $stack94.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        $stack95 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack96 = virtualinvoke $stack95.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        p = (org.jfree.chart.plot.Pannable) $stack96;

        $stack97 = interfaceinvoke p.<org.jfree.chart.plot.Pannable: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack98 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if $stack97 != $stack98 goto label03;

        $stack108 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack109 = virtualinvoke $stack108.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack110 = this.<org.jfree.chart.ChartPanel: java.awt.Point panLast>;

        interfaceinvoke p.<org.jfree.chart.plot.Pannable: void panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(wPercent, $stack109, $stack110);

        $stack111 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack112 = virtualinvoke $stack111.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack113 = this.<org.jfree.chart.ChartPanel: java.awt.Point panLast>;

        interfaceinvoke p.<org.jfree.chart.plot.Pannable: void panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(hPercent, $stack112, $stack113);

        goto label04;

     label03:
        $stack99 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack100 = virtualinvoke $stack99.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack101 = this.<org.jfree.chart.ChartPanel: java.awt.Point panLast>;

        interfaceinvoke p.<org.jfree.chart.plot.Pannable: void panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(hPercent, $stack100, $stack101);

        $stack102 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack103 = virtualinvoke $stack102.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack104 = this.<org.jfree.chart.ChartPanel: java.awt.Point panLast>;

        interfaceinvoke p.<org.jfree.chart.plot.Pannable: void panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(wPercent, $stack103, $stack104);

     label04:
        $stack105 = virtualinvoke e.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        this.<org.jfree.chart.ChartPanel: java.awt.Point panLast> = $stack105;

        $stack106 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack107 = virtualinvoke $stack106.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        virtualinvoke $stack107.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(old);

        return;

     label05:
        $stack14 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        if $stack14 != null goto label06;

        return;

     label06:
        $stack15 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Graphics getGraphics()>();

        dx#5 = (java.awt.Graphics2D) $stack15;

        $stack16 = this.<org.jfree.chart.ChartPanel: boolean useBuffer>;

        if $stack16 != 0 goto label07;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void drawZoomRectangle(java.awt.Graphics2D,boolean)>(dx#5, 1);

     label07:
        $stack18 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack17 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack18 != $stack17 goto label08;

        hZoom = this.<org.jfree.chart.ChartPanel: boolean rangeZoomable>;

        dy#7 = this.<org.jfree.chart.ChartPanel: boolean domainZoomable>;

        goto label09;

     label08:
        hZoom = this.<org.jfree.chart.ChartPanel: boolean domainZoomable>;

        dy#7 = this.<org.jfree.chart.ChartPanel: boolean rangeZoomable>;

     label09:
        $stack19 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack20 = virtualinvoke $stack19.<java.awt.geom.Point2D: double getX()>();

        $stack22 = (int) $stack20;

        $stack21 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack23 = virtualinvoke $stack21.<java.awt.geom.Point2D: double getY()>();

        $stack24 = (int) $stack23;

        scaledDataArea = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D getScreenDataArea(int,int)>($stack22, $stack24);

        if hZoom == 0 goto label10;

        if dy#7 == 0 goto label10;

        $stack54 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack55 = (double) $stack54;

        $stack56 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        wPercent = staticinvoke <java.lang.Math: double min(double,double)>($stack55, $stack56);

        $stack58 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        $stack59 = (double) $stack58;

        $stack60 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        hPercent = staticinvoke <java.lang.Math: double min(double,double)>($stack59, $stack60);

        $stack62 = new java.awt.geom.Rectangle2D$Double;

        $stack63 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack64 = virtualinvoke $stack63.<java.awt.geom.Point2D: double getX()>();

        $stack65 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack66 = virtualinvoke $stack65.<java.awt.geom.Point2D: double getY()>();

        $stack67 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack68 = virtualinvoke $stack67.<java.awt.geom.Point2D: double getX()>();

        $stack70 = wPercent - $stack68;

        $stack69 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack71 = virtualinvoke $stack69.<java.awt.geom.Point2D: double getY()>();

        $stack72 = hPercent - $stack71;

        specialinvoke $stack62.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack64, $stack66, $stack70, $stack72);

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle> = $stack62;

        goto label12;

     label10:
        if hZoom == 0 goto label11;

        $stack41 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack42 = (double) $stack41;

        $stack43 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        wPercent = staticinvoke <java.lang.Math: double min(double,double)>($stack42, $stack43);

        $stack45 = new java.awt.geom.Rectangle2D$Double;

        $stack46 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack47 = virtualinvoke $stack46.<java.awt.geom.Point2D: double getX()>();

        $stack48 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack49 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack50 = virtualinvoke $stack49.<java.awt.geom.Point2D: double getX()>();

        $stack51 = wPercent - $stack50;

        $stack52 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack45.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack47, $stack48, $stack51, $stack52);

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle> = $stack45;

        goto label12;

     label11:
        if dy#7 == 0 goto label12;

        $stack28 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        $stack29 = (double) $stack28;

        $stack30 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        wPercent = staticinvoke <java.lang.Math: double min(double,double)>($stack29, $stack30);

        $stack32 = new java.awt.geom.Rectangle2D$Double;

        $stack33 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack34 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack35 = virtualinvoke $stack34.<java.awt.geom.Point2D: double getY()>();

        $stack36 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack37 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack38 = virtualinvoke $stack37.<java.awt.geom.Point2D: double getY()>();

        $stack39 = wPercent - $stack38;

        specialinvoke $stack32.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack33, $stack35, $stack36, $stack39);

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle> = $stack32;

     label12:
        $stack26 = this.<org.jfree.chart.ChartPanel: boolean useBuffer>;

        if $stack26 == 0 goto label13;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void repaint()>();

        goto label14;

     label13:
        virtualinvoke this.<org.jfree.chart.ChartPanel: void drawZoomRectangle(java.awt.Graphics2D,boolean)>(dx#5, 1);

     label14:
        virtualinvoke dx#5.<java.awt.Graphics2D: void dispose()>();

        return;
    }

    public void mouseReleased(java.awt.event.MouseEvent)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Point $stack20;
        java.awt.geom.Rectangle2D $stack21, screenDataArea, $stack41, $stack47, $stack58, $stack77;
        java.awt.event.MouseEvent e;
        boolean $stack22, zoomTrigger1, $stack103, hZoom, vZoom, $stack130, $stack119;
        javax.swing.JPopupMenu $stack23;
        int $stack24, $stack25, $stack31, $stack33, $stack84, $stack95, $stack110, $stack116, $stack121, $stack127;
        org.jfree.chart.plot.PlotOrientation $stack26, $stack27;
        java.awt.geom.Point2D $stack28, $stack30, $stack37, $stack39, $stack43, $stack49, $stack55, $stack60, $stack74, $stack79, $stack85, $stack96, $stack111, $stack122;
        double $stack29, $stack32, maxX, maxY, $stack42, $stack44, $stack45, $stack48, $stack50, $stack51, $stack59, $stack61, $stack62, $stack78, $stack80, $stack81, $stack86, $stack87, $stack97, $stack98, $stack112, $stack113, $stack114, $stack115, $stack117, $stack123, $stack124, $stack125, $stack126, $stack128, x, y, w, h;
        byte $stack88, $stack99, $stack118, $stack129;
        java.awt.Graphics $stack102;
        java.awt.Cursor $stack133;
        java.awt.geom.Rectangle2D$Double $stack53;
        java.awt.Graphics2D x#40;

        this := @this: org.jfree.chart.ChartPanel;

        e := @parameter0: java.awt.event.MouseEvent;

        $stack20 = this.<org.jfree.chart.ChartPanel: java.awt.Point panLast>;

        if $stack20 == null goto label01;

        this.<org.jfree.chart.ChartPanel: java.awt.Point panLast> = null;

        $stack133 = staticinvoke <java.awt.Cursor: java.awt.Cursor getDefaultCursor()>();

        virtualinvoke this.<org.jfree.chart.ChartPanel: void setCursor(java.awt.Cursor)>($stack133);

        goto label21;

     label01:
        $stack21 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle>;

        if $stack21 == null goto label20;

        $stack27 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.plot.PlotOrientation orientation>;

        $stack26 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack27 != $stack26 goto label02;

        hZoom = this.<org.jfree.chart.ChartPanel: boolean rangeZoomable>;

        vZoom = this.<org.jfree.chart.ChartPanel: boolean domainZoomable>;

        goto label03;

     label02:
        hZoom = this.<org.jfree.chart.ChartPanel: boolean domainZoomable>;

        vZoom = this.<org.jfree.chart.ChartPanel: boolean rangeZoomable>;

     label03:
        if hZoom == 0 goto label04;

        $stack121 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack123 = (double) $stack121;

        $stack122 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack124 = virtualinvoke $stack122.<java.awt.geom.Point2D: double getX()>();

        $stack125 = $stack123 - $stack124;

        $stack126 = staticinvoke <java.lang.Math: double abs(double)>($stack125);

        $stack127 = this.<org.jfree.chart.ChartPanel: int zoomTriggerDistance>;

        $stack128 = (double) $stack127;

        $stack129 = $stack126 cmpl $stack128;

        if $stack129 < 0 goto label04;

        $stack130 = 1;

        goto label05;

     label04:
        $stack130 = 0;

     label05:
        zoomTrigger1 = $stack130;

        if vZoom == 0 goto label06;

        $stack110 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        $stack112 = (double) $stack110;

        $stack111 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack113 = virtualinvoke $stack111.<java.awt.geom.Point2D: double getY()>();

        $stack114 = $stack112 - $stack113;

        $stack115 = staticinvoke <java.lang.Math: double abs(double)>($stack114);

        $stack116 = this.<org.jfree.chart.ChartPanel: int zoomTriggerDistance>;

        $stack117 = (double) $stack116;

        $stack118 = $stack115 cmpl $stack117;

        if $stack118 < 0 goto label06;

        $stack119 = 1;

        goto label07;

     label06:
        $stack119 = 0;

     label07:
        if zoomTrigger1 != 0 goto label08;

        if $stack119 == 0 goto label16;

     label08:
        if hZoom == 0 goto label09;

        $stack95 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack97 = (double) $stack95;

        $stack96 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack98 = virtualinvoke $stack96.<java.awt.geom.Point2D: double getX()>();

        $stack99 = $stack97 cmpg $stack98;

        if $stack99 < 0 goto label10;

     label09:
        if vZoom == 0 goto label11;

        $stack84 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        $stack86 = (double) $stack84;

        $stack85 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack87 = virtualinvoke $stack85.<java.awt.geom.Point2D: double getY()>();

        $stack88 = $stack86 cmpg $stack87;

        if $stack88 >= 0 goto label11;

     label10:
        virtualinvoke this.<org.jfree.chart.ChartPanel: void restoreAutoBounds()>();

        goto label15;

     label11:
        $stack28 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack29 = virtualinvoke $stack28.<java.awt.geom.Point2D: double getX()>();

        $stack31 = (int) $stack29;

        $stack30 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack32 = virtualinvoke $stack30.<java.awt.geom.Point2D: double getY()>();

        $stack33 = (int) $stack32;

        screenDataArea = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D getScreenDataArea(int,int)>($stack31, $stack33);

        maxX = virtualinvoke screenDataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        maxY = virtualinvoke screenDataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        if vZoom != 0 goto label12;

        $stack74 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        x = virtualinvoke $stack74.<java.awt.geom.Point2D: double getX()>();

        y = virtualinvoke screenDataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack77 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle>;

        $stack78 = virtualinvoke $stack77.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack79 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack80 = virtualinvoke $stack79.<java.awt.geom.Point2D: double getX()>();

        $stack81 = maxX - $stack80;

        w = staticinvoke <java.lang.Math: double min(double,double)>($stack78, $stack81);

        h = virtualinvoke screenDataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        goto label14;

     label12:
        if hZoom != 0 goto label13;

        x = virtualinvoke screenDataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack55 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        y = virtualinvoke $stack55.<java.awt.geom.Point2D: double getY()>();

        w = virtualinvoke screenDataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack58 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle>;

        $stack59 = virtualinvoke $stack58.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack60 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack61 = virtualinvoke $stack60.<java.awt.geom.Point2D: double getY()>();

        $stack62 = maxY - $stack61;

        h = staticinvoke <java.lang.Math: double min(double,double)>($stack59, $stack62);

        goto label14;

     label13:
        $stack37 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        x = virtualinvoke $stack37.<java.awt.geom.Point2D: double getX()>();

        $stack39 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        y = virtualinvoke $stack39.<java.awt.geom.Point2D: double getY()>();

        $stack41 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle>;

        $stack42 = virtualinvoke $stack41.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack43 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack44 = virtualinvoke $stack43.<java.awt.geom.Point2D: double getX()>();

        $stack45 = maxX - $stack44;

        w = staticinvoke <java.lang.Math: double min(double,double)>($stack42, $stack45);

        $stack47 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle>;

        $stack48 = virtualinvoke $stack47.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack49 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        $stack50 = virtualinvoke $stack49.<java.awt.geom.Point2D: double getY()>();

        $stack51 = maxY - $stack50;

        h = staticinvoke <java.lang.Math: double min(double,double)>($stack48, $stack51);

     label14:
        $stack53 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack53.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(x, y, w, h);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoom(java.awt.geom.Rectangle2D)>($stack53);

     label15:
        this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint> = null;

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle> = null;

        goto label19;

     label16:
        $stack102 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Graphics getGraphics()>();

        x#40 = (java.awt.Graphics2D) $stack102;

        $stack103 = this.<org.jfree.chart.ChartPanel: boolean useBuffer>;

        if $stack103 == 0 goto label17;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void repaint()>();

        goto label18;

     label17:
        virtualinvoke this.<org.jfree.chart.ChartPanel: void drawZoomRectangle(java.awt.Graphics2D,boolean)>(x#40, 1);

     label18:
        virtualinvoke x#40.<java.awt.Graphics2D: void dispose()>();

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint> = null;

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle> = null;

     label19:
        goto label21;

     label20:
        $stack22 = virtualinvoke e.<java.awt.event.MouseEvent: boolean isPopupTrigger()>();

        if $stack22 == 0 goto label21;

        $stack23 = this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup>;

        if $stack23 == null goto label21;

        $stack24 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack25 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        virtualinvoke this.<org.jfree.chart.ChartPanel: void displayPopupMenu(int,int)>($stack24, $stack25);

     label21:
        return;
    }

    public void mouseClicked(java.awt.event.MouseEvent)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Insets insets;
        java.awt.event.MouseEvent event;
        int $stack10, $stack11, $stack12, x, $stack16, $stack17, $stack18, y, $stack29, $stack33, i;
        double $stack13, $stack14, $stack15, $stack19, $stack20, $stack21, $stack23, $stack24, $stack45, $stack46;
        java.awt.geom.Point2D$Double $stack22;
        org.jfree.chart.JFreeChart $stack25, $stack26, $stack32;
        javax.swing.event.EventListenerList $stack27;
        java.util.EventListener[] listeners;
        org.jfree.chart.ChartRenderingInfo $stack30, $stack37;
        java.util.EventListener $stack34;
        org.jfree.chart.ChartMouseListener $stack35;
        org.jfree.chart.entity.ChartEntity entity;
        org.jfree.chart.entity.EntityCollection entities;
        org.jfree.chart.ChartMouseEvent $stack31;

        this := @this: org.jfree.chart.ChartPanel;

        event := @parameter0: java.awt.event.MouseEvent;

        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack10 = virtualinvoke event.<java.awt.event.MouseEvent: int getX()>();

        $stack11 = insets.<java.awt.Insets: int left>;

        $stack12 = $stack10 - $stack11;

        $stack14 = (double) $stack12;

        $stack13 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        $stack15 = $stack14 / $stack13;

        x = (int) $stack15;

        $stack16 = virtualinvoke event.<java.awt.event.MouseEvent: int getY()>();

        $stack17 = insets.<java.awt.Insets: int top>;

        $stack18 = $stack16 - $stack17;

        $stack20 = (double) $stack18;

        $stack19 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        $stack21 = $stack20 / $stack19;

        y = (int) $stack21;

        $stack22 = new java.awt.geom.Point2D$Double;

        $stack24 = (double) x;

        $stack23 = (double) y;

        specialinvoke $stack22.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack24, $stack23);

        this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D anchor> = $stack22;

        $stack25 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        if $stack25 != null goto label1;

        return;

     label1:
        $stack26 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        virtualinvoke $stack26.<org.jfree.chart.JFreeChart: void setNotify(boolean)>(1);

        $stack27 = this.<org.jfree.chart.ChartPanel: javax.swing.event.EventListenerList chartMouseListeners>;

        listeners = virtualinvoke $stack27.<javax.swing.event.EventListenerList: java.util.EventListener[] getListeners(java.lang.Class)>(class "Lorg/jfree/chart/ChartMouseListener;");

        $stack29 = lengthof listeners;

        if $stack29 != 0 goto label2;

        return;

     label2:
        entity = null;

        $stack30 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        if $stack30 == null goto label3;

        $stack37 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        entities = virtualinvoke $stack37.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label3;

        $stack46 = (double) x;

        $stack45 = (double) y;

        entity = interfaceinvoke entities.<org.jfree.chart.entity.EntityCollection: org.jfree.chart.entity.ChartEntity getEntity(double,double)>($stack46, $stack45);

     label3:
        $stack31 = new org.jfree.chart.ChartMouseEvent;

        $stack32 = virtualinvoke this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart getChart()>();

        specialinvoke $stack31.<org.jfree.chart.ChartMouseEvent: void <init>(org.jfree.chart.JFreeChart,java.awt.event.MouseEvent,org.jfree.chart.entity.ChartEntity)>($stack32, event, entity);

        $stack33 = lengthof listeners;

        i = $stack33 - 1;

     label4:
        if i < 0 goto label5;

        $stack34 = listeners[i];

        $stack35 = (org.jfree.chart.ChartMouseListener) $stack34;

        interfaceinvoke $stack35.<org.jfree.chart.ChartMouseListener: void chartMouseClicked(org.jfree.chart.ChartMouseEvent)>($stack31);

        i = i + -1;

        goto label4;

     label5:
        return;
    }

    public void mouseMoved(java.awt.event.MouseEvent)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Graphics $stack10;
        java.awt.Graphics2D g2;
        javax.swing.event.EventListenerList $stack11;
        java.util.EventListener[] listeners;
        int $stack13, $stack15, $stack16, $stack17, x, $stack21, $stack22, $stack23, y, $stack31, i;
        java.awt.Insets insets;
        java.awt.event.MouseEvent e;
        double $stack18, $stack19, $stack20, $stack24, $stack25, $stack26, $stack38, $stack39;
        org.jfree.chart.ChartRenderingInfo $stack27, $stack35;
        org.jfree.chart.ChartMouseEvent $stack29;
        org.jfree.chart.JFreeChart $stack30, $stack28;
        java.util.EventListener $stack32;
        org.jfree.chart.ChartMouseListener $stack33;
        org.jfree.chart.entity.ChartEntity entity;
        org.jfree.chart.entity.EntityCollection entities;

        this := @this: org.jfree.chart.ChartPanel;

        e := @parameter0: java.awt.event.MouseEvent;

        $stack10 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Graphics getGraphics()>();

        g2 = (java.awt.Graphics2D) $stack10;

        virtualinvoke g2.<java.awt.Graphics2D: void dispose()>();

        $stack11 = this.<org.jfree.chart.ChartPanel: javax.swing.event.EventListenerList chartMouseListeners>;

        listeners = virtualinvoke $stack11.<javax.swing.event.EventListenerList: java.util.EventListener[] getListeners(java.lang.Class)>(class "Lorg/jfree/chart/ChartMouseListener;");

        $stack13 = lengthof listeners;

        if $stack13 != 0 goto label1;

        return;

     label1:
        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack15 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();

        $stack16 = insets.<java.awt.Insets: int left>;

        $stack17 = $stack15 - $stack16;

        $stack19 = (double) $stack17;

        $stack18 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        $stack20 = $stack19 / $stack18;

        x = (int) $stack20;

        $stack21 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();

        $stack22 = insets.<java.awt.Insets: int top>;

        $stack23 = $stack21 - $stack22;

        $stack25 = (double) $stack23;

        $stack24 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        $stack26 = $stack25 / $stack24;

        y = (int) $stack26;

        entity = null;

        $stack27 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        if $stack27 == null goto label2;

        $stack35 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        entities = virtualinvoke $stack35.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label2;

        $stack39 = (double) x;

        $stack38 = (double) y;

        entity = interfaceinvoke entities.<org.jfree.chart.entity.EntityCollection: org.jfree.chart.entity.ChartEntity getEntity(double,double)>($stack39, $stack38);

     label2:
        $stack28 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        if $stack28 == null goto label4;

        $stack29 = new org.jfree.chart.ChartMouseEvent;

        $stack30 = virtualinvoke this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart getChart()>();

        specialinvoke $stack29.<org.jfree.chart.ChartMouseEvent: void <init>(org.jfree.chart.JFreeChart,java.awt.event.MouseEvent,org.jfree.chart.entity.ChartEntity)>($stack30, e, entity);

        $stack31 = lengthof listeners;

        i = $stack31 - 1;

     label3:
        if i < 0 goto label4;

        $stack32 = listeners[i];

        $stack33 = (org.jfree.chart.ChartMouseListener) $stack32;

        interfaceinvoke $stack33.<org.jfree.chart.ChartMouseListener: void chartMouseMoved(org.jfree.chart.ChartMouseEvent)>($stack29);

        i = i + -1;

        goto label3;

     label4:
        return;
    }

    public void zoomInBoth(double, double)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack7;
        org.jfree.chart.plot.Plot plot;
        boolean savedNotify;
        double x, y;

        this := @this: org.jfree.chart.ChartPanel;

        x := @parameter0: double;

        y := @parameter1: double;

        $stack7 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack7.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        if plot != null goto label1;

        return;

     label1:
        savedNotify = virtualinvoke plot.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomInDomain(double,double)>(x, y);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomInRange(double,double)>(x, y);

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

        return;
    }

    public void zoomInDomain(double, double)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack8;
        org.jfree.chart.plot.Plot plot;
        boolean $stack10, savedNotify, $stack19;
        org.jfree.chart.plot.Zoomable z;
        org.jfree.chart.ChartRenderingInfo $stack12;
        double $stack13, x, y;
        org.jfree.chart.plot.PlotRenderingInfo $stack14;
        java.awt.Point $stack15;
        int $stack16, $stack17;
        java.awt.geom.Point2D $stack18;

        this := @this: org.jfree.chart.ChartPanel;

        x := @parameter0: double;

        y := @parameter1: double;

        $stack8 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack8.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack10 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack10 == 0 goto label1;

        savedNotify = virtualinvoke plot.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        z = (org.jfree.chart.plot.Zoomable) plot;

        $stack13 = this.<org.jfree.chart.ChartPanel: double zoomInFactor>;

        $stack12 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack14 = virtualinvoke $stack12.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack15 = new java.awt.Point;

        $stack17 = (int) x;

        $stack16 = (int) y;

        specialinvoke $stack15.<java.awt.Point: void <init>(int,int)>($stack17, $stack16);

        $stack18 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D translateScreenToJava2D(java.awt.Point)>($stack15);

        $stack19 = this.<org.jfree.chart.ChartPanel: boolean zoomAroundAnchor>;

        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>($stack13, $stack14, $stack18, $stack19);

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

     label1:
        return;
    }

    public void zoomInRange(double, double)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack8;
        org.jfree.chart.plot.Plot plot;
        boolean $stack10, savedNotify, $stack19;
        org.jfree.chart.plot.Zoomable z;
        org.jfree.chart.ChartRenderingInfo $stack12;
        double $stack13, x, y;
        org.jfree.chart.plot.PlotRenderingInfo $stack14;
        java.awt.Point $stack15;
        int $stack16, $stack17;
        java.awt.geom.Point2D $stack18;

        this := @this: org.jfree.chart.ChartPanel;

        x := @parameter0: double;

        y := @parameter1: double;

        $stack8 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack8.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack10 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack10 == 0 goto label1;

        savedNotify = virtualinvoke plot.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        z = (org.jfree.chart.plot.Zoomable) plot;

        $stack13 = this.<org.jfree.chart.ChartPanel: double zoomInFactor>;

        $stack12 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack14 = virtualinvoke $stack12.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack15 = new java.awt.Point;

        $stack17 = (int) x;

        $stack16 = (int) y;

        specialinvoke $stack15.<java.awt.Point: void <init>(int,int)>($stack17, $stack16);

        $stack18 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D translateScreenToJava2D(java.awt.Point)>($stack15);

        $stack19 = this.<org.jfree.chart.ChartPanel: boolean zoomAroundAnchor>;

        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>($stack13, $stack14, $stack18, $stack19);

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

     label1:
        return;
    }

    public void zoomOutBoth(double, double)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack7;
        org.jfree.chart.plot.Plot plot;
        boolean savedNotify;
        double x, y;

        this := @this: org.jfree.chart.ChartPanel;

        x := @parameter0: double;

        y := @parameter1: double;

        $stack7 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack7.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        if plot != null goto label1;

        return;

     label1:
        savedNotify = virtualinvoke plot.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomOutDomain(double,double)>(x, y);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void zoomOutRange(double,double)>(x, y);

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

        return;
    }

    public void zoomOutDomain(double, double)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack8;
        org.jfree.chart.plot.Plot plot;
        boolean $stack10, savedNotify, $stack19;
        org.jfree.chart.plot.Zoomable z;
        org.jfree.chart.ChartRenderingInfo $stack12;
        double $stack13, x, y;
        org.jfree.chart.plot.PlotRenderingInfo $stack14;
        java.awt.Point $stack15;
        int $stack16, $stack17;
        java.awt.geom.Point2D $stack18;

        this := @this: org.jfree.chart.ChartPanel;

        x := @parameter0: double;

        y := @parameter1: double;

        $stack8 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack8.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack10 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack10 == 0 goto label1;

        savedNotify = virtualinvoke plot.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        z = (org.jfree.chart.plot.Zoomable) plot;

        $stack13 = this.<org.jfree.chart.ChartPanel: double zoomOutFactor>;

        $stack12 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack14 = virtualinvoke $stack12.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack15 = new java.awt.Point;

        $stack17 = (int) x;

        $stack16 = (int) y;

        specialinvoke $stack15.<java.awt.Point: void <init>(int,int)>($stack17, $stack16);

        $stack18 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D translateScreenToJava2D(java.awt.Point)>($stack15);

        $stack19 = this.<org.jfree.chart.ChartPanel: boolean zoomAroundAnchor>;

        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>($stack13, $stack14, $stack18, $stack19);

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

     label1:
        return;
    }

    public void zoomOutRange(double, double)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack8;
        org.jfree.chart.plot.Plot plot;
        boolean $stack10, savedNotify, $stack19;
        org.jfree.chart.plot.Zoomable z;
        org.jfree.chart.ChartRenderingInfo $stack12;
        double $stack13, x, y;
        org.jfree.chart.plot.PlotRenderingInfo $stack14;
        java.awt.Point $stack15;
        int $stack16, $stack17;
        java.awt.geom.Point2D $stack18;

        this := @this: org.jfree.chart.ChartPanel;

        x := @parameter0: double;

        y := @parameter1: double;

        $stack8 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack8.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack10 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack10 == 0 goto label1;

        savedNotify = virtualinvoke plot.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        z = (org.jfree.chart.plot.Zoomable) plot;

        $stack13 = this.<org.jfree.chart.ChartPanel: double zoomOutFactor>;

        $stack12 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack14 = virtualinvoke $stack12.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack15 = new java.awt.Point;

        $stack17 = (int) x;

        $stack16 = (int) y;

        specialinvoke $stack15.<java.awt.Point: void <init>(int,int)>($stack17, $stack16);

        $stack18 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D translateScreenToJava2D(java.awt.Point)>($stack15);

        $stack19 = this.<org.jfree.chart.ChartPanel: boolean zoomAroundAnchor>;

        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>($stack13, $stack14, $stack18, $stack19);

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

     label1:
        return;
    }

    public void zoom(java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.Point $stack16;
        java.awt.geom.Rectangle2D selection, scaledDataArea;
        double $stack17, $stack18, $stack20, $stack21, $stack26, $stack28, $stack31, $stack33, $stack35, $stack36, $stack37, $stack38, hLower, $stack39, $stack40, $stack41, $stack42, hUpper, $stack43, $stack44, $stack45, $stack46, vLower, $stack47, $stack48, $stack49, $stack50, vUpper;
        int $stack19, $stack22, $stack27, $stack29;
        java.awt.geom.Point2D selectOrigin;
        org.jfree.chart.ChartRenderingInfo $stack24;
        org.jfree.chart.plot.PlotRenderingInfo plotInfo;
        byte $stack32, $stack34;
        org.jfree.chart.JFreeChart $stack51;
        org.jfree.chart.plot.Plot p;
        boolean $stack53, savedNotify;
        org.jfree.chart.plot.Zoomable z;
        org.jfree.chart.plot.PlotOrientation $stack55, $stack56;

        this := @this: org.jfree.chart.ChartPanel;

        selection := @parameter0: java.awt.geom.Rectangle2D;

        $stack16 = new java.awt.Point;

        $stack17 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getX()>();

        $stack18 = staticinvoke <java.lang.Math: double ceil(double)>($stack17);

        $stack19 = (int) $stack18;

        $stack20 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getY()>();

        $stack21 = staticinvoke <java.lang.Math: double ceil(double)>($stack20);

        $stack22 = (int) $stack21;

        specialinvoke $stack16.<java.awt.Point: void <init>(int,int)>($stack19, $stack22);

        selectOrigin = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D translateScreenToJava2D(java.awt.Point)>($stack16);

        $stack24 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        plotInfo = virtualinvoke $stack24.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack26 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack27 = (int) $stack26;

        $stack28 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getCenterY()>();

        $stack29 = (int) $stack28;

        scaledDataArea = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D getScreenDataArea(int,int)>($stack27, $stack29);

        $stack31 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack32 = $stack31 cmpl 0.0;

        if $stack32 <= 0 goto label3;

        $stack33 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack34 = $stack33 cmpl 0.0;

        if $stack34 <= 0 goto label3;

        $stack35 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack36 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack37 = $stack35 - $stack36;

        $stack38 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        hLower = $stack37 / $stack38;

        $stack39 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack40 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack41 = $stack39 - $stack40;

        $stack42 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        hUpper = $stack41 / $stack42;

        $stack43 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack44 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack45 = $stack43 - $stack44;

        $stack46 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        vLower = $stack45 / $stack46;

        $stack47 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack48 = virtualinvoke selection.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack49 = $stack47 - $stack48;

        $stack50 = virtualinvoke scaledDataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        vUpper = $stack49 / $stack50;

        $stack51 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        p = virtualinvoke $stack51.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack53 = p instanceof org.jfree.chart.plot.Zoomable;

        if $stack53 == 0 goto label3;

        savedNotify = virtualinvoke p.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke p.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        z = (org.jfree.chart.plot.Zoomable) p;

        $stack55 = interfaceinvoke z.<org.jfree.chart.plot.Zoomable: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack56 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack55 != $stack56 goto label1;

        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(vLower, vUpper, plotInfo, selectOrigin);

        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(hLower, hUpper, plotInfo, selectOrigin);

        goto label2;

     label1:
        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(hLower, hUpper, plotInfo, selectOrigin);

        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(vLower, vUpper, plotInfo, selectOrigin);

     label2:
        virtualinvoke p.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

     label3:
        return;
    }

    public void restoreAutoBounds()
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack3;
        org.jfree.chart.plot.Plot plot;
        boolean savedNotify;

        this := @this: org.jfree.chart.ChartPanel;

        $stack3 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack3.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        if plot != null goto label1;

        return;

     label1:
        savedNotify = virtualinvoke plot.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        virtualinvoke this.<org.jfree.chart.ChartPanel: void restoreAutoDomainBounds()>();

        virtualinvoke this.<org.jfree.chart.ChartPanel: void restoreAutoRangeBounds()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

        return;
    }

    public void restoreAutoDomainBounds()
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack5;
        org.jfree.chart.plot.Plot plot;
        boolean $stack7, savedNotify;
        org.jfree.chart.plot.Zoomable z;
        java.awt.geom.Point2D $stack9, $stack10;
        org.jfree.chart.ChartRenderingInfo $stack11;
        org.jfree.chart.plot.PlotRenderingInfo $stack13;
        java.awt.Point $u0;

        this := @this: org.jfree.chart.ChartPanel;

        $stack5 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack5.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack7 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack7 == 0 goto label3;

        z = (org.jfree.chart.plot.Zoomable) plot;

        savedNotify = virtualinvoke plot.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        $stack9 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        if $stack9 == null goto label1;

        $stack10 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        goto label2;

     label1:
        $u0 = new java.awt.Point;

        $stack10 = $u0;

        specialinvoke $u0.<java.awt.Point: void <init>()>();

     label2:
        $stack11 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack13 = virtualinvoke $stack11.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(0.0, $stack13, $stack10);

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

     label3:
        return;
    }

    public void restoreAutoRangeBounds()
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack5;
        org.jfree.chart.plot.Plot plot;
        boolean $stack7, savedNotify;
        org.jfree.chart.plot.Zoomable z;
        java.awt.geom.Point2D $stack9, $stack10;
        org.jfree.chart.ChartRenderingInfo $stack11;
        org.jfree.chart.plot.PlotRenderingInfo $stack13;
        java.awt.Point $u0;

        this := @this: org.jfree.chart.ChartPanel;

        $stack5 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        plot = virtualinvoke $stack5.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack7 = plot instanceof org.jfree.chart.plot.Zoomable;

        if $stack7 == 0 goto label3;

        z = (org.jfree.chart.plot.Zoomable) plot;

        savedNotify = virtualinvoke plot.<org.jfree.chart.plot.Plot: boolean isNotify()>();

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(0);

        $stack9 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        if $stack9 == null goto label1;

        $stack10 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D zoomPoint>;

        goto label2;

     label1:
        $u0 = new java.awt.Point;

        $stack10 = $u0;

        specialinvoke $u0.<java.awt.Point: void <init>()>();

     label2:
        $stack11 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack13 = virtualinvoke $stack11.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        interfaceinvoke z.<org.jfree.chart.plot.Zoomable: void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(0.0, $stack13, $stack10);

        virtualinvoke plot.<org.jfree.chart.plot.Plot: void setNotify(boolean)>(savedNotify);

     label3:
        return;
    }

    public java.awt.geom.Rectangle2D getScreenDataArea()
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.ChartRenderingInfo $stack11;
        org.jfree.chart.plot.PlotRenderingInfo $stack12;
        java.awt.geom.Rectangle2D dataArea;
        java.awt.Insets insets;
        double $stack15, $stack16, $stack18, $stack19, x, $stack20, $stack21, $stack23, $stack24, y, $stack25, $stack26, w, $stack27, $stack28, h;
        int $stack17, $stack22;
        java.awt.geom.Rectangle2D$Double $stack29;

        this := @this: org.jfree.chart.ChartPanel;

        $stack11 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        $stack12 = virtualinvoke $stack11.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        dataArea = virtualinvoke $stack12.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack15 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getX()>();

        $stack16 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        $stack19 = $stack15 * $stack16;

        $stack17 = insets.<java.awt.Insets: int left>;

        $stack18 = (double) $stack17;

        x = $stack19 + $stack18;

        $stack20 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getY()>();

        $stack21 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        $stack24 = $stack20 * $stack21;

        $stack22 = insets.<java.awt.Insets: int top>;

        $stack23 = (double) $stack22;

        y = $stack24 + $stack23;

        $stack25 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack26 = this.<org.jfree.chart.ChartPanel: double scaleX>;

        w = $stack25 * $stack26;

        $stack27 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack28 = this.<org.jfree.chart.ChartPanel: double scaleY>;

        h = $stack27 * $stack28;

        $stack29 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack29.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(x, y, w, h);

        return $stack29;
    }

    public java.awt.geom.Rectangle2D getScreenDataArea(int, int)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.ChartRenderingInfo $stack7;
        org.jfree.chart.plot.PlotRenderingInfo plotInfo, $stack13;
        int $stack9, x, y, subplotIndex;
        java.awt.Point $stack10;
        java.awt.geom.Point2D selectOrigin;
        java.awt.geom.Rectangle2D $stack14, result;

        this := @this: org.jfree.chart.ChartPanel;

        x := @parameter0: int;

        y := @parameter1: int;

        $stack7 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.ChartRenderingInfo info>;

        plotInfo = virtualinvoke $stack7.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        $stack9 = virtualinvoke plotInfo.<org.jfree.chart.plot.PlotRenderingInfo: int getSubplotCount()>();

        if $stack9 != 0 goto label1;

        result = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D getScreenDataArea()>();

        goto label3;

     label1:
        $stack10 = new java.awt.Point;

        specialinvoke $stack10.<java.awt.Point: void <init>(int,int)>(x, y);

        selectOrigin = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D translateScreenToJava2D(java.awt.Point)>($stack10);

        subplotIndex = virtualinvoke plotInfo.<org.jfree.chart.plot.PlotRenderingInfo: int getSubplotIndex(java.awt.geom.Point2D)>(selectOrigin);

        if subplotIndex != -1 goto label2;

        return null;

     label2:
        $stack13 = virtualinvoke plotInfo.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getSubplotInfo(int)>(subplotIndex);

        $stack14 = virtualinvoke $stack13.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        result = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D scale(java.awt.geom.Rectangle2D)>($stack14);

     label3:
        return result;
    }

    public int getInitialDelay()
    {
        org.jfree.chart.ChartPanel this;
        int $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: int ownToolTipInitialDelay>;

        return $stack1;
    }

    public int getReshowDelay()
    {
        org.jfree.chart.ChartPanel this;
        int $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: int ownToolTipReshowDelay>;

        return $stack1;
    }

    public int getDismissDelay()
    {
        org.jfree.chart.ChartPanel this;
        int $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: int ownToolTipDismissDelay>;

        return $stack1;
    }

    public void setInitialDelay(int)
    {
        org.jfree.chart.ChartPanel this;
        int delay;

        this := @this: org.jfree.chart.ChartPanel;

        delay := @parameter0: int;

        this.<org.jfree.chart.ChartPanel: int ownToolTipInitialDelay> = delay;

        return;
    }

    public void setReshowDelay(int)
    {
        org.jfree.chart.ChartPanel this;
        int delay;

        this := @this: org.jfree.chart.ChartPanel;

        delay := @parameter0: int;

        this.<org.jfree.chart.ChartPanel: int ownToolTipReshowDelay> = delay;

        return;
    }

    public void setDismissDelay(int)
    {
        org.jfree.chart.ChartPanel this;
        int delay;

        this := @this: org.jfree.chart.ChartPanel;

        delay := @parameter0: int;

        this.<org.jfree.chart.ChartPanel: int ownToolTipDismissDelay> = delay;

        return;
    }

    public double getZoomInFactor()
    {
        org.jfree.chart.ChartPanel this;
        double $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: double zoomInFactor>;

        return $stack1;
    }

    public void setZoomInFactor(double)
    {
        org.jfree.chart.ChartPanel this;
        double factor;

        this := @this: org.jfree.chart.ChartPanel;

        factor := @parameter0: double;

        this.<org.jfree.chart.ChartPanel: double zoomInFactor> = factor;

        return;
    }

    public double getZoomOutFactor()
    {
        org.jfree.chart.ChartPanel this;
        double $stack1;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: double zoomOutFactor>;

        return $stack1;
    }

    public void setZoomOutFactor(double)
    {
        org.jfree.chart.ChartPanel this;
        double factor;

        this := @this: org.jfree.chart.ChartPanel;

        factor := @parameter0: double;

        this.<org.jfree.chart.ChartPanel: double zoomOutFactor> = factor;

        return;
    }

    protected void drawZoomRectangle(java.awt.Graphics2D, boolean)
    {
        org.jfree.chart.ChartPanel this;
        java.awt.geom.Rectangle2D $stack3, $stack6, $stack8;
        boolean xor, $stack4;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack5, $stack7;
        java.awt.Color $stack10;

        this := @this: org.jfree.chart.ChartPanel;

        g2 := @parameter0: java.awt.Graphics2D;

        xor := @parameter1: boolean;

        $stack3 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle>;

        if $stack3 == null goto label4;

        if xor == 0 goto label1;

        $stack10 = <java.awt.Color: java.awt.Color GRAY>;

        virtualinvoke g2.<java.awt.Graphics2D: void setXORMode(java.awt.Color)>($stack10);

     label1:
        $stack4 = this.<org.jfree.chart.ChartPanel: boolean fillZoomRectangle>;

        if $stack4 == 0 goto label2;

        $stack7 = this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomFillPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack7);

        $stack8 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle>;

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack8);

        goto label3;

     label2:
        $stack5 = this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomOutlinePaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack5);

        $stack6 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Rectangle2D zoomRectangle>;

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack6);

     label3:
        if xor == 0 goto label4;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaintMode()>();

     label4:
        return;
    }

    public void doEditChartProperties()
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack3, $stack8;
        org.jfree.chart.editor.ChartEditor editor;
        java.util.ResourceBundle $stack5;
        java.lang.String $stack6;
        int result;

        this := @this: org.jfree.chart.ChartPanel;

        $stack3 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        editor = staticinvoke <org.jfree.chart.editor.ChartEditorManager: org.jfree.chart.editor.ChartEditor getChartEditor(org.jfree.chart.JFreeChart)>($stack3);

        $stack5 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack6 = virtualinvoke $stack5.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Chart_Properties");

        result = staticinvoke <javax.swing.JOptionPane: int showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)>(this, editor, $stack6, 2, -1);

        if result != 0 goto label1;

        $stack8 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        interfaceinvoke editor.<org.jfree.chart.editor.ChartEditor: void updateChart(org.jfree.chart.JFreeChart)>($stack8);

     label1:
        return;
    }

    public void doCopy()
    {
        java.awt.Toolkit $stack6;
        java.awt.datatransfer.Clipboard systemClipboard;
        org.jfree.chart.ChartPanel this;
        java.awt.Insets insets;
        int $stack9, $stack10, $stack11, $stack12, w, $stack13, $stack14, $stack15, $stack16, h, $stack19, $stack20, $stack21, $stack22;
        org.jfree.chart.ChartTransferable $stack17;
        org.jfree.chart.JFreeChart $stack18;

        this := @this: org.jfree.chart.ChartPanel;

        $stack6 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        systemClipboard = virtualinvoke $stack6.<java.awt.Toolkit: java.awt.datatransfer.Clipboard getSystemClipboard()>();

        insets = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Insets getInsets()>();

        $stack9 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getWidth()>();

        $stack10 = insets.<java.awt.Insets: int left>;

        $stack12 = $stack9 - $stack10;

        $stack11 = insets.<java.awt.Insets: int right>;

        w = $stack12 - $stack11;

        $stack13 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getHeight()>();

        $stack14 = insets.<java.awt.Insets: int top>;

        $stack16 = $stack13 - $stack14;

        $stack15 = insets.<java.awt.Insets: int bottom>;

        h = $stack16 - $stack15;

        $stack17 = new org.jfree.chart.ChartTransferable;

        $stack18 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack19 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getMinimumDrawWidth()>();

        $stack20 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getMinimumDrawHeight()>();

        $stack21 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getMaximumDrawWidth()>();

        $stack22 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getMaximumDrawHeight()>();

        specialinvoke $stack17.<org.jfree.chart.ChartTransferable: void <init>(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean)>($stack18, w, h, $stack19, $stack20, $stack21, $stack22, 1);

        virtualinvoke systemClipboard.<java.awt.datatransfer.Clipboard: void setContents(java.awt.datatransfer.Transferable,java.awt.datatransfer.ClipboardOwner)>($stack17, null);

        return;
    }

    public void doSaveAs() throws java.io.IOException
    {
        org.jfree.chart.ChartPanel this;

        this := @this: org.jfree.chart.ChartPanel;

        virtualinvoke this.<org.jfree.chart.ChartPanel: void doSaveAs(int,int)>(-1, -1);

        return;
    }

    public void doSaveAs(int, int) throws java.io.IOException
    {
        javax.swing.JFileChooser $stack7;
        org.jfree.chart.ChartPanel this;
        java.io.File $stack8, $stack14, $stack17;
        javax.swing.filechooser.FileNameExtensionFilter $stack9;
        java.util.ResourceBundle $stack10;
        java.lang.String $stack11, filename;
        java.lang.String[] $stack12;
        int option, w, h;
        boolean $stack16, $stack26;
        org.jfree.chart.JFreeChart $stack18;
        java.lang.StringBuilder $stack28, $stack29, $stack30;

        this := @this: org.jfree.chart.ChartPanel;

        w := @parameter0: int;

        h := @parameter1: int;

        $stack7 = new javax.swing.JFileChooser;

        specialinvoke $stack7.<javax.swing.JFileChooser: void <init>()>();

        $stack8 = this.<org.jfree.chart.ChartPanel: java.io.File defaultDirectoryForSaveAs>;

        virtualinvoke $stack7.<javax.swing.JFileChooser: void setCurrentDirectory(java.io.File)>($stack8);

        $stack9 = new javax.swing.filechooser.FileNameExtensionFilter;

        $stack10 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack11 = virtualinvoke $stack10.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("PNG_Image_Files");

        $stack12 = newarray (java.lang.String)[1];

        $stack12[0] = "png";

        specialinvoke $stack9.<javax.swing.filechooser.FileNameExtensionFilter: void <init>(java.lang.String,java.lang.String[])>($stack11, $stack12);

        virtualinvoke $stack7.<javax.swing.JFileChooser: void addChoosableFileFilter(javax.swing.filechooser.FileFilter)>($stack9);

        virtualinvoke $stack7.<javax.swing.JFileChooser: void setFileFilter(javax.swing.filechooser.FileFilter)>($stack9);

        option = virtualinvoke $stack7.<javax.swing.JFileChooser: int showSaveDialog(java.awt.Component)>(this);

        if option != 0 goto label4;

        $stack14 = virtualinvoke $stack7.<javax.swing.JFileChooser: java.io.File getSelectedFile()>();

        filename = virtualinvoke $stack14.<java.io.File: java.lang.String getPath()>();

        $stack16 = virtualinvoke this.<org.jfree.chart.ChartPanel: boolean isEnforceFileExtensions()>();

        if $stack16 == 0 goto label1;

        $stack26 = virtualinvoke filename.<java.lang.String: boolean endsWith(java.lang.String)>(".png");

        if $stack26 != 0 goto label1;

        $stack28 = new java.lang.StringBuilder;

        specialinvoke $stack28.<java.lang.StringBuilder: void <init>()>();

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(filename);

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        filename = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        if w > 0 goto label2;

        w = virtualinvoke this.<org.jfree.chart.ChartPanel: int getWidth()>();

     label2:
        if h > 0 goto label3;

        h = virtualinvoke this.<org.jfree.chart.ChartPanel: int getHeight()>();

     label3:
        $stack17 = new java.io.File;

        specialinvoke $stack17.<java.io.File: void <init>(java.lang.String)>(filename);

        $stack18 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        staticinvoke <org.jfree.chart.ChartUtils: void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int)>($stack17, $stack18, w, h);

     label4:
        return;
    }

    protected void saveAsSVG(java.io.File) throws java.io.IOException
    {
        java.io.File f, $stack21, $stack28, file, $stack31;
        org.jfree.chart.ChartPanel this;
        int $stack11, $stack12, response, option;
        java.io.BufferedWriter $stack14, filter#20;
        java.io.FileWriter $stack15;
        java.lang.StringBuilder $stack16, $stack17, $stack18, $stack41, $stack42, $stack43;
        java.lang.String $stack19, $stack24, fileExists, $stack36, filename, fileChooser#19;
        javax.swing.JFileChooser $stack20;
        javax.swing.filechooser.FileNameExtensionFilter $stack22;
        java.util.ResourceBundle $stack23, $stack33, $stack35;
        java.lang.String[] $stack25;
        boolean $stack30, $stack38, $stack32;
        java.io.IOException $stack45, $stack48;
        java.lang.RuntimeException $stack46, $stack49;
        java.lang.Throwable $stack47;

        this := @this: org.jfree.chart.ChartPanel;

        f := @parameter0: java.io.File;

        file = f;

        if f != null goto label02;

        $stack20 = new javax.swing.JFileChooser;

        specialinvoke $stack20.<javax.swing.JFileChooser: void <init>()>();

        $stack21 = this.<org.jfree.chart.ChartPanel: java.io.File defaultDirectoryForSaveAs>;

        virtualinvoke $stack20.<javax.swing.JFileChooser: void setCurrentDirectory(java.io.File)>($stack21);

        $stack22 = new javax.swing.filechooser.FileNameExtensionFilter;

        $stack23 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack24 = virtualinvoke $stack23.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("SVG_Files");

        $stack25 = newarray (java.lang.String)[1];

        $stack25[0] = "svg";

        specialinvoke $stack22.<javax.swing.filechooser.FileNameExtensionFilter: void <init>(java.lang.String,java.lang.String[])>($stack24, $stack25);

        virtualinvoke $stack20.<javax.swing.JFileChooser: void addChoosableFileFilter(javax.swing.filechooser.FileFilter)>($stack22);

        virtualinvoke $stack20.<javax.swing.JFileChooser: void setFileFilter(javax.swing.filechooser.FileFilter)>($stack22);

        option = virtualinvoke $stack20.<javax.swing.JFileChooser: int showSaveDialog(java.awt.Component)>(this);

        if option != 0 goto label02;

        $stack28 = virtualinvoke $stack20.<javax.swing.JFileChooser: java.io.File getSelectedFile()>();

        filename = virtualinvoke $stack28.<java.io.File: java.lang.String getPath()>();

        $stack30 = virtualinvoke this.<org.jfree.chart.ChartPanel: boolean isEnforceFileExtensions()>();

        if $stack30 == 0 goto label01;

        $stack38 = virtualinvoke filename.<java.lang.String: boolean endsWith(java.lang.String)>(".svg");

        if $stack38 != 0 goto label01;

        $stack41 = new java.lang.StringBuilder;

        specialinvoke $stack41.<java.lang.StringBuilder: void <init>()>();

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(filename);

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".svg");

        filename = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        $stack31 = new java.io.File;

        specialinvoke $stack31.<java.io.File: void <init>(java.lang.String)>(filename);

        file = $stack31;

        $stack32 = virtualinvoke $stack31.<java.io.File: boolean exists()>();

        if $stack32 == 0 goto label02;

        $stack33 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        fileExists = virtualinvoke $stack33.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("FILE_EXISTS_CONFIRM_OVERWRITE");

        $stack35 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack36 = virtualinvoke $stack35.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Save_as_SVG");

        response = staticinvoke <javax.swing.JOptionPane: int showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>(this, fileExists, $stack36, 2);

        if response != 2 goto label02;

        file = null;

     label02:
        if file == null goto label12;

        $stack11 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getWidth()>();

        $stack12 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getHeight()>();

        fileChooser#19 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.lang.String generateSVG(int,int)>($stack11, $stack12);

        filter#20 = null;

     label03:
        $stack14 = new java.io.BufferedWriter;

        $stack15 = new java.io.FileWriter;

        specialinvoke $stack15.<java.io.FileWriter: void <init>(java.io.File)>(file);

        specialinvoke $stack14.<java.io.BufferedWriter: void <init>(java.io.Writer)>($stack15);

        filter#20 = $stack14;

        virtualinvoke $stack14.<java.io.BufferedWriter: void write(java.lang.String)>("<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n");

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fileChooser#19);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack14.<java.io.BufferedWriter: void write(java.lang.String)>($stack19);

        virtualinvoke $stack14.<java.io.BufferedWriter: void flush()>();

     label04:
        if $stack14 == null goto label05;

        virtualinvoke $stack14.<java.io.BufferedWriter: void close()>();

     label05:
        goto label12;

     label06:
        $stack48 := @caughtexception;

        $stack49 = new java.lang.RuntimeException;

        specialinvoke $stack49.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack48);

        throw $stack49;

     label07:
        $stack47 := @caughtexception;

     label08:
        if filter#20 == null goto label09;

        virtualinvoke filter#20.<java.io.BufferedWriter: void close()>();

     label09:
        goto label11;

     label10:
        $stack45 := @caughtexception;

        $stack46 = new java.lang.RuntimeException;

        specialinvoke $stack46.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack45);

        throw $stack46;

     label11:
        throw $stack47;

     label12:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    protected java.lang.String generateSVG(int, int)
    {
        org.jfree.chart.ChartPanel this;
        int width, height;
        java.awt.Graphics2D g2;
        java.awt.RenderingHints$Key $stack8;
        java.lang.Boolean $stack9;
        java.awt.geom.Rectangle2D$Double $stack10;
        double $stack11, $stack12;
        org.jfree.chart.JFreeChart $stack13;
        java.lang.Class $stack14;
        java.lang.Class[] $stack15;
        java.lang.Object[] $stack17;
        java.lang.Object $stack18;
        java.lang.IllegalStateException $stack19;
        java.lang.reflect.InvocationTargetException $stack20;
        java.lang.IllegalArgumentException $stack22;
        java.lang.IllegalAccessException $stack23;
        java.lang.SecurityException $stack24;
        java.lang.NoSuchMethodException $stack25;
        java.lang.String svg;
        java.lang.reflect.Method m;

        this := @this: org.jfree.chart.ChartPanel;

        width := @parameter0: int;

        height := @parameter1: int;

        g2 = virtualinvoke this.<org.jfree.chart.ChartPanel: java.awt.Graphics2D createSVGGraphics2D(int,int)>(width, height);

        if g2 != null goto label1;

        $stack19 = new java.lang.IllegalStateException;

        specialinvoke $stack19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("JFreeSVG library is not present.");

        throw $stack19;

     label1:
        $stack8 = <org.jfree.chart.JFreeChart: java.awt.RenderingHints$Key KEY_SUPPRESS_SHADOW_GENERATION>;

        $stack9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack8, $stack9);

        svg = null;

        $stack10 = new java.awt.geom.Rectangle2D$Double;

        $stack12 = (double) width;

        $stack11 = (double) height;

        specialinvoke $stack10.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $stack12, $stack11);

        $stack13 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        virtualinvoke $stack13.<org.jfree.chart.JFreeChart: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, $stack10);

     label2:
        $stack14 = virtualinvoke g2.<java.lang.Object: java.lang.Class getClass()>();

        $stack15 = newarray (java.lang.Class)[0];

        m = virtualinvoke $stack14.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getSVGElement", $stack15);

        $stack17 = newarray (java.lang.Object)[0];

        $stack18 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(g2, $stack17);

        svg = (java.lang.String) $stack18;

     label3:
        goto label9;

     label4:
        $stack25 := @caughtexception;

        goto label9;

     label5:
        $stack24 := @caughtexception;

        goto label9;

     label6:
        $stack23 := @caughtexception;

        goto label9;

     label7:
        $stack22 := @caughtexception;

        goto label9;

     label8:
        $stack20 := @caughtexception;

     label9:
        return svg;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
        catch java.lang.SecurityException from label2 to label3 with label5;
        catch java.lang.IllegalAccessException from label2 to label3 with label6;
        catch java.lang.IllegalArgumentException from label2 to label3 with label7;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label8;
    }

    protected java.awt.Graphics2D createSVGGraphics2D(int, int)
    {
        java.lang.Class[] $stack6;
        java.lang.Class $stack7, $stack8, svgGraphics2d;
        java.lang.reflect.Constructor ctor;
        java.lang.Object[] $stack10;
        int w, h;
        java.lang.Integer $stack12, $stack14;
        java.lang.Object $stack15;
        java.awt.Graphics2D $stack16;
        java.lang.reflect.InvocationTargetException $stack17;
        java.lang.IllegalArgumentException $stack18;
        java.lang.IllegalAccessException $stack19;
        java.lang.InstantiationException $stack20;
        java.lang.SecurityException $stack21;
        java.lang.NoSuchMethodException $stack22;
        java.lang.ClassNotFoundException $stack23;
        org.jfree.chart.ChartPanel this;

        this := @this: org.jfree.chart.ChartPanel;

        w := @parameter0: int;

        h := @parameter1: int;

     label1:
        svgGraphics2d = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.jfree.graphics2d.svg.SVGGraphics2D");

        $stack6 = newarray (java.lang.Class)[2];

        $stack7 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack6[0] = $stack7;

        $stack8 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack6[1] = $stack8;

        ctor = virtualinvoke svgGraphics2d.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack6);

        $stack10 = newarray (java.lang.Object)[2];

        $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(w);

        $stack10[0] = $stack12;

        $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(h);

        $stack10[1] = $stack14;

        $stack15 = virtualinvoke ctor.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack10);

        $stack16 = (java.awt.Graphics2D) $stack15;

     label2:
        return $stack16;

     label3:
        $stack23 := @caughtexception;

        return null;

     label4:
        $stack22 := @caughtexception;

        return null;

     label5:
        $stack21 := @caughtexception;

        return null;

     label6:
        $stack20 := @caughtexception;

        return null;

     label7:
        $stack19 := @caughtexception;

        return null;

     label8:
        $stack18 := @caughtexception;

        return null;

     label9:
        $stack17 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label1 to label2 with label7;
        catch java.lang.IllegalArgumentException from label1 to label2 with label8;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label9;
    }

    protected void saveAsPDF(java.io.File)
    {
        java.io.File f, $stack12, $stack19, file, $stack22;
        org.jfree.chart.ChartPanel this;
        int $stack9, $stack10, option, response;
        javax.swing.JFileChooser $stack11;
        javax.swing.filechooser.FileNameExtensionFilter $stack13;
        java.util.ResourceBundle $stack14, $stack24, $stack26;
        java.lang.String $stack15, fileExists, $stack27, filename;
        java.lang.String[] $stack16;
        boolean $stack21, $stack29, $stack23;
        java.lang.StringBuilder $stack32, $stack33, $stack34;

        this := @this: org.jfree.chart.ChartPanel;

        f := @parameter0: java.io.File;

        file = f;

        if f != null goto label2;

        $stack11 = new javax.swing.JFileChooser;

        specialinvoke $stack11.<javax.swing.JFileChooser: void <init>()>();

        $stack12 = this.<org.jfree.chart.ChartPanel: java.io.File defaultDirectoryForSaveAs>;

        virtualinvoke $stack11.<javax.swing.JFileChooser: void setCurrentDirectory(java.io.File)>($stack12);

        $stack13 = new javax.swing.filechooser.FileNameExtensionFilter;

        $stack14 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack15 = virtualinvoke $stack14.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("PDF_Files");

        $stack16 = newarray (java.lang.String)[1];

        $stack16[0] = "pdf";

        specialinvoke $stack13.<javax.swing.filechooser.FileNameExtensionFilter: void <init>(java.lang.String,java.lang.String[])>($stack15, $stack16);

        virtualinvoke $stack11.<javax.swing.JFileChooser: void addChoosableFileFilter(javax.swing.filechooser.FileFilter)>($stack13);

        virtualinvoke $stack11.<javax.swing.JFileChooser: void setFileFilter(javax.swing.filechooser.FileFilter)>($stack13);

        option = virtualinvoke $stack11.<javax.swing.JFileChooser: int showSaveDialog(java.awt.Component)>(this);

        if option != 0 goto label2;

        $stack19 = virtualinvoke $stack11.<javax.swing.JFileChooser: java.io.File getSelectedFile()>();

        filename = virtualinvoke $stack19.<java.io.File: java.lang.String getPath()>();

        $stack21 = virtualinvoke this.<org.jfree.chart.ChartPanel: boolean isEnforceFileExtensions()>();

        if $stack21 == 0 goto label1;

        $stack29 = virtualinvoke filename.<java.lang.String: boolean endsWith(java.lang.String)>(".pdf");

        if $stack29 != 0 goto label1;

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(filename);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".pdf");

        filename = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $stack22 = new java.io.File;

        specialinvoke $stack22.<java.io.File: void <init>(java.lang.String)>(filename);

        file = $stack22;

        $stack23 = virtualinvoke $stack22.<java.io.File: boolean exists()>();

        if $stack23 == 0 goto label2;

        $stack24 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        fileExists = virtualinvoke $stack24.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("FILE_EXISTS_CONFIRM_OVERWRITE");

        $stack26 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack27 = virtualinvoke $stack26.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Save_as_PDF");

        response = staticinvoke <javax.swing.JOptionPane: int showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>(this, fileExists, $stack27, 2);

        if response != 2 goto label2;

        file = null;

     label2:
        if file == null goto label3;

        $stack9 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getWidth()>();

        $stack10 = virtualinvoke this.<org.jfree.chart.ChartPanel: int getHeight()>();

        specialinvoke this.<org.jfree.chart.ChartPanel: void writeAsPDF(java.io.File,int,int)>(file, $stack9, $stack10);

     label3:
        return;
    }

    private void writeAsPDF(java.io.File, int, int)
    {
        boolean $stack13;
        java.io.File file;
        java.lang.Object pdfDoc, page, $stack25;
        java.lang.Class[] $stack16, $stack22, $stack32;
        java.lang.reflect.Method m, m2, m3;
        java.awt.Rectangle $stack18;
        int w, h;
        java.lang.Object[] $stack19, $stack24, $stack34;
        java.lang.Class $stack21, pdfDocClass;
        java.awt.Graphics2D g2;
        java.awt.RenderingHints$Key $stack26;
        java.lang.Boolean $stack27;
        java.awt.geom.Rectangle2D$Double $stack28;
        double $stack29, $stack30;
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.JFreeChart $stack31;
        java.lang.IllegalStateException $stack36;
        java.lang.reflect.InvocationTargetException $stack37;
        java.lang.RuntimeException $stack38, $stack40, $stack42, $stack44, $stack46, $stack48, $stack50;
        java.lang.IllegalArgumentException $stack39;
        java.lang.SecurityException $stack41;
        java.lang.NoSuchMethodException $stack43;
        java.lang.IllegalAccessException $stack45;
        java.lang.InstantiationException $stack47;
        java.lang.ClassNotFoundException $stack49;

        this := @this: org.jfree.chart.ChartPanel;

        file := @parameter0: java.io.File;

        w := @parameter1: int;

        h := @parameter2: int;

        $stack13 = staticinvoke <org.jfree.chart.ChartUtils: boolean isOrsonPDFAvailable()>();

        if $stack13 != 0 goto label01;

        $stack36 = new java.lang.IllegalStateException;

        specialinvoke $stack36.<java.lang.IllegalStateException: void <init>(java.lang.String)>("OrsonPDF is not present on the classpath.");

        throw $stack36;

     label01:
        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(file, "file");

     label02:
        pdfDocClass = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.orsonpdf.PDFDocument");

        pdfDoc = virtualinvoke pdfDocClass.<java.lang.Class: java.lang.Object newInstance()>();

        $stack16 = newarray (java.lang.Class)[1];

        $stack16[0] = class "Ljava/awt/geom/Rectangle2D;";

        m = virtualinvoke pdfDocClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createPage", $stack16);

        $stack18 = new java.awt.Rectangle;

        specialinvoke $stack18.<java.awt.Rectangle: void <init>(int,int)>(w, h);

        $stack19 = newarray (java.lang.Object)[1];

        $stack19[0] = $stack18;

        page = virtualinvoke m.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(pdfDoc, $stack19);

        $stack21 = virtualinvoke page.<java.lang.Object: java.lang.Class getClass()>();

        $stack22 = newarray (java.lang.Class)[0];

        m2 = virtualinvoke $stack21.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getGraphics2D", $stack22);

        $stack24 = newarray (java.lang.Object)[0];

        $stack25 = virtualinvoke m2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(page, $stack24);

        g2 = (java.awt.Graphics2D) $stack25;

        $stack26 = <org.jfree.chart.JFreeChart: java.awt.RenderingHints$Key KEY_SUPPRESS_SHADOW_GENERATION>;

        $stack27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack26, $stack27);

        $stack28 = new java.awt.geom.Rectangle2D$Double;

        $stack30 = (double) w;

        $stack29 = (double) h;

        specialinvoke $stack28.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $stack30, $stack29);

        $stack31 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        virtualinvoke $stack31.<org.jfree.chart.JFreeChart: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, $stack28);

        $stack32 = newarray (java.lang.Class)[1];

        $stack32[0] = class "Ljava/io/File;";

        m3 = virtualinvoke pdfDocClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("writeToFile", $stack32);

        $stack34 = newarray (java.lang.Object)[1];

        $stack34[0] = file;

        virtualinvoke m3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(pdfDoc, $stack34);

     label03:
        goto label11;

     label04:
        $stack49 := @caughtexception;

        $stack50 = new java.lang.RuntimeException;

        specialinvoke $stack50.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack49);

        throw $stack50;

     label05:
        $stack47 := @caughtexception;

        $stack48 = new java.lang.RuntimeException;

        specialinvoke $stack48.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack47);

        throw $stack48;

     label06:
        $stack45 := @caughtexception;

        $stack46 = new java.lang.RuntimeException;

        specialinvoke $stack46.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack45);

        throw $stack46;

     label07:
        $stack43 := @caughtexception;

        $stack44 = new java.lang.RuntimeException;

        specialinvoke $stack44.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack43);

        throw $stack44;

     label08:
        $stack41 := @caughtexception;

        $stack42 = new java.lang.RuntimeException;

        specialinvoke $stack42.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack41);

        throw $stack42;

     label09:
        $stack39 := @caughtexception;

        $stack40 = new java.lang.RuntimeException;

        specialinvoke $stack40.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack39);

        throw $stack40;

     label10:
        $stack37 := @caughtexception;

        $stack38 = new java.lang.RuntimeException;

        specialinvoke $stack38.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack37);

        throw $stack38;

     label11:
        return;

        catch java.lang.ClassNotFoundException from label02 to label03 with label04;
        catch java.lang.InstantiationException from label02 to label03 with label05;
        catch java.lang.IllegalAccessException from label02 to label03 with label06;
        catch java.lang.NoSuchMethodException from label02 to label03 with label07;
        catch java.lang.SecurityException from label02 to label03 with label08;
        catch java.lang.IllegalArgumentException from label02 to label03 with label09;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label10;
    }

    public void createChartPrintJob()
    {
        java.awt.print.PrinterJob job;
        java.awt.print.PageFormat pf, pf2;
        org.jfree.chart.ChartPanel this;
        boolean $stack8;
        java.awt.print.PrinterException $stack9;

        this := @this: org.jfree.chart.ChartPanel;

        job = staticinvoke <java.awt.print.PrinterJob: java.awt.print.PrinterJob getPrinterJob()>();

        pf = virtualinvoke job.<java.awt.print.PrinterJob: java.awt.print.PageFormat defaultPage()>();

        pf2 = virtualinvoke job.<java.awt.print.PrinterJob: java.awt.print.PageFormat pageDialog(java.awt.print.PageFormat)>(pf);

        if pf2 == pf goto label4;

        virtualinvoke job.<java.awt.print.PrinterJob: void setPrintable(java.awt.print.Printable,java.awt.print.PageFormat)>(this, pf2);

        $stack8 = virtualinvoke job.<java.awt.print.PrinterJob: boolean printDialog()>();

        if $stack8 == 0 goto label4;

     label1:
        virtualinvoke job.<java.awt.print.PrinterJob: void print()>();

     label2:
        goto label4;

     label3:
        $stack9 := @caughtexception;

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(this, $stack9);

     label4:
        return;

        catch java.awt.print.PrinterException from label1 to label2 with label3;
    }

    public int print(java.awt.Graphics, java.awt.print.PageFormat, int)
    {
        int pageIndex;
        java.awt.Graphics g;
        java.awt.Graphics2D g2;
        java.awt.print.PageFormat pf;
        double x, y, w, h;
        org.jfree.chart.ChartPanel this;
        java.awt.geom.Rectangle2D$Double $stack17;
        org.jfree.chart.JFreeChart $stack18;
        java.awt.geom.Point2D $stack19;

        this := @this: org.jfree.chart.ChartPanel;

        g := @parameter0: java.awt.Graphics;

        pf := @parameter1: java.awt.print.PageFormat;

        pageIndex := @parameter2: int;

        if pageIndex == 0 goto label1;

        return 1;

     label1:
        g2 = (java.awt.Graphics2D) g;

        x = virtualinvoke pf.<java.awt.print.PageFormat: double getImageableX()>();

        y = virtualinvoke pf.<java.awt.print.PageFormat: double getImageableY()>();

        w = virtualinvoke pf.<java.awt.print.PageFormat: double getImageableWidth()>();

        h = virtualinvoke pf.<java.awt.print.PageFormat: double getImageableHeight()>();

        $stack18 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack17 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack17.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(x, y, w, h);

        $stack19 = this.<org.jfree.chart.ChartPanel: java.awt.geom.Point2D anchor>;

        virtualinvoke $stack18.<org.jfree.chart.JFreeChart: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)>(g2, $stack17, $stack19, null);

        return 0;
    }

    public void addChartMouseListener(org.jfree.chart.ChartMouseListener)
    {
        org.jfree.chart.ChartMouseListener listener;
        org.jfree.chart.ChartPanel this;
        javax.swing.event.EventListenerList $stack2;

        this := @this: org.jfree.chart.ChartPanel;

        listener := @parameter0: org.jfree.chart.ChartMouseListener;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(listener, "listener");

        $stack2 = this.<org.jfree.chart.ChartPanel: javax.swing.event.EventListenerList chartMouseListeners>;

        virtualinvoke $stack2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "Lorg/jfree/chart/ChartMouseListener;", listener);

        return;
    }

    public void removeChartMouseListener(org.jfree.chart.ChartMouseListener)
    {
        org.jfree.chart.ChartPanel this;
        org.jfree.chart.ChartMouseListener listener;
        javax.swing.event.EventListenerList $stack2;

        this := @this: org.jfree.chart.ChartPanel;

        listener := @parameter0: org.jfree.chart.ChartMouseListener;

        $stack2 = this.<org.jfree.chart.ChartPanel: javax.swing.event.EventListenerList chartMouseListeners>;

        virtualinvoke $stack2.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>(class "Lorg/jfree/chart/ChartMouseListener;", listener);

        return;
    }

    public java.util.EventListener[] getListeners(java.lang.Class)
    {
        java.lang.Class listenerType;
        org.jfree.chart.ChartPanel this;
        java.util.EventListener[] $stack2, $stack4;
        javax.swing.event.EventListenerList $stack3;

        this := @this: org.jfree.chart.ChartPanel;

        listenerType := @parameter0: java.lang.Class;

        if listenerType != class "Lorg/jfree/chart/ChartMouseListener;" goto label1;

        $stack3 = this.<org.jfree.chart.ChartPanel: javax.swing.event.EventListenerList chartMouseListeners>;

        $stack4 = virtualinvoke $stack3.<javax.swing.event.EventListenerList: java.util.EventListener[] getListeners(java.lang.Class)>(listenerType);

        return $stack4;

     label1:
        $stack2 = specialinvoke this.<javax.swing.JPanel: java.util.EventListener[] getListeners(java.lang.Class)>(listenerType);

        return $stack2;
    }

    protected javax.swing.JPopupMenu createPopupMenu(boolean, boolean, boolean, boolean)
    {
        org.jfree.chart.ChartPanel this;
        boolean properties, save, print, zoom;
        javax.swing.JPopupMenu $stack5;

        this := @this: org.jfree.chart.ChartPanel;

        properties := @parameter0: boolean;

        save := @parameter1: boolean;

        print := @parameter2: boolean;

        zoom := @parameter3: boolean;

        $stack5 = virtualinvoke this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu createPopupMenu(boolean,boolean,boolean,boolean,boolean)>(properties, 0, save, print, zoom);

        return $stack5;
    }

    protected javax.swing.JPopupMenu createPopupMenu(boolean, boolean, boolean, boolean, boolean)
    {
        javax.swing.JPopupMenu $stack12;
        java.lang.StringBuilder $stack13, $stack16, $stack17, $stack202, $stack203, $stack205, $stack206, $stack208, $stack209;
        java.util.ResourceBundle $stack14, $stack20, $stack23, $stack30, $stack37, $stack45, $stack48, $stack55, $stack62, $stack70, $stack73, $stack80, $stack87, $stack181, $stack194, $stack197, $stack218, $stack225, $stack249, $stack263;
        java.lang.String $stack15, $stack18, $stack21, $stack24, $stack31, $stack38, $stack46, $stack49, $stack56, $stack63, $stack71, $stack74, $stack81, $stack88, $stack182, $stack195, $stack198, $stack219, $stack226, $stack250, $stack264, pngName;
        boolean properties, copy, save, print, zoom, $stack213, $stack214, separator, $stack253;
        javax.swing.JMenu $stack19, $stack44, $stack69, $stack193;
        org.jfree.chart.ChartPanel this;
        javax.swing.JMenuItem $stack22, $stack25, $stack26, $stack27, $stack29, $stack32, $stack33, $stack34, $stack36, $stack39, $stack40, $stack41, $stack47, $stack50, $stack51, $stack52, $stack54, $stack57, $stack58, $stack59, $stack61, $stack64, $stack65, $stack66, $stack72, $stack75, $stack76, $stack77, $stack79, $stack82, $stack83, $stack84, $stack86, $stack89, $stack90, $stack91, $stack180, $stack196, $stack211, $stack217, $stack224, $stack248, $stack262;
        java.awt.Toolkit $stack200;
        int $stack204, $stack207;
        java.awt.Dimension pngItem;

        this := @this: org.jfree.chart.ChartPanel;

        properties := @parameter0: boolean;

        copy := @parameter1: boolean;

        save := @parameter2: boolean;

        print := @parameter3: boolean;

        zoom := @parameter4: boolean;

        $stack12 = new javax.swing.JPopupMenu;

        $stack13 = new java.lang.StringBuilder;

        specialinvoke $stack13.<java.lang.StringBuilder: void <init>()>();

        $stack14 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack15 = virtualinvoke $stack14.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Chart");

        $stack16 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack12.<javax.swing.JPopupMenu: void <init>(java.lang.String)>($stack18);

        separator = 0;

        if properties == 0 goto label01;

        $stack262 = new javax.swing.JMenuItem;

        $stack263 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack264 = virtualinvoke $stack263.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Properties...");

        specialinvoke $stack262.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack264);

        virtualinvoke $stack262.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("PROPERTIES");

        virtualinvoke $stack262.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        virtualinvoke $stack12.<javax.swing.JPopupMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack262);

        separator = 1;

     label01:
        if copy == 0 goto label05;

        if separator == 0 goto label02;

        virtualinvoke $stack12.<javax.swing.JPopupMenu: void addSeparator()>();

     label02:
        $stack248 = new javax.swing.JMenuItem;

        $stack249 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack250 = virtualinvoke $stack249.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Copy");

        specialinvoke $stack248.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack250);

        virtualinvoke $stack248.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("COPY");

        virtualinvoke $stack248.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        virtualinvoke $stack12.<javax.swing.JPopupMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack248);

        if save != 0 goto label03;

        $stack253 = 1;

        goto label04;

     label03:
        $stack253 = 0;

     label04:
        separator = $stack253;

     label05:
        if save == 0 goto label09;

        if separator == 0 goto label06;

        virtualinvoke $stack12.<javax.swing.JPopupMenu: void addSeparator()>();

     label06:
        $stack193 = new javax.swing.JMenu;

        $stack194 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack195 = virtualinvoke $stack194.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Save_as");

        specialinvoke $stack193.<javax.swing.JMenu: void <init>(java.lang.String)>($stack195);

        $stack196 = new javax.swing.JMenuItem;

        $stack197 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack198 = virtualinvoke $stack197.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("PNG...");

        specialinvoke $stack196.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack198);

        virtualinvoke $stack196.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("SAVE_AS_PNG");

        virtualinvoke $stack196.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        virtualinvoke $stack193.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack196);

        $stack200 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        pngItem = virtualinvoke $stack200.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>();

        $stack202 = new java.lang.StringBuilder;

        specialinvoke $stack202.<java.lang.StringBuilder: void <init>()>();

        $stack203 = virtualinvoke $stack202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PNG (");

        $stack204 = pngItem.<java.awt.Dimension: int width>;

        $stack205 = virtualinvoke $stack203.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack204);

        $stack206 = virtualinvoke $stack205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $stack207 = pngItem.<java.awt.Dimension: int height>;

        $stack208 = virtualinvoke $stack206.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack207);

        $stack209 = virtualinvoke $stack208.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ...");

        pngName = virtualinvoke $stack209.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack211 = new javax.swing.JMenuItem;

        specialinvoke $stack211.<javax.swing.JMenuItem: void <init>(java.lang.String)>(pngName);

        virtualinvoke $stack211.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("SAVE_AS_PNG_SIZE");

        virtualinvoke $stack211.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        virtualinvoke $stack193.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack211);

        $stack213 = staticinvoke <org.jfree.chart.ChartUtils: boolean isJFreeSVGAvailable()>();

        if $stack213 == 0 goto label07;

        $stack224 = new javax.swing.JMenuItem;

        $stack225 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack226 = virtualinvoke $stack225.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("SVG...");

        specialinvoke $stack224.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack226);

        virtualinvoke $stack224.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("SAVE_AS_SVG");

        virtualinvoke $stack224.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        virtualinvoke $stack193.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack224);

     label07:
        $stack214 = staticinvoke <org.jfree.chart.ChartUtils: boolean isOrsonPDFAvailable()>();

        if $stack214 == 0 goto label08;

        $stack217 = new javax.swing.JMenuItem;

        $stack218 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack219 = virtualinvoke $stack218.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("PDF...");

        specialinvoke $stack217.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack219);

        virtualinvoke $stack217.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("SAVE_AS_PDF");

        virtualinvoke $stack217.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        virtualinvoke $stack193.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack217);

     label08:
        virtualinvoke $stack12.<javax.swing.JPopupMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack193);

        separator = 1;

     label09:
        if print == 0 goto label11;

        if separator == 0 goto label10;

        virtualinvoke $stack12.<javax.swing.JPopupMenu: void addSeparator()>();

     label10:
        $stack180 = new javax.swing.JMenuItem;

        $stack181 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack182 = virtualinvoke $stack181.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Print...");

        specialinvoke $stack180.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack182);

        virtualinvoke $stack180.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("PRINT");

        virtualinvoke $stack180.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        virtualinvoke $stack12.<javax.swing.JPopupMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack180);

        separator = 1;

     label11:
        if zoom == 0 goto label13;

        if separator == 0 goto label12;

        virtualinvoke $stack12.<javax.swing.JPopupMenu: void addSeparator()>();

     label12:
        $stack19 = new javax.swing.JMenu;

        $stack20 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack21 = virtualinvoke $stack20.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Zoom_In");

        specialinvoke $stack19.<javax.swing.JMenu: void <init>(java.lang.String)>($stack21);

        $stack22 = new javax.swing.JMenuItem;

        $stack23 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack24 = virtualinvoke $stack23.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("All_Axes");

        specialinvoke $stack22.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack24);

        this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInBothMenuItem> = $stack22;

        $stack25 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInBothMenuItem>;

        virtualinvoke $stack25.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("ZOOM_IN_BOTH");

        $stack26 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInBothMenuItem>;

        virtualinvoke $stack26.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack27 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInBothMenuItem>;

        virtualinvoke $stack19.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack27);

        virtualinvoke $stack19.<javax.swing.JMenu: void addSeparator()>();

        $stack29 = new javax.swing.JMenuItem;

        $stack30 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack31 = virtualinvoke $stack30.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Domain_Axis");

        specialinvoke $stack29.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack31);

        this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInDomainMenuItem> = $stack29;

        $stack32 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInDomainMenuItem>;

        virtualinvoke $stack32.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("ZOOM_IN_DOMAIN");

        $stack33 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInDomainMenuItem>;

        virtualinvoke $stack33.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack34 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInDomainMenuItem>;

        virtualinvoke $stack19.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack34);

        $stack36 = new javax.swing.JMenuItem;

        $stack37 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack38 = virtualinvoke $stack37.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Range_Axis");

        specialinvoke $stack36.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack38);

        this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInRangeMenuItem> = $stack36;

        $stack39 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInRangeMenuItem>;

        virtualinvoke $stack39.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("ZOOM_IN_RANGE");

        $stack40 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInRangeMenuItem>;

        virtualinvoke $stack40.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack41 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInRangeMenuItem>;

        virtualinvoke $stack19.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack41);

        virtualinvoke $stack12.<javax.swing.JPopupMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack19);

        $stack44 = new javax.swing.JMenu;

        $stack45 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack46 = virtualinvoke $stack45.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Zoom_Out");

        specialinvoke $stack44.<javax.swing.JMenu: void <init>(java.lang.String)>($stack46);

        $stack47 = new javax.swing.JMenuItem;

        $stack48 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack49 = virtualinvoke $stack48.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("All_Axes");

        specialinvoke $stack47.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack49);

        this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutBothMenuItem> = $stack47;

        $stack50 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutBothMenuItem>;

        virtualinvoke $stack50.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("ZOOM_OUT_BOTH");

        $stack51 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutBothMenuItem>;

        virtualinvoke $stack51.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack52 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutBothMenuItem>;

        virtualinvoke $stack44.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack52);

        virtualinvoke $stack44.<javax.swing.JMenu: void addSeparator()>();

        $stack54 = new javax.swing.JMenuItem;

        $stack55 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack56 = virtualinvoke $stack55.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Domain_Axis");

        specialinvoke $stack54.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack56);

        this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutDomainMenuItem> = $stack54;

        $stack57 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutDomainMenuItem>;

        virtualinvoke $stack57.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("ZOOM_DOMAIN_BOTH");

        $stack58 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutDomainMenuItem>;

        virtualinvoke $stack58.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack59 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutDomainMenuItem>;

        virtualinvoke $stack44.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack59);

        $stack61 = new javax.swing.JMenuItem;

        $stack62 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack63 = virtualinvoke $stack62.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Range_Axis");

        specialinvoke $stack61.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack63);

        this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutRangeMenuItem> = $stack61;

        $stack64 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutRangeMenuItem>;

        virtualinvoke $stack64.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("ZOOM_RANGE_BOTH");

        $stack65 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutRangeMenuItem>;

        virtualinvoke $stack65.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack66 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutRangeMenuItem>;

        virtualinvoke $stack44.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack66);

        virtualinvoke $stack12.<javax.swing.JPopupMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack44);

        $stack69 = new javax.swing.JMenu;

        $stack70 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack71 = virtualinvoke $stack70.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Auto_Range");

        specialinvoke $stack69.<javax.swing.JMenu: void <init>(java.lang.String)>($stack71);

        $stack72 = new javax.swing.JMenuItem;

        $stack73 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack74 = virtualinvoke $stack73.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("All_Axes");

        specialinvoke $stack72.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack74);

        this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetBothMenuItem> = $stack72;

        $stack75 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetBothMenuItem>;

        virtualinvoke $stack75.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("ZOOM_RESET_BOTH");

        $stack76 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetBothMenuItem>;

        virtualinvoke $stack76.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack77 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetBothMenuItem>;

        virtualinvoke $stack69.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack77);

        virtualinvoke $stack69.<javax.swing.JMenu: void addSeparator()>();

        $stack79 = new javax.swing.JMenuItem;

        $stack80 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack81 = virtualinvoke $stack80.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Domain_Axis");

        specialinvoke $stack79.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack81);

        this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetDomainMenuItem> = $stack79;

        $stack82 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetDomainMenuItem>;

        virtualinvoke $stack82.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("ZOOM_RESET_DOMAIN");

        $stack83 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetDomainMenuItem>;

        virtualinvoke $stack83.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack84 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetDomainMenuItem>;

        virtualinvoke $stack69.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack84);

        $stack86 = new javax.swing.JMenuItem;

        $stack87 = <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources>;

        $stack88 = virtualinvoke $stack87.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Range_Axis");

        specialinvoke $stack86.<javax.swing.JMenuItem: void <init>(java.lang.String)>($stack88);

        this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetRangeMenuItem> = $stack86;

        $stack89 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetRangeMenuItem>;

        virtualinvoke $stack89.<javax.swing.JMenuItem: void setActionCommand(java.lang.String)>("ZOOM_RESET_RANGE");

        $stack90 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetRangeMenuItem>;

        virtualinvoke $stack90.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack91 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetRangeMenuItem>;

        virtualinvoke $stack69.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack91);

        virtualinvoke $stack12.<javax.swing.JPopupMenu: void addSeparator()>();

        virtualinvoke $stack12.<javax.swing.JPopupMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($stack69);

     label13:
        return $stack12;
    }

    protected void displayPopupMenu(int, int)
    {
        org.jfree.chart.ChartPanel this;
        javax.swing.JPopupMenu $stack7, $stack19;
        org.jfree.chart.JFreeChart $stack8, $stack47;
        boolean $stack9, isDomainZoomable, isRangeZoomable, $stack31, $stack28, $stack25;
        javax.swing.JMenuItem $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack32, $stack34, $stack36, $stack38, $stack40, $stack42, $stack29, $stack17, $stack26, $stack18, $stack20;
        int x, y;
        org.jfree.chart.plot.Zoomable z;
        org.jfree.chart.plot.Plot $stack48;

        this := @this: org.jfree.chart.ChartPanel;

        x := @parameter0: int;

        y := @parameter1: int;

        $stack7 = this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup>;

        if $stack7 != null goto label01;

        return;

     label01:
        isDomainZoomable = 0;

        isRangeZoomable = 0;

        $stack8 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        if $stack8 == null goto label02;

        $stack47 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        $stack48 = virtualinvoke $stack47.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        goto label03;

     label02:
        $stack48 = null;

     label03:
        $stack9 = $stack48 instanceof org.jfree.chart.plot.Zoomable;

        if $stack9 == 0 goto label04;

        z = (org.jfree.chart.plot.Zoomable) $stack48;

        isDomainZoomable = interfaceinvoke z.<org.jfree.chart.plot.Zoomable: boolean isDomainZoomable()>();

        isRangeZoomable = interfaceinvoke z.<org.jfree.chart.plot.Zoomable: boolean isRangeZoomable()>();

     label04:
        $stack10 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInDomainMenuItem>;

        if $stack10 == null goto label05;

        $stack42 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInDomainMenuItem>;

        virtualinvoke $stack42.<javax.swing.JMenuItem: void setEnabled(boolean)>(isDomainZoomable);

     label05:
        $stack11 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutDomainMenuItem>;

        if $stack11 == null goto label06;

        $stack40 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutDomainMenuItem>;

        virtualinvoke $stack40.<javax.swing.JMenuItem: void setEnabled(boolean)>(isDomainZoomable);

     label06:
        $stack12 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetDomainMenuItem>;

        if $stack12 == null goto label07;

        $stack38 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetDomainMenuItem>;

        virtualinvoke $stack38.<javax.swing.JMenuItem: void setEnabled(boolean)>(isDomainZoomable);

     label07:
        $stack13 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInRangeMenuItem>;

        if $stack13 == null goto label08;

        $stack36 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInRangeMenuItem>;

        virtualinvoke $stack36.<javax.swing.JMenuItem: void setEnabled(boolean)>(isRangeZoomable);

     label08:
        $stack14 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutRangeMenuItem>;

        if $stack14 == null goto label09;

        $stack34 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutRangeMenuItem>;

        virtualinvoke $stack34.<javax.swing.JMenuItem: void setEnabled(boolean)>(isRangeZoomable);

     label09:
        $stack15 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetRangeMenuItem>;

        if $stack15 == null goto label10;

        $stack32 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetRangeMenuItem>;

        virtualinvoke $stack32.<javax.swing.JMenuItem: void setEnabled(boolean)>(isRangeZoomable);

     label10:
        $stack16 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInBothMenuItem>;

        if $stack16 == null goto label13;

        $stack29 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomInBothMenuItem>;

        if isDomainZoomable == 0 goto label11;

        if isRangeZoomable == 0 goto label11;

        $stack31 = 1;

        goto label12;

     label11:
        $stack31 = 0;

     label12:
        virtualinvoke $stack29.<javax.swing.JMenuItem: void setEnabled(boolean)>($stack31);

     label13:
        $stack17 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutBothMenuItem>;

        if $stack17 == null goto label16;

        $stack26 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomOutBothMenuItem>;

        if isDomainZoomable == 0 goto label14;

        if isRangeZoomable == 0 goto label14;

        $stack28 = 1;

        goto label15;

     label14:
        $stack28 = 0;

     label15:
        virtualinvoke $stack26.<javax.swing.JMenuItem: void setEnabled(boolean)>($stack28);

     label16:
        $stack18 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetBothMenuItem>;

        if $stack18 == null goto label19;

        $stack20 = this.<org.jfree.chart.ChartPanel: javax.swing.JMenuItem zoomResetBothMenuItem>;

        if isDomainZoomable == 0 goto label17;

        if isRangeZoomable == 0 goto label17;

        $stack25 = 1;

        goto label18;

     label17:
        $stack25 = 0;

     label18:
        virtualinvoke $stack20.<javax.swing.JMenuItem: void setEnabled(boolean)>($stack25);

     label19:
        $stack19 = this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup>;

        virtualinvoke $stack19.<javax.swing.JPopupMenu: void show(java.awt.Component,int,int)>(this, x, y);

        return;
    }

    public void updateUI()
    {
        org.jfree.chart.ChartPanel this;
        javax.swing.JPopupMenu $stack1, $stack2;

        this := @this: org.jfree.chart.ChartPanel;

        $stack1 = this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup>;

        if $stack1 == null goto label1;

        $stack2 = this.<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu popup>;

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>($stack2);

     label1:
        specialinvoke this.<javax.swing.JPanel: void updateUI()>();

        return;
    }

    protected void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.ChartPanel this;
        java.awt.Paint $stack2, $stack3;

        this := @this: org.jfree.chart.ChartPanel;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomFillPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomOutlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        return;
    }

    protected void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.ChartPanel this;
        java.awt.Paint $stack2, $stack3;
        javax.swing.event.EventListenerList $stack4;
        org.jfree.chart.JFreeChart $stack5, $stack6;

        this := @this: org.jfree.chart.ChartPanel;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomFillPaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.ChartPanel: java.awt.Paint zoomOutlinePaint> = $stack3;

        $stack4 = new javax.swing.event.EventListenerList;

        specialinvoke $stack4.<javax.swing.event.EventListenerList: void <init>()>();

        this.<org.jfree.chart.ChartPanel: javax.swing.event.EventListenerList chartMouseListeners> = $stack4;

        $stack5 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        if $stack5 == null goto label1;

        $stack6 = this.<org.jfree.chart.ChartPanel: org.jfree.chart.JFreeChart chart>;

        virtualinvoke $stack6.<org.jfree.chart.JFreeChart: void addChangeListener(org.jfree.chart.event.ChartChangeListener)>(this);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle $stack0;

        <org.jfree.chart.ChartPanel: java.lang.String ZOOM_RESET_RANGE_COMMAND> = "ZOOM_RESET_RANGE";

        <org.jfree.chart.ChartPanel: java.lang.String ZOOM_RESET_DOMAIN_COMMAND> = "ZOOM_RESET_DOMAIN";

        <org.jfree.chart.ChartPanel: java.lang.String ZOOM_RESET_BOTH_COMMAND> = "ZOOM_RESET_BOTH";

        <org.jfree.chart.ChartPanel: java.lang.String ZOOM_OUT_RANGE_COMMAND> = "ZOOM_RANGE_BOTH";

        <org.jfree.chart.ChartPanel: java.lang.String ZOOM_OUT_DOMAIN_COMMAND> = "ZOOM_DOMAIN_BOTH";

        <org.jfree.chart.ChartPanel: java.lang.String ZOOM_OUT_BOTH_COMMAND> = "ZOOM_OUT_BOTH";

        <org.jfree.chart.ChartPanel: java.lang.String ZOOM_IN_RANGE_COMMAND> = "ZOOM_IN_RANGE";

        <org.jfree.chart.ChartPanel: java.lang.String ZOOM_IN_DOMAIN_COMMAND> = "ZOOM_IN_DOMAIN";

        <org.jfree.chart.ChartPanel: java.lang.String ZOOM_IN_BOTH_COMMAND> = "ZOOM_IN_BOTH";

        <org.jfree.chart.ChartPanel: java.lang.String PRINT_COMMAND> = "PRINT";

        <org.jfree.chart.ChartPanel: java.lang.String SAVE_AS_PDF_COMMAND> = "SAVE_AS_PDF";

        <org.jfree.chart.ChartPanel: java.lang.String SAVE_AS_SVG_COMMAND> = "SAVE_AS_SVG";

        <org.jfree.chart.ChartPanel: java.lang.String SAVE_AS_PNG_SIZE_COMMAND> = "SAVE_AS_PNG_SIZE";

        <org.jfree.chart.ChartPanel: java.lang.String SAVE_AS_PNG_COMMAND> = "SAVE_AS_PNG";

        <org.jfree.chart.ChartPanel: java.lang.String SAVE_COMMAND> = "SAVE";

        <org.jfree.chart.ChartPanel: java.lang.String COPY_COMMAND> = "COPY";

        <org.jfree.chart.ChartPanel: java.lang.String PROPERTIES_COMMAND> = "PROPERTIES";

        <org.jfree.chart.ChartPanel: int DEFAULT_ZOOM_TRIGGER_DISTANCE> = 10;

        <org.jfree.chart.ChartPanel: int DEFAULT_MAXIMUM_DRAW_HEIGHT> = 768;

        <org.jfree.chart.ChartPanel: int DEFAULT_MAXIMUM_DRAW_WIDTH> = 1024;

        <org.jfree.chart.ChartPanel: int DEFAULT_MINIMUM_DRAW_HEIGHT> = 200;

        <org.jfree.chart.ChartPanel: int DEFAULT_MINIMUM_DRAW_WIDTH> = 300;

        <org.jfree.chart.ChartPanel: int DEFAULT_HEIGHT> = 768;

        <org.jfree.chart.ChartPanel: int DEFAULT_WIDTH> = 1024;

        <org.jfree.chart.ChartPanel: boolean DEFAULT_BUFFER_USED> = 1;

        <org.jfree.chart.ChartPanel: long serialVersionUID> = 6046366297214274674L;

        $stack0 = staticinvoke <org.jfree.chart.util.ResourceBundleWrapper: java.util.ResourceBundle getBundle(java.lang.String)>("org.jfree.chart.LocalizationBundle");

        <org.jfree.chart.ChartPanel: java.util.ResourceBundle localizationResources> = $stack0;

        return;
    }
}
