public class org.jfree.chart.ui.StrokeSample extends javax.swing.JComponent implements javax.swing.ListCellRenderer
{
    private java.awt.Stroke stroke;
    private java.awt.Dimension preferredSize;

    public void <init>(java.awt.Stroke)
    {
        org.jfree.chart.ui.StrokeSample this;
        java.awt.Stroke stroke;
        java.awt.Dimension $stack2, $stack3;

        this := @this: org.jfree.chart.ui.StrokeSample;

        stroke := @parameter0: java.awt.Stroke;

        specialinvoke this.<javax.swing.JComponent: void <init>()>();

        this.<org.jfree.chart.ui.StrokeSample: java.awt.Stroke stroke> = stroke;

        $stack2 = new java.awt.Dimension;

        specialinvoke $stack2.<java.awt.Dimension: void <init>(int,int)>(80, 18);

        this.<org.jfree.chart.ui.StrokeSample: java.awt.Dimension preferredSize> = $stack2;

        $stack3 = this.<org.jfree.chart.ui.StrokeSample: java.awt.Dimension preferredSize>;

        virtualinvoke this.<org.jfree.chart.ui.StrokeSample: void setPreferredSize(java.awt.Dimension)>($stack3);

        return;
    }

    public java.awt.Stroke getStroke()
    {
        org.jfree.chart.ui.StrokeSample this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.ui.StrokeSample;

        $stack1 = this.<org.jfree.chart.ui.StrokeSample: java.awt.Stroke stroke>;

        return $stack1;
    }

    public void setStroke(java.awt.Stroke)
    {
        org.jfree.chart.ui.StrokeSample this;
        java.awt.Stroke stroke;

        this := @this: org.jfree.chart.ui.StrokeSample;

        stroke := @parameter0: java.awt.Stroke;

        this.<org.jfree.chart.ui.StrokeSample: java.awt.Stroke stroke> = stroke;

        virtualinvoke this.<org.jfree.chart.ui.StrokeSample: void repaint()>();

        return;
    }

    public java.awt.Dimension getPreferredSize()
    {
        org.jfree.chart.ui.StrokeSample this;
        java.awt.Dimension $stack1;

        this := @this: org.jfree.chart.ui.StrokeSample;

        $stack1 = this.<org.jfree.chart.ui.StrokeSample: java.awt.Dimension preferredSize>;

        return $stack1;
    }

    public void paintComponent(java.awt.Graphics)
    {
        java.awt.Graphics g;
        java.awt.Graphics2D g2;
        java.lang.Object $stack18;
        java.awt.RenderingHints$Key $stack19;
        org.jfree.chart.ui.StrokeSample this;
        java.awt.Dimension size;
        java.awt.Insets insets;
        int $stack22, $stack23, $stack25, $stack27, $stack31, $stack33;
        double xx, yy, $stack24, $stack26, $stack28, $stack29, ww, $stack30, $stack32, $stack34, $stack35, hh, $stack37, $stack38, $stack39, $stack41, $stack42, $stack43, $stack44, $stack46, $stack47, $stack48, $stack49, $stack51, $stack52, $stack53, $stack54;
        java.awt.geom.Point2D$Double $stack36, $stack40;
        java.awt.geom.Ellipse2D$Double $stack45, $stack50;
        java.awt.geom.Line2D$Double $stack55;
        java.awt.Stroke $stack56, $stack57;

        this := @this: org.jfree.chart.ui.StrokeSample;

        g := @parameter0: java.awt.Graphics;

        g2 = (java.awt.Graphics2D) g;

        $stack19 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $stack18 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack19, $stack18);

        size = virtualinvoke this.<org.jfree.chart.ui.StrokeSample: java.awt.Dimension getSize()>();

        insets = virtualinvoke this.<org.jfree.chart.ui.StrokeSample: java.awt.Insets getInsets()>();

        $stack22 = insets.<java.awt.Insets: int left>;

        xx = (double) $stack22;

        $stack23 = insets.<java.awt.Insets: int top>;

        yy = (double) $stack23;

        $stack24 = virtualinvoke size.<java.awt.Dimension: double getWidth()>();

        $stack25 = insets.<java.awt.Insets: int left>;

        $stack26 = (double) $stack25;

        $stack29 = $stack24 - $stack26;

        $stack27 = insets.<java.awt.Insets: int right>;

        $stack28 = (double) $stack27;

        ww = $stack29 - $stack28;

        $stack30 = virtualinvoke size.<java.awt.Dimension: double getHeight()>();

        $stack31 = insets.<java.awt.Insets: int top>;

        $stack32 = (double) $stack31;

        $stack35 = $stack30 - $stack32;

        $stack33 = insets.<java.awt.Insets: int bottom>;

        $stack34 = (double) $stack33;

        hh = $stack35 - $stack34;

        $stack36 = new java.awt.geom.Point2D$Double;

        $stack39 = xx + 6.0;

        $stack37 = hh / 2.0;

        $stack38 = yy + $stack37;

        specialinvoke $stack36.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack39, $stack38);

        $stack40 = new java.awt.geom.Point2D$Double;

        $stack41 = xx + ww;

        $stack44 = $stack41 - 6.0;

        $stack42 = hh / 2.0;

        $stack43 = yy + $stack42;

        specialinvoke $stack40.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack44, $stack43);

        $stack45 = new java.awt.geom.Ellipse2D$Double;

        $stack46 = virtualinvoke $stack36.<java.awt.geom.Point2D: double getX()>();

        $stack47 = $stack46 - 5.0;

        $stack48 = virtualinvoke $stack36.<java.awt.geom.Point2D: double getY()>();

        $stack49 = $stack48 - 5.0;

        specialinvoke $stack45.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack47, $stack49, 10.0, 10.0);

        $stack50 = new java.awt.geom.Ellipse2D$Double;

        $stack51 = virtualinvoke $stack40.<java.awt.geom.Point2D: double getX()>();

        $stack52 = $stack51 - 6.0;

        $stack53 = virtualinvoke $stack40.<java.awt.geom.Point2D: double getY()>();

        $stack54 = $stack53 - 5.0;

        specialinvoke $stack50.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack52, $stack54, 10.0, 10.0);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack45);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack45);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack50);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack50);

        $stack55 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack55.<java.awt.geom.Line2D$Double: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>($stack36, $stack40);

        $stack56 = this.<org.jfree.chart.ui.StrokeSample: java.awt.Stroke stroke>;

        if $stack56 == null goto label1;

        $stack57 = this.<org.jfree.chart.ui.StrokeSample: java.awt.Stroke stroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack57);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack55);

     label1:
        return;
    }

    public java.awt.Component getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean)
    {
        java.lang.Object value;
        boolean $stack6, isSelected, cellHasFocus;
        org.jfree.chart.ui.StrokeSample this;
        java.awt.Stroke $stack7;
        javax.swing.JList list;
        int index;

        this := @this: org.jfree.chart.ui.StrokeSample;

        list := @parameter0: javax.swing.JList;

        value := @parameter1: java.lang.Object;

        index := @parameter2: int;

        isSelected := @parameter3: boolean;

        cellHasFocus := @parameter4: boolean;

        $stack6 = value instanceof java.awt.Stroke;

        if $stack6 == 0 goto label1;

        $stack7 = (java.awt.Stroke) value;

        virtualinvoke this.<org.jfree.chart.ui.StrokeSample: void setStroke(java.awt.Stroke)>($stack7);

        goto label2;

     label1:
        virtualinvoke this.<org.jfree.chart.ui.StrokeSample: void setStroke(java.awt.Stroke)>(null);

     label2:
        return this;
    }
}
