public class org.jfree.data.general.WaferMapDataset extends org.jfree.data.general.AbstractDataset
{
    private org.jfree.data.DefaultKeyedValues2D data;
    private int maxChipX;
    private int maxChipY;
    private double chipSpace;
    private java.lang.Double maxValue;
    private java.lang.Double minValue;
    private static final double DEFAULT_CHIP_SPACE;

    public void <init>(int, int)
    {
        org.jfree.data.general.WaferMapDataset this;
        int maxChipX, maxChipY;

        this := @this: org.jfree.data.general.WaferMapDataset;

        maxChipX := @parameter0: int;

        maxChipY := @parameter1: int;

        specialinvoke this.<org.jfree.data.general.WaferMapDataset: void <init>(int,int,java.lang.Number)>(maxChipX, maxChipY, null);

        return;
    }

    public void <init>(int, int, java.lang.Number)
    {
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Double $stack4, $stack5;
        org.jfree.data.DefaultKeyedValues2D $stack6;
        int maxChipX, maxChipY;
        java.lang.Number chipSpace;
        double $stack7;

        this := @this: org.jfree.data.general.WaferMapDataset;

        maxChipX := @parameter0: int;

        maxChipY := @parameter1: int;

        chipSpace := @parameter2: java.lang.Number;

        specialinvoke this.<org.jfree.data.general.AbstractDataset: void <init>()>();

        $stack4 = new java.lang.Double;

        specialinvoke $stack4.<java.lang.Double: void <init>(double)>(#-Infinity);

        this.<org.jfree.data.general.WaferMapDataset: java.lang.Double maxValue> = $stack4;

        $stack5 = new java.lang.Double;

        specialinvoke $stack5.<java.lang.Double: void <init>(double)>(#Infinity);

        this.<org.jfree.data.general.WaferMapDataset: java.lang.Double minValue> = $stack5;

        $stack6 = new org.jfree.data.DefaultKeyedValues2D;

        specialinvoke $stack6.<org.jfree.data.DefaultKeyedValues2D: void <init>()>();

        this.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data> = $stack6;

        this.<org.jfree.data.general.WaferMapDataset: int maxChipX> = maxChipX;

        this.<org.jfree.data.general.WaferMapDataset: int maxChipY> = maxChipY;

        if chipSpace != null goto label1;

        this.<org.jfree.data.general.WaferMapDataset: double chipSpace> = 1.0;

        goto label2;

     label1:
        $stack7 = virtualinvoke chipSpace.<java.lang.Number: double doubleValue()>();

        this.<org.jfree.data.general.WaferMapDataset: double chipSpace> = $stack7;

     label2:
        return;
    }

    public void addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)
    {
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Number value;
        java.lang.Comparable chipx, chipy;

        this := @this: org.jfree.data.general.WaferMapDataset;

        value := @parameter0: java.lang.Number;

        chipx := @parameter1: java.lang.Comparable;

        chipy := @parameter2: java.lang.Comparable;

        virtualinvoke this.<org.jfree.data.general.WaferMapDataset: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(value, chipx, chipy);

        return;
    }

    public void addValue(int, int, int)
    {
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Double $stack4;
        int v, x, y;
        double $stack5;
        java.lang.Integer $stack6, $stack7;

        this := @this: org.jfree.data.general.WaferMapDataset;

        v := @parameter0: int;

        x := @parameter1: int;

        y := @parameter2: int;

        $stack4 = new java.lang.Double;

        $stack5 = (double) v;

        specialinvoke $stack4.<java.lang.Double: void <init>(double)>($stack5);

        $stack6 = new java.lang.Integer;

        specialinvoke $stack6.<java.lang.Integer: void <init>(int)>(x);

        $stack7 = new java.lang.Integer;

        specialinvoke $stack7.<java.lang.Integer: void <init>(int)>(y);

        virtualinvoke this.<org.jfree.data.general.WaferMapDataset: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>($stack4, $stack6, $stack7);

        return;
    }

    public void setValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)
    {
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Number value;
        java.lang.Comparable chipx, chipy;
        org.jfree.data.DefaultKeyedValues2D $stack4;
        boolean $stack5, $stack6;
        java.lang.Double $stack7, $stack8;

        this := @this: org.jfree.data.general.WaferMapDataset;

        value := @parameter0: java.lang.Number;

        chipx := @parameter1: java.lang.Comparable;

        chipy := @parameter2: java.lang.Comparable;

        $stack4 = this.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data>;

        virtualinvoke $stack4.<org.jfree.data.DefaultKeyedValues2D: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(value, chipx, chipy);

        $stack5 = virtualinvoke this.<org.jfree.data.general.WaferMapDataset: boolean isMaxValue(java.lang.Number)>(value);

        if $stack5 == 0 goto label1;

        $stack8 = (java.lang.Double) value;

        this.<org.jfree.data.general.WaferMapDataset: java.lang.Double maxValue> = $stack8;

     label1:
        $stack6 = virtualinvoke this.<org.jfree.data.general.WaferMapDataset: boolean isMinValue(java.lang.Number)>(value);

        if $stack6 == 0 goto label2;

        $stack7 = (java.lang.Double) value;

        this.<org.jfree.data.general.WaferMapDataset: java.lang.Double minValue> = $stack7;

     label2:
        return;
    }

    public int getUniqueValueCount()
    {
        org.jfree.data.general.WaferMapDataset this;
        java.util.Set $stack1;
        int $stack2;

        this := @this: org.jfree.data.general.WaferMapDataset;

        $stack1 = virtualinvoke this.<org.jfree.data.general.WaferMapDataset: java.util.Set getUniqueValues()>();

        $stack2 = interfaceinvoke $stack1.<java.util.Set: int size()>();

        return $stack2;
    }

    public java.util.Set getUniqueValues()
    {
        java.util.TreeSet $stack5;
        org.jfree.data.general.WaferMapDataset this;
        org.jfree.data.DefaultKeyedValues2D $stack6, $stack8, $stack12;
        int $stack7, $stack9, r, c;
        java.lang.Number value;

        this := @this: org.jfree.data.general.WaferMapDataset;

        $stack5 = new java.util.TreeSet;

        specialinvoke $stack5.<java.util.TreeSet: void <init>()>();

        r = 0;

     label1:
        $stack6 = this.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data>;

        $stack7 = virtualinvoke $stack6.<org.jfree.data.DefaultKeyedValues2D: int getRowCount()>();

        if r >= $stack7 goto label5;

        c = 0;

     label2:
        $stack8 = this.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data>;

        $stack9 = virtualinvoke $stack8.<org.jfree.data.DefaultKeyedValues2D: int getColumnCount()>();

        if c >= $stack9 goto label4;

        $stack12 = this.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data>;

        value = virtualinvoke $stack12.<org.jfree.data.DefaultKeyedValues2D: java.lang.Number getValue(int,int)>(r, c);

        if value == null goto label3;

        interfaceinvoke $stack5.<java.util.Set: boolean add(java.lang.Object)>(value);

     label3:
        c = c + 1;

        goto label2;

     label4:
        r = r + 1;

        goto label1;

     label5:
        return $stack5;
    }

    public java.lang.Number getChipValue(int, int)
    {
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Integer $stack3, $stack4;
        int chipx, chipy;
        java.lang.Number $stack5;

        this := @this: org.jfree.data.general.WaferMapDataset;

        chipx := @parameter0: int;

        chipy := @parameter1: int;

        $stack3 = new java.lang.Integer;

        specialinvoke $stack3.<java.lang.Integer: void <init>(int)>(chipx);

        $stack4 = new java.lang.Integer;

        specialinvoke $stack4.<java.lang.Integer: void <init>(int)>(chipy);

        $stack5 = virtualinvoke this.<org.jfree.data.general.WaferMapDataset: java.lang.Number getChipValue(java.lang.Comparable,java.lang.Comparable)>($stack3, $stack4);

        return $stack5;
    }

    public java.lang.Number getChipValue(java.lang.Comparable, java.lang.Comparable)
    {
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Comparable chipx, chipy;
        org.jfree.data.DefaultKeyedValues2D $stack5, $stack7, $stack9;
        int rowIndex, colIndex;
        java.lang.Number $stack10;

        this := @this: org.jfree.data.general.WaferMapDataset;

        chipx := @parameter0: java.lang.Comparable;

        chipy := @parameter1: java.lang.Comparable;

        $stack5 = this.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data>;

        rowIndex = virtualinvoke $stack5.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(chipx);

        if rowIndex >= 0 goto label1;

        return null;

     label1:
        $stack7 = this.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data>;

        colIndex = virtualinvoke $stack7.<org.jfree.data.DefaultKeyedValues2D: int getColumnIndex(java.lang.Comparable)>(chipy);

        if colIndex >= 0 goto label2;

        return null;

     label2:
        $stack9 = this.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data>;

        $stack10 = virtualinvoke $stack9.<org.jfree.data.DefaultKeyedValues2D: java.lang.Number getValue(int,int)>(rowIndex, colIndex);

        return $stack10;
    }

    public boolean isMaxValue(java.lang.Number)
    {
        java.lang.Number check;
        double $stack2, $stack4;
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Double $stack3;
        byte $stack5;

        this := @this: org.jfree.data.general.WaferMapDataset;

        check := @parameter0: java.lang.Number;

        $stack2 = virtualinvoke check.<java.lang.Number: double doubleValue()>();

        $stack3 = this.<org.jfree.data.general.WaferMapDataset: java.lang.Double maxValue>;

        $stack4 = virtualinvoke $stack3.<java.lang.Double: double doubleValue()>();

        $stack5 = $stack2 cmpl $stack4;

        if $stack5 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isMinValue(java.lang.Number)
    {
        java.lang.Number check;
        double $stack2, $stack4;
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Double $stack3;
        byte $stack5;

        this := @this: org.jfree.data.general.WaferMapDataset;

        check := @parameter0: java.lang.Number;

        $stack2 = virtualinvoke check.<java.lang.Number: double doubleValue()>();

        $stack3 = this.<org.jfree.data.general.WaferMapDataset: java.lang.Double minValue>;

        $stack4 = virtualinvoke $stack3.<java.lang.Double: double doubleValue()>();

        $stack5 = $stack2 cmpg $stack4;

        if $stack5 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Number getMaxValue()
    {
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Double $stack1;

        this := @this: org.jfree.data.general.WaferMapDataset;

        $stack1 = this.<org.jfree.data.general.WaferMapDataset: java.lang.Double maxValue>;

        return $stack1;
    }

    public java.lang.Number getMinValue()
    {
        org.jfree.data.general.WaferMapDataset this;
        java.lang.Double $stack1;

        this := @this: org.jfree.data.general.WaferMapDataset;

        $stack1 = this.<org.jfree.data.general.WaferMapDataset: java.lang.Double minValue>;

        return $stack1;
    }

    public int getMaxChipX()
    {
        org.jfree.data.general.WaferMapDataset this;
        int $stack1;

        this := @this: org.jfree.data.general.WaferMapDataset;

        $stack1 = this.<org.jfree.data.general.WaferMapDataset: int maxChipX>;

        return $stack1;
    }

    public void setMaxChipX(int)
    {
        org.jfree.data.general.WaferMapDataset this;
        int maxChipX;

        this := @this: org.jfree.data.general.WaferMapDataset;

        maxChipX := @parameter0: int;

        this.<org.jfree.data.general.WaferMapDataset: int maxChipX> = maxChipX;

        return;
    }

    public int getMaxChipY()
    {
        org.jfree.data.general.WaferMapDataset this;
        int $stack1;

        this := @this: org.jfree.data.general.WaferMapDataset;

        $stack1 = this.<org.jfree.data.general.WaferMapDataset: int maxChipY>;

        return $stack1;
    }

    public void setMaxChipY(int)
    {
        org.jfree.data.general.WaferMapDataset this;
        int maxChipY;

        this := @this: org.jfree.data.general.WaferMapDataset;

        maxChipY := @parameter0: int;

        this.<org.jfree.data.general.WaferMapDataset: int maxChipY> = maxChipY;

        return;
    }

    public double getChipSpace()
    {
        org.jfree.data.general.WaferMapDataset this;
        double $stack1;

        this := @this: org.jfree.data.general.WaferMapDataset;

        $stack1 = this.<org.jfree.data.general.WaferMapDataset: double chipSpace>;

        return $stack1;
    }

    public void setChipSpace(double)
    {
        org.jfree.data.general.WaferMapDataset this;
        double space;

        this := @this: org.jfree.data.general.WaferMapDataset;

        space := @parameter0: double;

        this.<org.jfree.data.general.WaferMapDataset: double chipSpace> = space;

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.data.general.WaferMapDataset: double DEFAULT_CHIP_SPACE> = 1.0;

        return;
    }
}
