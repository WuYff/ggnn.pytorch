public class org.jfree.data.xy.DefaultXYZDataset extends org.jfree.data.xy.AbstractXYZDataset implements org.jfree.data.xy.XYZDataset, org.jfree.chart.util.PublicCloneable
{
    private java.util.List seriesKeys;
    private java.util.List seriesList;

    public void <init>()
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        java.util.ArrayList $stack1, $stack2;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        specialinvoke this.<org.jfree.data.xy.AbstractXYZDataset: void <init>()>();

        $stack1 = new java.util.ArrayList;

        specialinvoke $stack1.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys> = $stack1;

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList> = $stack2;

        return;
    }

    public int getSeriesCount()
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        java.util.List $stack1;
        int $stack2;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        $stack1 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack2 = interfaceinvoke $stack1.<java.util.List: int size()>();

        return $stack2;
    }

    public java.lang.Comparable getSeriesKey(int)
    {
        int series, $stack5, $stack6;
        org.jfree.data.xy.DefaultXYZDataset this;
        java.util.List $stack2, $stack7;
        java.lang.Object $stack8;
        java.lang.Comparable $stack9;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack5 = interfaceinvoke $stack2.<java.util.List: int size()>();

        $stack6 = $stack5 - 1;

        staticinvoke <org.jfree.chart.util.Args: void requireInRange(int,java.lang.String,int,int)>(series, "series", 0, $stack6);

        $stack7 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys>;

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.lang.Object get(int)>(series);

        $stack9 = (java.lang.Comparable) $stack8;

        return $stack9;
    }

    public int indexOf(java.lang.Comparable)
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        java.lang.Comparable seriesKey;
        java.util.List $stack2;
        int $stack3;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        seriesKey := @parameter0: java.lang.Comparable;

        $stack2 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys>;

        $stack3 = interfaceinvoke $stack2.<java.util.List: int indexOf(java.lang.Object)>(seriesKey);

        return $stack3;
    }

    public org.jfree.data.DomainOrder getDomainOrder()
    {
        org.jfree.data.DomainOrder $stack1;
        org.jfree.data.xy.DefaultXYZDataset this;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        $stack1 = <org.jfree.data.DomainOrder: org.jfree.data.DomainOrder NONE>;

        return $stack1;
    }

    public int getItemCount(int)
    {
        int series, $stack6, $stack7, $stack12;
        org.jfree.data.xy.DefaultXYZDataset this;
        java.util.List $stack3, $stack8;
        java.lang.Object $stack9;
        double[][] $stack10, seriesArray;
        double[] $stack11;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        series := @parameter0: int;

        $stack3 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack6 = interfaceinvoke $stack3.<java.util.List: int size()>();

        $stack7 = $stack6 - 1;

        staticinvoke <org.jfree.chart.util.Args: void requireInRange(int,java.lang.String,int,int)>(series, "series", 0, $stack7);

        $stack8 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack9 = interfaceinvoke $stack8.<java.util.List: java.lang.Object get(int)>(series);

        $stack10 = (double[][]) $stack9;

        seriesArray = (double[][]) $stack10;

        $stack11 = seriesArray[0];

        $stack12 = lengthof $stack11;

        return $stack12;
    }

    public double getXValue(int, int)
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        int series, item;
        java.util.List $stack4;
        java.lang.Object $stack5;
        double[][] seriesData;
        double[] $stack6;
        double $stack7;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack4 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(series);

        seriesData = (double[][]) $stack5;

        $stack6 = seriesData[0];

        $stack7 = $stack6[item];

        return $stack7;
    }

    public java.lang.Number getX(int, int)
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        int series, item;
        double $stack3;
        java.lang.Double $stack4;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.data.xy.DefaultXYZDataset: double getXValue(int,int)>(series, item);

        $stack4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack3);

        return $stack4;
    }

    public double getYValue(int, int)
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        int series, item;
        java.util.List $stack4;
        java.lang.Object $stack5;
        double[][] $stack6, seriesData;
        double[] $stack7;
        double $stack8;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack4 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(series);

        $stack6 = (double[][]) $stack5;

        seriesData = (double[][]) $stack6;

        $stack7 = seriesData[1];

        $stack8 = $stack7[item];

        return $stack8;
    }

    public java.lang.Number getY(int, int)
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        int series, item;
        double $stack3;
        java.lang.Double $stack4;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.data.xy.DefaultXYZDataset: double getYValue(int,int)>(series, item);

        $stack4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack3);

        return $stack4;
    }

    public double getZValue(int, int)
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        int series, item;
        java.util.List $stack4;
        java.lang.Object $stack5;
        double[][] seriesData;
        double[] $stack6;
        double $stack7;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack4 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>(series);

        seriesData = (double[][]) $stack5;

        $stack6 = seriesData[2];

        $stack7 = $stack6[item];

        return $stack7;
    }

    public java.lang.Number getZ(int, int)
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        int series, item;
        double $stack3;
        java.lang.Double $stack4;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.data.xy.DefaultXYZDataset: double getZValue(int,int)>(series, item);

        $stack4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack3);

        return $stack4;
    }

    public void addSeries(java.lang.Comparable, double[][])
    {
        java.lang.Comparable seriesKey;
        double[][] data;
        int $stack4, $stack7, $stack8, $stack12, $stack13, seriesIndex;
        double[] $stack5, $stack6, $stack10, $stack11;
        java.lang.IllegalArgumentException $stack9, $stack27;
        org.jfree.data.xy.DefaultXYZDataset this;
        java.util.List $stack15, $stack17, $stack19, $stack21;
        org.jfree.data.general.DatasetChangeEvent $stack18;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        seriesKey := @parameter0: java.lang.Comparable;

        data := @parameter1: double[][];

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(seriesKey, "seriesKey");

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(data, "data");

        $stack4 = lengthof data;

        if $stack4 == 3 goto label1;

        $stack27 = new java.lang.IllegalArgumentException;

        specialinvoke $stack27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'data\' array must have length == 3.");

        throw $stack27;

     label1:
        $stack5 = data[0];

        $stack8 = lengthof $stack5;

        $stack6 = data[1];

        $stack7 = lengthof $stack6;

        if $stack8 != $stack7 goto label2;

        $stack10 = data[0];

        $stack13 = lengthof $stack10;

        $stack11 = data[2];

        $stack12 = lengthof $stack11;

        if $stack13 == $stack12 goto label3;

     label2:
        $stack9 = new java.lang.IllegalArgumentException;

        specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'data\' array must contain three arrays all having the same length.");

        throw $stack9;

     label3:
        seriesIndex = virtualinvoke this.<org.jfree.data.xy.DefaultXYZDataset: int indexOf(java.lang.Comparable)>(seriesKey);

        if seriesIndex != -1 goto label4;

        $stack19 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys>;

        interfaceinvoke $stack19.<java.util.List: boolean add(java.lang.Object)>(seriesKey);

        $stack21 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        interfaceinvoke $stack21.<java.util.List: boolean add(java.lang.Object)>(data);

        goto label5;

     label4:
        $stack15 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        interfaceinvoke $stack15.<java.util.List: java.lang.Object remove(int)>(seriesIndex);

        $stack17 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        interfaceinvoke $stack17.<java.util.List: void add(int,java.lang.Object)>(seriesIndex, data);

     label5:
        $stack18 = new org.jfree.data.general.DatasetChangeEvent;

        specialinvoke $stack18.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, this);

        virtualinvoke this.<org.jfree.data.xy.DefaultXYZDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($stack18);

        return;
    }

    public void removeSeries(java.lang.Comparable)
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        java.lang.Comparable seriesKey;
        int seriesIndex;
        java.util.List $stack4, $stack6;
        org.jfree.data.general.DatasetChangeEvent $stack8;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        seriesKey := @parameter0: java.lang.Comparable;

        seriesIndex = virtualinvoke this.<org.jfree.data.xy.DefaultXYZDataset: int indexOf(java.lang.Comparable)>(seriesKey);

        if seriesIndex < 0 goto label1;

        $stack4 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys>;

        interfaceinvoke $stack4.<java.util.List: java.lang.Object remove(int)>(seriesIndex);

        $stack6 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        interfaceinvoke $stack6.<java.util.List: java.lang.Object remove(int)>(seriesIndex);

        $stack8 = new org.jfree.data.general.DatasetChangeEvent;

        specialinvoke $stack8.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, this);

        virtualinvoke this.<org.jfree.data.xy.DefaultXYZDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($stack8);

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj, $stack19, $stack22;
        org.jfree.data.xy.DefaultXYZDataset this, that;
        boolean $stack12, $stack15, $stack24, $stack25, $stack26;
        java.util.List $stack13, $stack14, $stack16, $stack18, $stack21;
        int $stack17, i;
        double[][] $stack20, d1, $stack23, d2;
        double[] d1x, d2x, d1y, d2y, d1z, d2z;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack12 = obj instanceof org.jfree.data.xy.DefaultXYZDataset;

        if $stack12 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.data.xy.DefaultXYZDataset) obj;

        $stack14 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys>;

        $stack13 = that.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys>;

        $stack15 = interfaceinvoke $stack14.<java.util.List: boolean equals(java.lang.Object)>($stack13);

        if $stack15 != 0 goto label3;

        return 0;

     label3:
        i = 0;

     label4:
        $stack16 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack17 = interfaceinvoke $stack16.<java.util.List: int size()>();

        if i >= $stack17 goto label8;

        $stack18 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack19 = interfaceinvoke $stack18.<java.util.List: java.lang.Object get(int)>(i);

        $stack20 = (double[][]) $stack19;

        d1 = (double[][]) $stack20;

        $stack21 = that.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack22 = interfaceinvoke $stack21.<java.util.List: java.lang.Object get(int)>(i);

        $stack23 = (double[][]) $stack22;

        d2 = (double[][]) $stack23;

        d1x = d1[0];

        d2x = d2[0];

        $stack24 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>(d1x, d2x);

        if $stack24 != 0 goto label5;

        return 0;

     label5:
        d1y = d1[1];

        d2y = d2[1];

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>(d1y, d2y);

        if $stack25 != 0 goto label6;

        return 0;

     label6:
        d1z = d1[2];

        d2z = d2[2];

        $stack26 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>(d1z, d2z);

        if $stack26 != 0 goto label7;

        return 0;

     label7:
        i = i + 1;

        goto label4;

     label8:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.data.xy.DefaultXYZDataset this;
        java.util.List $stack2, $stack4;
        int $stack5, $stack6, result;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        $stack2 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys>;

        result = interfaceinvoke $stack2.<java.util.List: int hashCode()>();

        $stack5 = 29 * result;

        $stack4 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack6 = interfaceinvoke $stack4.<java.util.List: int hashCode()>();

        result = $stack5 + $stack6;

        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.data.xy.DefaultXYZDataset this, clone;
        java.lang.Object $stack10, $stack19;
        java.util.ArrayList $stack11, $stack13;
        java.util.List $stack12, $stack14, $stack16, $stack18, $stack28;
        int $stack15, $stack17, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, i;
        double[][] $stack20, data, $stack27;
        double[] x, y, z, xx, yy, zz;

        this := @this: org.jfree.data.xy.DefaultXYZDataset;

        $stack10 = specialinvoke this.<org.jfree.data.xy.AbstractXYZDataset: java.lang.Object clone()>();

        clone = (org.jfree.data.xy.DefaultXYZDataset) $stack10;

        $stack11 = new java.util.ArrayList;

        $stack12 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys>;

        specialinvoke $stack11.<java.util.ArrayList: void <init>(java.util.Collection)>($stack12);

        clone.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesKeys> = $stack11;

        $stack13 = new java.util.ArrayList;

        $stack14 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack15 = interfaceinvoke $stack14.<java.util.List: int size()>();

        specialinvoke $stack13.<java.util.ArrayList: void <init>(int)>($stack15);

        clone.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList> = $stack13;

        i = 0;

     label1:
        $stack16 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack17 = interfaceinvoke $stack16.<java.util.List: int size()>();

        if i >= $stack17 goto label2;

        $stack18 = this.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack19 = interfaceinvoke $stack18.<java.util.List: java.lang.Object get(int)>(i);

        $stack20 = (double[][]) $stack19;

        data = (double[][]) $stack20;

        x = data[0];

        y = data[1];

        z = data[2];

        $stack21 = lengthof x;

        xx = newarray (double)[$stack21];

        $stack22 = lengthof y;

        yy = newarray (double)[$stack22];

        $stack23 = lengthof z;

        zz = newarray (double)[$stack23];

        $stack24 = lengthof x;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(x, 0, xx, 0, $stack24);

        $stack25 = lengthof y;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(y, 0, yy, 0, $stack25);

        $stack26 = lengthof z;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(z, 0, zz, 0, $stack26);

        $stack28 = clone.<org.jfree.data.xy.DefaultXYZDataset: java.util.List seriesList>;

        $stack27 = newarray (double[])[3];

        $stack27[0] = xx;

        $stack27[1] = yy;

        $stack27[2] = zz;

        interfaceinvoke $stack28.<java.util.List: void add(int,java.lang.Object)>(i, $stack27);

        i = i + 1;

        goto label1;

     label2:
        return clone;
    }
}
