public class org.jfree.chart.renderer.xy.StackedXYBarRenderer extends org.jfree.chart.renderer.xy.XYBarRenderer
{
    private static final long serialVersionUID;
    private boolean renderAsPercentages;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void <init>(double)>(0.0);

        return;
    }

    public void <init>(double)
    {
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this;
        double margin;
        org.jfree.chart.labels.ItemLabelPosition $stack4;
        org.jfree.chart.ui.TextAnchor $stack5;
        org.jfree.chart.labels.ItemLabelAnchor $stack6;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        margin := @parameter0: double;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>(margin);

        this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean renderAsPercentages> = 0;

        $stack4 = new org.jfree.chart.labels.ItemLabelPosition;

        $stack6 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor CENTER>;

        $stack5 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER>;

        specialinvoke $stack4.<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.ui.TextAnchor)>($stack6, $stack5);

        virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void setDefaultPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)>($stack4);

        virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void setDefaultNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)>($stack4);

        virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>(null);

        virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>(null);

        return;
    }

    public boolean getRenderAsPercentages()
    {
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean renderAsPercentages>;

        return $stack1;
    }

    public void setRenderAsPercentages(boolean)
    {
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this;
        boolean asPercentages;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        asPercentages := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean renderAsPercentages> = asPercentages;

        virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void fireChangeEvent()>();

        return;
    }

    public int getPassCount()
    {
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        return 3;
    }

    public org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState $stack6;
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.data.xy.XYDataset data;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        plot := @parameter2: org.jfree.chart.plot.XYPlot;

        data := @parameter3: org.jfree.data.xy.XYDataset;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        $stack6 = new org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState;

        specialinvoke $stack6.<org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState: void <init>(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)>(this, info);

        return $stack6;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this;
        boolean $stack2;
        org.jfree.data.xy.TableXYDataset $stack3;
        org.jfree.data.Range $stack4, $stack5;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        if dataset == null goto label2;

        $stack2 = this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean renderAsPercentages>;

        if $stack2 == 0 goto label1;

        $stack5 = new org.jfree.data.Range;

        specialinvoke $stack5.<org.jfree.data.Range: void <init>(double,double)>(0.0, 1.0);

        return $stack5;

     label1:
        $stack3 = (org.jfree.data.xy.TableXYDataset) dataset;

        $stack4 = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)>($stack3);

        return $stack4;

     label2:
        return null;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this;
        int series, item, pass, i;
        boolean $stack46, $stack47, $stack57, $stack60, $stack78, $stack80, $stack81, $stack89, $stack92, positive, inverted, $stack112, $stack129, $stack160, $stack163, $stack164, and, $stack138, $stack122;
        org.jfree.data.xy.XYDataset dataset;
        java.lang.StringBuilder $stack48, $stack49, $stack52, $stack53, $stack62, $stack63, $stack64, $stack67, $stack68, $stack69, $stack73, $stack74, $stack75;
        java.lang.Class $stack50, $stack55, $stack56, $stack58, $stack59;
        java.lang.String $stack51, message;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge edgeR, edgeD, barBase;
        byte $stack83, $stack101, $stack109, $stack114, $stack165;
        org.jfree.chart.axis.ValueAxis rangeAxis, domainAxis;
        java.awt.geom.Rectangle2D dataArea;
        double $stack85, startX, endX, translatedEndX, $stack94, $stack96, $stack98, translatedHeight, $stack100, $stack107, $stack108, $stack127, $stack128, $stack142, $stack143, $stack146, $stack147, $stack152, and#9, total, positiveBase, negativeBase, v, i#19, translatedValue, translatedStartX, translatedWidth, cut;
        org.jfree.chart.plot.PlotOrientation orientation, $stack103, $stack104, $stack111;
        java.lang.IllegalStateException $stack105;
        java.awt.geom.Rectangle2D$Double $stack106, $stack121, $stack141, cut#25;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.xy.XYBarPainter $stack124, $stack130;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.ChartRenderingInfo $stack125;
        org.jfree.data.xy.TableXYDataset $stack168;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.plot.CrosshairState crosshairState;
        java.lang.IllegalArgumentException $stack61;
        org.jfree.data.xy.IntervalXYDataset message#8;
        org.jfree.chart.entity.EntityCollection entities;
        org.jfree.chart.labels.XYItemLabelGenerator entities#33;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        $stack46 = virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean getItemVisible(int,int)>(series, item);

        if $stack46 != 0 goto label01;

        return;

     label01:
        $stack47 = dataset instanceof org.jfree.data.xy.IntervalXYDataset;

        if $stack47 == 0 goto label02;

        $stack78 = dataset instanceof org.jfree.data.xy.TableXYDataset;

        if $stack78 != 0 goto label06;

     label02:
        $stack48 = new java.lang.StringBuilder;

        specialinvoke $stack48.<java.lang.StringBuilder: void <init>()>();

        $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataset (type ");

        $stack50 = virtualinvoke dataset.<java.lang.Object: java.lang.Class getClass()>();

        $stack51 = virtualinvoke $stack50.<java.lang.Class: java.lang.String getName()>();

        $stack52 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack51);

        $stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has wrong type:");

        message = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.String toString()>();

        and = 0;

        $stack55 = class "Lorg/jfree/data/xy/IntervalXYDataset;";

        $stack56 = virtualinvoke dataset.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack55.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($stack56);

        if $stack57 != 0 goto label03;

        $stack73 = new java.lang.StringBuilder;

        specialinvoke $stack73.<java.lang.StringBuilder: void <init>()>();

        $stack74 = virtualinvoke $stack73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(message);

        $stack75 = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" it is no IntervalXYDataset");

        message = virtualinvoke $stack75.<java.lang.StringBuilder: java.lang.String toString()>();

        and = 1;

     label03:
        $stack58 = class "Lorg/jfree/data/xy/TableXYDataset;";

        $stack59 = virtualinvoke dataset.<java.lang.Object: java.lang.Class getClass()>();

        $stack60 = virtualinvoke $stack58.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($stack59);

        if $stack60 != 0 goto label05;

        if and == 0 goto label04;

        $stack67 = new java.lang.StringBuilder;

        specialinvoke $stack67.<java.lang.StringBuilder: void <init>()>();

        $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(message);

        $stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and");

        message = virtualinvoke $stack69.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $stack62 = new java.lang.StringBuilder;

        specialinvoke $stack62.<java.lang.StringBuilder: void <init>()>();

        $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(message);

        $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" it is no TableXYDataset");

        message = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        $stack61 = new java.lang.IllegalArgumentException;

        specialinvoke $stack61.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(message);

        throw $stack61;

     label06:
        message#8 = (org.jfree.data.xy.IntervalXYDataset) dataset;

        and#9 = interfaceinvoke message#8.<org.jfree.data.xy.IntervalXYDataset: double getYValue(int,int)>(series, item);

        $stack80 = staticinvoke <java.lang.Double: boolean isNaN(double)>(and#9);

        if $stack80 == 0 goto label07;

        return;

     label07:
        total = 0.0;

        $stack81 = this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean renderAsPercentages>;

        if $stack81 == 0 goto label08;

        $stack168 = (org.jfree.data.xy.TableXYDataset) dataset;

        total = staticinvoke <org.jfree.data.general.DatasetUtils: double calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)>($stack168, item);

        and#9 = and#9 / total;

     label08:
        positiveBase = 0.0;

        negativeBase = 0.0;

        i = 0;

     label09:
        if i >= series goto label13;

        v = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(i, item);

        $stack160 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v);

        if $stack160 != 0 goto label12;

        $stack163 = virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean isSeriesVisible(int)>(i);

        if $stack163 == 0 goto label12;

        $stack164 = this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean renderAsPercentages>;

        if $stack164 == 0 goto label10;

        v = v / total;

     label10:
        $stack165 = v cmpl 0.0;

        if $stack165 <= 0 goto label11;

        positiveBase = positiveBase + v;

        goto label12;

     label11:
        negativeBase = negativeBase + v;

     label12:
        i = i + 1;

        goto label09;

     label13:
        edgeR = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        $stack83 = and#9 cmpl 0.0;

        if $stack83 <= 0 goto label14;

        i#19 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(positiveBase, dataArea, edgeR);

        $stack152 = positiveBase + and#9;

        translatedValue = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack152, dataArea, edgeR);

        goto label15;

     label14:
        i#19 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(negativeBase, dataArea, edgeR);

        $stack85 = negativeBase + and#9;

        translatedValue = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack85, dataArea, edgeR);

     label15:
        edgeD = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        startX = interfaceinvoke message#8.<org.jfree.data.xy.IntervalXYDataset: double getStartXValue(int,int)>(series, item);

        $stack89 = staticinvoke <java.lang.Double: boolean isNaN(double)>(startX);

        if $stack89 == 0 goto label16;

        return;

     label16:
        translatedStartX = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(startX, dataArea, edgeD);

        endX = interfaceinvoke message#8.<org.jfree.data.xy.IntervalXYDataset: double getEndXValue(int,int)>(series, item);

        $stack92 = staticinvoke <java.lang.Double: boolean isNaN(double)>(endX);

        if $stack92 == 0 goto label17;

        return;

     label17:
        translatedEndX = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(endX, dataArea, edgeD);

        $stack94 = translatedEndX - translatedStartX;

        $stack96 = staticinvoke <java.lang.Math: double abs(double)>($stack94);

        translatedWidth = staticinvoke <java.lang.Math: double max(double,double)>(1.0, $stack96);

        $stack98 = translatedValue - i#19;

        translatedHeight = staticinvoke <java.lang.Math: double abs(double)>($stack98);

        $stack100 = virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: double getMargin()>();

        $stack101 = $stack100 cmpl 0.0;

        if $stack101 <= 0 goto label18;

        $stack146 = virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: double getMargin()>();

        cut = translatedWidth * $stack146;

        translatedWidth = translatedWidth - cut;

        $stack147 = cut / 2.0;

        translatedStartX = translatedStartX + $stack147;

     label18:
        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack103 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack103 goto label19;

        $stack141 = new java.awt.geom.Rectangle2D$Double;

        $stack142 = staticinvoke <java.lang.Math: double min(double,double)>(i#19, translatedValue);

        $stack143 = staticinvoke <java.lang.Math: double min(double,double)>(translatedEndX, translatedStartX);

        specialinvoke $stack141.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack142, $stack143, translatedHeight, translatedWidth);

        cut#25 = $stack141;

        goto label21;

     label19:
        $stack104 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack104 goto label20;

        $stack106 = new java.awt.geom.Rectangle2D$Double;

        $stack107 = staticinvoke <java.lang.Math: double min(double,double)>(translatedStartX, translatedEndX);

        $stack108 = staticinvoke <java.lang.Math: double min(double,double)>(i#19, translatedValue);

        specialinvoke $stack106.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack107, $stack108, translatedWidth, translatedHeight);

        cut#25 = $stack106;

        goto label21;

     label20:
        $stack105 = new java.lang.IllegalStateException;

        specialinvoke $stack105.<java.lang.IllegalStateException: void <init>()>();

        throw $stack105;

     label21:
        $stack109 = and#9 cmpl 0.0;

        if $stack109 <= 0 goto label22;

        $stack138 = 1;

        goto label23;

     label22:
        $stack138 = 0;

     label23:
        positive = $stack138;

        inverted = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        $stack111 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack111 goto label27;

        if $stack138 == 0 goto label24;

        if inverted != 0 goto label25;

     label24:
        if positive != 0 goto label26;

        if inverted != 0 goto label26;

     label25:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        goto label31;

     label26:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        goto label31;

     label27:
        if $stack138 == 0 goto label28;

        if inverted == 0 goto label29;

     label28:
        if positive != 0 goto label30;

        if inverted == 0 goto label30;

     label29:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        goto label31;

     label30:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

     label31:
        if pass != 0 goto label32;

        $stack129 = virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean getShadowsVisible()>();

        if $stack129 == 0 goto label37;

        $stack130 = virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter getBarPainter()>();

        interfaceinvoke $stack130.<org.jfree.chart.renderer.xy.XYBarPainter: void paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.chart.ui.RectangleEdge,boolean)>(g2, this, series, item, cut#25, barBase, 0);

        goto label37;

     label32:
        if pass != 1 goto label34;

        $stack124 = virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter getBarPainter()>();

        interfaceinvoke $stack124.<org.jfree.chart.renderer.xy.XYBarPainter: void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.chart.ui.RectangleEdge)>(g2, this, series, item, cut#25, barBase);

        if info == null goto label37;

        $stack125 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        entities = virtualinvoke $stack125.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label33;

        $stack127 = virtualinvoke cut#25.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack128 = virtualinvoke cut#25.<java.awt.geom.Rectangle2D: double getCenterY()>();

        virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(entities, cut#25, dataset, series, item, $stack127, $stack128);

     label33:
        goto label37;

     label34:
        if pass != 2 goto label37;

        $stack112 = virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean isItemLabelVisible(int,int)>(series, item);

        if $stack112 == 0 goto label37;

        entities#33 = virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: org.jfree.chart.labels.XYItemLabelGenerator getItemLabelGenerator(int,int)>(series, item);

        $stack121 = cut#25;

        $stack114 = and#9 cmpg 0.0;

        if $stack114 >= 0 goto label35;

        $stack122 = 1;

        goto label36;

     label35:
        $stack122 = 0;

     label36:
        virtualinvoke this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>(g2, dataset, series, item, plot, entities#33, $stack121, $stack122);

     label37:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this, that;
        boolean $stack3, $stack4, $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.xy.StackedXYBarRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean renderAsPercentages>;

        $stack4 = that.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean renderAsPercentages>;

        if $stack5 == $stack4 goto label3;

        return 0;

     label3:
        $stack6 = specialinvoke this.<org.jfree.chart.renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack6;
    }

    public int hashCode()
    {
        org.jfree.chart.renderer.xy.StackedXYBarRenderer this;
        boolean $stack3;
        int $stack4, result;
        byte $stack5;

        this := @this: org.jfree.chart.renderer.xy.StackedXYBarRenderer;

        result = specialinvoke this.<org.jfree.chart.renderer.xy.XYBarRenderer: int hashCode()>();

        $stack4 = result * 37;

        $stack3 = this.<org.jfree.chart.renderer.xy.StackedXYBarRenderer: boolean renderAsPercentages>;

        if $stack3 == 0 goto label1;

        $stack5 = 1;

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        result = $stack4 + $stack5;

        return result;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.xy.StackedXYBarRenderer: long serialVersionUID> = -7049101055533436444L;

        return;
    }
}
