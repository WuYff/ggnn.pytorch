public class org.jfree.chart.editor.DefaultLogAxisEditor extends org.jfree.chart.editor.DefaultValueAxisEditor
{
    private double manualTickUnitValue;
    private javax.swing.JTextField manualTickUnit;

    public void <init>(org.jfree.chart.axis.LogAxis)
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        org.jfree.chart.axis.LogAxis axis;
        org.jfree.chart.axis.NumberTickUnit $stack2;
        double $stack3, $stack4;
        javax.swing.JTextField $stack5;
        java.lang.String $stack6;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        axis := @parameter0: org.jfree.chart.axis.LogAxis;

        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void <init>(org.jfree.chart.axis.ValueAxis)>(axis);

        $stack2 = virtualinvoke axis.<org.jfree.chart.axis.LogAxis: org.jfree.chart.axis.NumberTickUnit getTickUnit()>();

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.axis.NumberTickUnit: double getSize()>();

        this.<org.jfree.chart.editor.DefaultLogAxisEditor: double manualTickUnitValue> = $stack3;

        $stack5 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        $stack4 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: double manualTickUnitValue>;

        $stack6 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack4);

        virtualinvoke $stack5.<javax.swing.JTextField: void setText(java.lang.String)>($stack6);

        return;
    }

    protected javax.swing.JPanel createTickUnitPanel()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        javax.swing.JPanel tickUnitPanel, $stack17;
        javax.swing.JLabel $stack3;
        java.util.ResourceBundle $stack4;
        java.lang.String $stack5, $stack9;
        javax.swing.JTextField $stack7, $stack10, $stack12, $stack13, $stack14, $stack15;
        double $stack8;
        boolean $stack11, $stack19;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        tickUnitPanel = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JPanel createTickUnitPanel()>();

        $stack3 = new javax.swing.JLabel;

        $stack4 = <org.jfree.chart.editor.DefaultLogAxisEditor: java.util.ResourceBundle localizationResources>;

        $stack5 = virtualinvoke $stack4.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Manual_TickUnit_value");

        specialinvoke $stack3.<javax.swing.JLabel: void <init>(java.lang.String)>($stack5);

        virtualinvoke tickUnitPanel.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack3);

        $stack7 = new javax.swing.JTextField;

        $stack8 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: double manualTickUnitValue>;

        $stack9 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack8);

        specialinvoke $stack7.<javax.swing.JTextField: void <init>(java.lang.String)>($stack9);

        this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit> = $stack7;

        $stack10 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        $stack11 = virtualinvoke this.<org.jfree.chart.editor.DefaultLogAxisEditor: boolean isAutoTickUnitSelection()>();

        if $stack11 != 0 goto label1;

        $stack19 = 1;

        goto label2;

     label1:
        $stack19 = 0;

     label2:
        virtualinvoke $stack10.<javax.swing.JTextField: void setEnabled(boolean)>($stack19);

        $stack12 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        virtualinvoke $stack12.<javax.swing.JTextField: void setActionCommand(java.lang.String)>("TickUnitValue");

        $stack13 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        virtualinvoke $stack13.<javax.swing.JTextField: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack14 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        virtualinvoke $stack14.<javax.swing.JTextField: void addFocusListener(java.awt.event.FocusListener)>(this);

        $stack15 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        virtualinvoke tickUnitPanel.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack15);

        $stack17 = new javax.swing.JPanel;

        specialinvoke $stack17.<javax.swing.JPanel: void <init>()>();

        virtualinvoke tickUnitPanel.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack17);

        return tickUnitPanel;
    }

    public void actionPerformed(java.awt.event.ActionEvent)
    {
        java.awt.event.ActionEvent event;
        java.lang.String command;
        boolean $stack4;
        org.jfree.chart.editor.DefaultLogAxisEditor this;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        event := @parameter0: java.awt.event.ActionEvent;

        command = virtualinvoke event.<java.awt.event.ActionEvent: java.lang.String getActionCommand()>();

        $stack4 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("TickUnitValue");

        if $stack4 == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.editor.DefaultLogAxisEditor: void validateTickUnit()>();

        goto label2;

     label1:
        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>(event);

     label2:
        return;
    }

    public void focusLost(java.awt.event.FocusEvent)
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        java.awt.event.FocusEvent event;
        java.lang.Object $stack2;
        javax.swing.JTextField $stack3;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        event := @parameter0: java.awt.event.FocusEvent;

        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void focusLost(java.awt.event.FocusEvent)>(event);

        $stack2 = virtualinvoke event.<java.awt.event.FocusEvent: java.lang.Object getSource()>();

        $stack3 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        if $stack2 != $stack3 goto label1;

        virtualinvoke this.<org.jfree.chart.editor.DefaultLogAxisEditor: void validateTickUnit()>();

     label1:
        return;
    }

    public void toggleAutoTick()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        boolean $stack1;
        javax.swing.JTextField $stack2, $stack4, $stack6;
        double $stack3;
        java.lang.String $stack5;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void toggleAutoTick()>();

        $stack1 = virtualinvoke this.<org.jfree.chart.editor.DefaultLogAxisEditor: boolean isAutoTickUnitSelection()>();

        if $stack1 == 0 goto label1;

        $stack4 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        $stack3 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: double manualTickUnitValue>;

        $stack5 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack3);

        virtualinvoke $stack4.<javax.swing.JTextField: void setText(java.lang.String)>($stack5);

        $stack6 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        virtualinvoke $stack6.<javax.swing.JTextField: void setEnabled(boolean)>(0);

        goto label2;

     label1:
        $stack2 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        virtualinvoke $stack2.<javax.swing.JTextField: void setEnabled(boolean)>(1);

     label2:
        return;
    }

    public void validateTickUnit()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        javax.swing.JTextField $stack4, $stack9;
        java.lang.String $stack5, $stack10;
        byte $stack7;
        double $stack8, newTickUnit;
        java.lang.NumberFormatException $stack13;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

     label1:
        $stack4 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        $stack5 = virtualinvoke $stack4.<javax.swing.JTextField: java.lang.String getText()>();

        newTickUnit = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack5);

     label2:
        goto label4;

     label3:
        $stack13 := @caughtexception;

        newTickUnit = this.<org.jfree.chart.editor.DefaultLogAxisEditor: double manualTickUnitValue>;

     label4:
        $stack7 = newTickUnit cmpl 0.0;

        if $stack7 <= 0 goto label5;

        this.<org.jfree.chart.editor.DefaultLogAxisEditor: double manualTickUnitValue> = newTickUnit;

     label5:
        $stack9 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: javax.swing.JTextField manualTickUnit>;

        $stack8 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: double manualTickUnitValue>;

        $stack10 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack8);

        virtualinvoke $stack9.<javax.swing.JTextField: void setText(java.lang.String)>($stack10);

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void setAxisProperties(org.jfree.chart.axis.Axis)
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        org.jfree.chart.axis.Axis axis;
        org.jfree.chart.axis.LogAxis logAxis;
        boolean $stack3;
        org.jfree.chart.axis.NumberTickUnit $stack4;
        double $stack5;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        axis := @parameter0: org.jfree.chart.axis.Axis;

        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void setAxisProperties(org.jfree.chart.axis.Axis)>(axis);

        logAxis = (org.jfree.chart.axis.LogAxis) axis;

        $stack3 = virtualinvoke this.<org.jfree.chart.editor.DefaultLogAxisEditor: boolean isAutoTickUnitSelection()>();

        if $stack3 != 0 goto label1;

        $stack4 = new org.jfree.chart.axis.NumberTickUnit;

        $stack5 = this.<org.jfree.chart.editor.DefaultLogAxisEditor: double manualTickUnitValue>;

        specialinvoke $stack4.<org.jfree.chart.axis.NumberTickUnit: void <init>(double)>($stack5);

        virtualinvoke logAxis.<org.jfree.chart.axis.LogAxis: void setTickUnit(org.jfree.chart.axis.NumberTickUnit)>($stack4);

     label1:
        return;
    }

    public volatile void validateMaximum()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void validateMaximum()>();

        return;
    }

    public volatile void validateMinimum()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void validateMinimum()>();

        return;
    }

    public volatile void toggleAutoRange()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void toggleAutoRange()>();

        return;
    }

    public volatile void focusGained(java.awt.event.FocusEvent)
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        java.awt.event.FocusEvent l1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        l1 := @parameter0: java.awt.event.FocusEvent;

        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void focusGained(java.awt.event.FocusEvent)>(l1);

        return;
    }

    public volatile double getMaximumValue()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        double $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: double getMaximumValue()>();

        return $stack1;
    }

    public volatile double getMinimumValue()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        double $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: double getMinimumValue()>();

        return $stack1;
    }

    public volatile boolean isAutoRange()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        boolean $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean isAutoRange()>();

        return $stack1;
    }

    public volatile void attemptTickLabelFontSelection()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void attemptTickLabelFontSelection()>();

        return;
    }

    public volatile javax.swing.JTabbedPane getOtherTabs()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        javax.swing.JTabbedPane $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTabbedPane getOtherTabs()>();

        return $stack1;
    }

    public volatile org.jfree.chart.ui.RectangleInsets getLabelInsets()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.RectangleInsets getLabelInsets()>();

        return $stack1;
    }

    public volatile org.jfree.chart.ui.RectangleInsets getTickLabelInsets()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.RectangleInsets getTickLabelInsets()>();

        return $stack1;
    }

    public volatile boolean isTickMarksVisible()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        boolean $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean isTickMarksVisible()>();

        return $stack1;
    }

    public volatile java.awt.Paint getTickLabelPaint()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: java.awt.Paint getTickLabelPaint()>();

        return $stack1;
    }

    public volatile java.awt.Font getTickLabelFont()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        java.awt.Font $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: java.awt.Font getTickLabelFont()>();

        return $stack1;
    }

    public volatile boolean isTickLabelsVisible()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        boolean $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean isTickLabelsVisible()>();

        return $stack1;
    }

    public volatile java.awt.Paint getLabelPaint()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: java.awt.Paint getLabelPaint()>();

        return $stack1;
    }

    public volatile java.awt.Font getLabelFont()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        java.awt.Font $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: java.awt.Font getLabelFont()>();

        return $stack1;
    }

    public volatile java.lang.String getLabel()
    {
        org.jfree.chart.editor.DefaultLogAxisEditor this;
        java.lang.String $stack1;

        this := @this: org.jfree.chart.editor.DefaultLogAxisEditor;

        $stack1 = specialinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: java.lang.String getLabel()>();

        return $stack1;
    }
}
