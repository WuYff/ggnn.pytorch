public class org.jfree.chart.plot.PiePlot extends org.jfree.chart.plot.Plot implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final double DEFAULT_INTERIOR_GAP;
    public static final double MAX_INTERIOR_GAP;
    public static final double DEFAULT_START_ANGLE;
    public static final java.awt.Font DEFAULT_LABEL_FONT;
    public static final java.awt.Paint DEFAULT_LABEL_PAINT;
    public static final java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT;
    public static final java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT;
    public static final java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE;
    public static final java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT;
    public static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;
    private org.jfree.data.general.PieDataset dataset;
    private int pieIndex;
    private double interiorGap;
    private boolean circular;
    private double startAngle;
    private org.jfree.chart.util.Rotation direction;
    private org.jfree.chart.PaintMap sectionPaintMap;
    private transient java.awt.Paint defaultSectionPaint;
    private boolean autoPopulateSectionPaint;
    private boolean sectionOutlinesVisible;
    private org.jfree.chart.PaintMap sectionOutlinePaintMap;
    private transient java.awt.Paint defaultSectionOutlinePaint;
    private boolean autoPopulateSectionOutlinePaint;
    private org.jfree.chart.StrokeMap sectionOutlineStrokeMap;
    private transient java.awt.Stroke defaultSectionOutlineStroke;
    private boolean autoPopulateSectionOutlineStroke;
    private transient java.awt.Paint shadowPaint;
    private double shadowXOffset;
    private double shadowYOffset;
    private java.util.Map explodePercentages;
    private org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator;
    private java.awt.Font labelFont;
    private transient java.awt.Paint labelPaint;
    private transient java.awt.Paint labelBackgroundPaint;
    private transient java.awt.Paint labelOutlinePaint;
    private transient java.awt.Stroke labelOutlineStroke;
    private transient java.awt.Paint labelShadowPaint;
    private boolean simpleLabels;
    private org.jfree.chart.ui.RectangleInsets labelPadding;
    private org.jfree.chart.ui.RectangleInsets simpleLabelOffset;
    private double maximumLabelWidth;
    private double labelGap;
    private boolean labelLinksVisible;
    private org.jfree.chart.plot.PieLabelLinkStyle labelLinkStyle;
    private double labelLinkMargin;
    private transient java.awt.Paint labelLinkPaint;
    private transient java.awt.Stroke labelLinkStroke;
    private org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor;
    private org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator;
    private org.jfree.chart.urls.PieURLGenerator urlGenerator;
    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator;
    private org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator;
    private org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator;
    private boolean ignoreNullValues;
    private boolean ignoreZeroValues;
    private transient java.awt.Shape legendItemShape;
    private double minimumArcAngleToDraw;
    private org.jfree.chart.util.ShadowGenerator shadowGenerator;
    protected static java.util.ResourceBundle localizationResources;
    static final boolean DEBUG_DRAW_INTERIOR;
    static final boolean DEBUG_DRAW_LINK_AREA;
    static final boolean DEBUG_DRAW_PIE_AREA;

    public void <init>()
    {
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        specialinvoke this.<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>(null);

        return;
    }

    public void <init>(org.jfree.data.general.PieDataset)
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Color $stack2, $stack4, $stack8;
        org.jfree.chart.plot.PieLabelLinkStyle $stack3;
        java.awt.BasicStroke $stack5;
        org.jfree.data.general.PieDataset dataset;
        org.jfree.chart.util.Rotation $stack6;
        org.jfree.chart.PaintMap $stack7, $stack9;
        java.awt.Paint $stack10, $stack16, $stack17, $stack18, $stack20;
        org.jfree.chart.StrokeMap $stack11;
        java.awt.Stroke $stack12, $stack19;
        java.util.TreeMap $stack13;
        org.jfree.chart.labels.StandardPieSectionLabelGenerator $stack14, $stack25;
        java.awt.Font $stack15;
        org.jfree.chart.plot.PieLabelDistributor $stack21;
        org.jfree.chart.ui.RectangleInsets $stack22, $stack24;
        org.jfree.chart.util.UnitType $stack23;
        java.awt.Shape $stack26;

        this := @this: org.jfree.chart.plot.PiePlot;

        dataset := @parameter0: org.jfree.data.general.PieDataset;

        specialinvoke this.<org.jfree.chart.plot.Plot: void <init>()>();

        $stack2 = <java.awt.Color: java.awt.Color GRAY>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint shadowPaint> = $stack2;

        this.<org.jfree.chart.plot.PiePlot: double shadowXOffset> = 4.0;

        this.<org.jfree.chart.plot.PiePlot: double shadowYOffset> = 4.0;

        this.<org.jfree.chart.plot.PiePlot: boolean simpleLabels> = 1;

        this.<org.jfree.chart.plot.PiePlot: double maximumLabelWidth> = 0.14;

        this.<org.jfree.chart.plot.PiePlot: double labelGap> = 0.025;

        $stack3 = <org.jfree.chart.plot.PieLabelLinkStyle: org.jfree.chart.plot.PieLabelLinkStyle STANDARD>;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PieLabelLinkStyle labelLinkStyle> = $stack3;

        this.<org.jfree.chart.plot.PiePlot: double labelLinkMargin> = 0.025;

        $stack4 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelLinkPaint> = $stack4;

        $stack5 = new java.awt.BasicStroke;

        specialinvoke $stack5.<java.awt.BasicStroke: void <init>(float)>(0.5F);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelLinkStroke> = $stack5;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset> = dataset;

        if dataset == null goto label1;

        interfaceinvoke dataset.<org.jfree.data.general.PieDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label1:
        this.<org.jfree.chart.plot.PiePlot: int pieIndex> = 0;

        this.<org.jfree.chart.plot.PiePlot: double interiorGap> = 0.08;

        this.<org.jfree.chart.plot.PiePlot: boolean circular> = 1;

        this.<org.jfree.chart.plot.PiePlot: double startAngle> = 90.0;

        $stack6 = <org.jfree.chart.util.Rotation: org.jfree.chart.util.Rotation CLOCKWISE>;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction> = $stack6;

        this.<org.jfree.chart.plot.PiePlot: double minimumArcAngleToDraw> = 1.0E-5;

        $stack7 = new org.jfree.chart.PaintMap;

        specialinvoke $stack7.<org.jfree.chart.PaintMap: void <init>()>();

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap> = $stack7;

        $stack8 = <java.awt.Color: java.awt.Color GRAY>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionPaint> = $stack8;

        this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionPaint> = 1;

        this.<org.jfree.chart.plot.PiePlot: boolean sectionOutlinesVisible> = 1;

        $stack9 = new org.jfree.chart.PaintMap;

        specialinvoke $stack9.<org.jfree.chart.PaintMap: void <init>()>();

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap> = $stack9;

        $stack10 = <org.jfree.chart.plot.PiePlot: java.awt.Paint DEFAULT_OUTLINE_PAINT>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionOutlinePaint> = $stack10;

        this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlinePaint> = 0;

        $stack11 = new org.jfree.chart.StrokeMap;

        specialinvoke $stack11.<org.jfree.chart.StrokeMap: void <init>()>();

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap> = $stack11;

        $stack12 = <org.jfree.chart.plot.PiePlot: java.awt.Stroke DEFAULT_OUTLINE_STROKE>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke defaultSectionOutlineStroke> = $stack12;

        this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlineStroke> = 0;

        $stack13 = new java.util.TreeMap;

        specialinvoke $stack13.<java.util.TreeMap: void <init>()>();

        this.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages> = $stack13;

        $stack14 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator;

        specialinvoke $stack14.<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>()>();

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator> = $stack14;

        $stack15 = <org.jfree.chart.plot.PiePlot: java.awt.Font DEFAULT_LABEL_FONT>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Font labelFont> = $stack15;

        $stack16 = <org.jfree.chart.plot.PiePlot: java.awt.Paint DEFAULT_LABEL_PAINT>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint> = $stack16;

        $stack17 = <org.jfree.chart.plot.PiePlot: java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint> = $stack17;

        $stack18 = <org.jfree.chart.plot.PiePlot: java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint> = $stack18;

        $stack19 = <org.jfree.chart.plot.PiePlot: java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke> = $stack19;

        $stack20 = <org.jfree.chart.plot.PiePlot: java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint> = $stack20;

        this.<org.jfree.chart.plot.PiePlot: boolean labelLinksVisible> = 1;

        $stack21 = new org.jfree.chart.plot.PieLabelDistributor;

        specialinvoke $stack21.<org.jfree.chart.plot.PieLabelDistributor: void <init>(int)>(0);

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor> = $stack21;

        this.<org.jfree.chart.plot.PiePlot: boolean simpleLabels> = 0;

        $stack22 = new org.jfree.chart.ui.RectangleInsets;

        $stack23 = <org.jfree.chart.util.UnitType: org.jfree.chart.util.UnitType RELATIVE>;

        specialinvoke $stack22.<org.jfree.chart.ui.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>($stack23, 0.18, 0.18, 0.18, 0.18);

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets simpleLabelOffset> = $stack22;

        $stack24 = new org.jfree.chart.ui.RectangleInsets;

        specialinvoke $stack24.<org.jfree.chart.ui.RectangleInsets: void <init>(double,double,double,double)>(2.0, 2.0, 2.0, 2.0);

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets labelPadding> = $stack24;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator> = null;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator> = null;

        $stack25 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator;

        specialinvoke $stack25.<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>()>();

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator> = $stack25;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator> = null;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator> = null;

        $stack26 = <org.jfree.chart.plot.Plot: java.awt.Shape DEFAULT_LEGEND_ITEM_CIRCLE>;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Shape legendItemShape> = $stack26;

        this.<org.jfree.chart.plot.PiePlot: boolean ignoreNullValues> = 0;

        this.<org.jfree.chart.plot.PiePlot: boolean ignoreZeroValues> = 0;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator> = null;

        return;
    }

    public org.jfree.data.general.PieDataset getDataset()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.data.general.PieDataset $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        return $stack1;
    }

    public void setDataset(org.jfree.data.general.PieDataset)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.data.general.PieDataset existing, dataset;
        org.jfree.data.general.DatasetChangeEvent $stack4;
        org.jfree.data.general.DatasetGroup $stack5;

        this := @this: org.jfree.chart.plot.PiePlot;

        dataset := @parameter0: org.jfree.data.general.PieDataset;

        existing = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        if existing == null goto label1;

        interfaceinvoke existing.<org.jfree.data.general.PieDataset: void removeChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label1:
        this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset> = dataset;

        if dataset == null goto label2;

        $stack5 = interfaceinvoke dataset.<org.jfree.data.general.PieDataset: org.jfree.data.general.DatasetGroup getGroup()>();

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void setDatasetGroup(org.jfree.data.general.DatasetGroup)>($stack5);

        interfaceinvoke dataset.<org.jfree.data.general.PieDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label2:
        $stack4 = new org.jfree.data.general.DatasetChangeEvent;

        specialinvoke $stack4.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, dataset);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($stack4);

        return;
    }

    public int getPieIndex()
    {
        org.jfree.chart.plot.PiePlot this;
        int $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: int pieIndex>;

        return $stack1;
    }

    public void setPieIndex(int)
    {
        org.jfree.chart.plot.PiePlot this;
        int index;

        this := @this: org.jfree.chart.plot.PiePlot;

        index := @parameter0: int;

        this.<org.jfree.chart.plot.PiePlot: int pieIndex> = index;

        return;
    }

    public double getStartAngle()
    {
        org.jfree.chart.plot.PiePlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: double startAngle>;

        return $stack1;
    }

    public void setStartAngle(double)
    {
        org.jfree.chart.plot.PiePlot this;
        double angle;

        this := @this: org.jfree.chart.plot.PiePlot;

        angle := @parameter0: double;

        this.<org.jfree.chart.plot.PiePlot: double startAngle> = angle;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.util.Rotation getDirection()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.util.Rotation $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction>;

        return $stack1;
    }

    public void setDirection(org.jfree.chart.util.Rotation)
    {
        org.jfree.chart.util.Rotation direction;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        direction := @parameter0: org.jfree.chart.util.Rotation;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(direction, "direction");

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction> = direction;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public double getInteriorGap()
    {
        org.jfree.chart.plot.PiePlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: double interiorGap>;

        return $stack1;
    }

    public void setInteriorGap(double)
    {
        double percent, $stack11;
        byte $stack3, $stack10, $stack12;
        java.lang.IllegalArgumentException $stack4;
        java.lang.StringBuilder $stack5, $stack6, $stack7, $stack8;
        java.lang.String $stack9;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        percent := @parameter0: double;

        $stack3 = percent cmpg 0.0;

        if $stack3 < 0 goto label1;

        $stack10 = percent cmpl 0.4;

        if $stack10 <= 0 goto label2;

     label1:
        $stack4 = new java.lang.IllegalArgumentException;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid \'percent\' (");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(percent);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") argument.");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9);

        throw $stack4;

     label2:
        $stack11 = this.<org.jfree.chart.plot.PiePlot: double interiorGap>;

        $stack12 = $stack11 cmpl percent;

        if $stack12 == 0 goto label3;

        this.<org.jfree.chart.plot.PiePlot: double interiorGap> = percent;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

     label3:
        return;
    }

    public boolean isCircular()
    {
        org.jfree.chart.plot.PiePlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: boolean circular>;

        return $stack1;
    }

    public void setCircular(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean flag;

        this := @this: org.jfree.chart.plot.PiePlot;

        flag := @parameter0: boolean;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void setCircular(boolean,boolean)>(flag, 1);

        return;
    }

    public void setCircular(boolean, boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean circular, notify;

        this := @this: org.jfree.chart.plot.PiePlot;

        circular := @parameter0: boolean;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.plot.PiePlot: boolean circular> = circular;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getIgnoreNullValues()
    {
        org.jfree.chart.plot.PiePlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: boolean ignoreNullValues>;

        return $stack1;
    }

    public void setIgnoreNullValues(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean flag;

        this := @this: org.jfree.chart.plot.PiePlot;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.plot.PiePlot: boolean ignoreNullValues> = flag;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public boolean getIgnoreZeroValues()
    {
        org.jfree.chart.plot.PiePlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: boolean ignoreZeroValues>;

        return $stack1;
    }

    public void setIgnoreZeroValues(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean flag;

        this := @this: org.jfree.chart.plot.PiePlot;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.plot.PiePlot: boolean ignoreZeroValues> = flag;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        boolean $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: boolean getAutoPopulateSectionPaint()>();

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Paint lookupSectionPaint(java.lang.Comparable,boolean)>(key, $stack2);

        return $stack3;
    }

    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable, boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        org.jfree.chart.PaintMap $stack5, $stack10;
        boolean autoPopulate;
        org.jfree.chart.plot.DrawingSupplier ds;
        java.awt.Paint result;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        autoPopulate := @parameter1: boolean;

        $stack5 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap>;

        result = virtualinvoke $stack5.<org.jfree.chart.PaintMap: java.awt.Paint getPaint(java.lang.Comparable)>(key);

        if result == null goto label1;

        return result;

     label1:
        if autoPopulate == 0 goto label4;

        ds = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        if ds == null goto label2;

        result = interfaceinvoke ds.<org.jfree.chart.plot.DrawingSupplier: java.awt.Paint getNextPaint()>();

        $stack10 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap>;

        virtualinvoke $stack10.<org.jfree.chart.PaintMap: void put(java.lang.Comparable,java.awt.Paint)>(key, result);

        goto label3;

     label2:
        result = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionPaint>;

     label3:
        goto label5;

     label4:
        result = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionPaint>;

     label5:
        return result;
    }

    protected java.lang.Comparable getSectionKey(int)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.data.general.PieDataset $stack3, $stack7, $stack9;
        int section, $stack8;
        java.lang.Comparable key;

        this := @this: org.jfree.chart.plot.PiePlot;

        section := @parameter0: int;

        key = null;

        $stack3 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        if $stack3 == null goto label1;

        if section < 0 goto label1;

        $stack7 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack8 = interfaceinvoke $stack7.<org.jfree.data.general.PieDataset: int getItemCount()>();

        if section >= $stack8 goto label1;

        $stack9 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        key = interfaceinvoke $stack9.<org.jfree.data.general.PieDataset: java.lang.Comparable getKey(int)>(section);

     label1:
        if key != null goto label2;

        key = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(section);

     label2:
        return key;
    }

    public java.awt.Paint getSectionPaint(java.lang.Comparable)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        org.jfree.chart.PaintMap $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        $stack2 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.PaintMap: java.awt.Paint getPaint(java.lang.Comparable)>(key);

        return $stack3;
    }

    public void setSectionPaint(java.lang.Comparable, java.awt.Paint)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        java.awt.Paint paint;
        org.jfree.chart.PaintMap $stack3;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        paint := @parameter1: java.awt.Paint;

        $stack3 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap>;

        virtualinvoke $stack3.<org.jfree.chart.PaintMap: void put(java.lang.Comparable,java.awt.Paint)>(key, paint);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public void clearSectionPaints(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.PaintMap $stack2;
        boolean notify;

        this := @this: org.jfree.chart.plot.PiePlot;

        notify := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap>;

        virtualinvoke $stack2.<org.jfree.chart.PaintMap: void clear()>();

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getDefaultSectionPaint()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionPaint>;

        return $stack1;
    }

    public void setDefaultSectionPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public boolean getAutoPopulateSectionPaint()
    {
        org.jfree.chart.plot.PiePlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionPaint>;

        return $stack1;
    }

    public void setAutoPopulateSectionPaint(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean auto;

        this := @this: org.jfree.chart.plot.PiePlot;

        auto := @parameter0: boolean;

        this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionPaint> = auto;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public boolean getSectionOutlinesVisible()
    {
        org.jfree.chart.plot.PiePlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: boolean sectionOutlinesVisible>;

        return $stack1;
    }

    public void setSectionOutlinesVisible(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean visible;

        this := @this: org.jfree.chart.plot.PiePlot;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.plot.PiePlot: boolean sectionOutlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        boolean $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: boolean getAutoPopulateSectionOutlinePaint()>();

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable,boolean)>(key, $stack2);

        return $stack3;
    }

    protected java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable, boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        org.jfree.chart.PaintMap $stack5, $stack10;
        boolean autoPopulate;
        org.jfree.chart.plot.DrawingSupplier ds;
        java.awt.Paint result;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        autoPopulate := @parameter1: boolean;

        $stack5 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap>;

        result = virtualinvoke $stack5.<org.jfree.chart.PaintMap: java.awt.Paint getPaint(java.lang.Comparable)>(key);

        if result == null goto label1;

        return result;

     label1:
        if autoPopulate == 0 goto label4;

        ds = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        if ds == null goto label2;

        result = interfaceinvoke ds.<org.jfree.chart.plot.DrawingSupplier: java.awt.Paint getNextOutlinePaint()>();

        $stack10 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap>;

        virtualinvoke $stack10.<org.jfree.chart.PaintMap: void put(java.lang.Comparable,java.awt.Paint)>(key, result);

        goto label3;

     label2:
        result = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionOutlinePaint>;

     label3:
        goto label5;

     label4:
        result = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionOutlinePaint>;

     label5:
        return result;
    }

    public java.awt.Paint getSectionOutlinePaint(java.lang.Comparable)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        org.jfree.chart.PaintMap $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        $stack2 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.PaintMap: java.awt.Paint getPaint(java.lang.Comparable)>(key);

        return $stack3;
    }

    public void setSectionOutlinePaint(java.lang.Comparable, java.awt.Paint)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        java.awt.Paint paint;
        org.jfree.chart.PaintMap $stack3;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        paint := @parameter1: java.awt.Paint;

        $stack3 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap>;

        virtualinvoke $stack3.<org.jfree.chart.PaintMap: void put(java.lang.Comparable,java.awt.Paint)>(key, paint);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public void clearSectionOutlinePaints(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.PaintMap $stack2;
        boolean notify;

        this := @this: org.jfree.chart.plot.PiePlot;

        notify := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap>;

        virtualinvoke $stack2.<org.jfree.chart.PaintMap: void clear()>();

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getDefaultSectionOutlinePaint()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionOutlinePaint>;

        return $stack1;
    }

    public void setDefaultSectionOutlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionOutlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public boolean getAutoPopulateSectionOutlinePaint()
    {
        org.jfree.chart.plot.PiePlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlinePaint>;

        return $stack1;
    }

    public void setAutoPopulateSectionOutlinePaint(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean auto;

        this := @this: org.jfree.chart.plot.PiePlot;

        auto := @parameter0: boolean;

        this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlinePaint> = auto;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        boolean $stack2;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: boolean getAutoPopulateSectionOutlineStroke()>();

        $stack3 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable,boolean)>(key, $stack2);

        return $stack3;
    }

    protected java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable, boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        org.jfree.chart.StrokeMap $stack5, $stack10;
        boolean autoPopulate;
        org.jfree.chart.plot.DrawingSupplier ds;
        java.awt.Stroke result;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        autoPopulate := @parameter1: boolean;

        $stack5 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap>;

        result = virtualinvoke $stack5.<org.jfree.chart.StrokeMap: java.awt.Stroke getStroke(java.lang.Comparable)>(key);

        if result == null goto label1;

        return result;

     label1:
        if autoPopulate == 0 goto label4;

        ds = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        if ds == null goto label2;

        result = interfaceinvoke ds.<org.jfree.chart.plot.DrawingSupplier: java.awt.Stroke getNextOutlineStroke()>();

        $stack10 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap>;

        virtualinvoke $stack10.<org.jfree.chart.StrokeMap: void put(java.lang.Comparable,java.awt.Stroke)>(key, result);

        goto label3;

     label2:
        result = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke defaultSectionOutlineStroke>;

     label3:
        goto label5;

     label4:
        result = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke defaultSectionOutlineStroke>;

     label5:
        return result;
    }

    public java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        org.jfree.chart.StrokeMap $stack2;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        $stack2 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.StrokeMap: java.awt.Stroke getStroke(java.lang.Comparable)>(key);

        return $stack3;
    }

    public void setSectionOutlineStroke(java.lang.Comparable, java.awt.Stroke)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        java.awt.Stroke stroke;
        org.jfree.chart.StrokeMap $stack3;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        stroke := @parameter1: java.awt.Stroke;

        $stack3 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap>;

        virtualinvoke $stack3.<org.jfree.chart.StrokeMap: void put(java.lang.Comparable,java.awt.Stroke)>(key, stroke);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public void clearSectionOutlineStrokes(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.StrokeMap $stack2;
        boolean notify;

        this := @this: org.jfree.chart.plot.PiePlot;

        notify := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap>;

        virtualinvoke $stack2.<org.jfree.chart.StrokeMap: void clear()>();

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getDefaultSectionOutlineStroke()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke defaultSectionOutlineStroke>;

        return $stack1;
    }

    public void setDefaultSectionOutlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke defaultSectionOutlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public boolean getAutoPopulateSectionOutlineStroke()
    {
        org.jfree.chart.plot.PiePlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlineStroke>;

        return $stack1;
    }

    public void setAutoPopulateSectionOutlineStroke(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean auto;

        this := @this: org.jfree.chart.plot.PiePlot;

        auto := @parameter0: boolean;

        this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlineStroke> = auto;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getShadowPaint()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint shadowPaint>;

        return $stack1;
    }

    public void setShadowPaint(java.awt.Paint)
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.plot.PiePlot;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint shadowPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public double getShadowXOffset()
    {
        org.jfree.chart.plot.PiePlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: double shadowXOffset>;

        return $stack1;
    }

    public void setShadowXOffset(double)
    {
        org.jfree.chart.plot.PiePlot this;
        double offset;

        this := @this: org.jfree.chart.plot.PiePlot;

        offset := @parameter0: double;

        this.<org.jfree.chart.plot.PiePlot: double shadowXOffset> = offset;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public double getShadowYOffset()
    {
        org.jfree.chart.plot.PiePlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: double shadowYOffset>;

        return $stack1;
    }

    public void setShadowYOffset(double)
    {
        org.jfree.chart.plot.PiePlot this;
        double offset;

        this := @this: org.jfree.chart.plot.PiePlot;

        offset := @parameter0: double;

        this.<org.jfree.chart.plot.PiePlot: double shadowYOffset> = offset;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public double getExplodePercent(java.lang.Comparable)
    {
        org.jfree.chart.plot.PiePlot this;
        java.util.Map $stack5, $stack6;
        java.lang.Comparable key;
        java.lang.Object $stack7;
        java.lang.Number percent;
        double result;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        result = 0.0;

        $stack5 = this.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages>;

        if $stack5 == null goto label1;

        $stack6 = this.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages>;

        $stack7 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        percent = (java.lang.Number) $stack7;

        if percent == null goto label1;

        result = virtualinvoke percent.<java.lang.Number: double doubleValue()>();

     label1:
        return result;
    }

    public void setExplodePercent(java.lang.Comparable, double)
    {
        java.lang.Comparable key;
        org.jfree.chart.plot.PiePlot this;
        java.util.Map $stack4, $stack5;
        double percent;
        java.lang.Double $stack6;
        java.util.TreeMap $stack8;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        percent := @parameter1: double;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(key, "key");

        $stack4 = this.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages>;

        if $stack4 != null goto label1;

        $stack8 = new java.util.TreeMap;

        specialinvoke $stack8.<java.util.TreeMap: void <init>()>();

        this.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages> = $stack8;

     label1:
        $stack5 = this.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages>;

        $stack6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(percent);

        interfaceinvoke $stack5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack6);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public double getMaximumExplodePercent()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.data.general.PieDataset $stack6, $stack7;
        java.util.List $stack8;
        java.util.Iterator iterator;
        boolean $stack10;
        java.lang.Object $stack11, $stack13;
        java.lang.Comparable key;
        java.util.Map $stack12;
        java.lang.Number explode;
        double $stack15, result;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack6 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        if $stack6 != null goto label1;

        return 0.0;

     label1:
        result = 0.0;

        $stack7 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack8 = interfaceinvoke $stack7.<org.jfree.data.general.PieDataset: java.util.List getKeys()>();

        iterator = interfaceinvoke $stack8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack10 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label4;

        $stack11 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack11;

        $stack12 = this.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages>;

        $stack13 = interfaceinvoke $stack12.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        explode = (java.lang.Number) $stack13;

        if explode == null goto label3;

        $stack15 = virtualinvoke explode.<java.lang.Number: double doubleValue()>();

        result = staticinvoke <java.lang.Math: double max(double,double)>(result, $stack15);

     label3:
        goto label2;

     label4:
        return result;
    }

    public org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator>;

        return $stack1;
    }

    public void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.labels.PieSectionLabelGenerator generator;

        this := @this: org.jfree.chart.plot.PiePlot;

        generator := @parameter0: org.jfree.chart.labels.PieSectionLabelGenerator;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public double getLabelGap()
    {
        org.jfree.chart.plot.PiePlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: double labelGap>;

        return $stack1;
    }

    public void setLabelGap(double)
    {
        org.jfree.chart.plot.PiePlot this;
        double gap;

        this := @this: org.jfree.chart.plot.PiePlot;

        gap := @parameter0: double;

        this.<org.jfree.chart.plot.PiePlot: double labelGap> = gap;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public double getMaximumLabelWidth()
    {
        org.jfree.chart.plot.PiePlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: double maximumLabelWidth>;

        return $stack1;
    }

    public void setMaximumLabelWidth(double)
    {
        org.jfree.chart.plot.PiePlot this;
        double width;

        this := @this: org.jfree.chart.plot.PiePlot;

        width := @parameter0: double;

        this.<org.jfree.chart.plot.PiePlot: double maximumLabelWidth> = width;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public boolean getLabelLinksVisible()
    {
        org.jfree.chart.plot.PiePlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: boolean labelLinksVisible>;

        return $stack1;
    }

    public void setLabelLinksVisible(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean visible;

        this := @this: org.jfree.chart.plot.PiePlot;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.plot.PiePlot: boolean labelLinksVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.plot.PieLabelLinkStyle getLabelLinkStyle()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.plot.PieLabelLinkStyle $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PieLabelLinkStyle labelLinkStyle>;

        return $stack1;
    }

    public void setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)
    {
        org.jfree.chart.plot.PieLabelLinkStyle style;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        style := @parameter0: org.jfree.chart.plot.PieLabelLinkStyle;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(style, "style");

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PieLabelLinkStyle labelLinkStyle> = style;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public double getLabelLinkMargin()
    {
        org.jfree.chart.plot.PiePlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: double labelLinkMargin>;

        return $stack1;
    }

    public void setLabelLinkMargin(double)
    {
        org.jfree.chart.plot.PiePlot this;
        double margin;

        this := @this: org.jfree.chart.plot.PiePlot;

        margin := @parameter0: double;

        this.<org.jfree.chart.plot.PiePlot: double labelLinkMargin> = margin;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getLabelLinkPaint()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelLinkPaint>;

        return $stack1;
    }

    public void setLabelLinkPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelLinkPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getLabelLinkStroke()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelLinkStroke>;

        return $stack1;
    }

    public void setLabelLinkStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelLinkStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    protected double getLabelLinkDepth()
    {
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        return 0.1;
    }

    public java.awt.Font getLabelFont()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Font $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Font labelFont>;

        return $stack1;
    }

    public void setLabelFont(java.awt.Font)
    {
        java.awt.Font font;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        font := @parameter0: java.awt.Font;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(font, "font");

        this.<org.jfree.chart.plot.PiePlot: java.awt.Font labelFont> = font;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getLabelPaint()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint>;

        return $stack1;
    }

    public void setLabelPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getLabelBackgroundPaint()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint>;

        return $stack1;
    }

    public void setLabelBackgroundPaint(java.awt.Paint)
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.plot.PiePlot;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getLabelOutlinePaint()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint>;

        return $stack1;
    }

    public void setLabelOutlinePaint(java.awt.Paint)
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.plot.PiePlot;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getLabelOutlineStroke()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke>;

        return $stack1;
    }

    public void setLabelOutlineStroke(java.awt.Stroke)
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Stroke stroke;

        this := @this: org.jfree.chart.plot.PiePlot;

        stroke := @parameter0: java.awt.Stroke;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getLabelShadowPaint()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint>;

        return $stack1;
    }

    public void setLabelShadowPaint(java.awt.Paint)
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.plot.PiePlot;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.ui.RectangleInsets getLabelPadding()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets labelPadding>;

        return $stack1;
    }

    public void setLabelPadding(org.jfree.chart.ui.RectangleInsets)
    {
        org.jfree.chart.ui.RectangleInsets padding;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        padding := @parameter0: org.jfree.chart.ui.RectangleInsets;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(padding, "padding");

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets labelPadding> = padding;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public boolean getSimpleLabels()
    {
        org.jfree.chart.plot.PiePlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: boolean simpleLabels>;

        return $stack1;
    }

    public void setSimpleLabels(boolean)
    {
        org.jfree.chart.plot.PiePlot this;
        boolean simple;

        this := @this: org.jfree.chart.plot.PiePlot;

        simple := @parameter0: boolean;

        this.<org.jfree.chart.plot.PiePlot: boolean simpleLabels> = simple;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.ui.RectangleInsets getSimpleLabelOffset()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.ui.RectangleInsets $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets simpleLabelOffset>;

        return $stack1;
    }

    public void setSimpleLabelOffset(org.jfree.chart.ui.RectangleInsets)
    {
        org.jfree.chart.ui.RectangleInsets offset;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        offset := @parameter0: org.jfree.chart.ui.RectangleInsets;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(offset, "offset");

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets simpleLabelOffset> = offset;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.plot.AbstractPieLabelDistributor $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        return $stack1;
    }

    public void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)
    {
        org.jfree.chart.plot.AbstractPieLabelDistributor distributor;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        distributor := @parameter0: org.jfree.chart.plot.AbstractPieLabelDistributor;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(distributor, "distributor");

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor> = distributor;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.labels.PieToolTipGenerator $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator>;

        return $stack1;
    }

    public void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.labels.PieToolTipGenerator generator;

        this := @this: org.jfree.chart.plot.PiePlot;

        generator := @parameter0: org.jfree.chart.labels.PieToolTipGenerator;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.urls.PieURLGenerator getURLGenerator()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.urls.PieURLGenerator $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator>;

        return $stack1;
    }

    public void setURLGenerator(org.jfree.chart.urls.PieURLGenerator)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.urls.PieURLGenerator generator;

        this := @this: org.jfree.chart.plot.PiePlot;

        generator := @parameter0: org.jfree.chart.urls.PieURLGenerator;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public double getMinimumArcAngleToDraw()
    {
        org.jfree.chart.plot.PiePlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: double minimumArcAngleToDraw>;

        return $stack1;
    }

    public void setMinimumArcAngleToDraw(double)
    {
        org.jfree.chart.plot.PiePlot this;
        double angle;

        this := @this: org.jfree.chart.plot.PiePlot;

        angle := @parameter0: double;

        this.<org.jfree.chart.plot.PiePlot: double minimumArcAngleToDraw> = angle;

        return;
    }

    public java.awt.Shape getLegendItemShape()
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: java.awt.Shape legendItemShape>;

        return $stack1;
    }

    public void setLegendItemShape(java.awt.Shape)
    {
        java.awt.Shape shape;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        shape := @parameter0: java.awt.Shape;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(shape, "shape");

        this.<org.jfree.chart.plot.PiePlot: java.awt.Shape legendItemShape> = shape;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator>;

        return $stack1;
    }

    public void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)
    {
        org.jfree.chart.labels.PieSectionLabelGenerator generator;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        generator := @parameter0: org.jfree.chart.labels.PieSectionLabelGenerator;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(generator, "generator");

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator>;

        return $stack1;
    }

    public void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.labels.PieSectionLabelGenerator generator;

        this := @this: org.jfree.chart.plot.PiePlot;

        generator := @parameter0: org.jfree.chart.labels.PieSectionLabelGenerator;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.urls.PieURLGenerator $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator>;

        return $stack1;
    }

    public void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.urls.PieURLGenerator generator;

        this := @this: org.jfree.chart.plot.PiePlot;

        generator := @parameter0: org.jfree.chart.urls.PieURLGenerator;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.util.ShadowGenerator getShadowGenerator()
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.util.ShadowGenerator $stack1;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        return $stack1;
    }

    public void setShadowGenerator(org.jfree.chart.util.ShadowGenerator)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.util.ShadowGenerator generator;

        this := @this: org.jfree.chart.plot.PiePlot;

        generator := @parameter0: org.jfree.chart.util.ShadowGenerator;

        this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void fireChangeEvent()>();

        return;
    }

    public void handleMouseWheelRotation(int)
    {
        org.jfree.chart.plot.PiePlot this;
        int rotateClicks;
        double $stack2, $stack3, $stack4, $stack5;

        this := @this: org.jfree.chart.plot.PiePlot;

        rotateClicks := @parameter0: int;

        $stack4 = this.<org.jfree.chart.plot.PiePlot: double startAngle>;

        $stack2 = (double) rotateClicks;

        $stack3 = $stack2 * 4.0;

        $stack5 = $stack4 + $stack3;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void setStartAngle(double)>($stack5);

        return;
    }

    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlot, java.lang.Integer, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.PiePlotState $stack7;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.plot.PiePlot this, plot;
        org.jfree.data.general.PieDataset $stack8, $stack10;
        double $stack9, $stack11;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;
        java.lang.Integer index;

        this := @this: org.jfree.chart.plot.PiePlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        plot := @parameter2: org.jfree.chart.plot.PiePlot;

        index := @parameter3: java.lang.Integer;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        $stack7 = new org.jfree.chart.plot.PiePlotState;

        specialinvoke $stack7.<org.jfree.chart.plot.PiePlotState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>(info);

        virtualinvoke $stack7.<org.jfree.chart.plot.PiePlotState: void setPassesRequired(int)>(2);

        $stack8 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        if $stack8 == null goto label1;

        $stack10 = virtualinvoke plot.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset getDataset()>();

        $stack11 = staticinvoke <org.jfree.data.general.DatasetUtils: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>($stack10);

        virtualinvoke $stack7.<org.jfree.chart.plot.PiePlotState: void setTotal(double)>($stack11);

     label1:
        $stack9 = virtualinvoke plot.<org.jfree.chart.plot.PiePlot: double getStartAngle()>();

        virtualinvoke $stack7.<org.jfree.chart.plot.PiePlotState: void setLatestAngle(double)>($stack9);

        return $stack7;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.ui.RectangleInsets insets;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.Shape savedClip;
        java.awt.Composite originalComposite;
        float $stack17;
        java.awt.AlphaComposite $stack18;
        org.jfree.data.general.PieDataset $stack19;
        boolean $stack20, suppressShadow;
        java.awt.Graphics2D savedG2, g2;
        java.awt.RenderingHints$Key $stack21;
        java.lang.Boolean $stack22;
        java.lang.Object $stack23;
        org.jfree.chart.util.ShadowGenerator $stack25, $stack34, $stack37, $stack42, $stack26;
        java.awt.image.BufferedImage shadowImage, $stack57, dataImage;
        double $stack36, $stack41, $stack47, $stack49, $stack58, $stack60, $stack63, $stack64, $stack65, $stack66;
        int $stack38, $stack39, $stack40, $stack43, $stack44, $stack45, $stack48, $stack50, $stack59, $stack61;
        java.awt.RenderingHints $stack67;
        java.awt.geom.Point2D anchor;
        org.jfree.chart.plot.PlotState parentState;

        this := @this: org.jfree.chart.plot.PiePlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        anchor := @parameter2: java.awt.geom.Point2D;

        parentState := @parameter3: org.jfree.chart.plot.PlotState;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        insets = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets getInsets()>();

        virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(area);

        if info == null goto label1;

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void setPlotArea(java.awt.geom.Rectangle2D)>(area);

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void setDataArea(java.awt.geom.Rectangle2D)>(area);

     label1:
        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        savedClip = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Shape getClip()>();

        virtualinvoke g2.<java.awt.Graphics2D: void clip(java.awt.Shape)>(area);

        originalComposite = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $stack17 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: float getForegroundAlpha()>();

        $stack18 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $stack17);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($stack18);

        $stack19 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack20 = staticinvoke <org.jfree.data.general.DatasetUtils: boolean isEmptyOrNull(org.jfree.data.general.PieDataset)>($stack19);

        if $stack20 != 0 goto label4;

        savedG2 = g2;

        $stack22 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack21 = <org.jfree.chart.JFreeChart: java.awt.RenderingHints$Key KEY_SUPPRESS_SHADOW_GENERATION>;

        $stack23 = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack21);

        suppressShadow = virtualinvoke $stack22.<java.lang.Boolean: boolean equals(java.lang.Object)>($stack23);

        dataImage = null;

        $stack25 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack25 == null goto label2;

        if suppressShadow != 0 goto label2;

        $stack57 = new java.awt.image.BufferedImage;

        $stack58 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack59 = (int) $stack58;

        $stack60 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack61 = (int) $stack60;

        specialinvoke $stack57.<java.awt.image.BufferedImage: void <init>(int,int,int)>($stack59, $stack61, 2);

        dataImage = $stack57;

        g2 = virtualinvoke $stack57.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $stack63 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack64 = neg $stack63;

        $stack65 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack66 = neg $stack65;

        virtualinvoke g2.<java.awt.Graphics2D: void translate(double,double)>($stack64, $stack66);

        $stack67 = virtualinvoke savedG2.<java.awt.Graphics2D: java.awt.RenderingHints getRenderingHints()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHints(java.util.Map)>($stack67);

     label2:
        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>(g2, area, info);

        $stack26 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack26 == null goto label3;

        if suppressShadow != 0 goto label3;

        $stack34 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        shadowImage = interfaceinvoke $stack34.<org.jfree.chart.util.ShadowGenerator: java.awt.image.BufferedImage createDropShadow(java.awt.image.BufferedImage)>(dataImage);

        g2 = savedG2;

        $stack36 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack38 = (int) $stack36;

        $stack37 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack39 = interfaceinvoke $stack37.<org.jfree.chart.util.ShadowGenerator: int calculateOffsetX()>();

        $stack40 = $stack38 + $stack39;

        $stack41 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack43 = (int) $stack41;

        $stack42 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack44 = interfaceinvoke $stack42.<org.jfree.chart.util.ShadowGenerator: int calculateOffsetY()>();

        $stack45 = $stack43 + $stack44;

        virtualinvoke savedG2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(shadowImage, $stack40, $stack45, null);

        $stack47 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack48 = (int) $stack47;

        $stack49 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack50 = (int) $stack49;

        virtualinvoke savedG2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(dataImage, $stack48, $stack50, null);

     label3:
        goto label5;

     label4:
        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

     label5:
        virtualinvoke g2.<java.awt.Graphics2D: void setClip(java.awt.Shape)>(savedClip);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(originalComposite);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        return;
    }

    protected void drawPie(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.PiePlot this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.plot.PiePlotState state;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack48;
        double gapHorizontal, gapVertical, $stack63, $stack64, hh, $stack65, $stack66, vv, $stack68, $stack69, $stack70, $stack71, $stack72, $stack73, maximumExplodePercent, $stack75, percent, $stack76, h1, $stack77, v1, $stack79, $stack80, $stack81, $stack82, $stack83, $stack84, $stack85, $stack86, $stack87, $stack88, $stack89, $stack90, $stack91, $stack92, $stack93, $stack94, totalValue, value, $stack171, $stack172, $stack173, $stack174, $stack175, $stack176, $stack177, $stack210, $stack211, labelReserve, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, linkX, $stack56, $stack57, linkY, $stack58, linkW, $stack59, linkH, min, lm;
        java.awt.geom.Rectangle2D$Double $stack61, $stack67, $stack78;
        boolean $stack62, $stack107, $stack186, $stack60;
        org.jfree.data.general.PieDataset $stack95, $stack96, $stack102, $stack104, $stack111;
        java.util.List $stack97, keys;
        int $stack98, passesRequired, $stack108, pass, section;
        java.lang.Number n;
        byte $stack116;

        this := @this: org.jfree.chart.plot.PiePlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        state = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>(g2, plotArea, this, null, info);

        labelReserve = 0.0;

        $stack48 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator>;

        if $stack48 == null goto label01;

        $stack186 = this.<org.jfree.chart.plot.PiePlot: boolean simpleLabels>;

        if $stack186 != 0 goto label01;

        $stack211 = this.<org.jfree.chart.plot.PiePlot: double labelGap>;

        $stack210 = this.<org.jfree.chart.plot.PiePlot: double maximumLabelWidth>;

        labelReserve = $stack211 + $stack210;

     label01:
        $stack49 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack50 = $stack49 * labelReserve;

        gapHorizontal = $stack50 * 2.0;

        $stack51 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack52 = this.<org.jfree.chart.plot.PiePlot: double interiorGap>;

        $stack53 = $stack51 * $stack52;

        gapVertical = $stack53 * 2.0;

        $stack54 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getX()>();

        $stack55 = gapHorizontal / 2.0;

        linkX = $stack54 + $stack55;

        $stack56 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getY()>();

        $stack57 = gapVertical / 2.0;

        linkY = $stack56 + $stack57;

        $stack58 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        linkW = $stack58 - gapHorizontal;

        $stack59 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        linkH = $stack59 - gapVertical;

        $stack60 = this.<org.jfree.chart.plot.PiePlot: boolean circular>;

        if $stack60 == 0 goto label02;

        $stack171 = staticinvoke <java.lang.Math: double min(double,double)>(linkW, linkH);

        min = $stack171 / 2.0;

        $stack172 = linkX + linkX;

        $stack173 = $stack172 + linkW;

        $stack174 = $stack173 / 2.0;

        linkX = $stack174 - min;

        $stack175 = linkY + linkY;

        $stack176 = $stack175 + linkH;

        $stack177 = $stack176 / 2.0;

        linkY = $stack177 - min;

        linkW = 2.0 * min;

        linkH = 2.0 * min;

     label02:
        $stack61 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack61.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(linkX, linkY, linkW, linkH);

        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setLinkArea(java.awt.geom.Rectangle2D)>($stack61);

        lm = 0.0;

        $stack62 = this.<org.jfree.chart.plot.PiePlot: boolean simpleLabels>;

        if $stack62 != 0 goto label03;

        lm = this.<org.jfree.chart.plot.PiePlot: double labelLinkMargin>;

     label03:
        $stack63 = virtualinvoke $stack61.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack64 = $stack63 * lm;

        hh = $stack64 * 2.0;

        $stack65 = virtualinvoke $stack61.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack66 = $stack65 * lm;

        vv = $stack66 * 2.0;

        $stack67 = new java.awt.geom.Rectangle2D$Double;

        $stack68 = hh / 2.0;

        $stack73 = linkX + $stack68;

        $stack69 = vv / 2.0;

        $stack72 = linkY + $stack69;

        $stack71 = linkW - hh;

        $stack70 = linkH - vv;

        specialinvoke $stack67.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack73, $stack72, $stack71, $stack70);

        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setExplodedPieArea(java.awt.geom.Rectangle2D)>($stack67);

        maximumExplodePercent = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getMaximumExplodePercent()>();

        $stack75 = 1.0 + maximumExplodePercent;

        percent = maximumExplodePercent / $stack75;

        $stack76 = virtualinvoke $stack67.<java.awt.geom.Rectangle2D: double getWidth()>();

        h1 = $stack76 * percent;

        $stack77 = virtualinvoke $stack67.<java.awt.geom.Rectangle2D: double getHeight()>();

        v1 = $stack77 * percent;

        $stack78 = new java.awt.geom.Rectangle2D$Double;

        $stack79 = virtualinvoke $stack67.<java.awt.geom.Rectangle2D: double getX()>();

        $stack80 = h1 / 2.0;

        $stack81 = $stack79 + $stack80;

        $stack82 = virtualinvoke $stack67.<java.awt.geom.Rectangle2D: double getY()>();

        $stack83 = v1 / 2.0;

        $stack84 = $stack82 + $stack83;

        $stack85 = virtualinvoke $stack67.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack86 = $stack85 - h1;

        $stack87 = virtualinvoke $stack67.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack88 = $stack87 - v1;

        specialinvoke $stack78.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack81, $stack84, $stack86, $stack88);

        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setPieArea(java.awt.geom.Rectangle2D)>($stack78);

        $stack89 = virtualinvoke $stack78.<java.awt.geom.Rectangle2D: double getCenterX()>();

        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setPieCenterX(double)>($stack89);

        $stack90 = virtualinvoke $stack78.<java.awt.geom.Rectangle2D: double getCenterY()>();

        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setPieCenterY(double)>($stack90);

        $stack91 = virtualinvoke $stack78.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack92 = $stack91 / 2.0;

        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setPieWRadius(double)>($stack92);

        $stack93 = virtualinvoke $stack78.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack94 = $stack93 / 2.0;

        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setPieHRadius(double)>($stack94);

        $stack95 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        if $stack95 == null goto label11;

        $stack96 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack97 = interfaceinvoke $stack96.<org.jfree.data.general.PieDataset: java.util.List getKeys()>();

        $stack98 = interfaceinvoke $stack97.<java.util.List: int size()>();

        if $stack98 <= 0 goto label11;

        $stack102 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        keys = interfaceinvoke $stack102.<org.jfree.data.general.PieDataset: java.util.List getKeys()>();

        $stack104 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        totalValue = staticinvoke <org.jfree.data.general.DatasetUtils: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>($stack104);

        passesRequired = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: int getPassesRequired()>();

        pass = 0;

     label04:
        if pass >= passesRequired goto label08;

        section = 0;

     label05:
        $stack108 = interfaceinvoke keys.<java.util.List: int size()>();

        if section >= $stack108 goto label07;

        $stack111 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        n = interfaceinvoke $stack111.<org.jfree.data.general.PieDataset: java.lang.Number getValue(int)>(section);

        if n == null goto label06;

        value = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack116 = value cmpl 0.0;

        if $stack116 <= 0 goto label06;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>(g2, section, $stack67, state, pass);

     label06:
        section = section + 1;

        goto label05;

     label07:
        pass = pass + 1;

        goto label04;

     label08:
        $stack107 = this.<org.jfree.chart.plot.PiePlot: boolean simpleLabels>;

        if $stack107 == 0 goto label09;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>(g2, keys, totalValue, plotArea, $stack61, state);

        goto label10;

     label09:
        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>(g2, keys, totalValue, plotArea, $stack61, state);

     label10:
        goto label12;

     label11:
        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, plotArea);

     label12:
        return;
    }

    protected void drawItem(java.awt.Graphics2D, int, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState, int)
    {
        org.jfree.chart.plot.PiePlot this;
        int section, currentPass, $stack62, $stack64;
        org.jfree.data.general.PieDataset $stack29, $stack63, $stack65, $stack77, $stack93;
        java.lang.Number n;
        double value, $stack38, $stack39, $stack40, angle, $stack41, $stack42, mep, $stack85, $stack87, $stack89, $stack90, $stack95, $stack108, $stack109, $stack110, angle1, angle2, ep;
        org.jfree.chart.util.Rotation $stack32, $stack33, $stack34, $stack35;
        java.lang.IllegalStateException $stack36;
        org.jfree.chart.plot.PiePlotState state;
        byte $stack43, $stack45;
        java.awt.geom.Rectangle2D $stack46, $stack47, arcBounds, dataArea;
        java.awt.geom.Arc2D$Double $stack49;
        java.awt.Paint paint, outlinePaint, $stack83, $stack92;
        java.awt.Graphics2D g2;
        java.awt.Stroke outlineStroke;
        boolean $stack56;
        org.jfree.chart.plot.PlotRenderingInfo $stack57;
        org.jfree.chart.entity.EntityCollection entities;
        org.jfree.chart.labels.PieToolTipGenerator $stack59, $stack78;
        org.jfree.chart.urls.PieURLGenerator $stack60, $stack66;
        org.jfree.chart.entity.PieSectionEntity $stack61;
        org.jfree.chart.util.ShadowGenerator $stack84;
        float $stack86, $stack88;
        java.lang.Comparable $stack94, shadowArc#7;
        java.awt.Shape shadowArc;
        java.lang.String tip, url;

        this := @this: org.jfree.chart.plot.PiePlot;

        g2 := @parameter0: java.awt.Graphics2D;

        section := @parameter1: int;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        state := @parameter3: org.jfree.chart.plot.PiePlotState;

        currentPass := @parameter4: int;

        $stack29 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        n = interfaceinvoke $stack29.<org.jfree.data.general.PieDataset: java.lang.Number getValue(int)>(section);

        if n != null goto label01;

        return;

     label01:
        value = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack33 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction>;

        $stack32 = <org.jfree.chart.util.Rotation: org.jfree.chart.util.Rotation CLOCKWISE>;

        if $stack33 != $stack32 goto label02;

        angle1 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getLatestAngle()>();

        $stack108 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getTotal()>();

        $stack109 = value / $stack108;

        $stack110 = $stack109 * 360.0;

        angle2 = angle1 - $stack110;

        goto label04;

     label02:
        $stack35 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction>;

        $stack34 = <org.jfree.chart.util.Rotation: org.jfree.chart.util.Rotation ANTICLOCKWISE>;

        if $stack35 != $stack34 goto label03;

        angle1 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getLatestAngle()>();

        $stack38 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getTotal()>();

        $stack39 = value / $stack38;

        $stack40 = $stack39 * 360.0;

        angle2 = angle1 + $stack40;

        goto label04;

     label03:
        $stack36 = new java.lang.IllegalStateException;

        specialinvoke $stack36.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Rotation type not recognised.");

        throw $stack36;

     label04:
        angle = angle2 - angle1;

        $stack41 = staticinvoke <java.lang.Math: double abs(double)>(angle);

        $stack42 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getMinimumArcAngleToDraw()>();

        $stack43 = $stack41 cmpl $stack42;

        if $stack43 <= 0 goto label10;

        ep = 0.0;

        mep = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getMaximumExplodePercent()>();

        $stack45 = mep cmpl 0.0;

        if $stack45 <= 0 goto label05;

        $stack93 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack94 = interfaceinvoke $stack93.<org.jfree.data.general.PieDataset: java.lang.Comparable getKey(int)>(section);

        $stack95 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getExplodePercent(java.lang.Comparable)>($stack94);

        ep = $stack95 / mep;

     label05:
        $stack46 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getPieArea()>();

        $stack47 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getExplodedPieArea()>();

        arcBounds = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double,double)>($stack46, $stack47, angle1, angle, ep);

        $stack49 = new java.awt.geom.Arc2D$Double;

        specialinvoke $stack49.<java.awt.geom.Arc2D$Double: void <init>(java.awt.geom.Rectangle2D,double,double,int)>(arcBounds, angle1, angle, 2);

        if currentPass != 0 goto label06;

        $stack83 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint shadowPaint>;

        if $stack83 == null goto label10;

        $stack84 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack84 != null goto label10;

        $stack85 = this.<org.jfree.chart.plot.PiePlot: double shadowXOffset>;

        $stack86 = (float) $stack85;

        $stack90 = (double) $stack86;

        $stack87 = this.<org.jfree.chart.plot.PiePlot: double shadowYOffset>;

        $stack88 = (float) $stack87;

        $stack89 = (double) $stack88;

        shadowArc = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>($stack49, $stack90, $stack89);

        $stack92 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint shadowPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack92);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(shadowArc);

        goto label10;

     label06:
        if currentPass != 1 goto label10;

        shadowArc#7 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.lang.Comparable getSectionKey(int)>(section);

        paint = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Paint lookupSectionPaint(java.lang.Comparable,org.jfree.chart.plot.PiePlotState)>(shadowArc#7, state);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack49);

        outlinePaint = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable)>(shadowArc#7);

        outlineStroke = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable)>(shadowArc#7);

        $stack56 = this.<org.jfree.chart.plot.PiePlot: boolean sectionOutlinesVisible>;

        if $stack56 == 0 goto label07;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(outlinePaint);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(outlineStroke);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack49);

     label07:
        $stack57 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: org.jfree.chart.plot.PlotRenderingInfo getInfo()>();

        if $stack57 == null goto label10;

        entities = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label10;

        tip = null;

        $stack59 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator>;

        if $stack59 == null goto label08;

        $stack78 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator>;

        $stack77 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        tip = interfaceinvoke $stack78.<org.jfree.chart.labels.PieToolTipGenerator: java.lang.String generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)>($stack77, shadowArc#7);

     label08:
        url = null;

        $stack60 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator>;

        if $stack60 == null goto label09;

        $stack66 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator>;

        $stack65 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack64 = this.<org.jfree.chart.plot.PiePlot: int pieIndex>;

        url = interfaceinvoke $stack66.<org.jfree.chart.urls.PieURLGenerator: java.lang.String generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)>($stack65, shadowArc#7, $stack64);

     label09:
        $stack61 = new org.jfree.chart.entity.PieSectionEntity;

        $stack63 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack62 = this.<org.jfree.chart.plot.PiePlot: int pieIndex>;

        specialinvoke $stack61.<org.jfree.chart.entity.PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>($stack49, $stack63, $stack62, section, shadowArc#7, tip, url);

        interfaceinvoke entities.<org.jfree.chart.entity.EntityCollection: void add(org.jfree.chart.entity.ChartEntity)>($stack61);

     label10:
        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setLatestAngle(double)>(angle2);

        return;
    }

    protected void drawSimpleLabels(java.awt.Graphics2D, java.util.List, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState)
    {
        java.awt.Graphics2D g2;
        java.awt.Composite originalComposite;
        java.awt.AlphaComposite $stack31;
        org.jfree.chart.plot.PiePlot this;
        java.awt.geom.Rectangle2D pieArea, labelsArea, bounds, out, plotArea;
        org.jfree.chart.ui.RectangleInsets $stack32, $stack65;
        java.util.List keys;
        java.util.Iterator iterator;
        java.lang.Object $stack36;
        java.lang.Comparable key;
        org.jfree.data.general.PieDataset $stack37, $stack60;
        java.lang.Number n;
        boolean $stack40, $stack105, $stack35, $stack106, include, $stack102;
        byte $stack41, $stack104;
        double $stack43, $stack45, $stack46, $stack47, $stack48, totalValue, $stack49, $stack50, mid, $stack52, $stack53, $stack54, $stack56, $stack58, $stack67, $stack68, $stack69, $stack70, $stack71, $stack72, $stack98, $stack99, runningTotal, v;
        org.jfree.chart.util.Rotation $stack44;
        java.awt.geom.Arc2D$Double $stack51;
        java.awt.geom.Point2D $stack55, $stack57;
        int x, y;
        org.jfree.chart.labels.PieSectionLabelGenerator myLabelGenerator;
        java.lang.String label;
        java.awt.Font $stack62, $stack78;
        java.awt.FontMetrics fm;
        java.awt.Shape bg, shadow;
        java.awt.Paint $stack74, $stack76, $stack92, $stack94, $stack101, $stack75, $stack77;
        java.awt.Stroke $stack83, $stack93;
        org.jfree.chart.util.ShadowGenerator $stack96;
        org.jfree.chart.plot.PiePlotState state;
        float $stack81, $stack80;
        org.jfree.chart.ui.TextAnchor $stack79;

        this := @this: org.jfree.chart.plot.PiePlot;

        g2 := @parameter0: java.awt.Graphics2D;

        keys := @parameter1: java.util.List;

        totalValue := @parameter2: double;

        plotArea := @parameter3: java.awt.geom.Rectangle2D;

        pieArea := @parameter4: java.awt.geom.Rectangle2D;

        state := @parameter5: org.jfree.chart.plot.PiePlotState;

        originalComposite = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $stack31 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, 1.0F);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($stack31);

        $stack32 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets simpleLabelOffset>;

        labelsArea = virtualinvoke $stack32.<org.jfree.chart.ui.RectangleInsets: java.awt.geom.Rectangle2D createInsetRectangle(java.awt.geom.Rectangle2D)>(pieArea);

        runningTotal = 0.0;

        iterator = interfaceinvoke keys.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $stack35 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack35 == 0 goto label16;

        $stack36 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack36;

        v = 0.0;

        $stack37 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset getDataset()>();

        n = interfaceinvoke $stack37.<org.jfree.data.general.PieDataset: java.lang.Number getValue(java.lang.Comparable)>(key);

        if n != null goto label04;

        $stack105 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: boolean getIgnoreNullValues()>();

        if $stack105 != 0 goto label02;

        $stack106 = 1;

        goto label03;

     label02:
        $stack106 = 0;

     label03:
        include = $stack106;

        goto label09;

     label04:
        v = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack40 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: boolean getIgnoreZeroValues()>();

        if $stack40 == 0 goto label06;

        $stack104 = v cmpl 0.0;

        if $stack104 <= 0 goto label05;

        $stack102 = 1;

        goto label08;

     label05:
        $stack102 = 0;

        goto label08;

     label06:
        $stack41 = v cmpl 0.0;

        if $stack41 < 0 goto label07;

        $stack102 = 1;

        goto label08;

     label07:
        $stack102 = 0;

     label08:
        include = $stack102;

     label09:
        if include == 0 goto label15;

        runningTotal = runningTotal + v;

        $stack43 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getStartAngle()>();

        $stack44 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation getDirection()>();

        $stack45 = virtualinvoke $stack44.<org.jfree.chart.util.Rotation: double getFactor()>();

        $stack46 = v / 2.0;

        $stack47 = runningTotal - $stack46;

        $stack48 = $stack47 * 360.0;

        $stack49 = $stack45 * $stack48;

        $stack50 = $stack49 / totalValue;

        mid = $stack43 + $stack50;

        $stack51 = new java.awt.geom.Arc2D$Double;

        $stack52 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getStartAngle()>();

        $stack53 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getStartAngle()>();

        $stack54 = mid - $stack53;

        specialinvoke $stack51.<java.awt.geom.Arc2D$Double: void <init>(java.awt.geom.Rectangle2D,double,double,int)>(labelsArea, $stack52, $stack54, 0);

        $stack55 = virtualinvoke $stack51.<java.awt.geom.Arc2D: java.awt.geom.Point2D getEndPoint()>();

        $stack56 = virtualinvoke $stack55.<java.awt.geom.Point2D: double getX()>();

        x = (int) $stack56;

        $stack57 = virtualinvoke $stack51.<java.awt.geom.Arc2D: java.awt.geom.Point2D getEndPoint()>();

        $stack58 = virtualinvoke $stack57.<java.awt.geom.Point2D: double getY()>();

        y = (int) $stack58;

        myLabelGenerator = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator()>();

        if myLabelGenerator != null goto label10;

        goto label01;

     label10:
        $stack60 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        label = interfaceinvoke myLabelGenerator.<org.jfree.chart.labels.PieSectionLabelGenerator: java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)>($stack60, key);

        if label != null goto label11;

        goto label01;

     label11:
        $stack62 = this.<org.jfree.chart.plot.PiePlot: java.awt.Font labelFont>;

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack62);

        fm = virtualinvoke g2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics()>();

        bounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>(label, g2, fm);

        $stack65 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets labelPadding>;

        out = virtualinvoke $stack65.<org.jfree.chart.ui.RectangleInsets: java.awt.geom.Rectangle2D createOutsetRectangle(java.awt.geom.Rectangle2D)>(bounds);

        $stack67 = (double) x;

        $stack68 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack69 = $stack67 - $stack68;

        $stack70 = (double) y;

        $stack71 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getCenterY()>();

        $stack72 = $stack70 - $stack71;

        bg = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(out, $stack69, $stack72);

        $stack74 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint>;

        if $stack74 == null goto label12;

        $stack96 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack96 != null goto label12;

        $stack99 = this.<org.jfree.chart.plot.PiePlot: double shadowXOffset>;

        $stack98 = this.<org.jfree.chart.plot.PiePlot: double shadowYOffset>;

        shadow = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(bg, $stack99, $stack98);

        $stack101 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack101);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(shadow);

     label12:
        $stack75 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint>;

        if $stack75 == null goto label13;

        $stack94 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack94);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(bg);

     label13:
        $stack76 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint>;

        if $stack76 == null goto label14;

        $stack83 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke>;

        if $stack83 == null goto label14;

        $stack92 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack92);

        $stack93 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack93);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(bg);

     label14:
        $stack77 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack77);

        $stack78 = this.<org.jfree.chart.plot.PiePlot: java.awt.Font labelFont>;

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack78);

        $stack81 = (float) x;

        $stack80 = (float) y;

        $stack79 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER>;

        staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack81, $stack80, $stack79);

     label15:
        goto label01;

     label16:
        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(originalComposite);

        return;
    }

    protected void drawLabels(java.awt.Graphics2D, java.util.List, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState)
    {
        java.awt.Graphics2D g2;
        java.awt.Composite originalComposite;
        java.awt.AlphaComposite $stack22;
        org.jfree.data.DefaultKeyedValues $stack23, $stack24;
        java.util.List keys;
        java.util.Iterator iterator;
        boolean $stack26, $stack42, $stack61, $stack62, include, $stack58;
        org.jfree.chart.plot.PiePlot this;
        java.awt.Font $stack27;
        java.awt.geom.Rectangle2D plotArea, linkArea;
        double $stack29, $stack30, $stack31, $stack32, $stack34, $stack46, $stack47, $stack48, $stack49, $stack50, totalValue, $stack51, $stack52, mid, $stack53, $stack54, runningTotal, v, key#12, n#14;
        org.jfree.chart.ui.RectangleInsets $stack33;
        float labelWidth;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack35;
        org.jfree.chart.plot.PiePlotState state;
        java.lang.Object $stack38;
        org.jfree.data.general.PieDataset $stack39;
        byte $stack43, $stack55, $stack60;
        org.jfree.chart.util.Rotation $stack45;
        java.lang.Double $stack56, $stack57;
        java.lang.Comparable key;
        java.lang.Number n;

        this := @this: org.jfree.chart.plot.PiePlot;

        g2 := @parameter0: java.awt.Graphics2D;

        keys := @parameter1: java.util.List;

        totalValue := @parameter2: double;

        plotArea := @parameter3: java.awt.geom.Rectangle2D;

        linkArea := @parameter4: java.awt.geom.Rectangle2D;

        state := @parameter5: org.jfree.chart.plot.PiePlotState;

        originalComposite = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $stack22 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, 1.0F);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($stack22);

        $stack23 = new org.jfree.data.DefaultKeyedValues;

        specialinvoke $stack23.<org.jfree.data.DefaultKeyedValues: void <init>()>();

        $stack24 = new org.jfree.data.DefaultKeyedValues;

        specialinvoke $stack24.<org.jfree.data.DefaultKeyedValues: void <init>()>();

        runningTotal = 0.0;

        iterator = interfaceinvoke keys.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $stack26 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label12;

        $stack38 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack38;

        v = 0.0;

        $stack39 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        n = interfaceinvoke $stack39.<org.jfree.data.general.PieDataset: java.lang.Number getValue(java.lang.Comparable)>(key);

        if n != null goto label04;

        $stack61 = this.<org.jfree.chart.plot.PiePlot: boolean ignoreNullValues>;

        if $stack61 != 0 goto label02;

        $stack62 = 1;

        goto label03;

     label02:
        $stack62 = 0;

     label03:
        include = $stack62;

        goto label09;

     label04:
        v = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack42 = this.<org.jfree.chart.plot.PiePlot: boolean ignoreZeroValues>;

        if $stack42 == 0 goto label06;

        $stack60 = v cmpl 0.0;

        if $stack60 <= 0 goto label05;

        $stack58 = 1;

        goto label08;

     label05:
        $stack58 = 0;

        goto label08;

     label06:
        $stack43 = v cmpl 0.0;

        if $stack43 < 0 goto label07;

        $stack58 = 1;

        goto label08;

     label07:
        $stack58 = 0;

     label08:
        include = $stack58;

     label09:
        if include == 0 goto label11;

        runningTotal = runningTotal + v;

        $stack46 = this.<org.jfree.chart.plot.PiePlot: double startAngle>;

        $stack45 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction>;

        $stack47 = virtualinvoke $stack45.<org.jfree.chart.util.Rotation: double getFactor()>();

        $stack48 = v / 2.0;

        $stack49 = runningTotal - $stack48;

        $stack50 = $stack49 * 360.0;

        $stack51 = $stack47 * $stack50;

        $stack52 = $stack51 / totalValue;

        mid = $stack46 + $stack52;

        $stack53 = staticinvoke <java.lang.Math: double toRadians(double)>(mid);

        $stack54 = staticinvoke <java.lang.Math: double cos(double)>($stack53);

        $stack55 = $stack54 cmpg 0.0;

        if $stack55 >= 0 goto label10;

        $stack57 = new java.lang.Double;

        specialinvoke $stack57.<java.lang.Double: void <init>(double)>(mid);

        virtualinvoke $stack23.<org.jfree.data.DefaultKeyedValues: void addValue(java.lang.Comparable,java.lang.Number)>(key, $stack57);

        goto label11;

     label10:
        $stack56 = new java.lang.Double;

        specialinvoke $stack56.<java.lang.Double: void <init>(double)>(mid);

        virtualinvoke $stack24.<org.jfree.data.DefaultKeyedValues: void addValue(java.lang.Comparable,java.lang.Number)>(key, $stack56);

     label11:
        goto label01;

     label12:
        $stack27 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Font getLabelFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack27);

        key#12 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getX()>();

        $stack29 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack30 = this.<org.jfree.chart.plot.PiePlot: double labelGap>;

        v = $stack29 * $stack30;

        $stack31 = virtualinvoke linkArea.<java.awt.geom.Rectangle2D: double getX()>();

        $stack32 = $stack31 - v;

        n#14 = $stack32 - key#12;

        $stack33 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets labelPadding>;

        $stack34 = virtualinvoke $stack33.<org.jfree.chart.ui.RectangleInsets: double trimWidth(double)>(n#14);

        labelWidth = (float) $stack34;

        $stack35 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator>;

        if $stack35 == null goto label13;

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>($stack23, g2, plotArea, linkArea, labelWidth, state);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>($stack24, g2, plotArea, linkArea, labelWidth, state);

     label13:
        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(originalComposite);

        return;
    }

    protected void drawLeftLabels(org.jfree.data.KeyedValues, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, float, org.jfree.chart.plot.PiePlotState)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.plot.AbstractPieLabelDistributor $stack21, $stack29, $stack34, $stack36, $stack64;
        java.awt.geom.Rectangle2D plotArea, $stack24, linkArea;
        double $stack22, $stack23, lGap, $stack25, verticalLinkRadius, $stack28, $stack30, $stack31, $stack32, $stack33, $stack57, $stack59, $stack60, $stack61, baseY, hh, $stack66, $stack67, $stack68, $stack69, $stack70, $stack71, $stack73, $stack74, $stack76, $stack77, theta, i#4, block#5;
        org.jfree.chart.plot.PiePlotState state;
        org.jfree.data.KeyedValues leftKeys;
        int $stack26, $stack35, i, theta#6;
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.PieLabelRecord $stack37, $stack63;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack40;
        org.jfree.data.general.PieDataset $stack41;
        java.lang.Comparable $stack42, $stack65, $stack75;
        java.lang.String label;
        float maxLabelWidth;
        org.jfree.chart.text.G2TextMeasurer $stack46;
        java.awt.Font $stack47;
        java.awt.Paint $stack48, $stack51, $stack52, $stack78;
        org.jfree.chart.text.TextBox $stack50;
        java.awt.Stroke $stack53;
        org.jfree.chart.util.ShadowGenerator $stack54;
        org.jfree.chart.ui.RectangleInsets $stack55;
        java.lang.Number $stack56;
        org.jfree.chart.text.TextBlock block;

        this := @this: org.jfree.chart.plot.PiePlot;

        leftKeys := @parameter0: org.jfree.data.KeyedValues;

        g2 := @parameter1: java.awt.Graphics2D;

        plotArea := @parameter2: java.awt.geom.Rectangle2D;

        linkArea := @parameter3: java.awt.geom.Rectangle2D;

        maxLabelWidth := @parameter4: float;

        state := @parameter5: org.jfree.chart.plot.PiePlotState;

        $stack21 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        virtualinvoke $stack21.<org.jfree.chart.plot.AbstractPieLabelDistributor: void clear()>();

        $stack22 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack23 = this.<org.jfree.chart.plot.PiePlot: double labelGap>;

        lGap = $stack22 * $stack23;

        $stack24 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getLinkArea()>();

        $stack25 = virtualinvoke $stack24.<java.awt.geom.Rectangle2D: double getHeight()>();

        verticalLinkRadius = $stack25 / 2.0;

        i = 0;

     label1:
        $stack26 = interfaceinvoke leftKeys.<org.jfree.data.KeyedValues: int getItemCount()>();

        if i >= $stack26 goto label5;

        $stack40 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator>;

        $stack41 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack42 = interfaceinvoke leftKeys.<org.jfree.data.KeyedValues: java.lang.Comparable getKey(int)>(i);

        label = interfaceinvoke $stack40.<org.jfree.chart.labels.PieSectionLabelGenerator: java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)>($stack41, $stack42);

        if label == null goto label4;

        $stack47 = this.<org.jfree.chart.plot.PiePlot: java.awt.Font labelFont>;

        $stack48 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint>;

        $stack46 = new org.jfree.chart.text.G2TextMeasurer;

        specialinvoke $stack46.<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>(g2);

        block = staticinvoke <org.jfree.chart.text.TextUtils: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>(label, $stack47, $stack48, maxLabelWidth, $stack46);

        $stack50 = new org.jfree.chart.text.TextBox;

        specialinvoke $stack50.<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>(block);

        $stack51 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint>;

        virtualinvoke $stack50.<org.jfree.chart.text.TextBox: void setBackgroundPaint(java.awt.Paint)>($stack51);

        $stack52 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint>;

        virtualinvoke $stack50.<org.jfree.chart.text.TextBox: void setOutlinePaint(java.awt.Paint)>($stack52);

        $stack53 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke>;

        virtualinvoke $stack50.<org.jfree.chart.text.TextBox: void setOutlineStroke(java.awt.Stroke)>($stack53);

        $stack54 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack54 != null goto label2;

        $stack78 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint>;

        virtualinvoke $stack50.<org.jfree.chart.text.TextBox: void setShadowPaint(java.awt.Paint)>($stack78);

        goto label3;

     label2:
        virtualinvoke $stack50.<org.jfree.chart.text.TextBox: void setShadowPaint(java.awt.Paint)>(null);

     label3:
        $stack55 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets labelPadding>;

        virtualinvoke $stack50.<org.jfree.chart.text.TextBox: void setInteriorGap(org.jfree.chart.ui.RectangleInsets)>($stack55);

        $stack56 = interfaceinvoke leftKeys.<org.jfree.data.KeyedValues: java.lang.Number getValue(int)>(i);

        $stack57 = virtualinvoke $stack56.<java.lang.Number: double doubleValue()>();

        theta = staticinvoke <java.lang.Math: double toRadians(double)>($stack57);

        $stack59 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterY()>();

        $stack60 = staticinvoke <java.lang.Math: double sin(double)>(theta);

        $stack61 = $stack60 * verticalLinkRadius;

        baseY = $stack59 - $stack61;

        hh = virtualinvoke $stack50.<org.jfree.chart.text.TextBox: double getHeight(java.awt.Graphics2D)>(g2);

        $stack64 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        $stack63 = new org.jfree.chart.plot.PieLabelRecord;

        $stack65 = interfaceinvoke leftKeys.<org.jfree.data.KeyedValues: java.lang.Comparable getKey(int)>(i);

        $stack66 = lGap / 2.0;

        $stack67 = lGap / 2.0;

        $stack68 = staticinvoke <java.lang.Math: double cos(double)>(theta);

        $stack69 = neg $stack68;

        $stack70 = $stack67 * $stack69;

        $stack71 = $stack66 + $stack70;

        $stack73 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getLabelLinkDepth()>();

        $stack74 = 1.0 - $stack73;

        $stack75 = interfaceinvoke leftKeys.<org.jfree.data.KeyedValues: java.lang.Comparable getKey(int)>(i);

        $stack76 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getExplodePercent(java.lang.Comparable)>($stack75);

        $stack77 = $stack74 + $stack76;

        specialinvoke $stack63.<org.jfree.chart.plot.PieLabelRecord: void <init>(java.lang.Comparable,double,double,org.jfree.chart.text.TextBox,double,double,double)>($stack65, theta, baseY, $stack50, hh, $stack71, $stack77);

        virtualinvoke $stack64.<org.jfree.chart.plot.AbstractPieLabelDistributor: void addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)>($stack63);

     label4:
        i = i + 1;

        goto label1;

     label5:
        i#4 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack28 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getInteriorGap()>();

        block#5 = i#4 * $stack28;

        $stack29 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        $stack30 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack33 = $stack30 + block#5;

        $stack31 = 2.0 * block#5;

        $stack32 = i#4 - $stack31;

        virtualinvoke $stack29.<org.jfree.chart.plot.AbstractPieLabelDistributor: void distributeLabels(double,double)>($stack33, $stack32);

        theta#6 = 0;

     label6:
        $stack34 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        $stack35 = virtualinvoke $stack34.<org.jfree.chart.plot.AbstractPieLabelDistributor: int getItemCount()>();

        if theta#6 >= $stack35 goto label7;

        $stack36 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        $stack37 = virtualinvoke $stack36.<org.jfree.chart.plot.AbstractPieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(theta#6);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawLeftLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)>(g2, state, $stack37);

        theta#6 = theta#6 + 1;

        goto label6;

     label7:
        return;
    }

    protected void drawRightLabels(org.jfree.data.KeyedValues, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, float, org.jfree.chart.plot.PiePlotState)
    {
        org.jfree.chart.plot.PiePlot this;
        org.jfree.chart.plot.AbstractPieLabelDistributor $stack21, $stack28, $stack33, $stack35, $stack63;
        java.awt.geom.Rectangle2D plotArea, $stack24, linkArea;
        double $stack22, $stack23, lGap, $stack25, verticalLinkRadius, $stack29, $stack30, $stack31, $stack32, $stack56, $stack58, $stack59, $stack60, baseY, hh, $stack65, $stack66, $stack67, $stack68, $stack69, $stack71, $stack72, $stack74, $stack75, theta, i#4;
        org.jfree.chart.plot.PiePlotState state;
        org.jfree.data.KeyedValues keys;
        int $stack26, $stack34, i, theta#6;
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.PieLabelRecord $stack36, $stack62;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack39;
        org.jfree.data.general.PieDataset $stack40;
        java.lang.Comparable $stack41, $stack64, $stack73;
        java.lang.String label;
        float maxLabelWidth;
        org.jfree.chart.text.G2TextMeasurer $stack45;
        java.awt.Font $stack46;
        java.awt.Paint $stack47, $stack50, $stack51, $stack76;
        org.jfree.chart.text.TextBox $stack49;
        java.awt.Stroke $stack52;
        org.jfree.chart.util.ShadowGenerator $stack53;
        org.jfree.chart.ui.RectangleInsets $stack54;
        java.lang.Number $stack55;
        org.jfree.chart.text.TextBlock block;

        this := @this: org.jfree.chart.plot.PiePlot;

        keys := @parameter0: org.jfree.data.KeyedValues;

        g2 := @parameter1: java.awt.Graphics2D;

        plotArea := @parameter2: java.awt.geom.Rectangle2D;

        linkArea := @parameter3: java.awt.geom.Rectangle2D;

        maxLabelWidth := @parameter4: float;

        state := @parameter5: org.jfree.chart.plot.PiePlotState;

        $stack21 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        virtualinvoke $stack21.<org.jfree.chart.plot.AbstractPieLabelDistributor: void clear()>();

        $stack22 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack23 = this.<org.jfree.chart.plot.PiePlot: double labelGap>;

        lGap = $stack22 * $stack23;

        $stack24 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getLinkArea()>();

        $stack25 = virtualinvoke $stack24.<java.awt.geom.Rectangle2D: double getHeight()>();

        verticalLinkRadius = $stack25 / 2.0;

        i = 0;

     label1:
        $stack26 = interfaceinvoke keys.<org.jfree.data.KeyedValues: int getItemCount()>();

        if i >= $stack26 goto label5;

        $stack39 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator>;

        $stack40 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack41 = interfaceinvoke keys.<org.jfree.data.KeyedValues: java.lang.Comparable getKey(int)>(i);

        label = interfaceinvoke $stack39.<org.jfree.chart.labels.PieSectionLabelGenerator: java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)>($stack40, $stack41);

        if label == null goto label4;

        $stack46 = this.<org.jfree.chart.plot.PiePlot: java.awt.Font labelFont>;

        $stack47 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint>;

        $stack45 = new org.jfree.chart.text.G2TextMeasurer;

        specialinvoke $stack45.<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>(g2);

        block = staticinvoke <org.jfree.chart.text.TextUtils: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>(label, $stack46, $stack47, maxLabelWidth, $stack45);

        $stack49 = new org.jfree.chart.text.TextBox;

        specialinvoke $stack49.<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>(block);

        $stack50 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint>;

        virtualinvoke $stack49.<org.jfree.chart.text.TextBox: void setBackgroundPaint(java.awt.Paint)>($stack50);

        $stack51 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint>;

        virtualinvoke $stack49.<org.jfree.chart.text.TextBox: void setOutlinePaint(java.awt.Paint)>($stack51);

        $stack52 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke>;

        virtualinvoke $stack49.<org.jfree.chart.text.TextBox: void setOutlineStroke(java.awt.Stroke)>($stack52);

        $stack53 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        if $stack53 != null goto label2;

        $stack76 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint>;

        virtualinvoke $stack49.<org.jfree.chart.text.TextBox: void setShadowPaint(java.awt.Paint)>($stack76);

        goto label3;

     label2:
        virtualinvoke $stack49.<org.jfree.chart.text.TextBox: void setShadowPaint(java.awt.Paint)>(null);

     label3:
        $stack54 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets labelPadding>;

        virtualinvoke $stack49.<org.jfree.chart.text.TextBox: void setInteriorGap(org.jfree.chart.ui.RectangleInsets)>($stack54);

        $stack55 = interfaceinvoke keys.<org.jfree.data.KeyedValues: java.lang.Number getValue(int)>(i);

        $stack56 = virtualinvoke $stack55.<java.lang.Number: double doubleValue()>();

        theta = staticinvoke <java.lang.Math: double toRadians(double)>($stack56);

        $stack58 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterY()>();

        $stack59 = staticinvoke <java.lang.Math: double sin(double)>(theta);

        $stack60 = $stack59 * verticalLinkRadius;

        baseY = $stack58 - $stack60;

        hh = virtualinvoke $stack49.<org.jfree.chart.text.TextBox: double getHeight(java.awt.Graphics2D)>(g2);

        $stack63 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        $stack62 = new org.jfree.chart.plot.PieLabelRecord;

        $stack64 = interfaceinvoke keys.<org.jfree.data.KeyedValues: java.lang.Comparable getKey(int)>(i);

        $stack65 = lGap / 2.0;

        $stack66 = lGap / 2.0;

        $stack67 = staticinvoke <java.lang.Math: double cos(double)>(theta);

        $stack68 = $stack66 * $stack67;

        $stack69 = $stack65 + $stack68;

        $stack71 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getLabelLinkDepth()>();

        $stack72 = 1.0 - $stack71;

        $stack73 = interfaceinvoke keys.<org.jfree.data.KeyedValues: java.lang.Comparable getKey(int)>(i);

        $stack74 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getExplodePercent(java.lang.Comparable)>($stack73);

        $stack75 = $stack72 + $stack74;

        specialinvoke $stack62.<org.jfree.chart.plot.PieLabelRecord: void <init>(java.lang.Comparable,double,double,org.jfree.chart.text.TextBox,double,double,double)>($stack64, theta, baseY, $stack49, hh, $stack69, $stack75);

        virtualinvoke $stack63.<org.jfree.chart.plot.AbstractPieLabelDistributor: void addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)>($stack62);

     label4:
        i = i + 1;

        goto label1;

     label5:
        i#4 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack28 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        $stack29 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack32 = $stack29 + 0.0;

        $stack30 = 2.0 * 0.0;

        $stack31 = i#4 - $stack30;

        virtualinvoke $stack28.<org.jfree.chart.plot.AbstractPieLabelDistributor: void distributeLabels(double,double)>($stack32, $stack31);

        theta#6 = 0;

     label6:
        $stack33 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        $stack34 = virtualinvoke $stack33.<org.jfree.chart.plot.AbstractPieLabelDistributor: int getItemCount()>();

        if theta#6 >= $stack34 goto label7;

        $stack35 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.AbstractPieLabelDistributor labelDistributor>;

        $stack36 = virtualinvoke $stack35.<org.jfree.chart.plot.AbstractPieLabelDistributor: org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)>(theta#6);

        virtualinvoke this.<org.jfree.chart.plot.PiePlot: void drawRightLabel(java.awt.Graphics2D,org.jfree.chart.plot.PiePlotState,org.jfree.chart.plot.PieLabelRecord)>(g2, state, $stack36);

        theta#6 = theta#6 + 1;

        goto label6;

     label7:
        return;
    }

    public org.jfree.chart.LegendItemCollection getLegendItems()
    {
        org.jfree.chart.LegendItemCollection $stack17;
        org.jfree.chart.plot.PiePlot this;
        org.jfree.data.general.PieDataset $stack18, $stack19, $stack25, $stack31, $stack47, $stack48, $stack51, $stack77;
        java.util.List keys;
        java.awt.Shape shape;
        java.util.Iterator iterator;
        boolean $stack23, $stack84, $stack86, $stack87, include, $stack85, $stack82;
        java.lang.Object $stack24;
        java.lang.Comparable key;
        java.lang.Number n;
        byte $stack28, $stack29;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack32, $stack34, $stack78;
        org.jfree.chart.urls.PieURLGenerator $stack35, $stack52;
        java.awt.Paint paint, outlinePaint;
        java.awt.Stroke outlineStroke;
        org.jfree.chart.LegendItem $stack39;
        java.awt.geom.Line2D$Float $stack40;
        java.awt.BasicStroke $stack45;
        java.awt.Color $stack46;
        int $stack49, $stack50;
        double v;
        java.lang.String v#10, toolTipText, urlText;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack17 = new org.jfree.chart.LegendItemCollection;

        specialinvoke $stack17.<org.jfree.chart.LegendItemCollection: void <init>()>();

        $stack18 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        if $stack18 != null goto label01;

        return $stack17;

     label01:
        $stack19 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        keys = interfaceinvoke $stack19.<org.jfree.data.general.PieDataset: java.util.List getKeys()>();

        shape = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Shape getLegendItemShape()>();

        iterator = interfaceinvoke keys.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack23 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label16;

        $stack24 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack24;

        $stack25 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        n = interfaceinvoke $stack25.<org.jfree.data.general.PieDataset: java.lang.Number getValue(java.lang.Comparable)>(key);

        if n != null goto label05;

        $stack86 = this.<org.jfree.chart.plot.PiePlot: boolean ignoreNullValues>;

        if $stack86 != 0 goto label03;

        $stack87 = 1;

        goto label04;

     label03:
        $stack87 = 0;

     label04:
        include = $stack87;

        goto label11;

     label05:
        v = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack28 = v cmpl 0.0;

        if $stack28 != 0 goto label08;

        $stack84 = this.<org.jfree.chart.plot.PiePlot: boolean ignoreZeroValues>;

        if $stack84 != 0 goto label06;

        $stack85 = 1;

        goto label07;

     label06:
        $stack85 = 0;

     label07:
        include = $stack85;

        goto label11;

     label08:
        $stack29 = v cmpl 0.0;

        if $stack29 <= 0 goto label09;

        $stack82 = 1;

        goto label10;

     label09:
        $stack82 = 0;

     label10:
        include = $stack82;

     label11:
        if include == 0 goto label15;

        $stack32 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator>;

        $stack31 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        v#10 = interfaceinvoke $stack32.<org.jfree.chart.labels.PieSectionLabelGenerator: java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)>($stack31, key);

        if v#10 == null goto label14;

        toolTipText = null;

        $stack34 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator>;

        if $stack34 == null goto label12;

        $stack78 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator>;

        $stack77 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        toolTipText = interfaceinvoke $stack78.<org.jfree.chart.labels.PieSectionLabelGenerator: java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)>($stack77, key);

     label12:
        urlText = null;

        $stack35 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator>;

        if $stack35 == null goto label13;

        $stack52 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator>;

        $stack51 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack50 = this.<org.jfree.chart.plot.PiePlot: int pieIndex>;

        urlText = interfaceinvoke $stack52.<org.jfree.chart.urls.PieURLGenerator: java.lang.String generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)>($stack51, key, $stack50);

     label13:
        paint = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Paint lookupSectionPaint(java.lang.Comparable)>(key);

        outlinePaint = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable)>(key);

        outlineStroke = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable)>(key);

        $stack39 = new org.jfree.chart.LegendItem;

        $stack40 = new java.awt.geom.Line2D$Float;

        specialinvoke $stack40.<java.awt.geom.Line2D$Float: void <init>()>();

        $stack45 = new java.awt.BasicStroke;

        specialinvoke $stack45.<java.awt.BasicStroke: void <init>()>();

        $stack46 = <java.awt.Color: java.awt.Color BLACK>;

        specialinvoke $stack39.<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>(v#10, v#10, toolTipText, urlText, 1, shape, 1, paint, 1, outlinePaint, outlineStroke, 0, $stack40, $stack45, $stack46);

        $stack47 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset getDataset()>();

        virtualinvoke $stack39.<org.jfree.chart.LegendItem: void setDataset(org.jfree.data.general.Dataset)>($stack47);

        $stack48 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        $stack49 = interfaceinvoke $stack48.<org.jfree.data.general.PieDataset: int getIndex(java.lang.Comparable)>(key);

        virtualinvoke $stack39.<org.jfree.chart.LegendItem: void setSeriesIndex(int)>($stack49);

        virtualinvoke $stack39.<org.jfree.chart.LegendItem: void setSeriesKey(java.lang.Comparable)>(key);

        virtualinvoke $stack17.<org.jfree.chart.LegendItemCollection: void add(org.jfree.chart.LegendItem)>($stack39);

     label14:
        goto label15;

     label15:
        goto label02;

     label16:
        return $stack17;
    }

    public java.lang.String getPlotType()
    {
        java.util.ResourceBundle $stack1;
        java.lang.String $stack2;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack1 = <org.jfree.chart.plot.PiePlot: java.util.ResourceBundle localizationResources>;

        $stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Pie_Plot");

        return $stack2;
    }

    protected java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, double, double, double)
    {
        double explodePercent, angle, extent, $stack19, $stack22, $stack24, $stack25, $stack26, deltaX, $stack27, $stack28, $stack29, deltaY, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36;
        byte $stack17;
        java.awt.geom.Arc2D$Double $stack18, $stack21;
        java.awt.geom.Rectangle2D unexploded, exploded;
        java.awt.geom.Point2D point1, point2;
        java.awt.geom.Rectangle2D$Double $stack30;
        org.jfree.chart.plot.PiePlot this;

        this := @this: org.jfree.chart.plot.PiePlot;

        unexploded := @parameter0: java.awt.geom.Rectangle2D;

        exploded := @parameter1: java.awt.geom.Rectangle2D;

        angle := @parameter2: double;

        extent := @parameter3: double;

        explodePercent := @parameter4: double;

        $stack17 = explodePercent cmpl 0.0;

        if $stack17 != 0 goto label1;

        return unexploded;

     label1:
        $stack18 = new java.awt.geom.Arc2D$Double;

        $stack19 = extent / 2.0;

        specialinvoke $stack18.<java.awt.geom.Arc2D$Double: void <init>(java.awt.geom.Rectangle2D,double,double,int)>(unexploded, angle, $stack19, 0);

        point1 = virtualinvoke $stack18.<java.awt.geom.Arc2D: java.awt.geom.Point2D getEndPoint()>();

        $stack21 = new java.awt.geom.Arc2D$Double;

        $stack22 = extent / 2.0;

        specialinvoke $stack21.<java.awt.geom.Arc2D$Double: void <init>(java.awt.geom.Rectangle2D,double,double,int)>(exploded, angle, $stack22, 0);

        point2 = virtualinvoke $stack21.<java.awt.geom.Arc2D$Double: java.awt.geom.Point2D getEndPoint()>();

        $stack24 = virtualinvoke point1.<java.awt.geom.Point2D: double getX()>();

        $stack25 = virtualinvoke point2.<java.awt.geom.Point2D: double getX()>();

        $stack26 = $stack24 - $stack25;

        deltaX = $stack26 * explodePercent;

        $stack27 = virtualinvoke point1.<java.awt.geom.Point2D: double getY()>();

        $stack28 = virtualinvoke point2.<java.awt.geom.Point2D: double getY()>();

        $stack29 = $stack27 - $stack28;

        deltaY = $stack29 * explodePercent;

        $stack30 = new java.awt.geom.Rectangle2D$Double;

        $stack31 = virtualinvoke unexploded.<java.awt.geom.Rectangle2D: double getX()>();

        $stack32 = $stack31 - deltaX;

        $stack33 = virtualinvoke unexploded.<java.awt.geom.Rectangle2D: double getY()>();

        $stack34 = $stack33 - deltaY;

        $stack35 = virtualinvoke unexploded.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack36 = virtualinvoke unexploded.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack30.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack32, $stack34, $stack35, $stack36);

        return $stack30;
    }

    protected void drawLeftLabel(java.awt.Graphics2D, org.jfree.chart.plot.PiePlotState, org.jfree.chart.plot.PieLabelRecord)
    {
        org.jfree.chart.plot.PiePlotState state;
        java.awt.geom.Rectangle2D $stack24, $stack48, $stack54;
        double anchorX, $stack26, targetX, targetY, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, linkX, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, linkY, $stack46, $stack47, $stack49, $stack50, $stack51, elbowX, $stack52, $stack53, $stack55, $stack56, $stack57, elbowY, theta;
        org.jfree.chart.plot.PieLabelRecord record;
        org.jfree.chart.plot.PiePlot this;
        boolean $stack28, $stack62, $stack64, $stack66;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack58;
        java.awt.Stroke $stack59;
        org.jfree.chart.plot.PieLabelLinkStyle style, $stack61, $stack63, $stack65;
        java.awt.geom.CubicCurve2D$Float $stack72;
        java.awt.geom.QuadCurve2D$Float $stack73;
        java.awt.geom.Line2D$Double $stack74, $stack75, $stack76, $stack77;
        org.jfree.chart.text.TextBox theta#12;
        float $stack32, $stack31;
        org.jfree.chart.ui.RectangleAnchor $stack30;

        this := @this: org.jfree.chart.plot.PiePlot;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.plot.PiePlotState;

        record := @parameter2: org.jfree.chart.plot.PieLabelRecord;

        $stack24 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getLinkArea()>();

        anchorX = virtualinvoke $stack24.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack26 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getGap()>();

        targetX = anchorX - $stack26;

        targetY = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getAllocatedY()>();

        $stack28 = this.<org.jfree.chart.plot.PiePlot: boolean labelLinksVisible>;

        if $stack28 == 0 goto label3;

        theta = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getAngle()>();

        $stack34 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterX()>();

        $stack35 = staticinvoke <java.lang.Math: double cos(double)>(theta);

        $stack36 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieWRadius()>();

        $stack37 = $stack35 * $stack36;

        $stack38 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getLinkPercent()>();

        $stack39 = $stack37 * $stack38;

        linkX = $stack34 + $stack39;

        $stack40 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterY()>();

        $stack41 = staticinvoke <java.lang.Math: double sin(double)>(theta);

        $stack42 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieHRadius()>();

        $stack43 = $stack41 * $stack42;

        $stack44 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getLinkPercent()>();

        $stack45 = $stack43 * $stack44;

        linkY = $stack40 - $stack45;

        $stack46 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterX()>();

        $stack47 = staticinvoke <java.lang.Math: double cos(double)>(theta);

        $stack48 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getLinkArea()>();

        $stack49 = virtualinvoke $stack48.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack50 = $stack47 * $stack49;

        $stack51 = $stack50 / 2.0;

        elbowX = $stack46 + $stack51;

        $stack52 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterY()>();

        $stack53 = staticinvoke <java.lang.Math: double sin(double)>(theta);

        $stack54 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getLinkArea()>();

        $stack55 = virtualinvoke $stack54.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack56 = $stack53 * $stack55;

        $stack57 = $stack56 / 2.0;

        elbowY = $stack52 - $stack57;

        $stack58 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelLinkPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack58);

        $stack59 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelLinkStroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack59);

        style = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PieLabelLinkStyle getLabelLinkStyle()>();

        $stack61 = <org.jfree.chart.plot.PieLabelLinkStyle: org.jfree.chart.plot.PieLabelLinkStyle STANDARD>;

        $stack62 = virtualinvoke style.<org.jfree.chart.plot.PieLabelLinkStyle: boolean equals(java.lang.Object)>($stack61);

        if $stack62 == 0 goto label1;

        $stack75 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack75.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(linkX, linkY, elbowX, elbowY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack75);

        $stack76 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack76.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(anchorX, elbowY, elbowX, elbowY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack76);

        $stack77 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack77.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(anchorX, elbowY, targetX, targetY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack77);

        goto label3;

     label1:
        $stack63 = <org.jfree.chart.plot.PieLabelLinkStyle: org.jfree.chart.plot.PieLabelLinkStyle QUAD_CURVE>;

        $stack64 = virtualinvoke style.<org.jfree.chart.plot.PieLabelLinkStyle: boolean equals(java.lang.Object)>($stack63);

        if $stack64 == 0 goto label2;

        $stack73 = new java.awt.geom.QuadCurve2D$Float;

        specialinvoke $stack73.<java.awt.geom.QuadCurve2D$Float: void <init>()>();

        virtualinvoke $stack73.<java.awt.geom.QuadCurve2D: void setCurve(double,double,double,double,double,double)>(targetX, targetY, anchorX, elbowY, elbowX, elbowY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack73);

        $stack74 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack74.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(elbowX, elbowY, linkX, linkY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack74);

        goto label3;

     label2:
        $stack65 = <org.jfree.chart.plot.PieLabelLinkStyle: org.jfree.chart.plot.PieLabelLinkStyle CUBIC_CURVE>;

        $stack66 = virtualinvoke style.<org.jfree.chart.plot.PieLabelLinkStyle: boolean equals(java.lang.Object)>($stack65);

        if $stack66 == 0 goto label3;

        $stack72 = new java.awt.geom.CubicCurve2D$Float;

        specialinvoke $stack72.<java.awt.geom.CubicCurve2D$Float: void <init>()>();

        virtualinvoke $stack72.<java.awt.geom.CubicCurve2D: void setCurve(double,double,double,double,double,double,double,double)>(targetX, targetY, anchorX, elbowY, elbowX, elbowY, linkX, linkY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack72);

     label3:
        theta#12 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: org.jfree.chart.text.TextBox getLabel()>();

        $stack32 = (float) targetX;

        $stack31 = (float) targetY;

        $stack30 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor RIGHT>;

        virtualinvoke theta#12.<org.jfree.chart.text.TextBox: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.ui.RectangleAnchor)>(g2, $stack32, $stack31, $stack30);

        return;
    }

    protected void drawRightLabel(java.awt.Graphics2D, org.jfree.chart.plot.PiePlotState, org.jfree.chart.plot.PieLabelRecord)
    {
        org.jfree.chart.plot.PiePlotState state;
        java.awt.geom.Rectangle2D $stack24, $stack48, $stack54;
        double anchorX, $stack26, targetX, targetY, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, linkX, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, linkY, $stack46, $stack47, $stack49, $stack50, $stack51, elbowX, $stack52, $stack53, $stack55, $stack56, $stack57, elbowY, theta;
        org.jfree.chart.plot.PieLabelRecord record;
        org.jfree.chart.plot.PiePlot this;
        boolean $stack28, $stack62, $stack64, $stack66;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack58;
        java.awt.Stroke $stack59;
        org.jfree.chart.plot.PieLabelLinkStyle style, $stack61, $stack63, $stack65;
        java.awt.geom.CubicCurve2D$Float $stack72;
        java.awt.geom.QuadCurve2D$Float $stack73;
        java.awt.geom.Line2D$Double $stack74, $stack75, $stack76, $stack77;
        org.jfree.chart.text.TextBox theta#12;
        float $stack32, $stack31;
        org.jfree.chart.ui.RectangleAnchor $stack30;

        this := @this: org.jfree.chart.plot.PiePlot;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.plot.PiePlotState;

        record := @parameter2: org.jfree.chart.plot.PieLabelRecord;

        $stack24 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getLinkArea()>();

        anchorX = virtualinvoke $stack24.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack26 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getGap()>();

        targetX = anchorX + $stack26;

        targetY = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getAllocatedY()>();

        $stack28 = this.<org.jfree.chart.plot.PiePlot: boolean labelLinksVisible>;

        if $stack28 == 0 goto label3;

        theta = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getAngle()>();

        $stack34 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterX()>();

        $stack35 = staticinvoke <java.lang.Math: double cos(double)>(theta);

        $stack36 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieWRadius()>();

        $stack37 = $stack35 * $stack36;

        $stack38 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getLinkPercent()>();

        $stack39 = $stack37 * $stack38;

        linkX = $stack34 + $stack39;

        $stack40 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterY()>();

        $stack41 = staticinvoke <java.lang.Math: double sin(double)>(theta);

        $stack42 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieHRadius()>();

        $stack43 = $stack41 * $stack42;

        $stack44 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: double getLinkPercent()>();

        $stack45 = $stack43 * $stack44;

        linkY = $stack40 - $stack45;

        $stack46 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterX()>();

        $stack47 = staticinvoke <java.lang.Math: double cos(double)>(theta);

        $stack48 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getLinkArea()>();

        $stack49 = virtualinvoke $stack48.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack50 = $stack47 * $stack49;

        $stack51 = $stack50 / 2.0;

        elbowX = $stack46 + $stack51;

        $stack52 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterY()>();

        $stack53 = staticinvoke <java.lang.Math: double sin(double)>(theta);

        $stack54 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getLinkArea()>();

        $stack55 = virtualinvoke $stack54.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack56 = $stack53 * $stack55;

        $stack57 = $stack56 / 2.0;

        elbowY = $stack52 - $stack57;

        $stack58 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelLinkPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack58);

        $stack59 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelLinkStroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack59);

        style = virtualinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PieLabelLinkStyle getLabelLinkStyle()>();

        $stack61 = <org.jfree.chart.plot.PieLabelLinkStyle: org.jfree.chart.plot.PieLabelLinkStyle STANDARD>;

        $stack62 = virtualinvoke style.<org.jfree.chart.plot.PieLabelLinkStyle: boolean equals(java.lang.Object)>($stack61);

        if $stack62 == 0 goto label1;

        $stack75 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack75.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(linkX, linkY, elbowX, elbowY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack75);

        $stack76 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack76.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(anchorX, elbowY, elbowX, elbowY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack76);

        $stack77 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack77.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(anchorX, elbowY, targetX, targetY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack77);

        goto label3;

     label1:
        $stack63 = <org.jfree.chart.plot.PieLabelLinkStyle: org.jfree.chart.plot.PieLabelLinkStyle QUAD_CURVE>;

        $stack64 = virtualinvoke style.<org.jfree.chart.plot.PieLabelLinkStyle: boolean equals(java.lang.Object)>($stack63);

        if $stack64 == 0 goto label2;

        $stack73 = new java.awt.geom.QuadCurve2D$Float;

        specialinvoke $stack73.<java.awt.geom.QuadCurve2D$Float: void <init>()>();

        virtualinvoke $stack73.<java.awt.geom.QuadCurve2D: void setCurve(double,double,double,double,double,double)>(targetX, targetY, anchorX, elbowY, elbowX, elbowY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack73);

        $stack74 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack74.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(elbowX, elbowY, linkX, linkY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack74);

        goto label3;

     label2:
        $stack65 = <org.jfree.chart.plot.PieLabelLinkStyle: org.jfree.chart.plot.PieLabelLinkStyle CUBIC_CURVE>;

        $stack66 = virtualinvoke style.<org.jfree.chart.plot.PieLabelLinkStyle: boolean equals(java.lang.Object)>($stack65);

        if $stack66 == 0 goto label3;

        $stack72 = new java.awt.geom.CubicCurve2D$Float;

        specialinvoke $stack72.<java.awt.geom.CubicCurve2D$Float: void <init>()>();

        virtualinvoke $stack72.<java.awt.geom.CubicCurve2D: void setCurve(double,double,double,double,double,double,double,double)>(targetX, targetY, anchorX, elbowY, elbowX, elbowY, linkX, linkY);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack72);

     label3:
        theta#12 = virtualinvoke record.<org.jfree.chart.plot.PieLabelRecord: org.jfree.chart.text.TextBox getLabel()>();

        $stack32 = (float) targetX;

        $stack31 = (float) targetY;

        $stack30 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor LEFT>;

        virtualinvoke theta#12.<org.jfree.chart.text.TextBox: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.ui.RectangleAnchor)>(g2, $stack32, $stack31, $stack30);

        return;
    }

    protected java.awt.geom.Point2D getArcCenter(org.jfree.chart.plot.PiePlotState, java.lang.Comparable)
    {
        java.awt.geom.Point2D$Double $stack27, $stack60, center;
        org.jfree.chart.plot.PiePlotState state;
        double $stack28, $stack29, mep, value, $stack45, $stack46, $stack47, angle, $stack49, $stack52, $stack54, $stack55, $stack56, deltaX, $stack57, $stack58, $stack59, deltaY, $stack61, $stack62, $stack63, $stack64, $stack67, $stack68, $stack69, ep, angle1, angle2;
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        byte $stack32, $stack33;
        java.awt.geom.Rectangle2D pieArea, expPieArea;
        org.jfree.data.general.PieDataset $stack36;
        java.lang.Number n;
        org.jfree.chart.util.Rotation $stack39, $stack40, $stack41, $stack42;
        java.lang.IllegalStateException $stack43;
        java.awt.geom.Arc2D$Double $stack48, $stack51;
        java.awt.geom.Point2D point1, point2;

        this := @this: org.jfree.chart.plot.PiePlot;

        state := @parameter0: org.jfree.chart.plot.PiePlotState;

        key := @parameter1: java.lang.Comparable;

        $stack27 = new java.awt.geom.Point2D$Double;

        $stack28 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterX()>();

        $stack29 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterY()>();

        specialinvoke $stack27.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack28, $stack29);

        center = $stack27;

        ep = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getExplodePercent(java.lang.Comparable)>(key);

        mep = virtualinvoke this.<org.jfree.chart.plot.PiePlot: double getMaximumExplodePercent()>();

        $stack32 = mep cmpl 0.0;

        if $stack32 <= 0 goto label1;

        ep = ep / mep;

     label1:
        $stack33 = ep cmpl 0.0;

        if $stack33 == 0 goto label5;

        pieArea = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getPieArea()>();

        expPieArea = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getExplodedPieArea()>();

        $stack36 = this.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        n = interfaceinvoke $stack36.<org.jfree.data.general.PieDataset: java.lang.Number getValue(java.lang.Comparable)>(key);

        value = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        $stack40 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction>;

        $stack39 = <org.jfree.chart.util.Rotation: org.jfree.chart.util.Rotation CLOCKWISE>;

        if $stack40 != $stack39 goto label2;

        angle1 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getLatestAngle()>();

        $stack67 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getTotal()>();

        $stack68 = value / $stack67;

        $stack69 = $stack68 * 360.0;

        angle2 = angle1 - $stack69;

        goto label4;

     label2:
        $stack42 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction>;

        $stack41 = <org.jfree.chart.util.Rotation: org.jfree.chart.util.Rotation ANTICLOCKWISE>;

        if $stack42 != $stack41 goto label3;

        angle1 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getLatestAngle()>();

        $stack45 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getTotal()>();

        $stack46 = value / $stack45;

        $stack47 = $stack46 * 360.0;

        angle2 = angle1 + $stack47;

        goto label4;

     label3:
        $stack43 = new java.lang.IllegalStateException;

        specialinvoke $stack43.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Rotation type not recognised.");

        throw $stack43;

     label4:
        angle = angle2 - angle1;

        $stack48 = new java.awt.geom.Arc2D$Double;

        $stack49 = angle / 2.0;

        specialinvoke $stack48.<java.awt.geom.Arc2D$Double: void <init>(java.awt.geom.Rectangle2D,double,double,int)>(pieArea, angle1, $stack49, 0);

        point1 = virtualinvoke $stack48.<java.awt.geom.Arc2D: java.awt.geom.Point2D getEndPoint()>();

        $stack51 = new java.awt.geom.Arc2D$Double;

        $stack52 = angle / 2.0;

        specialinvoke $stack51.<java.awt.geom.Arc2D$Double: void <init>(java.awt.geom.Rectangle2D,double,double,int)>(expPieArea, angle1, $stack52, 0);

        point2 = virtualinvoke $stack51.<java.awt.geom.Arc2D$Double: java.awt.geom.Point2D getEndPoint()>();

        $stack54 = virtualinvoke point1.<java.awt.geom.Point2D: double getX()>();

        $stack55 = virtualinvoke point2.<java.awt.geom.Point2D: double getX()>();

        $stack56 = $stack54 - $stack55;

        deltaX = $stack56 * ep;

        $stack57 = virtualinvoke point1.<java.awt.geom.Point2D: double getY()>();

        $stack58 = virtualinvoke point2.<java.awt.geom.Point2D: double getY()>();

        $stack59 = $stack57 - $stack58;

        deltaY = $stack59 * ep;

        $stack60 = new java.awt.geom.Point2D$Double;

        $stack61 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterX()>();

        $stack62 = $stack61 - deltaX;

        $stack63 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieCenterY()>();

        $stack64 = $stack63 - deltaY;

        specialinvoke $stack60.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack62, $stack64);

        center = $stack60;

     label5:
        return center;
    }

    protected java.awt.Paint lookupSectionPaint(java.lang.Comparable, org.jfree.chart.plot.PiePlotState)
    {
        org.jfree.chart.plot.PiePlot this;
        java.lang.Comparable key;
        boolean $stack9, $stack11;
        java.awt.RadialGradientPaint rgp, $stack18;
        org.jfree.chart.plot.PiePlotState state;
        java.awt.geom.Point2D center;
        double $stack13, $stack14, $stack15;
        float radius;
        float[] fractions;
        java.awt.Color[] colors;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.plot.PiePlot;

        key := @parameter0: java.lang.Comparable;

        state := @parameter1: org.jfree.chart.plot.PiePlotState;

        $stack9 = virtualinvoke this.<org.jfree.chart.plot.PiePlot: boolean getAutoPopulateSectionPaint()>();

        paint = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.Paint lookupSectionPaint(java.lang.Comparable,boolean)>(key, $stack9);

        $stack11 = paint instanceof java.awt.RadialGradientPaint;

        if $stack11 == 0 goto label1;

        rgp = (java.awt.RadialGradientPaint) paint;

        center = virtualinvoke this.<org.jfree.chart.plot.PiePlot: java.awt.geom.Point2D getArcCenter(org.jfree.chart.plot.PiePlotState,java.lang.Comparable)>(state, key);

        $stack13 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieHRadius()>();

        $stack14 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getPieWRadius()>();

        $stack15 = staticinvoke <java.lang.Math: double max(double,double)>($stack13, $stack14);

        radius = (float) $stack15;

        fractions = virtualinvoke rgp.<java.awt.RadialGradientPaint: float[] getFractions()>();

        colors = virtualinvoke rgp.<java.awt.RadialGradientPaint: java.awt.Color[] getColors()>();

        $stack18 = new java.awt.RadialGradientPaint;

        specialinvoke $stack18.<java.awt.RadialGradientPaint: void <init>(java.awt.geom.Point2D,float,float[],java.awt.Color[])>(center, radius, fractions, colors);

        paint = $stack18;

     label1:
        return paint;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.plot.PiePlot this, that;
        boolean $stack3, $stack4, $stack10, $stack11, $stack17, $stack18, $stack19, $stack20, $stack23, $stack26, $stack27, $stack28, $stack31, $stack34, $stack37, $stack40, $stack43, $stack52, $stack55, $stack58, $stack61, $stack64, $stack67, $stack70, $stack73, $stack74, $stack75, $stack78, $stack81, $stack91, $stack92, $stack95, $stack98, $stack101, $stack104, $stack107, $stack113, $stack116, $stack119, $stack122, $stack123, $stack124, $stack125, $stack126, $stack127, $stack128, $stack131;
        int $stack5, $stack6;
        double $stack7, $stack8, $stack12, $stack13, $stack44, $stack45, $stack47, $stack48, $stack82, $stack83, $stack85, $stack86, $stack88, $stack89, $stack108, $stack109;
        byte $stack9, $stack14, $stack46, $stack49, $stack84, $stack87, $stack90, $stack110;
        org.jfree.chart.util.Rotation $stack15, $stack16;
        org.jfree.chart.PaintMap $stack21, $stack22, $stack29, $stack30;
        java.awt.Paint $stack24, $stack25, $stack32, $stack33, $stack41, $stack42, $stack59, $stack60, $stack62, $stack63, $stack65, $stack66, $stack71, $stack72, $stack96, $stack97;
        org.jfree.chart.StrokeMap $stack35, $stack36;
        java.awt.Stroke $stack38, $stack39, $stack68, $stack69, $stack99, $stack100;
        java.util.Map $stack50, $stack51;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack53, $stack54, $stack114, $stack115, $stack117, $stack118;
        java.awt.Font $stack56, $stack57;
        org.jfree.chart.ui.RectangleInsets $stack76, $stack77, $stack79, $stack80;
        org.jfree.chart.plot.PieLabelLinkStyle $stack93, $stack94;
        org.jfree.chart.labels.PieToolTipGenerator $stack102, $stack103;
        org.jfree.chart.urls.PieURLGenerator $stack105, $stack106, $stack120, $stack121;
        java.awt.Shape $stack111, $stack112;
        org.jfree.chart.util.ShadowGenerator $stack129, $stack130;

        this := @this: org.jfree.chart.plot.PiePlot;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.plot.PiePlot;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        $stack4 = specialinvoke this.<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>(obj);

        if $stack4 != 0 goto label03;

        return 0;

     label03:
        that = (org.jfree.chart.plot.PiePlot) obj;

        $stack6 = this.<org.jfree.chart.plot.PiePlot: int pieIndex>;

        $stack5 = that.<org.jfree.chart.plot.PiePlot: int pieIndex>;

        if $stack6 == $stack5 goto label04;

        return 0;

     label04:
        $stack8 = this.<org.jfree.chart.plot.PiePlot: double interiorGap>;

        $stack7 = that.<org.jfree.chart.plot.PiePlot: double interiorGap>;

        $stack9 = $stack8 cmpl $stack7;

        if $stack9 == 0 goto label05;

        return 0;

     label05:
        $stack11 = this.<org.jfree.chart.plot.PiePlot: boolean circular>;

        $stack10 = that.<org.jfree.chart.plot.PiePlot: boolean circular>;

        if $stack11 == $stack10 goto label06;

        return 0;

     label06:
        $stack13 = this.<org.jfree.chart.plot.PiePlot: double startAngle>;

        $stack12 = that.<org.jfree.chart.plot.PiePlot: double startAngle>;

        $stack14 = $stack13 cmpl $stack12;

        if $stack14 == 0 goto label07;

        return 0;

     label07:
        $stack16 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction>;

        $stack15 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.Rotation direction>;

        if $stack16 == $stack15 goto label08;

        return 0;

     label08:
        $stack18 = this.<org.jfree.chart.plot.PiePlot: boolean ignoreZeroValues>;

        $stack17 = that.<org.jfree.chart.plot.PiePlot: boolean ignoreZeroValues>;

        if $stack18 == $stack17 goto label09;

        return 0;

     label09:
        $stack20 = this.<org.jfree.chart.plot.PiePlot: boolean ignoreNullValues>;

        $stack19 = that.<org.jfree.chart.plot.PiePlot: boolean ignoreNullValues>;

        if $stack20 == $stack19 goto label10;

        return 0;

     label10:
        $stack22 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap>;

        $stack21 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap>;

        $stack23 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack22, $stack21);

        if $stack23 != 0 goto label11;

        return 0;

     label11:
        $stack25 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionPaint>;

        $stack24 = that.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionPaint>;

        $stack26 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack25, $stack24);

        if $stack26 != 0 goto label12;

        return 0;

     label12:
        $stack28 = this.<org.jfree.chart.plot.PiePlot: boolean sectionOutlinesVisible>;

        $stack27 = that.<org.jfree.chart.plot.PiePlot: boolean sectionOutlinesVisible>;

        if $stack28 == $stack27 goto label13;

        return 0;

     label13:
        $stack30 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap>;

        $stack29 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap>;

        $stack31 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack30, $stack29);

        if $stack31 != 0 goto label14;

        return 0;

     label14:
        $stack33 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionOutlinePaint>;

        $stack32 = that.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionOutlinePaint>;

        $stack34 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack33, $stack32);

        if $stack34 != 0 goto label15;

        return 0;

     label15:
        $stack36 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap>;

        $stack35 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap>;

        $stack37 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack36, $stack35);

        if $stack37 != 0 goto label16;

        return 0;

     label16:
        $stack39 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke defaultSectionOutlineStroke>;

        $stack38 = that.<org.jfree.chart.plot.PiePlot: java.awt.Stroke defaultSectionOutlineStroke>;

        $stack40 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack39, $stack38);

        if $stack40 != 0 goto label17;

        return 0;

     label17:
        $stack42 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint shadowPaint>;

        $stack41 = that.<org.jfree.chart.plot.PiePlot: java.awt.Paint shadowPaint>;

        $stack43 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack42, $stack41);

        if $stack43 != 0 goto label18;

        return 0;

     label18:
        $stack45 = this.<org.jfree.chart.plot.PiePlot: double shadowXOffset>;

        $stack44 = that.<org.jfree.chart.plot.PiePlot: double shadowXOffset>;

        $stack46 = $stack45 cmpl $stack44;

        if $stack46 == 0 goto label19;

        return 0;

     label19:
        $stack48 = this.<org.jfree.chart.plot.PiePlot: double shadowYOffset>;

        $stack47 = that.<org.jfree.chart.plot.PiePlot: double shadowYOffset>;

        $stack49 = $stack48 cmpl $stack47;

        if $stack49 == 0 goto label20;

        return 0;

     label20:
        $stack51 = this.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages>;

        $stack50 = that.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages>;

        $stack52 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack51, $stack50);

        if $stack52 != 0 goto label21;

        return 0;

     label21:
        $stack54 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator>;

        $stack53 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator>;

        $stack55 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack54, $stack53);

        if $stack55 != 0 goto label22;

        return 0;

     label22:
        $stack57 = this.<org.jfree.chart.plot.PiePlot: java.awt.Font labelFont>;

        $stack56 = that.<org.jfree.chart.plot.PiePlot: java.awt.Font labelFont>;

        $stack58 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack57, $stack56);

        if $stack58 != 0 goto label23;

        return 0;

     label23:
        $stack60 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint>;

        $stack59 = that.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint>;

        $stack61 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack60, $stack59);

        if $stack61 != 0 goto label24;

        return 0;

     label24:
        $stack63 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint>;

        $stack62 = that.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint>;

        $stack64 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack63, $stack62);

        if $stack64 != 0 goto label25;

        return 0;

     label25:
        $stack66 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint>;

        $stack65 = that.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint>;

        $stack67 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack66, $stack65);

        if $stack67 != 0 goto label26;

        return 0;

     label26:
        $stack69 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke>;

        $stack68 = that.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke>;

        $stack70 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack69, $stack68);

        if $stack70 != 0 goto label27;

        return 0;

     label27:
        $stack72 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint>;

        $stack71 = that.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint>;

        $stack73 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack72, $stack71);

        if $stack73 != 0 goto label28;

        return 0;

     label28:
        $stack75 = this.<org.jfree.chart.plot.PiePlot: boolean simpleLabels>;

        $stack74 = that.<org.jfree.chart.plot.PiePlot: boolean simpleLabels>;

        if $stack75 == $stack74 goto label29;

        return 0;

     label29:
        $stack77 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets simpleLabelOffset>;

        $stack76 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets simpleLabelOffset>;

        $stack78 = virtualinvoke $stack77.<org.jfree.chart.ui.RectangleInsets: boolean equals(java.lang.Object)>($stack76);

        if $stack78 != 0 goto label30;

        return 0;

     label30:
        $stack80 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets labelPadding>;

        $stack79 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.ui.RectangleInsets labelPadding>;

        $stack81 = virtualinvoke $stack80.<org.jfree.chart.ui.RectangleInsets: boolean equals(java.lang.Object)>($stack79);

        if $stack81 != 0 goto label31;

        return 0;

     label31:
        $stack83 = this.<org.jfree.chart.plot.PiePlot: double maximumLabelWidth>;

        $stack82 = that.<org.jfree.chart.plot.PiePlot: double maximumLabelWidth>;

        $stack84 = $stack83 cmpl $stack82;

        if $stack84 == 0 goto label32;

        return 0;

     label32:
        $stack86 = this.<org.jfree.chart.plot.PiePlot: double labelGap>;

        $stack85 = that.<org.jfree.chart.plot.PiePlot: double labelGap>;

        $stack87 = $stack86 cmpl $stack85;

        if $stack87 == 0 goto label33;

        return 0;

     label33:
        $stack89 = this.<org.jfree.chart.plot.PiePlot: double labelLinkMargin>;

        $stack88 = that.<org.jfree.chart.plot.PiePlot: double labelLinkMargin>;

        $stack90 = $stack89 cmpl $stack88;

        if $stack90 == 0 goto label34;

        return 0;

     label34:
        $stack92 = this.<org.jfree.chart.plot.PiePlot: boolean labelLinksVisible>;

        $stack91 = that.<org.jfree.chart.plot.PiePlot: boolean labelLinksVisible>;

        if $stack92 == $stack91 goto label35;

        return 0;

     label35:
        $stack94 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PieLabelLinkStyle labelLinkStyle>;

        $stack93 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PieLabelLinkStyle labelLinkStyle>;

        $stack95 = virtualinvoke $stack94.<org.jfree.chart.plot.PieLabelLinkStyle: boolean equals(java.lang.Object)>($stack93);

        if $stack95 != 0 goto label36;

        return 0;

     label36:
        $stack97 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelLinkPaint>;

        $stack96 = that.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelLinkPaint>;

        $stack98 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack97, $stack96);

        if $stack98 != 0 goto label37;

        return 0;

     label37:
        $stack100 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelLinkStroke>;

        $stack99 = that.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelLinkStroke>;

        $stack101 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack100, $stack99);

        if $stack101 != 0 goto label38;

        return 0;

     label38:
        $stack103 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator>;

        $stack102 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieToolTipGenerator toolTipGenerator>;

        $stack104 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack103, $stack102);

        if $stack104 != 0 goto label39;

        return 0;

     label39:
        $stack106 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator>;

        $stack105 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator>;

        $stack107 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack106, $stack105);

        if $stack107 != 0 goto label40;

        return 0;

     label40:
        $stack109 = this.<org.jfree.chart.plot.PiePlot: double minimumArcAngleToDraw>;

        $stack108 = that.<org.jfree.chart.plot.PiePlot: double minimumArcAngleToDraw>;

        $stack110 = $stack109 cmpl $stack108;

        if $stack110 == 0 goto label41;

        return 0;

     label41:
        $stack112 = this.<org.jfree.chart.plot.PiePlot: java.awt.Shape legendItemShape>;

        $stack111 = that.<org.jfree.chart.plot.PiePlot: java.awt.Shape legendItemShape>;

        $stack113 = staticinvoke <org.jfree.chart.util.ShapeUtils: boolean equal(java.awt.Shape,java.awt.Shape)>($stack112, $stack111);

        if $stack113 != 0 goto label42;

        return 0;

     label42:
        $stack115 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator>;

        $stack114 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator>;

        $stack116 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack115, $stack114);

        if $stack116 != 0 goto label43;

        return 0;

     label43:
        $stack118 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator>;

        $stack117 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator>;

        $stack119 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack118, $stack117);

        if $stack119 != 0 goto label44;

        return 0;

     label44:
        $stack121 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator>;

        $stack120 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator>;

        $stack122 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack121, $stack120);

        if $stack122 != 0 goto label45;

        return 0;

     label45:
        $stack124 = this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionPaint>;

        $stack123 = that.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionPaint>;

        if $stack124 == $stack123 goto label46;

        return 0;

     label46:
        $stack126 = this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlinePaint>;

        $stack125 = that.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlinePaint>;

        if $stack126 == $stack125 goto label47;

        return 0;

     label47:
        $stack128 = this.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlineStroke>;

        $stack127 = that.<org.jfree.chart.plot.PiePlot: boolean autoPopulateSectionOutlineStroke>;

        if $stack128 == $stack127 goto label48;

        return 0;

     label48:
        $stack130 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack129 = that.<org.jfree.chart.plot.PiePlot: org.jfree.chart.util.ShadowGenerator shadowGenerator>;

        $stack131 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack130, $stack129);

        if $stack131 != 0 goto label49;

        return 0;

     label49:
        return 1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.plot.PiePlot this, clone;
        java.lang.Object $stack2, $stack4, $stack7, $stack10, $stack25, $stack29, $stack33, $stack37, $stack45;
        org.jfree.chart.PaintMap $stack3, $stack5, $stack6, $stack8;
        org.jfree.chart.StrokeMap $stack9, $stack11;
        java.util.TreeMap $stack12;
        java.util.Map $stack13;
        org.jfree.chart.labels.PieSectionLabelGenerator $stack14, $stack20, $stack21, $stack28, $stack30, $stack32, $stack34, $stack44, $stack46;
        org.jfree.data.general.PieDataset $stack15, $stack42;
        org.jfree.chart.urls.PieURLGenerator $stack16, $stack22, $stack24, $stack26, $stack36, $stack38;
        boolean $stack17, $stack23;
        java.awt.Shape $stack18, $stack19;

        this := @this: org.jfree.chart.plot.PiePlot;

        $stack2 = specialinvoke this.<org.jfree.chart.plot.Plot: java.lang.Object clone()>();

        clone = (org.jfree.chart.plot.PiePlot) $stack2;

        $stack3 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap>;

        $stack4 = virtualinvoke $stack3.<org.jfree.chart.PaintMap: java.lang.Object clone()>();

        $stack5 = (org.jfree.chart.PaintMap) $stack4;

        clone.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionPaintMap> = $stack5;

        $stack6 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap>;

        $stack7 = virtualinvoke $stack6.<org.jfree.chart.PaintMap: java.lang.Object clone()>();

        $stack8 = (org.jfree.chart.PaintMap) $stack7;

        clone.<org.jfree.chart.plot.PiePlot: org.jfree.chart.PaintMap sectionOutlinePaintMap> = $stack8;

        $stack9 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap>;

        $stack10 = virtualinvoke $stack9.<org.jfree.chart.StrokeMap: java.lang.Object clone()>();

        $stack11 = (org.jfree.chart.StrokeMap) $stack10;

        clone.<org.jfree.chart.plot.PiePlot: org.jfree.chart.StrokeMap sectionOutlineStrokeMap> = $stack11;

        $stack12 = new java.util.TreeMap;

        $stack13 = this.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages>;

        specialinvoke $stack12.<java.util.TreeMap: void <init>(java.util.Map)>($stack13);

        clone.<org.jfree.chart.plot.PiePlot: java.util.Map explodePercentages> = $stack12;

        $stack14 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator>;

        if $stack14 == null goto label1;

        $stack44 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator>;

        $stack45 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack44);

        $stack46 = (org.jfree.chart.labels.PieSectionLabelGenerator) $stack45;

        clone.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator labelGenerator> = $stack46;

     label1:
        $stack15 = clone.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        if $stack15 == null goto label2;

        $stack42 = clone.<org.jfree.chart.plot.PiePlot: org.jfree.data.general.PieDataset dataset>;

        interfaceinvoke $stack42.<org.jfree.data.general.PieDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(clone);

     label2:
        $stack16 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator>;

        $stack17 = $stack16 instanceof org.jfree.chart.util.PublicCloneable;

        if $stack17 == 0 goto label3;

        $stack36 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator>;

        $stack37 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack36);

        $stack38 = (org.jfree.chart.urls.PieURLGenerator) $stack37;

        clone.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator urlGenerator> = $stack38;

     label3:
        $stack18 = this.<org.jfree.chart.plot.PiePlot: java.awt.Shape legendItemShape>;

        $stack19 = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape clone(java.awt.Shape)>($stack18);

        clone.<org.jfree.chart.plot.PiePlot: java.awt.Shape legendItemShape> = $stack19;

        $stack20 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator>;

        if $stack20 == null goto label4;

        $stack32 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator>;

        $stack33 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack32);

        $stack34 = (org.jfree.chart.labels.PieSectionLabelGenerator) $stack33;

        clone.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelGenerator> = $stack34;

     label4:
        $stack21 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator>;

        if $stack21 == null goto label5;

        $stack28 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator>;

        $stack29 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack28);

        $stack30 = (org.jfree.chart.labels.PieSectionLabelGenerator) $stack29;

        clone.<org.jfree.chart.plot.PiePlot: org.jfree.chart.labels.PieSectionLabelGenerator legendLabelToolTipGenerator> = $stack30;

     label5:
        $stack22 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator>;

        $stack23 = $stack22 instanceof org.jfree.chart.util.PublicCloneable;

        if $stack23 == 0 goto label6;

        $stack24 = this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator>;

        $stack25 = staticinvoke <org.jfree.chart.util.CloneUtils: java.lang.Object clone(java.lang.Object)>($stack24);

        $stack26 = (org.jfree.chart.urls.PieURLGenerator) $stack25;

        clone.<org.jfree.chart.plot.PiePlot: org.jfree.chart.urls.PieURLGenerator legendLabelURLGenerator> = $stack26;

     label6:
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack2, $stack3, $stack5, $stack6, $stack7, $stack8, $stack10, $stack11;
        java.awt.Stroke $stack4, $stack9, $stack12;
        java.awt.Shape $stack13;

        this := @this: org.jfree.chart.plot.PiePlot;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionOutlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke defaultSectionOutlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack4, stream);

        $stack5 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint shadowPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack5, stream);

        $stack6 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack6, stream);

        $stack7 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack7, stream);

        $stack8 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack8, stream);

        $stack9 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack9, stream);

        $stack10 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack10, stream);

        $stack11 = this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelLinkPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack11, stream);

        $stack12 = this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelLinkStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack12, stream);

        $stack13 = this.<org.jfree.chart.plot.PiePlot: java.awt.Shape legendItemShape>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack13, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.plot.PiePlot this;
        java.awt.Paint $stack2, $stack3, $stack5, $stack6, $stack7, $stack8, $stack10, $stack11;
        java.awt.Stroke $stack4, $stack9, $stack12;
        java.awt.Shape $stack13;

        this := @this: org.jfree.chart.plot.PiePlot;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionPaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint defaultSectionOutlinePaint> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke defaultSectionOutlineStroke> = $stack4;

        $stack5 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint shadowPaint> = $stack5;

        $stack6 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelPaint> = $stack6;

        $stack7 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelBackgroundPaint> = $stack7;

        $stack8 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelOutlinePaint> = $stack8;

        $stack9 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelOutlineStroke> = $stack9;

        $stack10 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelShadowPaint> = $stack10;

        $stack11 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Paint labelLinkPaint> = $stack11;

        $stack12 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Stroke labelLinkStroke> = $stack12;

        $stack13 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.PiePlot: java.awt.Shape legendItemShape> = $stack13;

        return;
    }

    static void <clinit>()
    {
        java.awt.Font $stack0;
        java.awt.Color $stack1, $stack2, $stack3, $stack5;
        java.awt.BasicStroke $stack4;
        java.util.ResourceBundle $stack6;

        <org.jfree.chart.plot.PiePlot: boolean DEBUG_DRAW_PIE_AREA> = 0;

        <org.jfree.chart.plot.PiePlot: boolean DEBUG_DRAW_LINK_AREA> = 0;

        <org.jfree.chart.plot.PiePlot: boolean DEBUG_DRAW_INTERIOR> = 0;

        <org.jfree.chart.plot.PiePlot: double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW> = 1.0E-5;

        <org.jfree.chart.plot.PiePlot: double DEFAULT_START_ANGLE> = 90.0;

        <org.jfree.chart.plot.PiePlot: double MAX_INTERIOR_GAP> = 0.4;

        <org.jfree.chart.plot.PiePlot: double DEFAULT_INTERIOR_GAP> = 0.08;

        <org.jfree.chart.plot.PiePlot: long serialVersionUID> = -795612466005590431L;

        $stack0 = new java.awt.Font;

        specialinvoke $stack0.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 0, 10);

        <org.jfree.chart.plot.PiePlot: java.awt.Font DEFAULT_LABEL_FONT> = $stack0;

        $stack1 = <java.awt.Color: java.awt.Color BLACK>;

        <org.jfree.chart.plot.PiePlot: java.awt.Paint DEFAULT_LABEL_PAINT> = $stack1;

        $stack2 = new java.awt.Color;

        specialinvoke $stack2.<java.awt.Color: void <init>(int,int,int)>(255, 255, 192);

        <org.jfree.chart.plot.PiePlot: java.awt.Paint DEFAULT_LABEL_BACKGROUND_PAINT> = $stack2;

        $stack3 = <java.awt.Color: java.awt.Color BLACK>;

        <org.jfree.chart.plot.PiePlot: java.awt.Paint DEFAULT_LABEL_OUTLINE_PAINT> = $stack3;

        $stack4 = new java.awt.BasicStroke;

        specialinvoke $stack4.<java.awt.BasicStroke: void <init>(float)>(0.5F);

        <org.jfree.chart.plot.PiePlot: java.awt.Stroke DEFAULT_LABEL_OUTLINE_STROKE> = $stack4;

        $stack5 = new java.awt.Color;

        specialinvoke $stack5.<java.awt.Color: void <init>(int,int,int,int)>(151, 151, 151, 128);

        <org.jfree.chart.plot.PiePlot: java.awt.Paint DEFAULT_LABEL_SHADOW_PAINT> = $stack5;

        $stack6 = staticinvoke <org.jfree.chart.util.ResourceBundleWrapper: java.util.ResourceBundle getBundle(java.lang.String)>("org.jfree.chart.plot.LocalizationBundle");

        <org.jfree.chart.plot.PiePlot: java.util.ResourceBundle localizationResources> = $stack6;

        return;
    }
}
