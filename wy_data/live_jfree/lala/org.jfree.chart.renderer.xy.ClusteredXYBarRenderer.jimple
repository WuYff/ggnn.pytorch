public class org.jfree.chart.renderer.xy.ClusteredXYBarRenderer extends org.jfree.chart.renderer.xy.XYBarRenderer implements java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private boolean centerBarAtStartValue;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer this;

        this := @this: org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: void <init>(double,boolean)>(0.0, 0);

        return;
    }

    public void <init>(double, boolean)
    {
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer this;
        double margin;
        boolean centerBarAtStartValue;

        this := @this: org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;

        margin := @parameter0: double;

        centerBarAtStartValue := @parameter1: boolean;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>(margin);

        this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean centerBarAtStartValue> = centerBarAtStartValue;

        return;
    }

    public int getPassCount()
    {
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer this;

        this := @this: org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;

        return 2;
    }

    public org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer this;
        boolean $stack2;
        org.jfree.data.Range $stack3, $stack5;
        org.jfree.data.xy.IntervalXYDataset $stack4;

        this := @this: org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        if dataset != null goto label1;

        return null;

     label1:
        $stack2 = this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean centerBarAtStartValue>;

        if $stack2 == 0 goto label2;

        $stack4 = (org.jfree.data.xy.IntervalXYDataset) dataset;

        $stack5 = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: org.jfree.data.Range findDomainBoundsWithOffset(org.jfree.data.xy.IntervalXYDataset)>($stack4);

        return $stack5;

     label2:
        $stack3 = specialinvoke this.<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>(dataset);

        return $stack3;
    }

    protected org.jfree.data.Range findDomainBoundsWithOffset(org.jfree.data.xy.IntervalXYDataset)
    {
        org.jfree.data.xy.IntervalXYDataset dataset;
        int seriesCount, itemCount, series, item;
        byte $stack17;
        org.jfree.data.Range $stack18;
        double $stack24, offset, minimum, maximum, lvalue, uvalue;
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer this;

        this := @this: org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;

        dataset := @parameter0: org.jfree.data.xy.IntervalXYDataset;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(dataset, "dataset");

        minimum = #Infinity;

        maximum = #-Infinity;

        seriesCount = interfaceinvoke dataset.<org.jfree.data.xy.IntervalXYDataset: int getSeriesCount()>();

        series = 0;

     label1:
        if series >= seriesCount goto label4;

        itemCount = interfaceinvoke dataset.<org.jfree.data.xy.IntervalXYDataset: int getItemCount(int)>(series);

        item = 0;

     label2:
        if item >= itemCount goto label3;

        lvalue = interfaceinvoke dataset.<org.jfree.data.xy.IntervalXYDataset: double getStartXValue(int,int)>(series, item);

        uvalue = interfaceinvoke dataset.<org.jfree.data.xy.IntervalXYDataset: double getEndXValue(int,int)>(series, item);

        $stack24 = uvalue - lvalue;

        offset = $stack24 / 2.0;

        lvalue = lvalue - offset;

        uvalue = uvalue - offset;

        minimum = staticinvoke <java.lang.Math: double min(double,double)>(minimum, lvalue);

        maximum = staticinvoke <java.lang.Math: double max(double,double)>(maximum, uvalue);

        item = item + 1;

        goto label2;

     label3:
        series = series + 1;

        goto label1;

     label4:
        $stack17 = minimum cmpl maximum;

        if $stack17 <= 0 goto label5;

        return null;

     label5:
        $stack18 = new org.jfree.data.Range;

        specialinvoke $stack18.<org.jfree.data.Range: void <init>(double,double)>(minimum, maximum);

        return $stack18;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.xy.IntervalXYDataset intervalDataset;
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer this;
        boolean $stack56, $stack59, $stack60, $stack70, inverted, $stack92, $stack109, $stack113, $stack128, barY0#22, $stack120, $stack107;
        int series, item, numSeries, pass;
        org.jfree.chart.axis.ValueAxis rangeAxis, domainAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack61, $stack63, xAxisLocation, $stack119, barY1#23;
        double yy0, yy1, x0, xx0, x1, xx1, m, $stack73, $stack77, seriesBarWidth, $stack81, $stack82, $stack84, $stack95, $stack96, $stack131, $stack132, $stack135, $stack140, $stack141, $stack151, y0, y1, intervalW, baseX, cut, barY0, barY1, rx, rw, ry, rh;
        byte $stack72, $stack88, $stack98;
        org.jfree.chart.plot.PlotOrientation orientation, $stack78, $stack79, $stack90;
        java.lang.IllegalStateException $stack80;
        java.awt.geom.Rectangle2D$Double $stack87, $stack106, $stack118, $stack137, bar;
        org.jfree.chart.renderer.xy.XYBarPainter $stack91, $stack112;
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.ChartRenderingInfo $stack93;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.labels.XYItemLabelGenerator generator;
        org.jfree.chart.entity.EntityCollection generator#39;

        this := @this: org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        intervalDataset = (org.jfree.data.xy.IntervalXYDataset) dataset;

        $stack56 = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean getUseYInterval()>();

        if $stack56 == 0 goto label01;

        y0 = interfaceinvoke intervalDataset.<org.jfree.data.xy.IntervalXYDataset: double getStartYValue(int,int)>(series, item);

        y1 = interfaceinvoke intervalDataset.<org.jfree.data.xy.IntervalXYDataset: double getEndYValue(int,int)>(series, item);

        goto label02;

     label01:
        y0 = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: double getBase()>();

        y1 = interfaceinvoke intervalDataset.<org.jfree.data.xy.IntervalXYDataset: double getYValue(int,int)>(series, item);

     label02:
        $stack59 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y0);

        if $stack59 != 0 goto label03;

        $stack60 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y1);

        if $stack60 == 0 goto label04;

     label03:
        return;

     label04:
        $stack61 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yy0 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y0, dataArea, $stack61);

        $stack63 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yy1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y1, dataArea, $stack63);

        xAxisLocation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        x0 = interfaceinvoke intervalDataset.<org.jfree.data.xy.IntervalXYDataset: double getStartXValue(int,int)>(series, item);

        xx0 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x0, dataArea, xAxisLocation);

        x1 = interfaceinvoke intervalDataset.<org.jfree.data.xy.IntervalXYDataset: double getEndXValue(int,int)>(series, item);

        xx1 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x1, dataArea, xAxisLocation);

        intervalW = xx1 - xx0;

        baseX = xx0;

        $stack70 = this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean centerBarAtStartValue>;

        if $stack70 == 0 goto label05;

        $stack151 = intervalW / 2.0;

        baseX = xx0 - $stack151;

     label05:
        m = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: double getMargin()>();

        $stack72 = m cmpl 0.0;

        if $stack72 <= 0 goto label06;

        $stack140 = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: double getMargin()>();

        cut = intervalW * $stack140;

        intervalW = intervalW - cut;

        $stack141 = cut / 2.0;

        baseX = baseX + $stack141;

     label06:
        $stack73 = yy0 - yy1;

        cut = staticinvoke <java.lang.Math: double abs(double)>($stack73);

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        numSeries = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getSeriesCount()>();

        $stack77 = (double) numSeries;

        seriesBarWidth = intervalW / $stack77;

        $stack78 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack78 goto label07;

        $stack131 = (double) series;

        $stack132 = seriesBarWidth * $stack131;

        barY0 = baseX + $stack132;

        barY1 = barY0 + seriesBarWidth;

        rx = staticinvoke <java.lang.Math: double min(double,double)>(yy0, yy1);

        ry = staticinvoke <java.lang.Math: double min(double,double)>(barY0, barY1);

        $stack135 = barY1 - barY0;

        rh = staticinvoke <java.lang.Math: double abs(double)>($stack135);

        $stack137 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack137.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(rx, ry, cut, rh);

        bar = $stack137;

        goto label09;

     label07:
        $stack79 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack79 goto label08;

        $stack81 = (double) series;

        $stack82 = seriesBarWidth * $stack81;

        barY0 = baseX + $stack82;

        barY1 = barY0 + seriesBarWidth;

        rx = staticinvoke <java.lang.Math: double min(double,double)>(barY0, barY1);

        $stack84 = barY1 - barY0;

        rw = staticinvoke <java.lang.Math: double abs(double)>($stack84);

        ry = staticinvoke <java.lang.Math: double min(double,double)>(yy0, yy1);

        $stack87 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack87.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(rx, ry, rw, cut);

        bar = $stack87;

        goto label09;

     label08:
        $stack80 = new java.lang.IllegalStateException;

        specialinvoke $stack80.<java.lang.IllegalStateException: void <init>()>();

        throw $stack80;

     label09:
        $stack88 = y1 cmpl 0.0;

        if $stack88 <= 0 goto label10;

        $stack128 = 1;

        goto label11;

     label10:
        $stack128 = 0;

     label11:
        barY0#22 = $stack128;

        inverted = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        $stack90 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack90 goto label15;

        if $stack128 == 0 goto label12;

        if inverted != 0 goto label13;

     label12:
        if barY0#22 != 0 goto label14;

        if inverted != 0 goto label14;

     label13:
        barY1#23 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        goto label19;

     label14:
        barY1#23 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        goto label19;

     label15:
        if $stack128 == 0 goto label16;

        if inverted == 0 goto label17;

     label16:
        if barY0#22 != 0 goto label18;

        if inverted == 0 goto label18;

     label17:
        barY1#23 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        goto label19;

     label18:
        barY1#23 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

     label19:
        if pass != 0 goto label22;

        $stack109 = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean getShadowsVisible()>();

        if $stack109 == 0 goto label22;

        $stack112 = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter getBarPainter()>();

        $stack118 = bar;

        $stack119 = barY1#23;

        $stack113 = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean getUseYInterval()>();

        if $stack113 != 0 goto label20;

        $stack120 = 1;

        goto label21;

     label20:
        $stack120 = 0;

     label21:
        interfaceinvoke $stack112.<org.jfree.chart.renderer.xy.XYBarPainter: void paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.chart.ui.RectangleEdge,boolean)>(g2, this, series, item, $stack118, $stack119, $stack120);

     label22:
        if pass != 1 goto label26;

        $stack91 = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter getBarPainter()>();

        interfaceinvoke $stack91.<org.jfree.chart.renderer.xy.XYBarPainter: void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.chart.ui.RectangleEdge)>(g2, this, series, item, bar, barY1#23);

        $stack92 = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean isItemLabelVisible(int,int)>(series, item);

        if $stack92 == 0 goto label25;

        generator = virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: org.jfree.chart.labels.XYItemLabelGenerator getItemLabelGenerator(int,int)>(series, item);

        $stack106 = bar;

        $stack98 = y1 cmpg 0.0;

        if $stack98 >= 0 goto label23;

        $stack107 = 1;

        goto label24;

     label23:
        $stack107 = 0;

     label24:
        virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>(g2, dataset, series, item, plot, generator, $stack106, $stack107);

     label25:
        if info == null goto label26;

        $stack93 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        generator#39 = virtualinvoke $stack93.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if generator#39 == null goto label26;

        $stack95 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack96 = virtualinvoke bar.<java.awt.geom.Rectangle2D: double getCenterY()>();

        virtualinvoke this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(generator#39, bar, dataset, series, item, $stack95, $stack96);

     label26:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer this, that;
        boolean $stack3, $stack4, $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.xy.ClusteredXYBarRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean centerBarAtStartValue>;

        $stack4 = that.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean centerBarAtStartValue>;

        if $stack5 == $stack4 goto label3;

        return 0;

     label3:
        $stack6 = specialinvoke this.<org.jfree.chart.renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack6;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;

        $stack1 = specialinvoke this.<org.jfree.chart.renderer.xy.XYBarRenderer: java.lang.Object clone()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: long serialVersionUID> = 5864462149177133147L;

        return;
    }
}
