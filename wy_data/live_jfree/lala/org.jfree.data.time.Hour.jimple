public class org.jfree.data.time.Hour extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final int FIRST_HOUR_IN_DAY;
    public static final int LAST_HOUR_IN_DAY;
    private org.jfree.data.time.Day day;
    private byte hour;
    private long firstMillisecond;
    private long lastMillisecond;

    public void <init>()
    {
        org.jfree.data.time.Hour this;
        java.util.Date $stack1;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = new java.util.Date;

        specialinvoke $stack1.<java.util.Date: void <init>()>();

        specialinvoke this.<org.jfree.data.time.Hour: void <init>(java.util.Date)>($stack1);

        return;
    }

    public void <init>(int, org.jfree.data.time.Day)
    {
        org.jfree.data.time.Hour this;
        org.jfree.data.time.Day day;
        int hour;
        byte $stack3;
        java.util.Calendar $stack4;

        this := @this: org.jfree.data.time.Hour;

        hour := @parameter0: int;

        day := @parameter1: org.jfree.data.time.Day;

        specialinvoke this.<org.jfree.data.time.RegularTimePeriod: void <init>()>();

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(day, "day");

        $stack3 = (byte) hour;

        this.<org.jfree.data.time.Hour: byte hour> = $stack3;

        this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day> = day;

        $stack4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke this.<org.jfree.data.time.Hour: void peg(java.util.Calendar)>($stack4);

        return;
    }

    public void <init>(int, int, int, int)
    {
        org.jfree.data.time.Hour this;
        int hour, day, month, year;
        org.jfree.data.time.Day $stack5;

        this := @this: org.jfree.data.time.Hour;

        hour := @parameter0: int;

        day := @parameter1: int;

        month := @parameter2: int;

        year := @parameter3: int;

        $stack5 = new org.jfree.data.time.Day;

        specialinvoke $stack5.<org.jfree.data.time.Day: void <init>(int,int,int)>(day, month, year);

        specialinvoke this.<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>(hour, $stack5);

        return;
    }

    public void <init>(java.util.Date)
    {
        org.jfree.data.time.Hour this;
        java.util.Date time;
        java.util.TimeZone $stack2;
        java.util.Locale $stack3;

        this := @this: org.jfree.data.time.Hour;

        time := @parameter0: java.util.Date;

        $stack2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $stack3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke this.<org.jfree.data.time.Hour: void <init>(java.util.Date,java.util.TimeZone,java.util.Locale)>(time, $stack2, $stack3);

        return;
    }

    public void <init>(java.util.Date, java.util.TimeZone, java.util.Locale)
    {
        org.jfree.data.time.Hour this;
        java.util.Date time;
        java.util.TimeZone zone;
        java.util.Locale locale;
        java.util.Calendar calendar;
        int $stack6;
        byte $stack7;
        org.jfree.data.time.Day $stack8;

        this := @this: org.jfree.data.time.Hour;

        time := @parameter0: java.util.Date;

        zone := @parameter1: java.util.TimeZone;

        locale := @parameter2: java.util.Locale;

        specialinvoke this.<org.jfree.data.time.RegularTimePeriod: void <init>()>();

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(time, "time");

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(zone, "zone");

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(locale, "locale");

        calendar = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>(zone, locale);

        virtualinvoke calendar.<java.util.Calendar: void setTime(java.util.Date)>(time);

        $stack6 = virtualinvoke calendar.<java.util.Calendar: int get(int)>(11);

        $stack7 = (byte) $stack6;

        this.<org.jfree.data.time.Hour: byte hour> = $stack7;

        $stack8 = new org.jfree.data.time.Day;

        specialinvoke $stack8.<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone,java.util.Locale)>(time, zone, locale);

        this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day> = $stack8;

        virtualinvoke this.<org.jfree.data.time.Hour: void peg(java.util.Calendar)>(calendar);

        return;
    }

    public int getHour()
    {
        org.jfree.data.time.Hour this;
        byte $stack1;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = this.<org.jfree.data.time.Hour: byte hour>;

        return $stack1;
    }

    public org.jfree.data.time.Day getDay()
    {
        org.jfree.data.time.Hour this;
        org.jfree.data.time.Day $stack1;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        return $stack1;
    }

    public int getYear()
    {
        org.jfree.data.time.Hour this;
        org.jfree.data.time.Day $stack1;
        int $stack2;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack2 = virtualinvoke $stack1.<org.jfree.data.time.Day: int getYear()>();

        return $stack2;
    }

    public int getMonth()
    {
        org.jfree.data.time.Hour this;
        org.jfree.data.time.Day $stack1;
        int $stack2;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack2 = virtualinvoke $stack1.<org.jfree.data.time.Day: int getMonth()>();

        return $stack2;
    }

    public int getDayOfMonth()
    {
        org.jfree.data.time.Hour this;
        org.jfree.data.time.Day $stack1;
        int $stack2;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack2 = virtualinvoke $stack1.<org.jfree.data.time.Day: int getDayOfMonth()>();

        return $stack2;
    }

    public long getFirstMillisecond()
    {
        org.jfree.data.time.Hour this;
        long $stack1;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = this.<org.jfree.data.time.Hour: long firstMillisecond>;

        return $stack1;
    }

    public long getLastMillisecond()
    {
        org.jfree.data.time.Hour this;
        long $stack1;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = this.<org.jfree.data.time.Hour: long lastMillisecond>;

        return $stack1;
    }

    public void peg(java.util.Calendar)
    {
        org.jfree.data.time.Hour this;
        java.util.Calendar calendar;
        long $stack2, $stack3;

        this := @this: org.jfree.data.time.Hour;

        calendar := @parameter0: java.util.Calendar;

        $stack2 = virtualinvoke this.<org.jfree.data.time.Hour: long getFirstMillisecond(java.util.Calendar)>(calendar);

        this.<org.jfree.data.time.Hour: long firstMillisecond> = $stack2;

        $stack3 = virtualinvoke this.<org.jfree.data.time.Hour: long getLastMillisecond(java.util.Calendar)>(calendar);

        this.<org.jfree.data.time.Hour: long lastMillisecond> = $stack3;

        return;
    }

    public org.jfree.data.time.RegularTimePeriod previous()
    {
        org.jfree.data.time.Hour this, $stack6, $stack8, result;
        byte $stack3, $stack9;
        org.jfree.data.time.Day $stack4, prevDay, $stack10;
        org.jfree.data.time.RegularTimePeriod $stack5;
        int $stack11;

        this := @this: org.jfree.data.time.Hour;

        $stack3 = this.<org.jfree.data.time.Hour: byte hour>;

        if $stack3 == 0 goto label1;

        $stack8 = new org.jfree.data.time.Hour;

        $stack9 = this.<org.jfree.data.time.Hour: byte hour>;

        $stack11 = $stack9 - 1;

        $stack10 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        specialinvoke $stack8.<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>($stack11, $stack10);

        result = $stack8;

        goto label3;

     label1:
        $stack4 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack5 = virtualinvoke $stack4.<org.jfree.data.time.Day: org.jfree.data.time.RegularTimePeriod previous()>();

        prevDay = (org.jfree.data.time.Day) $stack5;

        if prevDay == null goto label2;

        $stack6 = new org.jfree.data.time.Hour;

        specialinvoke $stack6.<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>(23, prevDay);

        result = $stack6;

        goto label3;

     label2:
        result = null;

     label3:
        return result;
    }

    public org.jfree.data.time.RegularTimePeriod next()
    {
        org.jfree.data.time.Hour this, $stack6, $stack8, result;
        byte $stack3, $stack9;
        org.jfree.data.time.Day $stack4, nextDay, $stack10;
        org.jfree.data.time.RegularTimePeriod $stack5;
        int $stack11;

        this := @this: org.jfree.data.time.Hour;

        $stack3 = this.<org.jfree.data.time.Hour: byte hour>;

        if $stack3 == 23 goto label1;

        $stack8 = new org.jfree.data.time.Hour;

        $stack9 = this.<org.jfree.data.time.Hour: byte hour>;

        $stack11 = $stack9 + 1;

        $stack10 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        specialinvoke $stack8.<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>($stack11, $stack10);

        result = $stack8;

        goto label3;

     label1:
        $stack4 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack5 = virtualinvoke $stack4.<org.jfree.data.time.Day: org.jfree.data.time.RegularTimePeriod next()>();

        nextDay = (org.jfree.data.time.Day) $stack5;

        if nextDay == null goto label2;

        $stack6 = new org.jfree.data.time.Hour;

        specialinvoke $stack6.<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>(0, nextDay);

        result = $stack6;

        goto label3;

     label2:
        result = null;

     label3:
        return result;
    }

    public long getSerialIndex()
    {
        org.jfree.data.time.Hour this;
        org.jfree.data.time.Day $stack1;
        long $stack2, $stack4, $stack5, $stack6;
        byte $stack3;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack2 = virtualinvoke $stack1.<org.jfree.data.time.Day: long getSerialIndex()>();

        $stack5 = $stack2 * 24L;

        $stack3 = this.<org.jfree.data.time.Hour: byte hour>;

        $stack4 = (long) $stack3;

        $stack6 = $stack5 + $stack4;

        return $stack6;
    }

    public long getFirstMillisecond(java.util.Calendar)
    {
        org.jfree.data.time.Hour this;
        org.jfree.data.time.Day $stack5, $stack7, $stack9;
        int year, $stack8, month, dom;
        java.util.Calendar calendar;
        byte $stack11;
        long $stack12;

        this := @this: org.jfree.data.time.Hour;

        calendar := @parameter0: java.util.Calendar;

        $stack5 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        year = virtualinvoke $stack5.<org.jfree.data.time.Day: int getYear()>();

        $stack7 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack8 = virtualinvoke $stack7.<org.jfree.data.time.Day: int getMonth()>();

        month = $stack8 - 1;

        $stack9 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        dom = virtualinvoke $stack9.<org.jfree.data.time.Day: int getDayOfMonth()>();

        $stack11 = this.<org.jfree.data.time.Hour: byte hour>;

        virtualinvoke calendar.<java.util.Calendar: void set(int,int,int,int,int,int)>(year, month, dom, $stack11, 0, 0);

        virtualinvoke calendar.<java.util.Calendar: void set(int,int)>(14, 0);

        $stack12 = virtualinvoke calendar.<java.util.Calendar: long getTimeInMillis()>();

        return $stack12;
    }

    public long getLastMillisecond(java.util.Calendar)
    {
        org.jfree.data.time.Hour this;
        org.jfree.data.time.Day $stack5, $stack7, $stack9;
        int year, $stack8, month, dom;
        java.util.Calendar calendar;
        byte $stack11;
        long $stack12;

        this := @this: org.jfree.data.time.Hour;

        calendar := @parameter0: java.util.Calendar;

        $stack5 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        year = virtualinvoke $stack5.<org.jfree.data.time.Day: int getYear()>();

        $stack7 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack8 = virtualinvoke $stack7.<org.jfree.data.time.Day: int getMonth()>();

        month = $stack8 - 1;

        $stack9 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        dom = virtualinvoke $stack9.<org.jfree.data.time.Day: int getDayOfMonth()>();

        $stack11 = this.<org.jfree.data.time.Hour: byte hour>;

        virtualinvoke calendar.<java.util.Calendar: void set(int,int,int,int,int,int)>(year, month, dom, $stack11, 59, 59);

        virtualinvoke calendar.<java.util.Calendar: void set(int,int)>(14, 999);

        $stack12 = virtualinvoke calendar.<java.util.Calendar: long getTimeInMillis()>();

        return $stack12;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.data.time.Hour this, that;
        boolean $stack3, $stack8;
        byte $stack4, $stack5;
        org.jfree.data.time.Day $stack6, $stack7;

        this := @this: org.jfree.data.time.Hour;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.data.time.Hour;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.data.time.Hour) obj;

        $stack5 = this.<org.jfree.data.time.Hour: byte hour>;

        $stack4 = that.<org.jfree.data.time.Hour: byte hour>;

        if $stack5 == $stack4 goto label3;

        return 0;

     label3:
        $stack7 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack6 = that.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack8 = virtualinvoke $stack7.<org.jfree.data.time.Day: boolean equals(java.lang.Object)>($stack6);

        if $stack8 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack1, $stack2, $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14;
        org.jfree.data.time.Hour this;
        byte $stack3;
        int $stack6, $stack9, $stack12;
        java.lang.String $stack15;

        this := @this: org.jfree.data.time.Hour;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $stack3 = this.<org.jfree.data.time.Hour: byte hour>;

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack6 = virtualinvoke this.<org.jfree.data.time.Hour: int getDayOfMonth()>();

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $stack9 = virtualinvoke this.<org.jfree.data.time.Hour: int getMonth()>();

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $stack12 = virtualinvoke this.<org.jfree.data.time.Hour: int getYear()>();

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack15;
    }

    public int hashCode()
    {
        org.jfree.data.time.Hour this;
        byte $stack2;
        int $stack3, $stack5, $stack6, result#2;
        org.jfree.data.time.Day $stack4;

        this := @this: org.jfree.data.time.Hour;

        $stack3 = 37 * 17;

        $stack2 = this.<org.jfree.data.time.Hour: byte hour>;

        result#2 = $stack3 + $stack2;

        $stack5 = 37 * result#2;

        $stack4 = this.<org.jfree.data.time.Hour: org.jfree.data.time.Day day>;

        $stack6 = virtualinvoke $stack4.<org.jfree.data.time.Day: int hashCode()>();

        result#2 = $stack5 + $stack6;

        return result#2;
    }

    public int compareTo(java.lang.Object)
    {
        java.lang.Object o1;
        boolean $stack4, $stack5;
        org.jfree.data.time.Hour h, this;
        org.jfree.data.time.Day $stack7, $stack8;
        byte $stack10;
        int $stack11, result;

        this := @this: org.jfree.data.time.Hour;

        o1 := @parameter0: java.lang.Object;

        $stack4 = o1 instanceof org.jfree.data.time.Hour;

        if $stack4 == 0 goto label2;

        h = (org.jfree.data.time.Hour) o1;

        $stack7 = virtualinvoke this.<org.jfree.data.time.Hour: org.jfree.data.time.Day getDay()>();

        $stack8 = virtualinvoke h.<org.jfree.data.time.Hour: org.jfree.data.time.Day getDay()>();

        result = virtualinvoke $stack7.<org.jfree.data.time.Day: int compareTo(java.lang.Object)>($stack8);

        if result != 0 goto label1;

        $stack10 = this.<org.jfree.data.time.Hour: byte hour>;

        $stack11 = virtualinvoke h.<org.jfree.data.time.Hour: int getHour()>();

        result = $stack10 - $stack11;

     label1:
        goto label4;

     label2:
        $stack5 = o1 instanceof org.jfree.data.time.RegularTimePeriod;

        if $stack5 == 0 goto label3;

        result = 0;

        goto label4;

     label3:
        result = 1;

     label4:
        return result;
    }

    public static org.jfree.data.time.Hour parseHour(java.lang.String)
    {
        int $stack9, $stack10, $stack13, $stack14, $stack15, $stack16, $stack17, hour;
        java.lang.String daystr, s, s#3, hourstr;
        org.jfree.data.time.Day day;
        org.jfree.data.time.Hour $stack22, result;

        s := @parameter0: java.lang.String;

        result = null;

        s#3 = virtualinvoke s.<java.lang.String: java.lang.String trim()>();

        $stack9 = virtualinvoke s#3.<java.lang.String: int length()>();

        $stack10 = staticinvoke <java.lang.Math: int min(int,int)>(10, $stack9);

        daystr = virtualinvoke s#3.<java.lang.String: java.lang.String substring(int,int)>(0, $stack10);

        day = staticinvoke <org.jfree.data.time.Day: org.jfree.data.time.Day parseDay(java.lang.String)>(daystr);

        if day == null goto label1;

        $stack13 = virtualinvoke daystr.<java.lang.String: int length()>();

        $stack14 = $stack13 + 1;

        $stack15 = virtualinvoke s#3.<java.lang.String: int length()>();

        $stack16 = staticinvoke <java.lang.Math: int min(int,int)>($stack14, $stack15);

        $stack17 = virtualinvoke s#3.<java.lang.String: int length()>();

        hourstr = virtualinvoke s#3.<java.lang.String: java.lang.String substring(int,int)>($stack16, $stack17);

        hourstr = virtualinvoke hourstr.<java.lang.String: java.lang.String trim()>();

        hour = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(hourstr);

        if hour < 0 goto label1;

        if hour > 23 goto label1;

        $stack22 = new org.jfree.data.time.Hour;

        specialinvoke $stack22.<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>(hour, day);

        result = $stack22;

     label1:
        return result;
    }

    public static void <clinit>()
    {
        <org.jfree.data.time.Hour: int LAST_HOUR_IN_DAY> = 23;

        <org.jfree.data.time.Hour: int FIRST_HOUR_IN_DAY> = 0;

        <org.jfree.data.time.Hour: long serialVersionUID> = -835471579831937652L;

        return;
    }
}
