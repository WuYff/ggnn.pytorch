public class org.jfree.chart.needle.PointerNeedle extends org.jfree.chart.needle.MeterNeedle implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.jfree.chart.needle.PointerNeedle this;

        this := @this: org.jfree.chart.needle.PointerNeedle;

        specialinvoke this.<org.jfree.chart.needle.MeterNeedle: void <init>()>();

        return;
    }

    protected void drawNeedle(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, double)
    {
        java.awt.geom.GeneralPath $stack14, $stack15;
        java.awt.geom.Rectangle2D plotArea;
        double $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, angle, $stack40, $stack41;
        float minX, minY, maxX, maxY, midX, midY;
        java.awt.geom.Point2D rotate;
        org.jfree.chart.needle.PointerNeedle this;
        java.awt.Paint $stack29, $stack30, $stack32, $stack33, $stack35, $stack28;
        java.awt.Graphics2D g2;
        java.awt.Stroke $stack31;
        byte $stack37;
        java.awt.geom.AffineTransform $stack39, $stack42, $stack43;

        this := @this: org.jfree.chart.needle.PointerNeedle;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        rotate := @parameter2: java.awt.geom.Point2D;

        angle := @parameter3: double;

        $stack14 = new java.awt.geom.GeneralPath;

        specialinvoke $stack14.<java.awt.geom.GeneralPath: void <init>()>();

        $stack15 = new java.awt.geom.GeneralPath;

        specialinvoke $stack15.<java.awt.geom.GeneralPath: void <init>()>();

        $stack16 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        minX = (float) $stack16;

        $stack17 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        minY = (float) $stack17;

        $stack18 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        maxX = (float) $stack18;

        $stack19 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        maxY = (float) $stack19;

        $stack20 = (double) minX;

        $stack21 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack22 = $stack21 / 2.0;

        $stack23 = $stack20 + $stack22;

        midX = (float) $stack23;

        $stack24 = (double) minY;

        $stack25 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack26 = $stack25 / 2.0;

        $stack27 = $stack24 + $stack26;

        midY = (float) $stack27;

        virtualinvoke $stack14.<java.awt.geom.GeneralPath: void moveTo(float,float)>(minX, midY);

        virtualinvoke $stack14.<java.awt.geom.GeneralPath: void lineTo(float,float)>(midX, minY);

        virtualinvoke $stack14.<java.awt.geom.GeneralPath: void lineTo(float,float)>(maxX, midY);

        virtualinvoke $stack14.<java.awt.geom.GeneralPath: void closePath()>();

        virtualinvoke $stack15.<java.awt.geom.GeneralPath: void moveTo(float,float)>(minX, midY);

        virtualinvoke $stack15.<java.awt.geom.GeneralPath: void lineTo(float,float)>(midX, maxY);

        virtualinvoke $stack15.<java.awt.geom.GeneralPath: void lineTo(float,float)>(maxX, midY);

        virtualinvoke $stack15.<java.awt.geom.GeneralPath: void closePath()>();

        if rotate == null goto label1;

        $stack37 = angle cmpl 0.0;

        if $stack37 == 0 goto label1;

        $stack39 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.geom.AffineTransform getTransform()>();

        $stack40 = virtualinvoke rotate.<java.awt.geom.Point2D: double getX()>();

        $stack41 = virtualinvoke rotate.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $stack39.<java.awt.geom.AffineTransform: void setToRotation(double,double,double)>(angle, $stack40, $stack41);

        $stack42 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.geom.AffineTransform getTransform()>();

        virtualinvoke $stack14.<java.awt.geom.GeneralPath: void transform(java.awt.geom.AffineTransform)>($stack42);

        $stack43 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.geom.AffineTransform getTransform()>();

        virtualinvoke $stack15.<java.awt.geom.GeneralPath: void transform(java.awt.geom.AffineTransform)>($stack43);

     label1:
        $stack28 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.Paint getFillPaint()>();

        if $stack28 == null goto label2;

        $stack35 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.Paint getFillPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack35);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack14);

     label2:
        $stack29 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.Paint getHighlightPaint()>();

        if $stack29 == null goto label3;

        $stack33 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.Paint getHighlightPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack33);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack15);

     label3:
        $stack30 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.Paint getOutlinePaint()>();

        if $stack30 == null goto label4;

        $stack31 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.Stroke getOutlineStroke()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack31);

        $stack32 = virtualinvoke this.<org.jfree.chart.needle.PointerNeedle: java.awt.Paint getOutlinePaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack32);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack14);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack15);

     label4:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.needle.PointerNeedle this;
        boolean $stack2, $stack3;

        this := @this: org.jfree.chart.needle.PointerNeedle;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack2 = obj instanceof org.jfree.chart.needle.PointerNeedle;

        if $stack2 != 0 goto label2;

        return 0;

     label2:
        $stack3 = specialinvoke this.<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>(obj);

        if $stack3 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.needle.PointerNeedle this;
        int $stack1;

        this := @this: org.jfree.chart.needle.PointerNeedle;

        $stack1 = specialinvoke this.<org.jfree.chart.needle.MeterNeedle: int hashCode()>();

        return $stack1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.needle.PointerNeedle this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.needle.PointerNeedle;

        $stack1 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.needle.PointerNeedle: long serialVersionUID> = -4744677345334729606L;

        return;
    }
}
