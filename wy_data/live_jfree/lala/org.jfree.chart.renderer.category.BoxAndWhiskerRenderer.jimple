public class org.jfree.chart.renderer.category.BoxAndWhiskerRenderer extends org.jfree.chart.renderer.category.AbstractCategoryItemRenderer implements java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.awt.Paint artifactPaint;
    private boolean fillBox;
    private double itemMargin;
    private double maximumBarWidth;
    private boolean medianVisible;
    private boolean meanVisible;
    private boolean useOutlinePaintForWhiskers;
    private double whiskerWidth;

    public void <init>()
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        java.awt.Color $stack1;
        java.awt.geom.Rectangle2D$Double $stack2;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>();

        $stack1 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint artifactPaint> = $stack1;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean fillBox> = 1;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double itemMargin> = 0.2;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double maximumBarWidth> = 1.0;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean medianVisible> = 1;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean meanVisible> = 1;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean useOutlinePaintForWhiskers> = 0;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double whiskerWidth> = 1.0;

        $stack2 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack2.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(-4.0, -4.0, 8.0, 8.0);

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void setDefaultLegendShape(java.awt.Shape)>($stack2);

        return;
    }

    public java.awt.Paint getArtifactPaint()
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        return $stack1;
    }

    public void setArtifactPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint artifactPaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getFillBox()
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean fillBox>;

        return $stack1;
    }

    public void setFillBox(boolean)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean fillBox> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public double getItemMargin()
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double itemMargin>;

        return $stack1;
    }

    public void setItemMargin(double)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        double margin;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        margin := @parameter0: double;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double itemMargin> = margin;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public double getMaximumBarWidth()
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double maximumBarWidth>;

        return $stack1;
    }

    public void setMaximumBarWidth(double)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        double percent;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        percent := @parameter0: double;

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double maximumBarWidth> = percent;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean isMeanVisible()
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean meanVisible>;

        return $stack1;
    }

    public void setMeanVisible(boolean)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean meanVisible>;

        if $stack2 != visible goto label1;

        return;

     label1:
        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean meanVisible> = visible;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean isMedianVisible()
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean medianVisible>;

        return $stack1;
    }

    public void setMedianVisible(boolean)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean medianVisible>;

        if $stack2 != visible goto label1;

        return;

     label1:
        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean medianVisible> = visible;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseOutlinePaintForWhiskers()
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean useOutlinePaintForWhiskers>;

        return $stack1;
    }

    public void setUseOutlinePaintForWhiskers(boolean)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        boolean flag, $stack2;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        flag := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean useOutlinePaintForWhiskers>;

        if $stack2 != flag goto label1;

        return;

     label1:
        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean useOutlinePaintForWhiskers> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public double getWhiskerWidth()
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double whiskerWidth>;

        return $stack1;
    }

    public void setWhiskerWidth(double)
    {
        double width, $stack6;
        byte $stack3, $stack5, $stack7;
        java.lang.IllegalArgumentException $stack4;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        width := @parameter0: double;

        $stack3 = width cmpg 0.0;

        if $stack3 < 0 goto label1;

        $stack5 = width cmpl 1.0;

        if $stack5 <= 0 goto label2;

     label1:
        $stack4 = new java.lang.IllegalArgumentException;

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value for whisker width out of range");

        throw $stack4;

     label2:
        $stack6 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double whiskerWidth>;

        $stack7 = width cmpl $stack6;

        if $stack7 != 0 goto label3;

        return;

     label3:
        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double whiskerWidth> = width;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.LegendItem getLegendItem(int, int)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        org.jfree.chart.plot.CategoryPlot cp;
        int series, datasetIndex;
        boolean $stack16, $stack17;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.labels.CategorySeriesLabelGenerator $stack19, $stack21, $stack22, $stack41, $stack65;
        java.lang.String label, toolTipText, urlText;
        java.awt.Shape shape;
        java.awt.Paint paint, outlinePaint, labelPaint;
        java.awt.Stroke outlineStroke;
        org.jfree.chart.LegendItem $stack27;
        java.awt.Font $stack28;
        java.lang.Comparable $stack30;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        datasetIndex := @parameter0: int;

        series := @parameter1: int;

        cp = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: org.jfree.chart.plot.CategoryPlot getPlot()>();

        if cp != null goto label1;

        return null;

     label1:
        $stack16 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean isSeriesVisible(int)>(series);

        if $stack16 == 0 goto label2;

        $stack17 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean isSeriesVisibleInLegend(int)>(series);

        if $stack17 != 0 goto label3;

     label2:
        return null;

     label3:
        dataset = virtualinvoke cp.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(datasetIndex);

        $stack19 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemLabelGenerator()>();

        label = interfaceinvoke $stack19.<org.jfree.chart.labels.CategorySeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)>(dataset, series);

        toolTipText = null;

        $stack21 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemToolTipGenerator()>();

        if $stack21 == null goto label4;

        $stack65 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemToolTipGenerator()>();

        toolTipText = interfaceinvoke $stack65.<org.jfree.chart.labels.CategorySeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)>(dataset, series);

     label4:
        urlText = null;

        $stack22 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemURLGenerator()>();

        if $stack22 == null goto label5;

        $stack41 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemURLGenerator()>();

        urlText = interfaceinvoke $stack41.<org.jfree.chart.labels.CategorySeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)>(dataset, series);

     label5:
        shape = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Shape lookupLegendShape(int)>(series);

        paint = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint lookupSeriesPaint(int)>(series);

        outlinePaint = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint lookupSeriesOutlinePaint(int)>(series);

        outlineStroke = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Stroke lookupSeriesOutlineStroke(int)>(series);

        $stack27 = new org.jfree.chart.LegendItem;

        specialinvoke $stack27.<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>(label, label, toolTipText, urlText, shape, paint, outlineStroke, outlinePaint);

        $stack28 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Font lookupLegendTextFont(int)>(series);

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setLabelFont(java.awt.Font)>($stack28);

        labelPaint = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint lookupLegendTextPaint(int)>(series);

        if labelPaint == null goto label6;

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setLabelPaint(java.awt.Paint)>(labelPaint);

     label6:
        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setDataset(org.jfree.data.general.Dataset)>(dataset);

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setDatasetIndex(int)>(datasetIndex);

        $stack30 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(series);

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setSeriesKey(java.lang.Comparable)>($stack30);

        virtualinvoke $stack27.<org.jfree.chart.LegendItem: void setSeriesIndex(int)>(series);

        return $stack27;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.data.Range $stack2;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        $stack2 = specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(dataset, 1);

        return $stack2;
    }

    public org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, int, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.CategoryPlot plot;
        int rendererIndex, columns, rows, $stack38, $stack41, $stack42, $stack43;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.plot.PlotOrientation orientation, $stack28, $stack29;
        double maxWidth, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, used, $stack39, $stack44, $stack45, $stack46, space, $stack30, categoryMargin, currentItemMargin;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        plot := @parameter2: org.jfree.chart.plot.CategoryPlot;

        rendererIndex := @parameter3: int;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        state = specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>(g2, dataArea, plot, rendererIndex, info);

        domainAxis = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: org.jfree.chart.axis.CategoryAxis getDomainAxis(org.jfree.chart.plot.CategoryPlot,int)>(plot, rendererIndex);

        dataset = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(rendererIndex);

        if dataset == null goto label6;

        columns = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        rows = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getRowCount()>();

        space = 0.0;

        orientation = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack28 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack28 goto label1;

        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        goto label2;

     label1:
        $stack29 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack29 goto label2;

        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

     label2:
        $stack30 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double getMaximumBarWidth()>();

        maxWidth = space * $stack30;

        categoryMargin = 0.0;

        currentItemMargin = 0.0;

        if columns <= 1 goto label3;

        categoryMargin = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryMargin()>();

     label3:
        if rows <= 1 goto label4;

        currentItemMargin = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double getItemMargin()>();

     label4:
        $stack32 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getLowerMargin()>();

        $stack33 = 1.0 - $stack32;

        $stack34 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getUpperMargin()>();

        $stack35 = $stack33 - $stack34;

        $stack36 = $stack35 - categoryMargin;

        $stack37 = $stack36 - currentItemMargin;

        used = space * $stack37;

        $stack38 = rows * columns;

        if $stack38 <= 0 goto label5;

        $stack41 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        $stack42 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getRowCount()>();

        $stack43 = $stack41 * $stack42;

        $stack44 = (double) $stack43;

        $stack45 = used / $stack44;

        $stack46 = staticinvoke <java.lang.Math: double min(double,double)>($stack45, maxWidth);

        virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: void setBarWidth(double)>($stack46);

        goto label6;

     label5:
        $stack39 = staticinvoke <java.lang.Math: double min(double,double)>(used, maxWidth);

        virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: void setBarWidth(double)>($stack39);

     label6:
        return state;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, int)
    {
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        int row, column, pass;
        boolean $stack12, $stack13;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.plot.PlotOrientation orientation, $stack15, $stack16;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        java.lang.IllegalArgumentException $stack17;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.category.CategoryItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        plot := @parameter3: org.jfree.chart.plot.CategoryPlot;

        domainAxis := @parameter4: org.jfree.chart.axis.CategoryAxis;

        rangeAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter6: org.jfree.data.category.CategoryDataset;

        row := @parameter7: int;

        column := @parameter8: int;

        pass := @parameter9: int;

        $stack12 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean getItemVisible(int,int)>(row, column);

        if $stack12 != 0 goto label1;

        return;

     label1:
        $stack13 = dataset instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset;

        if $stack13 != 0 goto label2;

        $stack17 = new java.lang.IllegalArgumentException;

        specialinvoke $stack17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("BoxAndWhiskerRenderer.drawItem() : the data should be of type BoxAndWhiskerCategoryDataset only.");

        throw $stack17;

     label2:
        orientation = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack15 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack15 goto label3;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column);

        goto label4;

     label3:
        $stack16 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack16 goto label4;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column);

     label4:
        return;
    }

    public void drawHorizontalItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int)
    {
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bawDataset;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        int column, $stack41, $stack44, seriesCount, categoryCount, row, $stack159, $stack160, $stack165;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack42, $stack45, location;
        double categoryEnd, categoryStart, $stack47, categoryWidth, $stack51, $stack52, $stack67, $stack70, $stack71, $stack74, $stack76, $stack77, $stack78, $stack80, $stack81, $stack84, $stack85, $stack86, $stack87, $stack91, $stack93, $stack95, xxMax, $stack97, xxMin, $stack99, $stack100, yymid, $stack101, $stack102, $stack103, halfW, $stack105, $stack106, $stack107, $stack108, $stack114, $stack115, $stack118, $stack119, $stack157, $stack158, $stack161, $stack162, $stack163, $stack164, $stack166, $stack167, $stack168, $stack169, $stack170, $stack171, $stack172, $stack173, $stack174, yy, seriesGap, usedWidth, offset, xxQ1, xxQ3, xxMean;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack53, outlinePaint, $stack60;
        java.lang.Number xQ3, xMin, usedWidth#8, offset#9, xxQ3#38;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        java.awt.geom.Line2D$Double $stack69, $stack112, $stack113, $stack116, $stack117;
        byte $stack79, $stack82;
        java.awt.geom.Ellipse2D$Double $stack83;
        java.awt.geom.Rectangle2D$Double $stack104, box;
        boolean $stack109, $stack111, $stack61, $stack62;
        java.awt.Stroke $stack120, seriesGap#7;
        org.jfree.chart.plot.PlotRenderingInfo $stack63;
        org.jfree.chart.entity.EntityCollection xxQ3#55;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.category.CategoryItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        plot := @parameter3: org.jfree.chart.plot.CategoryPlot;

        domainAxis := @parameter4: org.jfree.chart.axis.CategoryAxis;

        rangeAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter6: org.jfree.data.category.CategoryDataset;

        row := @parameter7: int;

        column := @parameter8: int;

        bawDataset = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;

        $stack41 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: int getColumnCount()>();

        $stack42 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        categoryEnd = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack41, dataArea, $stack42);

        $stack44 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: int getColumnCount()>();

        $stack45 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        categoryStart = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack44, dataArea, $stack45);

        $stack47 = categoryEnd - categoryStart;

        categoryWidth = staticinvoke <java.lang.Math: double abs(double)>($stack47);

        seriesCount = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: int getRowCount()>();

        categoryCount = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: int getColumnCount()>();

        if seriesCount <= 1 goto label1;

        $stack157 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack158 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double getItemMargin()>();

        $stack162 = $stack157 * $stack158;

        $stack159 = seriesCount - 1;

        $stack160 = categoryCount * $stack159;

        $stack161 = (double) $stack160;

        seriesGap = $stack162 / $stack161;

        $stack163 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack164 = (double) seriesCount;

        $stack168 = $stack163 * $stack164;

        $stack165 = seriesCount - 1;

        $stack166 = (double) $stack165;

        $stack167 = seriesGap * $stack166;

        usedWidth = $stack168 + $stack167;

        $stack169 = categoryWidth - usedWidth;

        offset = $stack169 / 2.0;

        $stack170 = categoryStart + offset;

        $stack171 = (double) row;

        $stack172 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack173 = $stack172 + seriesGap;

        $stack174 = $stack171 * $stack173;

        yy = $stack170 + $stack174;

        goto label2;

     label1:
        $stack51 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack52 = categoryWidth - $stack51;

        seriesGap = $stack52 / 2.0;

        yy = categoryStart + seriesGap;

     label2:
        $stack53 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint getItemPaint(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack53);

        seriesGap#7 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Stroke getItemStroke(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(seriesGap#7);

        location = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        usedWidth#8 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getQ1Value(int,int)>(row, column);

        xQ3 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getQ3Value(int,int)>(row, column);

        offset#9 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMaxRegularValue(int,int)>(row, column);

        xMin = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMinRegularValue(int,int)>(row, column);

        box = null;

        if usedWidth#8 == null goto label5;

        if xQ3 == null goto label5;

        if offset#9 == null goto label5;

        if xMin == null goto label5;

        $stack91 = virtualinvoke usedWidth#8.<java.lang.Number: double doubleValue()>();

        xxQ1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack91, dataArea, location);

        $stack93 = virtualinvoke xQ3.<java.lang.Number: double doubleValue()>();

        xxQ3 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack93, dataArea, location);

        $stack95 = virtualinvoke offset#9.<java.lang.Number: double doubleValue()>();

        xxMax = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack95, dataArea, location);

        $stack97 = virtualinvoke xMin.<java.lang.Number: double doubleValue()>();

        xxMin = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack97, dataArea, location);

        $stack99 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack100 = $stack99 / 2.0;

        yymid = yy + $stack100;

        $stack101 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack103 = $stack101 / 2.0;

        $stack102 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double whiskerWidth>;

        halfW = $stack103 * $stack102;

        $stack104 = new java.awt.geom.Rectangle2D$Double;

        $stack105 = staticinvoke <java.lang.Math: double min(double,double)>(xxQ1, xxQ3);

        $stack106 = xxQ1 - xxQ3;

        $stack107 = staticinvoke <java.lang.Math: double abs(double)>($stack106);

        $stack108 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        specialinvoke $stack104.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack105, yy, $stack107, $stack108);

        box = $stack104;

        $stack109 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean fillBox>;

        if $stack109 == 0 goto label3;

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack104);

     label3:
        outlinePaint = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(row, column);

        $stack111 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean useOutlinePaintForWhiskers>;

        if $stack111 == 0 goto label4;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(outlinePaint);

     label4:
        $stack112 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack112.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xxMax, yymid, xxQ3, yymid);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack112);

        $stack113 = new java.awt.geom.Line2D$Double;

        $stack115 = yymid - halfW;

        $stack114 = yymid + halfW;

        specialinvoke $stack113.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xxMax, $stack115, xxMax, $stack114);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack113);

        $stack116 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack116.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xxMin, yymid, xxQ1, yymid);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack116);

        $stack117 = new java.awt.geom.Line2D$Double;

        $stack119 = yymid - halfW;

        $stack118 = yymid + halfW;

        specialinvoke $stack117.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xxMin, $stack119, xxMin, $stack118);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack117);

        $stack120 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Stroke getItemOutlineStroke(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack120);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(outlinePaint);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack104);

     label5:
        $stack60 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack60);

        $stack61 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean meanVisible>;

        if $stack61 == 0 goto label6;

        xxQ3#38 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMeanValue(int,int)>(row, column);

        if xxQ3#38 == null goto label6;

        $stack74 = virtualinvoke xxQ3#38.<java.lang.Number: double doubleValue()>();

        xxMean = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack74, dataArea, location);

        $stack76 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        xxQ1 = $stack76 / 4.0;

        $stack77 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack78 = $stack77 - xxQ1;

        $stack79 = xxMean cmpl $stack78;

        if $stack79 <= 0 goto label6;

        $stack80 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack81 = $stack80 + xxQ1;

        $stack82 = xxMean cmpg $stack81;

        if $stack82 >= 0 goto label6;

        $stack83 = new java.awt.geom.Ellipse2D$Double;

        $stack87 = xxMean - xxQ1;

        $stack86 = yy + xxQ1;

        $stack85 = xxQ1 * 2.0;

        $stack84 = xxQ1 * 2.0;

        specialinvoke $stack83.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack87, $stack86, $stack85, $stack84);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack83);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack83);

     label6:
        $stack62 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean medianVisible>;

        if $stack62 == 0 goto label7;

        xxQ3#38 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMedianValue(int,int)>(row, column);

        if xxQ3#38 == null goto label7;

        $stack67 = virtualinvoke xxQ3#38.<java.lang.Number: double doubleValue()>();

        xxMean = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack67, dataArea, location);

        $stack69 = new java.awt.geom.Line2D$Double;

        $stack70 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack71 = yy + $stack70;

        specialinvoke $stack69.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xxMean, yy, xxMean, $stack71);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack69);

     label7:
        $stack63 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.plot.PlotRenderingInfo getInfo()>();

        if $stack63 == null goto label8;

        if box == null goto label8;

        xxQ3#55 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if xxQ3#55 == null goto label8;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)>(xxQ3#55, dataset, row, column, box);

     label8:
        return;
    }

    public void drawVerticalItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int)
    {
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.data.statistics.BoxAndWhiskerCategoryDataset bawDataset;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        int column, $stack51, $stack54, seriesCount, categoryCount, row, $stack81, $stack251, $stack252, $stack257, i;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack52, $stack55, location;
        double categoryEnd, categoryStart, categoryWidth, $stack59, $stack60, $stack89, $stack90, $stack91, $stack92, $stack93, $stack94, $stack95, $stack96, $stack103, $stack114, $stack116, $stack118, $stack120, $stack126, $stack127, $stack128, $stack133, $stack134, $stack135, $stack159, $stack162, $stack163, $stack166, $stack168, $stack169, $stack170, $stack172, $stack173, $stack176, $stack177, $stack178, $stack179, $stack183, $stack185, $stack187, $stack189, $stack191, $stack192, $stack193, $stack194, $stack195, $stack197, $stack198, $stack199, $stack200, $stack206, $stack207, $stack210, $stack211, $stack249, $stack250, $stack253, $stack254, $stack255, $stack256, $stack258, $stack259, $stack260, $stack261, $stack262, $stack263, $stack264, $stack265, $stack266, xx, seriesGap, usedWidth, offset, aRadius, yyQ1, yyQ3, yyMax, yyMin, xxmid, halfW, avgEllipse#54, $stack71, $stack72, $stack73, $stack74, $stack75;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        java.awt.Graphics2D g2;
        java.awt.Stroke s, $stack212;
        java.lang.Number yQ1, yQ3, yMax, yMin, $stack108, maxOutlier, minRegular, maxRegular, yyQ1#42, outlinePaint#122;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        boolean $stack83, $stack85, $stack86, $stack87, $stack101, $stack201, $stack203, $stack69, $stack70;
        java.lang.Object $stack98, $stack104, $stack107;
        org.jfree.chart.renderer.Outlier outlier, $stack125, $stack132, halfW#130;
        byte $stack115, $stack117, $stack119, $stack121, $stack171, $stack174;
        java.awt.geom.Line2D$Double $stack161, $stack204, $stack205, $stack208, $stack209;
        java.awt.geom.Ellipse2D$Double $stack175;
        java.awt.geom.Rectangle2D$Double $stack196, box;
        java.awt.Paint offset#7, outlinePaint, $stack68;
        java.util.ArrayList $stack76;
        org.jfree.chart.renderer.OutlierListCollection $stack77;
        java.util.List xxmid#117;
        java.util.Iterator i#129;
        org.jfree.chart.renderer.OutlierList halfW#132;
        java.awt.geom.Point2D outlinePaint#133;
        org.jfree.chart.plot.PlotRenderingInfo $stack79;
        org.jfree.chart.entity.EntityCollection i#138;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.category.CategoryItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        plot := @parameter3: org.jfree.chart.plot.CategoryPlot;

        domainAxis := @parameter4: org.jfree.chart.axis.CategoryAxis;

        rangeAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter6: org.jfree.data.category.CategoryDataset;

        row := @parameter7: int;

        column := @parameter8: int;

        bawDataset = (org.jfree.data.statistics.BoxAndWhiskerCategoryDataset) dataset;

        $stack51 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: int getColumnCount()>();

        $stack52 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        categoryEnd = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack51, dataArea, $stack52);

        $stack54 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: int getColumnCount()>();

        $stack55 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        categoryStart = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack54, dataArea, $stack55);

        categoryWidth = categoryEnd - categoryStart;

        seriesCount = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: int getRowCount()>();

        categoryCount = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: int getColumnCount()>();

        if seriesCount <= 1 goto label01;

        $stack249 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack250 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double getItemMargin()>();

        $stack254 = $stack249 * $stack250;

        $stack251 = seriesCount - 1;

        $stack252 = categoryCount * $stack251;

        $stack253 = (double) $stack252;

        seriesGap = $stack254 / $stack253;

        $stack255 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack256 = (double) seriesCount;

        $stack260 = $stack255 * $stack256;

        $stack257 = seriesCount - 1;

        $stack258 = (double) $stack257;

        $stack259 = seriesGap * $stack258;

        usedWidth = $stack260 + $stack259;

        $stack261 = categoryWidth - usedWidth;

        offset = $stack261 / 2.0;

        $stack262 = categoryStart + offset;

        $stack263 = (double) row;

        $stack264 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack265 = $stack264 + seriesGap;

        $stack266 = $stack263 * $stack265;

        xx = $stack262 + $stack266;

        goto label02;

     label01:
        $stack59 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack60 = categoryWidth - $stack59;

        seriesGap = $stack60 / 2.0;

        xx = categoryStart + seriesGap;

     label02:
        offset#7 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint getItemPaint(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(offset#7);

        s = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Stroke getItemStroke(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(s);

        aRadius = 0.0;

        location = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yQ1 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getQ1Value(int,int)>(row, column);

        yQ3 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getQ3Value(int,int)>(row, column);

        yMax = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMaxRegularValue(int,int)>(row, column);

        yMin = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMinRegularValue(int,int)>(row, column);

        box = null;

        if yQ1 == null goto label05;

        if yQ3 == null goto label05;

        if yMax == null goto label05;

        if yMin == null goto label05;

        $stack183 = virtualinvoke yQ1.<java.lang.Number: double doubleValue()>();

        yyQ1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack183, dataArea, location);

        $stack185 = virtualinvoke yQ3.<java.lang.Number: double doubleValue()>();

        yyQ3 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack185, dataArea, location);

        $stack187 = virtualinvoke yMax.<java.lang.Number: double doubleValue()>();

        yyMax = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack187, dataArea, location);

        $stack189 = virtualinvoke yMin.<java.lang.Number: double doubleValue()>();

        yyMin = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack189, dataArea, location);

        $stack191 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack192 = $stack191 / 2.0;

        xxmid = xx + $stack192;

        $stack193 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack195 = $stack193 / 2.0;

        $stack194 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double whiskerWidth>;

        halfW = $stack195 * $stack194;

        $stack196 = new java.awt.geom.Rectangle2D$Double;

        $stack197 = staticinvoke <java.lang.Math: double min(double,double)>(yyQ1, yyQ3);

        $stack198 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack199 = yyQ1 - yyQ3;

        $stack200 = staticinvoke <java.lang.Math: double abs(double)>($stack199);

        specialinvoke $stack196.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(xx, $stack197, $stack198, $stack200);

        box = $stack196;

        $stack201 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean fillBox>;

        if $stack201 == 0 goto label03;

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack196);

     label03:
        outlinePaint = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(row, column);

        $stack203 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean useOutlinePaintForWhiskers>;

        if $stack203 == 0 goto label04;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(outlinePaint);

     label04:
        $stack204 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack204.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xxmid, yyMax, xxmid, yyQ3);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack204);

        $stack205 = new java.awt.geom.Line2D$Double;

        $stack207 = xxmid - halfW;

        $stack206 = xxmid + halfW;

        specialinvoke $stack205.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack207, yyMax, $stack206, yyMax);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack205);

        $stack208 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack208.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xxmid, yyMin, xxmid, yyQ1);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack208);

        $stack209 = new java.awt.geom.Line2D$Double;

        $stack211 = xxmid - halfW;

        $stack210 = xxmid + halfW;

        specialinvoke $stack209.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack211, yyMin, $stack210, yyMin);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack209);

        $stack212 = virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Stroke getItemOutlineStroke(int,int)>(row, column);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack212);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(outlinePaint);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack196);

     label05:
        $stack68 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack68);

        $stack69 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean meanVisible>;

        if $stack69 == 0 goto label06;

        yyQ1#42 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMeanValue(int,int)>(row, column);

        if yyQ1#42 == null goto label06;

        $stack166 = virtualinvoke yyQ1#42.<java.lang.Number: double doubleValue()>();

        seriesGap = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack166, dataArea, location);

        $stack168 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        aRadius = $stack168 / 4.0;

        $stack169 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack170 = $stack169 - aRadius;

        $stack171 = seriesGap cmpl $stack170;

        if $stack171 <= 0 goto label06;

        $stack172 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack173 = $stack172 + aRadius;

        $stack174 = seriesGap cmpg $stack173;

        if $stack174 >= 0 goto label06;

        $stack175 = new java.awt.geom.Ellipse2D$Double;

        $stack179 = xx + aRadius;

        $stack178 = seriesGap - aRadius;

        $stack177 = aRadius * 2.0;

        $stack176 = aRadius * 2.0;

        specialinvoke $stack175.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack179, $stack178, $stack177, $stack176);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack175);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack175);

     label06:
        $stack70 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean medianVisible>;

        if $stack70 == 0 goto label07;

        yyQ1#42 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMedianValue(int,int)>(row, column);

        if yyQ1#42 == null goto label07;

        $stack159 = virtualinvoke yyQ1#42.<java.lang.Number: double doubleValue()>();

        avgEllipse#54 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack159, dataArea, location);

        $stack161 = new java.awt.geom.Line2D$Double;

        $stack162 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack163 = xx + $stack162;

        specialinvoke $stack161.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, avgEllipse#54, $stack163, avgEllipse#54);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack161);

     label07:
        $stack71 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        $stack72 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack71, dataArea, location);

        yyQ1 = $stack72 + aRadius;

        $stack73 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack74 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack73, dataArea, location);

        yyQ3 = $stack74 - aRadius;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(offset#7);

        $stack75 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        yyMax = $stack75 / 3.0;

        $stack76 = new java.util.ArrayList;

        specialinvoke $stack76.<java.util.ArrayList: void <init>()>();

        $stack77 = new org.jfree.chart.renderer.OutlierListCollection;

        specialinvoke $stack77.<org.jfree.chart.renderer.OutlierListCollection: void <init>()>();

        xxmid#117 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.util.List getOutliers(int,int)>(row, column);

        if xxmid#117 == null goto label21;

        i = 0;

     label08:
        $stack81 = interfaceinvoke xxmid#117.<java.util.List: int size()>();

        if i >= $stack81 goto label13;

        $stack107 = interfaceinvoke xxmid#117.<java.util.List: java.lang.Object get(int)>(i);

        $stack108 = (java.lang.Number) $stack107;

        halfW = virtualinvoke $stack108.<java.lang.Number: double doubleValue()>();

        outlinePaint#122 = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMinOutlier(int,int)>(row, column);

        maxOutlier = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMaxOutlier(int,int)>(row, column);

        minRegular = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMinRegularValue(int,int)>(row, column);

        maxRegular = interfaceinvoke bawDataset.<org.jfree.data.statistics.BoxAndWhiskerCategoryDataset: java.lang.Number getMaxRegularValue(int,int)>(row, column);

        $stack114 = virtualinvoke maxOutlier.<java.lang.Number: double doubleValue()>();

        $stack115 = halfW cmpl $stack114;

        if $stack115 <= 0 goto label09;

        virtualinvoke $stack77.<org.jfree.chart.renderer.OutlierListCollection: void setHighFarOut(boolean)>(1);

        goto label12;

     label09:
        $stack116 = virtualinvoke outlinePaint#122.<java.lang.Number: double doubleValue()>();

        $stack117 = halfW cmpg $stack116;

        if $stack117 >= 0 goto label10;

        virtualinvoke $stack77.<org.jfree.chart.renderer.OutlierListCollection: void setLowFarOut(boolean)>(1);

        goto label12;

     label10:
        $stack118 = virtualinvoke maxRegular.<java.lang.Number: double doubleValue()>();

        $stack119 = halfW cmpl $stack118;

        if $stack119 <= 0 goto label11;

        usedWidth = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(halfW, dataArea, location);

        $stack132 = new org.jfree.chart.renderer.Outlier;

        $stack133 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack134 = $stack133 / 2.0;

        $stack135 = xx + $stack134;

        specialinvoke $stack132.<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>($stack135, usedWidth, yyMax);

        interfaceinvoke $stack76.<java.util.List: boolean add(java.lang.Object)>($stack132);

        goto label12;

     label11:
        $stack120 = virtualinvoke minRegular.<java.lang.Number: double doubleValue()>();

        $stack121 = halfW cmpg $stack120;

        if $stack121 >= 0 goto label12;

        usedWidth = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(halfW, dataArea, location);

        $stack125 = new org.jfree.chart.renderer.Outlier;

        $stack126 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack127 = $stack126 / 2.0;

        $stack128 = xx + $stack127;

        specialinvoke $stack125.<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>($stack128, usedWidth, yyMax);

        interfaceinvoke $stack76.<java.util.List: boolean add(java.lang.Object)>($stack125);

     label12:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($stack76);

        i = i + 1;

        goto label08;

     label13:
        i#129 = interfaceinvoke $stack76.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $stack83 = interfaceinvoke i#129.<java.util.Iterator: boolean hasNext()>();

        if $stack83 == 0 goto label15;

        $stack104 = interfaceinvoke i#129.<java.util.Iterator: java.lang.Object next()>();

        halfW#130 = (org.jfree.chart.renderer.Outlier) $stack104;

        virtualinvoke $stack77.<org.jfree.chart.renderer.OutlierListCollection: boolean add(org.jfree.chart.renderer.Outlier)>(halfW#130);

        goto label14;

     label15:
        i#129 = virtualinvoke $stack77.<org.jfree.chart.renderer.OutlierListCollection: java.util.Iterator iterator()>();

     label16:
        $stack85 = interfaceinvoke i#129.<java.util.Iterator: boolean hasNext()>();

        if $stack85 == 0 goto label19;

        $stack98 = interfaceinvoke i#129.<java.util.Iterator: java.lang.Object next()>();

        halfW#132 = (org.jfree.chart.renderer.OutlierList) $stack98;

        outlier = virtualinvoke halfW#132.<org.jfree.chart.renderer.OutlierList: org.jfree.chart.renderer.Outlier getAveragedOutlier()>();

        outlinePaint#133 = virtualinvoke outlier.<org.jfree.chart.renderer.Outlier: java.awt.geom.Point2D getPoint()>();

        $stack101 = virtualinvoke halfW#132.<org.jfree.chart.renderer.OutlierList: boolean isMultiple()>();

        if $stack101 == 0 goto label17;

        $stack103 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        specialinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawMultipleEllipse(java.awt.geom.Point2D,double,double,java.awt.Graphics2D)>(outlinePaint#133, $stack103, yyMax, g2);

        goto label18;

     label17:
        specialinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawEllipse(java.awt.geom.Point2D,double,java.awt.Graphics2D)>(outlinePaint#133, yyMax, g2);

     label18:
        goto label16;

     label19:
        $stack86 = virtualinvoke $stack77.<org.jfree.chart.renderer.OutlierListCollection: boolean isHighFarOut()>();

        if $stack86 == 0 goto label20;

        $stack93 = aRadius / 2.0;

        $stack94 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack95 = $stack94 / 2.0;

        $stack96 = xx + $stack95;

        specialinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawHighFarOut(double,java.awt.Graphics2D,double,double)>($stack93, g2, $stack96, yyQ1);

     label20:
        $stack87 = virtualinvoke $stack77.<org.jfree.chart.renderer.OutlierListCollection: boolean isLowFarOut()>();

        if $stack87 == 0 goto label21;

        $stack89 = aRadius / 2.0;

        $stack90 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack91 = $stack90 / 2.0;

        $stack92 = xx + $stack91;

        specialinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawLowFarOut(double,java.awt.Graphics2D,double,double)>($stack89, g2, $stack92, yyQ3);

     label21:
        $stack79 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.plot.PlotRenderingInfo getInfo()>();

        if $stack79 == null goto label22;

        if box == null goto label22;

        i#138 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if i#138 == null goto label22;

        virtualinvoke this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)>(i#138, dataset, row, column, box);

     label22:
        return;
    }

    private void drawEllipse(java.awt.geom.Point2D, double, java.awt.Graphics2D)
    {
        java.awt.geom.Ellipse2D$Double $stack6;
        java.awt.geom.Point2D point;
        double $stack7, oRadius, $stack8, $stack9, $stack10;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        point := @parameter0: java.awt.geom.Point2D;

        oRadius := @parameter1: double;

        g2 := @parameter2: java.awt.Graphics2D;

        $stack6 = new java.awt.geom.Ellipse2D$Double;

        $stack7 = virtualinvoke point.<java.awt.geom.Point2D: double getX()>();

        $stack8 = oRadius / 2.0;

        $stack9 = $stack7 + $stack8;

        $stack10 = virtualinvoke point.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $stack6.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack9, $stack10, oRadius, oRadius);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack6);

        return;
    }

    private void drawMultipleEllipse(java.awt.geom.Point2D, double, double, java.awt.Graphics2D)
    {
        java.awt.geom.Ellipse2D$Double $stack9, $stack15;
        java.awt.geom.Point2D point;
        double $stack10, boxWidth, $stack11, oRadius, $stack12, $stack13, $stack14, $stack16, $stack17, $stack18, $stack19;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        point := @parameter0: java.awt.geom.Point2D;

        boxWidth := @parameter1: double;

        oRadius := @parameter2: double;

        g2 := @parameter3: java.awt.Graphics2D;

        $stack9 = new java.awt.geom.Ellipse2D$Double;

        $stack10 = virtualinvoke point.<java.awt.geom.Point2D: double getX()>();

        $stack11 = boxWidth / 2.0;

        $stack12 = $stack10 - $stack11;

        $stack13 = $stack12 + oRadius;

        $stack14 = virtualinvoke point.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $stack9.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack13, $stack14, oRadius, oRadius);

        $stack15 = new java.awt.geom.Ellipse2D$Double;

        $stack16 = virtualinvoke point.<java.awt.geom.Point2D: double getX()>();

        $stack17 = boxWidth / 2.0;

        $stack18 = $stack16 + $stack17;

        $stack19 = virtualinvoke point.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $stack15.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack18, $stack19, oRadius, oRadius);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack9);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack15);

        return;
    }

    private void drawHighFarOut(double, java.awt.Graphics2D, double, double)
    {
        double aRadius, side, xx, m, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20;
        java.awt.Graphics2D g2;
        java.awt.geom.Line2D$Double $stack10, $stack15, $stack18;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        aRadius := @parameter0: double;

        g2 := @parameter1: java.awt.Graphics2D;

        xx := @parameter2: double;

        m := @parameter3: double;

        side = aRadius * 2.0;

        $stack10 = new java.awt.geom.Line2D$Double;

        $stack14 = xx - side;

        $stack13 = m + side;

        $stack12 = xx + side;

        $stack11 = m + side;

        specialinvoke $stack10.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack14, $stack13, $stack12, $stack11);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack10);

        $stack15 = new java.awt.geom.Line2D$Double;

        $stack17 = xx - side;

        $stack16 = m + side;

        specialinvoke $stack15.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack17, $stack16, xx, m);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack15);

        $stack18 = new java.awt.geom.Line2D$Double;

        $stack20 = xx + side;

        $stack19 = m + side;

        specialinvoke $stack18.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack20, $stack19, xx, m);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack18);

        return;
    }

    private void drawLowFarOut(double, java.awt.Graphics2D, double, double)
    {
        double aRadius, side, xx, m, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20;
        java.awt.Graphics2D g2;
        java.awt.geom.Line2D$Double $stack10, $stack15, $stack18;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        aRadius := @parameter0: double;

        g2 := @parameter1: java.awt.Graphics2D;

        xx := @parameter2: double;

        m := @parameter3: double;

        side = aRadius * 2.0;

        $stack10 = new java.awt.geom.Line2D$Double;

        $stack14 = xx - side;

        $stack13 = m - side;

        $stack12 = xx + side;

        $stack11 = m - side;

        specialinvoke $stack10.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack14, $stack13, $stack12, $stack11);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack10);

        $stack15 = new java.awt.geom.Line2D$Double;

        $stack17 = xx - side;

        $stack16 = m - side;

        specialinvoke $stack15.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack17, $stack16, xx, m);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack15);

        $stack18 = new java.awt.geom.Line2D$Double;

        $stack20 = xx + side;

        $stack19 = m - side;

        specialinvoke $stack18.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack20, $stack19, xx, m);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack18);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this, that;
        boolean $stack3, $stack4, $stack5, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack23, $stack24;
        double $stack6, $stack7, $stack9, $stack10, $stack18, $stack19;
        byte $stack8, $stack11, $stack20;
        java.awt.Paint $stack21, $stack22;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.renderer.category.BoxAndWhiskerRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean fillBox>;

        $stack4 = that.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean fillBox>;

        if $stack5 == $stack4 goto label03;

        return 0;

     label03:
        $stack7 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double itemMargin>;

        $stack6 = that.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double itemMargin>;

        $stack8 = $stack7 cmpl $stack6;

        if $stack8 == 0 goto label04;

        return 0;

     label04:
        $stack10 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double maximumBarWidth>;

        $stack9 = that.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double maximumBarWidth>;

        $stack11 = $stack10 cmpl $stack9;

        if $stack11 == 0 goto label05;

        return 0;

     label05:
        $stack13 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean meanVisible>;

        $stack12 = that.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean meanVisible>;

        if $stack13 == $stack12 goto label06;

        return 0;

     label06:
        $stack15 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean medianVisible>;

        $stack14 = that.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean medianVisible>;

        if $stack15 == $stack14 goto label07;

        return 0;

     label07:
        $stack17 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean useOutlinePaintForWhiskers>;

        $stack16 = that.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: boolean useOutlinePaintForWhiskers>;

        if $stack17 == $stack16 goto label08;

        return 0;

     label08:
        $stack19 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double whiskerWidth>;

        $stack18 = that.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: double whiskerWidth>;

        $stack20 = $stack19 cmpl $stack18;

        if $stack20 == 0 goto label09;

        return 0;

     label09:
        $stack22 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        $stack21 = that.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        $stack23 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack22, $stack21);

        if $stack23 != 0 goto label10;

        return 0;

     label10:
        $stack24 = specialinvoke this.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack24;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        java.awt.Paint $stack2;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.renderer.category.BoxAndWhiskerRenderer this;
        java.awt.Paint $stack2;

        this := @this: org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: java.awt.Paint artifactPaint> = $stack2;

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: long serialVersionUID> = 632027470694481177L;

        return;
    }
}
