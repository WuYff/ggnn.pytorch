class org.jfree.chart.editor.DefaultValueAxisEditor extends org.jfree.chart.editor.DefaultAxisEditor implements java.awt.event.FocusListener
{
    private boolean autoRange;
    private boolean autoTickUnitSelection;
    private double minimumValue;
    private double maximumValue;
    private javax.swing.JCheckBox autoRangeCheckBox;
    private javax.swing.JCheckBox autoTickUnitSelectionCheckBox;
    private javax.swing.JTextField minimumRangeValue;
    private javax.swing.JTextField maximumRangeValue;
    private org.jfree.chart.ui.PaintSample gridPaintSample;
    private org.jfree.chart.ui.StrokeSample gridStrokeSample;
    private org.jfree.chart.ui.StrokeSample[] availableStrokeSamples;
    protected static java.util.ResourceBundle localizationResources;

    public void <init>(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        org.jfree.chart.axis.ValueAxis axis;
        boolean $stack4, $stack7, $stack34, $stack48, $stack64, $stack96, $stack80;
        double $stack5, $stack6, $stack46, $stack62;
        org.jfree.chart.ui.PaintSample $stack8;
        java.awt.Color $stack9;
        org.jfree.chart.ui.StrokeSample $stack10, $stack13, $stack17, $stack21;
        java.awt.BasicStroke $stack11, $stack14, $stack18, $stack22;
        org.jfree.chart.ui.StrokeSample[] $stack12, $stack15, $stack19, $stack23;
        javax.swing.JTabbedPane other;
        javax.swing.JPanel $stack26, $stack29, $stack39, $stack55, $stack71, $stack78;
        org.jfree.chart.ui.LCBLayout $stack27;
        javax.swing.border.Border $stack28;
        javax.swing.JCheckBox $stack31, $stack35, $stack36, $stack37;
        java.util.ResourceBundle $stack32, $stack42, $stack58, $stack73, $stack76;
        java.lang.String $stack33, $stack43, $stack47, $stack59, $stack63, $stack74, $stack77;
        javax.swing.JLabel $stack41, $stack57;
        javax.swing.JTextField $stack45, $stack49, $stack50, $stack51, $stack52, $stack53, $stack61, $stack65, $stack66, $stack67, $stack68, $stack69;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        specialinvoke this.<org.jfree.chart.editor.DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>(axis);

        $stack4 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: boolean isAutoRange()>();

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoRange> = $stack4;

        $stack5 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue> = $stack5;

        $stack6 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue> = $stack6;

        $stack7 = virtualinvoke axis.<org.jfree.chart.axis.ValueAxis: boolean isAutoTickUnitSelection()>();

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoTickUnitSelection> = $stack7;

        $stack8 = new org.jfree.chart.ui.PaintSample;

        $stack9 = <java.awt.Color: java.awt.Color BLUE>;

        specialinvoke $stack8.<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>($stack9);

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.PaintSample gridPaintSample> = $stack8;

        $stack10 = new org.jfree.chart.ui.StrokeSample;

        $stack11 = new java.awt.BasicStroke;

        specialinvoke $stack11.<java.awt.BasicStroke: void <init>(float)>(1.0F);

        specialinvoke $stack10.<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>($stack11);

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.StrokeSample gridStrokeSample> = $stack10;

        $stack12 = newarray (org.jfree.chart.ui.StrokeSample)[3];

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.StrokeSample[] availableStrokeSamples> = $stack12;

        $stack15 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.StrokeSample[] availableStrokeSamples>;

        $stack13 = new org.jfree.chart.ui.StrokeSample;

        $stack14 = new java.awt.BasicStroke;

        specialinvoke $stack14.<java.awt.BasicStroke: void <init>(float)>(1.0F);

        specialinvoke $stack13.<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>($stack14);

        $stack15[0] = $stack13;

        $stack19 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.StrokeSample[] availableStrokeSamples>;

        $stack17 = new org.jfree.chart.ui.StrokeSample;

        $stack18 = new java.awt.BasicStroke;

        specialinvoke $stack18.<java.awt.BasicStroke: void <init>(float)>(2.0F);

        specialinvoke $stack17.<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>($stack18);

        $stack19[1] = $stack17;

        $stack23 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.StrokeSample[] availableStrokeSamples>;

        $stack21 = new org.jfree.chart.ui.StrokeSample;

        $stack22 = new java.awt.BasicStroke;

        specialinvoke $stack22.<java.awt.BasicStroke: void <init>(float)>(3.0F);

        specialinvoke $stack21.<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>($stack22);

        $stack23[2] = $stack21;

        other = virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTabbedPane getOtherTabs()>();

        $stack26 = new javax.swing.JPanel;

        $stack27 = new org.jfree.chart.ui.LCBLayout;

        specialinvoke $stack27.<org.jfree.chart.ui.LCBLayout: void <init>(int)>(3);

        specialinvoke $stack26.<javax.swing.JPanel: void <init>(java.awt.LayoutManager)>($stack27);

        $stack28 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(4, 4, 4, 4);

        virtualinvoke $stack26.<javax.swing.JPanel: void setBorder(javax.swing.border.Border)>($stack28);

        $stack29 = new javax.swing.JPanel;

        specialinvoke $stack29.<javax.swing.JPanel: void <init>()>();

        virtualinvoke $stack26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack29);

        $stack31 = new javax.swing.JCheckBox;

        $stack32 = <org.jfree.chart.editor.DefaultValueAxisEditor: java.util.ResourceBundle localizationResources>;

        $stack33 = virtualinvoke $stack32.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Auto-adjust_range");

        $stack34 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoRange>;

        specialinvoke $stack31.<javax.swing.JCheckBox: void <init>(java.lang.String,boolean)>($stack33, $stack34);

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoRangeCheckBox> = $stack31;

        $stack35 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoRangeCheckBox>;

        virtualinvoke $stack35.<javax.swing.JCheckBox: void setActionCommand(java.lang.String)>("AutoRangeOnOff");

        $stack36 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoRangeCheckBox>;

        virtualinvoke $stack36.<javax.swing.JCheckBox: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack37 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoRangeCheckBox>;

        virtualinvoke $stack26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack37);

        $stack39 = new javax.swing.JPanel;

        specialinvoke $stack39.<javax.swing.JPanel: void <init>()>();

        virtualinvoke $stack26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack39);

        $stack41 = new javax.swing.JLabel;

        $stack42 = <org.jfree.chart.editor.DefaultValueAxisEditor: java.util.ResourceBundle localizationResources>;

        $stack43 = virtualinvoke $stack42.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Minimum_range_value");

        specialinvoke $stack41.<javax.swing.JLabel: void <init>(java.lang.String)>($stack43);

        virtualinvoke $stack26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack41);

        $stack45 = new javax.swing.JTextField;

        $stack46 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue>;

        $stack47 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack46);

        specialinvoke $stack45.<javax.swing.JTextField: void <init>(java.lang.String)>($stack47);

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue> = $stack45;

        $stack49 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        $stack48 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoRange>;

        if $stack48 != 0 goto label1;

        $stack96 = 1;

        goto label2;

     label1:
        $stack96 = 0;

     label2:
        virtualinvoke $stack49.<javax.swing.JTextField: void setEnabled(boolean)>($stack96);

        $stack50 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        virtualinvoke $stack50.<javax.swing.JTextField: void setActionCommand(java.lang.String)>("MinimumRange");

        $stack51 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        virtualinvoke $stack51.<javax.swing.JTextField: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack52 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        virtualinvoke $stack52.<javax.swing.JTextField: void addFocusListener(java.awt.event.FocusListener)>(this);

        $stack53 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        virtualinvoke $stack26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack53);

        $stack55 = new javax.swing.JPanel;

        specialinvoke $stack55.<javax.swing.JPanel: void <init>()>();

        virtualinvoke $stack26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack55);

        $stack57 = new javax.swing.JLabel;

        $stack58 = <org.jfree.chart.editor.DefaultValueAxisEditor: java.util.ResourceBundle localizationResources>;

        $stack59 = virtualinvoke $stack58.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Maximum_range_value");

        specialinvoke $stack57.<javax.swing.JLabel: void <init>(java.lang.String)>($stack59);

        virtualinvoke $stack26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack57);

        $stack61 = new javax.swing.JTextField;

        $stack62 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue>;

        $stack63 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack62);

        specialinvoke $stack61.<javax.swing.JTextField: void <init>(java.lang.String)>($stack63);

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue> = $stack61;

        $stack65 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        $stack64 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoRange>;

        if $stack64 != 0 goto label3;

        $stack80 = 1;

        goto label4;

     label3:
        $stack80 = 0;

     label4:
        virtualinvoke $stack65.<javax.swing.JTextField: void setEnabled(boolean)>($stack80);

        $stack66 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        virtualinvoke $stack66.<javax.swing.JTextField: void setActionCommand(java.lang.String)>("MaximumRange");

        $stack67 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        virtualinvoke $stack67.<javax.swing.JTextField: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack68 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        virtualinvoke $stack68.<javax.swing.JTextField: void addFocusListener(java.awt.event.FocusListener)>(this);

        $stack69 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        virtualinvoke $stack26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack69);

        $stack71 = new javax.swing.JPanel;

        specialinvoke $stack71.<javax.swing.JPanel: void <init>()>();

        virtualinvoke $stack26.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack71);

        $stack73 = <org.jfree.chart.editor.DefaultValueAxisEditor: java.util.ResourceBundle localizationResources>;

        $stack74 = virtualinvoke $stack73.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Range");

        virtualinvoke other.<javax.swing.JTabbedPane: java.awt.Component add(java.lang.String,java.awt.Component)>($stack74, $stack26);

        $stack76 = <org.jfree.chart.editor.DefaultValueAxisEditor: java.util.ResourceBundle localizationResources>;

        $stack77 = virtualinvoke $stack76.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("TickUnit");

        $stack78 = virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JPanel createTickUnitPanel()>();

        virtualinvoke other.<javax.swing.JTabbedPane: java.awt.Component add(java.lang.String,java.awt.Component)>($stack77, $stack78);

        return;
    }

    protected javax.swing.JPanel createTickUnitPanel()
    {
        javax.swing.JPanel $stack2, $stack5, $stack15;
        org.jfree.chart.ui.LCBLayout $stack3;
        javax.swing.border.Border $stack4;
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        javax.swing.JCheckBox $stack7, $stack11, $stack12, $stack13;
        java.util.ResourceBundle $stack8;
        java.lang.String $stack9;
        boolean $stack10;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack2 = new javax.swing.JPanel;

        $stack3 = new org.jfree.chart.ui.LCBLayout;

        specialinvoke $stack3.<org.jfree.chart.ui.LCBLayout: void <init>(int)>(3);

        specialinvoke $stack2.<javax.swing.JPanel: void <init>(java.awt.LayoutManager)>($stack3);

        $stack4 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(4, 4, 4, 4);

        virtualinvoke $stack2.<javax.swing.JPanel: void setBorder(javax.swing.border.Border)>($stack4);

        $stack5 = new javax.swing.JPanel;

        specialinvoke $stack5.<javax.swing.JPanel: void <init>()>();

        virtualinvoke $stack2.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack5);

        $stack7 = new javax.swing.JCheckBox;

        $stack8 = <org.jfree.chart.editor.DefaultValueAxisEditor: java.util.ResourceBundle localizationResources>;

        $stack9 = virtualinvoke $stack8.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Auto-TickUnit_Selection");

        $stack10 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoTickUnitSelection>;

        specialinvoke $stack7.<javax.swing.JCheckBox: void <init>(java.lang.String,boolean)>($stack9, $stack10);

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoTickUnitSelectionCheckBox> = $stack7;

        $stack11 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoTickUnitSelectionCheckBox>;

        virtualinvoke $stack11.<javax.swing.JCheckBox: void setActionCommand(java.lang.String)>("AutoTickOnOff");

        $stack12 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoTickUnitSelectionCheckBox>;

        virtualinvoke $stack12.<javax.swing.JCheckBox: void addActionListener(java.awt.event.ActionListener)>(this);

        $stack13 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoTickUnitSelectionCheckBox>;

        virtualinvoke $stack2.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack13);

        $stack15 = new javax.swing.JPanel;

        specialinvoke $stack15.<javax.swing.JPanel: void <init>()>();

        virtualinvoke $stack2.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($stack15);

        return $stack2;
    }

    protected boolean isAutoTickUnitSelection()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        boolean $stack1;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack1 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoTickUnitSelection>;

        return $stack1;
    }

    protected void setAutoTickUnitSelection(boolean)
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        boolean autoTickUnitSelection;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        autoTickUnitSelection := @parameter0: boolean;

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoTickUnitSelection> = autoTickUnitSelection;

        return;
    }

    protected javax.swing.JCheckBox getAutoTickUnitSelectionCheckBox()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        javax.swing.JCheckBox $stack1;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack1 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoTickUnitSelectionCheckBox>;

        return $stack1;
    }

    protected void setAutoTickUnitSelectionCheckBox(javax.swing.JCheckBox)
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        javax.swing.JCheckBox autoTickUnitSelectionCheckBox;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        autoTickUnitSelectionCheckBox := @parameter0: javax.swing.JCheckBox;

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoTickUnitSelectionCheckBox> = autoTickUnitSelectionCheckBox;

        return;
    }

    public boolean isAutoRange()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        boolean $stack1;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack1 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoRange>;

        return $stack1;
    }

    public double getMinimumValue()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        double $stack1;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack1 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue>;

        return $stack1;
    }

    public double getMaximumValue()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        double $stack1;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack1 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue>;

        return $stack1;
    }

    public void actionPerformed(java.awt.event.ActionEvent)
    {
        java.awt.event.ActionEvent event;
        java.lang.String command;
        boolean $stack4, $stack5, $stack6, $stack7, $stack8, $stack9;
        org.jfree.chart.editor.DefaultValueAxisEditor this;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        event := @parameter0: java.awt.event.ActionEvent;

        command = virtualinvoke event.<java.awt.event.ActionEvent: java.lang.String getActionCommand()>();

        $stack4 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("GridStroke");

        if $stack4 == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void attemptGridStrokeSelection()>();

        goto label7;

     label1:
        $stack5 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("GridPaint");

        if $stack5 == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void attemptGridPaintSelection()>();

        goto label7;

     label2:
        $stack6 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("AutoRangeOnOff");

        if $stack6 == 0 goto label3;

        virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void toggleAutoRange()>();

        goto label7;

     label3:
        $stack7 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("MinimumRange");

        if $stack7 == 0 goto label4;

        virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void validateMinimum()>();

        goto label7;

     label4:
        $stack8 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("MaximumRange");

        if $stack8 == 0 goto label5;

        virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void validateMaximum()>();

        goto label7;

     label5:
        $stack9 = virtualinvoke command.<java.lang.String: boolean equals(java.lang.Object)>("AutoTickOnOff");

        if $stack9 == 0 goto label6;

        virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void toggleAutoTick()>();

        goto label7;

     label6:
        specialinvoke this.<org.jfree.chart.editor.DefaultAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>(event);

     label7:
        return;
    }

    protected void attemptGridStrokeSelection()
    {
        org.jfree.chart.ui.StrokeChooserPanel $stack3;
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        org.jfree.chart.ui.StrokeSample[] $stack4;
        org.jfree.chart.ui.StrokeSample $stack5, $stack9;
        java.util.ResourceBundle $stack6;
        java.lang.String $stack7;
        int result;
        java.awt.Stroke $stack10;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack3 = new org.jfree.chart.ui.StrokeChooserPanel;

        $stack5 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.StrokeSample gridStrokeSample>;

        $stack4 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.StrokeSample[] availableStrokeSamples>;

        specialinvoke $stack3.<org.jfree.chart.ui.StrokeChooserPanel: void <init>(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])>($stack5, $stack4);

        $stack6 = <org.jfree.chart.editor.DefaultValueAxisEditor: java.util.ResourceBundle localizationResources>;

        $stack7 = virtualinvoke $stack6.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Stroke_Selection");

        result = staticinvoke <javax.swing.JOptionPane: int showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)>(this, $stack3, $stack7, 2, -1);

        if result != 0 goto label1;

        $stack9 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.StrokeSample gridStrokeSample>;

        $stack10 = virtualinvoke $stack3.<org.jfree.chart.ui.StrokeChooserPanel: java.awt.Stroke getSelectedStroke()>();

        virtualinvoke $stack9.<org.jfree.chart.ui.StrokeSample: void setStroke(java.awt.Stroke)>($stack10);

     label1:
        return;
    }

    protected void attemptGridPaintSelection()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        java.util.ResourceBundle $stack2;
        java.lang.String $stack3;
        java.awt.Color $stack4, c;
        org.jfree.chart.ui.PaintSample $stack6;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack2 = <org.jfree.chart.editor.DefaultValueAxisEditor: java.util.ResourceBundle localizationResources>;

        $stack3 = virtualinvoke $stack2.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Grid_Color");

        $stack4 = <java.awt.Color: java.awt.Color BLUE>;

        c = staticinvoke <javax.swing.JColorChooser: java.awt.Color showDialog(java.awt.Component,java.lang.String,java.awt.Color)>(this, $stack3, $stack4);

        if c == null goto label1;

        $stack6 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: org.jfree.chart.ui.PaintSample gridPaintSample>;

        virtualinvoke $stack6.<org.jfree.chart.ui.PaintSample: void setPaint(java.awt.Paint)>(c);

     label1:
        return;
    }

    public void focusGained(java.awt.event.FocusEvent)
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        java.awt.event.FocusEvent event;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        event := @parameter0: java.awt.event.FocusEvent;

        return;
    }

    public void focusLost(java.awt.event.FocusEvent)
    {
        java.awt.event.FocusEvent event;
        java.lang.Object $stack2, $stack4;
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        javax.swing.JTextField $stack3, $stack5;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        event := @parameter0: java.awt.event.FocusEvent;

        $stack2 = virtualinvoke event.<java.awt.event.FocusEvent: java.lang.Object getSource()>();

        $stack3 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        if $stack2 != $stack3 goto label1;

        virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void validateMinimum()>();

        goto label2;

     label1:
        $stack4 = virtualinvoke event.<java.awt.event.FocusEvent: java.lang.Object getSource()>();

        $stack5 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        if $stack4 != $stack5 goto label2;

        virtualinvoke this.<org.jfree.chart.editor.DefaultValueAxisEditor: void validateMaximum()>();

     label2:
        return;
    }

    public void toggleAutoRange()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        javax.swing.JCheckBox $stack1;
        boolean $stack2, $stack3;
        javax.swing.JTextField $stack4, $stack5, $stack7, $stack9, $stack11, $stack13;
        double $stack6, $stack10;
        java.lang.String $stack8, $stack12;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack1 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoRangeCheckBox>;

        $stack2 = virtualinvoke $stack1.<javax.swing.JCheckBox: boolean isSelected()>();

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoRange> = $stack2;

        $stack3 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoRange>;

        if $stack3 == 0 goto label1;

        $stack7 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        $stack6 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue>;

        $stack8 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack6);

        virtualinvoke $stack7.<javax.swing.JTextField: void setText(java.lang.String)>($stack8);

        $stack9 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        virtualinvoke $stack9.<javax.swing.JTextField: void setEnabled(boolean)>(0);

        $stack11 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        $stack10 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue>;

        $stack12 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack10);

        virtualinvoke $stack11.<javax.swing.JTextField: void setText(java.lang.String)>($stack12);

        $stack13 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        virtualinvoke $stack13.<javax.swing.JTextField: void setEnabled(boolean)>(0);

        goto label2;

     label1:
        $stack4 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        virtualinvoke $stack4.<javax.swing.JTextField: void setEnabled(boolean)>(1);

        $stack5 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        virtualinvoke $stack5.<javax.swing.JTextField: void setEnabled(boolean)>(1);

     label2:
        return;
    }

    public void toggleAutoTick()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        javax.swing.JCheckBox $stack1;
        boolean $stack2;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        $stack1 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JCheckBox autoTickUnitSelectionCheckBox>;

        $stack2 = virtualinvoke $stack1.<javax.swing.JCheckBox: boolean isSelected()>();

        this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoTickUnitSelection> = $stack2;

        return;
    }

    public void validateMinimum()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        javax.swing.JTextField $stack4, $stack10;
        java.lang.String $stack5, $stack11;
        double $stack7, $stack9, newMin;
        byte $stack8;
        java.lang.NumberFormatException $stack12;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

     label1:
        $stack4 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        $stack5 = virtualinvoke $stack4.<javax.swing.JTextField: java.lang.String getText()>();

        newMin = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack5);

        $stack7 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue>;

        $stack8 = newMin cmpl $stack7;

        if $stack8 < 0 goto label2;

        newMin = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue>;

     label2:
        goto label4;

     label3:
        $stack12 := @caughtexception;

        newMin = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue>;

     label4:
        this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue> = newMin;

        $stack10 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField minimumRangeValue>;

        $stack9 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue>;

        $stack11 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack9);

        virtualinvoke $stack10.<javax.swing.JTextField: void setText(java.lang.String)>($stack11);

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void validateMaximum()
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        javax.swing.JTextField $stack4, $stack10;
        java.lang.String $stack5, $stack11;
        double $stack7, $stack9, newMax;
        byte $stack8;
        java.lang.NumberFormatException $stack12;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

     label1:
        $stack4 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        $stack5 = virtualinvoke $stack4.<javax.swing.JTextField: java.lang.String getText()>();

        newMax = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($stack5);

        $stack7 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue>;

        $stack8 = newMax cmpg $stack7;

        if $stack8 > 0 goto label2;

        newMax = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue>;

     label2:
        goto label4;

     label3:
        $stack12 := @caughtexception;

        newMax = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue>;

     label4:
        this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue> = newMax;

        $stack10 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: javax.swing.JTextField maximumRangeValue>;

        $stack9 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue>;

        $stack11 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($stack9);

        virtualinvoke $stack10.<javax.swing.JTextField: void setText(java.lang.String)>($stack11);

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void setAxisProperties(org.jfree.chart.axis.Axis)
    {
        org.jfree.chart.editor.DefaultValueAxisEditor this;
        org.jfree.chart.axis.Axis axis;
        org.jfree.chart.axis.ValueAxis valueAxis;
        boolean $stack3, $stack4, $stack5;
        double $stack6, $stack7;

        this := @this: org.jfree.chart.editor.DefaultValueAxisEditor;

        axis := @parameter0: org.jfree.chart.axis.Axis;

        specialinvoke this.<org.jfree.chart.editor.DefaultAxisEditor: void setAxisProperties(org.jfree.chart.axis.Axis)>(axis);

        valueAxis = (org.jfree.chart.axis.ValueAxis) axis;

        $stack3 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoRange>;

        virtualinvoke valueAxis.<org.jfree.chart.axis.ValueAxis: void setAutoRange(boolean)>($stack3);

        $stack4 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoRange>;

        if $stack4 != 0 goto label1;

        $stack7 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double minimumValue>;

        $stack6 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: double maximumValue>;

        virtualinvoke valueAxis.<org.jfree.chart.axis.ValueAxis: void setRange(double,double)>($stack7, $stack6);

     label1:
        $stack5 = this.<org.jfree.chart.editor.DefaultValueAxisEditor: boolean autoTickUnitSelection>;

        virtualinvoke valueAxis.<org.jfree.chart.axis.ValueAxis: void setAutoTickUnitSelection(boolean)>($stack5);

        return;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle $stack0;

        $stack0 = staticinvoke <org.jfree.chart.util.ResourceBundleWrapper: java.util.ResourceBundle getBundle(java.lang.String)>("org.jfree.chart.editor.LocalizationBundle");

        <org.jfree.chart.editor.DefaultValueAxisEditor: java.util.ResourceBundle localizationResources> = $stack0;

        return;
    }
}
