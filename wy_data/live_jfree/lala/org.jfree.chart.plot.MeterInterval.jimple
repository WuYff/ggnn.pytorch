public class org.jfree.chart.plot.MeterInterval extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private java.lang.String label;
    private org.jfree.data.Range range;
    private transient java.awt.Paint outlinePaint;
    private transient java.awt.Stroke outlineStroke;
    private transient java.awt.Paint backgroundPaint;

    public void <init>(java.lang.String, org.jfree.data.Range)
    {
        org.jfree.chart.plot.MeterInterval this;
        java.lang.String label;
        org.jfree.data.Range range;
        java.awt.BasicStroke $stack3;
        java.awt.Color $stack4;

        this := @this: org.jfree.chart.plot.MeterInterval;

        label := @parameter0: java.lang.String;

        range := @parameter1: org.jfree.data.Range;

        $stack4 = <java.awt.Color: java.awt.Color YELLOW>;

        $stack3 = new java.awt.BasicStroke;

        specialinvoke $stack3.<java.awt.BasicStroke: void <init>(float)>(2.0F);

        specialinvoke this.<org.jfree.chart.plot.MeterInterval: void <init>(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>(label, range, $stack4, $stack3, null);

        return;
    }

    public void <init>(java.lang.String, org.jfree.data.Range, java.awt.Paint, java.awt.Stroke, java.awt.Paint)
    {
        org.jfree.chart.plot.MeterInterval this;
        java.lang.String label;
        org.jfree.data.Range range;
        java.awt.Paint outlinePaint, backgroundPaint;
        java.awt.Stroke outlineStroke;

        this := @this: org.jfree.chart.plot.MeterInterval;

        label := @parameter0: java.lang.String;

        range := @parameter1: org.jfree.data.Range;

        outlinePaint := @parameter2: java.awt.Paint;

        outlineStroke := @parameter3: java.awt.Stroke;

        backgroundPaint := @parameter4: java.awt.Paint;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(label, "label");

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(range, "range");

        this.<org.jfree.chart.plot.MeterInterval: java.lang.String label> = label;

        this.<org.jfree.chart.plot.MeterInterval: org.jfree.data.Range range> = range;

        this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint outlinePaint> = outlinePaint;

        this.<org.jfree.chart.plot.MeterInterval: java.awt.Stroke outlineStroke> = outlineStroke;

        this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint backgroundPaint> = backgroundPaint;

        return;
    }

    public java.lang.String getLabel()
    {
        org.jfree.chart.plot.MeterInterval this;
        java.lang.String $stack1;

        this := @this: org.jfree.chart.plot.MeterInterval;

        $stack1 = this.<org.jfree.chart.plot.MeterInterval: java.lang.String label>;

        return $stack1;
    }

    public org.jfree.data.Range getRange()
    {
        org.jfree.chart.plot.MeterInterval this;
        org.jfree.data.Range $stack1;

        this := @this: org.jfree.chart.plot.MeterInterval;

        $stack1 = this.<org.jfree.chart.plot.MeterInterval: org.jfree.data.Range range>;

        return $stack1;
    }

    public java.awt.Paint getBackgroundPaint()
    {
        org.jfree.chart.plot.MeterInterval this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.MeterInterval;

        $stack1 = this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint backgroundPaint>;

        return $stack1;
    }

    public java.awt.Paint getOutlinePaint()
    {
        org.jfree.chart.plot.MeterInterval this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.MeterInterval;

        $stack1 = this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint outlinePaint>;

        return $stack1;
    }

    public java.awt.Stroke getOutlineStroke()
    {
        org.jfree.chart.plot.MeterInterval this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.MeterInterval;

        $stack1 = this.<org.jfree.chart.plot.MeterInterval: java.awt.Stroke outlineStroke>;

        return $stack1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.plot.MeterInterval this, that;
        boolean $stack3, $stack6, $stack9, $stack12, $stack15, $stack18;
        java.lang.String $stack4, $stack5;
        org.jfree.data.Range $stack7, $stack8;
        java.awt.Paint $stack10, $stack11, $stack16, $stack17;
        java.awt.Stroke $stack13, $stack14;

        this := @this: org.jfree.chart.plot.MeterInterval;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.plot.MeterInterval;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.plot.MeterInterval) obj;

        $stack5 = this.<org.jfree.chart.plot.MeterInterval: java.lang.String label>;

        $stack4 = that.<org.jfree.chart.plot.MeterInterval: java.lang.String label>;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.plot.MeterInterval: org.jfree.data.Range range>;

        $stack7 = that.<org.jfree.chart.plot.MeterInterval: org.jfree.data.Range range>;

        $stack9 = virtualinvoke $stack8.<org.jfree.data.Range: boolean equals(java.lang.Object)>($stack7);

        if $stack9 != 0 goto label4;

        return 0;

     label4:
        $stack11 = this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint outlinePaint>;

        $stack10 = that.<org.jfree.chart.plot.MeterInterval: java.awt.Paint outlinePaint>;

        $stack12 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack11, $stack10);

        if $stack12 != 0 goto label5;

        return 0;

     label5:
        $stack14 = this.<org.jfree.chart.plot.MeterInterval: java.awt.Stroke outlineStroke>;

        $stack13 = that.<org.jfree.chart.plot.MeterInterval: java.awt.Stroke outlineStroke>;

        $stack15 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack14, $stack13);

        if $stack15 != 0 goto label6;

        return 0;

     label6:
        $stack17 = this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint backgroundPaint>;

        $stack16 = that.<org.jfree.chart.plot.MeterInterval: java.awt.Paint backgroundPaint>;

        $stack18 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack17, $stack16);

        if $stack18 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.plot.MeterInterval this;
        java.awt.Paint $stack2, $stack4;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.plot.MeterInterval;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint outlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.plot.MeterInterval: java.awt.Stroke outlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint backgroundPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack4, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.plot.MeterInterval this;
        java.awt.Paint $stack2, $stack4;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.plot.MeterInterval;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint outlinePaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.MeterInterval: java.awt.Stroke outlineStroke> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.MeterInterval: java.awt.Paint backgroundPaint> = $stack4;

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.plot.MeterInterval: long serialVersionUID> = 1530982090622488257L;

        return;
    }
}
