public class org.jfree.chart.renderer.xy.XYBlockRenderer extends org.jfree.chart.renderer.xy.AbstractXYItemRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private double blockWidth;
    private double blockHeight;
    private org.jfree.chart.ui.RectangleAnchor blockAnchor;
    private double xOffset;
    private double yOffset;
    private org.jfree.chart.renderer.PaintScale paintScale;
    private boolean drawOutlines;
    private boolean useOutlinePaint;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        org.jfree.chart.ui.RectangleAnchor $stack1;
        org.jfree.chart.renderer.LookupPaintScale $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>();

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth> = 1.0;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight> = 1.0;

        $stack1 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor CENTER>;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor> = $stack1;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>();

        $stack2 = new org.jfree.chart.renderer.LookupPaintScale;

        specialinvoke $stack2.<org.jfree.chart.renderer.LookupPaintScale: void <init>()>();

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.renderer.PaintScale paintScale> = $stack2;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean drawOutlines> = 1;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean useOutlinePaint> = 0;

        return;
    }

    public double getBlockWidth()
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        return $stack1;
    }

    public void setBlockWidth(double)
    {
        double width;
        byte $stack3;
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        java.lang.IllegalArgumentException $stack4;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        width := @parameter0: double;

        $stack3 = width cmpg 0.0;

        if $stack3 > 0 goto label1;

        $stack4 = new java.lang.IllegalArgumentException;

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'width\' argument must be > 0.0");

        throw $stack4;

     label1:
        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth> = width;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>();

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void fireChangeEvent()>();

        return;
    }

    public double getBlockHeight()
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        return $stack1;
    }

    public void setBlockHeight(double)
    {
        double height;
        byte $stack3;
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        java.lang.IllegalArgumentException $stack4;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        height := @parameter0: double;

        $stack3 = height cmpg 0.0;

        if $stack3 > 0 goto label1;

        $stack4 = new java.lang.IllegalArgumentException;

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'height\' argument must be > 0.0");

        throw $stack4;

     label1:
        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight> = height;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>();

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.ui.RectangleAnchor getBlockAnchor()
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        org.jfree.chart.ui.RectangleAnchor $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        return $stack1;
    }

    public void setBlockAnchor(org.jfree.chart.ui.RectangleAnchor)
    {
        org.jfree.chart.ui.RectangleAnchor anchor, $stack2;
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        boolean $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        anchor := @parameter0: org.jfree.chart.ui.RectangleAnchor;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(anchor, "anchor");

        $stack2 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>(anchor);

        if $stack3 == 0 goto label1;

        return;

     label1:
        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor> = anchor;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>();

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.renderer.PaintScale getPaintScale()
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        org.jfree.chart.renderer.PaintScale $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        return $stack1;
    }

    public void setPaintScale(org.jfree.chart.renderer.PaintScale)
    {
        org.jfree.chart.renderer.PaintScale scale;
        org.jfree.chart.renderer.xy.XYBlockRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        scale := @parameter0: org.jfree.chart.renderer.PaintScale;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(scale, "scale");

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.renderer.PaintScale paintScale> = scale;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getDrawOutlines()
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean drawOutlines>;

        return $stack1;
    }

    public void setDrawOutlines(boolean)
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean drawOutlines> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getUseOutlinePaint()
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean useOutlinePaint>;

        return $stack1;
    }

    public void setUseOutlinePaint(boolean)
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean useOutlinePaint> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void fireChangeEvent()>();

        return;
    }

    private void updateOffsets()
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        org.jfree.chart.ui.RectangleAnchor $stack1, $stack2, $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack26;
        boolean $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27;
        double $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        $stack2 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack1 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor BOTTOM_LEFT>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack1);

        if $stack3 == 0 goto label1;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset> = 0.0;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset> = 0.0;

        goto label9;

     label1:
        $stack5 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack4 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor BOTTOM>;

        $stack6 = virtualinvoke $stack5.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack4);

        if $stack6 == 0 goto label2;

        $stack55 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack56 = neg $stack55;

        $stack57 = $stack56 / 2.0;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset> = $stack57;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset> = 0.0;

        goto label9;

     label2:
        $stack8 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack7 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor BOTTOM_RIGHT>;

        $stack9 = virtualinvoke $stack8.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack7);

        if $stack9 == 0 goto label3;

        $stack53 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack54 = neg $stack53;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset> = $stack54;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset> = 0.0;

        goto label9;

     label3:
        $stack11 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack10 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor LEFT>;

        $stack12 = virtualinvoke $stack11.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack10);

        if $stack12 == 0 goto label4;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset> = 0.0;

        $stack50 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack51 = neg $stack50;

        $stack52 = $stack51 / 2.0;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset> = $stack52;

        goto label9;

     label4:
        $stack14 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack13 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor CENTER>;

        $stack15 = virtualinvoke $stack14.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack13);

        if $stack15 == 0 goto label5;

        $stack44 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack45 = neg $stack44;

        $stack46 = $stack45 / 2.0;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset> = $stack46;

        $stack47 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack48 = neg $stack47;

        $stack49 = $stack48 / 2.0;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset> = $stack49;

        goto label9;

     label5:
        $stack17 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack16 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor RIGHT>;

        $stack18 = virtualinvoke $stack17.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack16);

        if $stack18 == 0 goto label6;

        $stack39 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack40 = neg $stack39;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset> = $stack40;

        $stack41 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack42 = neg $stack41;

        $stack43 = $stack42 / 2.0;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset> = $stack43;

        goto label9;

     label6:
        $stack20 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack19 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor TOP_LEFT>;

        $stack21 = virtualinvoke $stack20.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack19);

        if $stack21 == 0 goto label7;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset> = 0.0;

        $stack37 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack38 = neg $stack37;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset> = $stack38;

        goto label9;

     label7:
        $stack23 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack22 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor TOP>;

        $stack24 = virtualinvoke $stack23.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack22);

        if $stack24 == 0 goto label8;

        $stack32 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack33 = neg $stack32;

        $stack34 = $stack33 / 2.0;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset> = $stack34;

        $stack35 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack36 = neg $stack35;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset> = $stack36;

        goto label9;

     label8:
        $stack26 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack25 = <org.jfree.chart.ui.RectangleAnchor: org.jfree.chart.ui.RectangleAnchor TOP_RIGHT>;

        $stack27 = virtualinvoke $stack26.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack25);

        if $stack27 == 0 goto label9;

        $stack28 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack29 = neg $stack28;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset> = $stack29;

        $stack30 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack31 = neg $stack30;

        this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset> = $stack31;

     label9:
        return;
    }

    public org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.Range r, $stack4;
        double $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12;
        org.jfree.chart.renderer.xy.XYBlockRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        if dataset != null goto label1;

        return null;

     label1:
        r = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>(dataset, 0);

        if r != null goto label2;

        return null;

     label2:
        $stack4 = new org.jfree.data.Range;

        $stack5 = virtualinvoke r.<org.jfree.data.Range: double getLowerBound()>();

        $stack6 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset>;

        $stack7 = $stack5 + $stack6;

        $stack8 = virtualinvoke r.<org.jfree.data.Range: double getUpperBound()>();

        $stack9 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack11 = $stack8 + $stack9;

        $stack10 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset>;

        $stack12 = $stack11 + $stack10;

        specialinvoke $stack4.<org.jfree.data.Range: void <init>(double,double)>($stack7, $stack12);

        return $stack4;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.Range r, $stack4;
        double $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12;
        org.jfree.chart.renderer.xy.XYBlockRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        if dataset == null goto label2;

        r = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>(dataset, 0);

        if r != null goto label1;

        return null;

     label1:
        $stack4 = new org.jfree.data.Range;

        $stack5 = virtualinvoke r.<org.jfree.data.Range: double getLowerBound()>();

        $stack6 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset>;

        $stack7 = $stack5 + $stack6;

        $stack8 = virtualinvoke r.<org.jfree.data.Range: double getUpperBound()>();

        $stack9 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack11 = $stack8 + $stack9;

        $stack10 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset>;

        $stack12 = $stack11 + $stack10;

        specialinvoke $stack4.<org.jfree.data.Range: void <init>(double,double)>($stack7, $stack12);

        return $stack4;

     label2:
        return null;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.data.xy.XYDataset dataset;
        int series, item, datasetIndex, pass;
        double x, y, $stack41, $stack42, xx0, $stack45, $stack46, yy0, $stack49, $stack50, $stack51, $stack52, xx1, $stack55, $stack56, $stack57, $stack58, yy1, $stack65, $stack66, $stack67, $stack68, $stack69, $stack70, transX, transY, $stack79, $stack80, $stack81, $stack82, $stack123, $stack124, $stack125, $stack126, $stack127, $stack128, z;
        boolean $stack38, $stack63, $stack71, $stack111, $stack72, $stack109;
        org.jfree.chart.renderer.xy.XYBlockRenderer this;
        org.jfree.chart.renderer.PaintScale $stack39;
        java.awt.Paint p, $stack116;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack43, $stack47, $stack53, $stack59, $stack74, $stack76;
        org.jfree.chart.plot.PlotOrientation orientation, $stack62;
        java.awt.geom.Rectangle2D$Double $stack64, $stack122, block;
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.entity.EntityCollection entities;
        byte $stack83;
        java.awt.Stroke $stack112;
        org.jfree.data.xy.XYZDataset $stack134;
        org.jfree.chart.plot.PlotRenderingInfo info;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        x = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, item);

        y = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, item);

        z = 0.0;

        $stack38 = dataset instanceof org.jfree.data.xy.XYZDataset;

        if $stack38 == 0 goto label1;

        $stack134 = (org.jfree.data.xy.XYZDataset) dataset;

        z = interfaceinvoke $stack134.<org.jfree.data.xy.XYZDataset: double getZValue(int,int)>(series, item);

     label1:
        $stack39 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        p = interfaceinvoke $stack39.<org.jfree.chart.renderer.PaintScale: java.awt.Paint getPaint(double)>(z);

        $stack41 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset>;

        $stack42 = x + $stack41;

        $stack43 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx0 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack42, dataArea, $stack43);

        $stack45 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset>;

        $stack46 = y + $stack45;

        $stack47 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yy0 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack46, dataArea, $stack47);

        $stack49 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack51 = x + $stack49;

        $stack50 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double xOffset>;

        $stack52 = $stack51 + $stack50;

        $stack53 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx1 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack52, dataArea, $stack53);

        $stack55 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack57 = y + $stack55;

        $stack56 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double yOffset>;

        $stack58 = $stack57 + $stack56;

        $stack59 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yy1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack58, dataArea, $stack59);

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack62 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        $stack63 = virtualinvoke orientation.<org.jfree.chart.plot.PlotOrientation: boolean equals(java.lang.Object)>($stack62);

        if $stack63 == 0 goto label2;

        $stack122 = new java.awt.geom.Rectangle2D$Double;

        $stack123 = staticinvoke <java.lang.Math: double min(double,double)>(yy0, yy1);

        $stack124 = staticinvoke <java.lang.Math: double min(double,double)>(xx0, xx1);

        $stack125 = yy1 - yy0;

        $stack126 = staticinvoke <java.lang.Math: double abs(double)>($stack125);

        $stack127 = xx0 - xx1;

        $stack128 = staticinvoke <java.lang.Math: double abs(double)>($stack127);

        specialinvoke $stack122.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack123, $stack124, $stack126, $stack128);

        block = $stack122;

        goto label3;

     label2:
        $stack64 = new java.awt.geom.Rectangle2D$Double;

        $stack65 = staticinvoke <java.lang.Math: double min(double,double)>(xx0, xx1);

        $stack66 = staticinvoke <java.lang.Math: double min(double,double)>(yy0, yy1);

        $stack67 = xx1 - xx0;

        $stack68 = staticinvoke <java.lang.Math: double abs(double)>($stack67);

        $stack69 = yy1 - yy0;

        $stack70 = staticinvoke <java.lang.Math: double abs(double)>($stack69);

        specialinvoke $stack64.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack65, $stack66, $stack68, $stack70);

        block = $stack64;

     label3:
        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(p);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(block);

        $stack71 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean getDrawOutlines()>();

        if $stack71 == 0 goto label5;

        $stack111 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean getUseOutlinePaint()>();

        if $stack111 == 0 goto label4;

        $stack116 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack116);

     label4:
        $stack112 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: java.awt.Stroke lookupSeriesOutlineStroke(int)>(series);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack112);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(block);

     label5:
        $stack72 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean isItemLabelVisible(int,int)>(series, item);

        if $stack72 == 0 goto label8;

        $stack81 = virtualinvoke block.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack82 = virtualinvoke block.<java.awt.geom.Rectangle2D: double getCenterY()>();

        $stack83 = y cmpg 0.0;

        if $stack83 >= 0 goto label6;

        $stack109 = 1;

        goto label7;

     label6:
        $stack109 = 0;

     label7:
        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)>(g2, orientation, dataset, series, item, $stack81, $stack82, $stack109);

     label8:
        datasetIndex = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: int indexOf(org.jfree.data.xy.XYDataset)>(dataset);

        $stack74 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        transX = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x, dataArea, $stack74);

        $stack76 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        transY = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y, dataArea, $stack76);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,double,double,org.jfree.chart.plot.PlotOrientation)>(crosshairState, x, y, datasetIndex, transX, transY, orientation);

        entities = virtualinvoke state.<org.jfree.chart.renderer.xy.XYItemRendererState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label9;

        $stack79 = virtualinvoke block.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack80 = virtualinvoke block.<java.awt.geom.Rectangle2D: double getCenterY()>();

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBlockRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(entities, block, dataset, series, item, $stack79, $stack80);

     label9:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.XYBlockRenderer this, that;
        boolean $stack3, $stack12, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20;
        double $stack4, $stack5, $stack7, $stack8;
        byte $stack6, $stack9;
        org.jfree.chart.ui.RectangleAnchor $stack10, $stack11;
        org.jfree.chart.renderer.PaintScale $stack13, $stack14;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.XYBlockRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.xy.XYBlockRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack4 = that.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockHeight>;

        $stack6 = $stack5 cmpl $stack4;

        if $stack6 == 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack7 = that.<org.jfree.chart.renderer.xy.XYBlockRenderer: double blockWidth>;

        $stack9 = $stack8 cmpl $stack7;

        if $stack9 == 0 goto label4;

        return 0;

     label4:
        $stack11 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack10 = that.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.ui.RectangleAnchor blockAnchor>;

        $stack12 = virtualinvoke $stack11.<org.jfree.chart.ui.RectangleAnchor: boolean equals(java.lang.Object)>($stack10);

        if $stack12 != 0 goto label5;

        return 0;

     label5:
        $stack14 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        $stack13 = that.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        $stack15 = virtualinvoke $stack14.<java.lang.Object: boolean equals(java.lang.Object)>($stack13);

        if $stack15 != 0 goto label6;

        return 0;

     label6:
        $stack17 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean drawOutlines>;

        $stack16 = that.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean drawOutlines>;

        if $stack17 == $stack16 goto label7;

        return 0;

     label7:
        $stack19 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean useOutlinePaint>;

        $stack18 = that.<org.jfree.chart.renderer.xy.XYBlockRenderer: boolean useOutlinePaint>;

        if $stack19 == $stack18 goto label8;

        return 0;

     label8:
        $stack20 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack20;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.xy.XYBlockRenderer this, clone;
        java.lang.Object $stack3, $stack7;
        org.jfree.chart.renderer.PaintScale $stack4, $stack6, $stack8;
        boolean $stack5;
        org.jfree.chart.util.PublicCloneable pc;

        this := @this: org.jfree.chart.renderer.xy.XYBlockRenderer;

        $stack3 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>();

        clone = (org.jfree.chart.renderer.xy.XYBlockRenderer) $stack3;

        $stack4 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        $stack5 = $stack4 instanceof org.jfree.chart.util.PublicCloneable;

        if $stack5 == 0 goto label1;

        $stack6 = this.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.renderer.PaintScale paintScale>;

        pc = (org.jfree.chart.util.PublicCloneable) $stack6;

        $stack7 = interfaceinvoke pc.<org.jfree.chart.util.PublicCloneable: java.lang.Object clone()>();

        $stack8 = (org.jfree.chart.renderer.PaintScale) $stack7;

        clone.<org.jfree.chart.renderer.xy.XYBlockRenderer: org.jfree.chart.renderer.PaintScale paintScale> = $stack8;

     label1:
        return clone;
    }
}
