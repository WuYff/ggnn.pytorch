public class org.jfree.chart.renderer.category.GroupedStackedBarRenderer extends org.jfree.chart.renderer.category.StackedBarRenderer implements java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.jfree.data.KeyToGroupMap seriesToGroupMap;

    public void <init>()
    {
        org.jfree.chart.renderer.category.GroupedStackedBarRenderer this;
        org.jfree.data.KeyToGroupMap $stack1;

        this := @this: org.jfree.chart.renderer.category.GroupedStackedBarRenderer;

        specialinvoke this.<org.jfree.chart.renderer.category.StackedBarRenderer: void <init>()>();

        $stack1 = new org.jfree.data.KeyToGroupMap;

        specialinvoke $stack1.<org.jfree.data.KeyToGroupMap: void <init>()>();

        this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap> = $stack1;

        return;
    }

    public void setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)
    {
        org.jfree.data.KeyToGroupMap map;
        org.jfree.chart.renderer.category.GroupedStackedBarRenderer this;

        this := @this: org.jfree.chart.renderer.category.GroupedStackedBarRenderer;

        map := @parameter0: org.jfree.data.KeyToGroupMap;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(map, "map");

        this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap> = map;

        virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)
    {
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.renderer.category.GroupedStackedBarRenderer this;
        org.jfree.data.KeyToGroupMap $stack3;
        org.jfree.data.Range r;

        this := @this: org.jfree.chart.renderer.category.GroupedStackedBarRenderer;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        if dataset != null goto label1;

        return null;

     label1:
        $stack3 = this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap>;

        r = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)>(dataset, $stack3);

        return r;
    }

    protected void calculateBarWidth(org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D, int, org.jfree.chart.renderer.category.CategoryItemRendererState)
    {
        org.jfree.chart.plot.CategoryPlot plot;
        int rendererIndex, groups, categories, columns;
        org.jfree.chart.axis.CategoryAxis xAxis;
        org.jfree.data.category.CategoryDataset data;
        org.jfree.chart.plot.PlotOrientation orientation, $stack24, $stack25;
        org.jfree.chart.renderer.category.GroupedStackedBarRenderer this;
        double maxWidth, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, used, $stack37, $stack38, $stack39, $stack40, space, $stack26, categoryMargin, itemMargin;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.data.KeyToGroupMap $stack27;

        this := @this: org.jfree.chart.renderer.category.GroupedStackedBarRenderer;

        plot := @parameter0: org.jfree.chart.plot.CategoryPlot;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        rendererIndex := @parameter2: int;

        state := @parameter3: org.jfree.chart.renderer.category.CategoryItemRendererState;

        xAxis = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int)>(rendererIndex);

        data = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(rendererIndex);

        if data == null goto label6;

        orientation = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        space = 0.0;

        $stack24 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack24 goto label1;

        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        goto label2;

     label1:
        $stack25 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack25 goto label2;

        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

     label2:
        $stack26 = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: double getMaximumBarWidth()>();

        maxWidth = space * $stack26;

        $stack27 = this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap>;

        groups = virtualinvoke $stack27.<org.jfree.data.KeyToGroupMap: int getGroupCount()>();

        categories = interfaceinvoke data.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        columns = groups * categories;

        categoryMargin = 0.0;

        itemMargin = 0.0;

        if categories <= 1 goto label3;

        categoryMargin = virtualinvoke xAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryMargin()>();

     label3:
        if groups <= 1 goto label4;

        itemMargin = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: double getItemMargin()>();

     label4:
        $stack31 = virtualinvoke xAxis.<org.jfree.chart.axis.CategoryAxis: double getLowerMargin()>();

        $stack32 = 1.0 - $stack31;

        $stack33 = virtualinvoke xAxis.<org.jfree.chart.axis.CategoryAxis: double getUpperMargin()>();

        $stack34 = $stack32 - $stack33;

        $stack35 = $stack34 - categoryMargin;

        $stack36 = $stack35 - itemMargin;

        used = space * $stack36;

        if columns <= 0 goto label5;

        $stack38 = (double) columns;

        $stack39 = used / $stack38;

        $stack40 = staticinvoke <java.lang.Math: double min(double,double)>($stack39, maxWidth);

        virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: void setBarWidth(double)>($stack40);

        goto label6;

     label5:
        $stack37 = staticinvoke <java.lang.Math: double min(double,double)>(used, maxWidth);

        virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: void setBarWidth(double)>($stack37);

     label6:
        return;
    }

    protected double calculateBarW0(org.jfree.chart.plot.CategoryPlot, org.jfree.chart.plot.PlotOrientation, java.awt.geom.Rectangle2D, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.renderer.category.CategoryItemRendererState, int, int)
    {
        org.jfree.chart.plot.PlotOrientation orientation, $stack19;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        int column, $stack21, groupCount, $stack28, row, groupIndex, categoryCount, $stack34, $stack40, $stack41;
        org.jfree.chart.renderer.category.GroupedStackedBarRenderer this;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack22, $stack35;
        org.jfree.data.KeyToGroupMap $stack24, $stack26, $stack27;
        org.jfree.data.category.CategoryDataset $stack29;
        java.lang.Comparable $stack30, $stack31;
        double $stack36, $stack37, $stack38, $stack39, $stack42, $stack43, groupGap, groupW, $stack45, $stack46, $stack47, $stack48, $stack49, $stack50, $stack51, $stack52, space, barW0;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;

        this := @this: org.jfree.chart.renderer.category.GroupedStackedBarRenderer;

        plot := @parameter0: org.jfree.chart.plot.CategoryPlot;

        orientation := @parameter1: org.jfree.chart.plot.PlotOrientation;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        domainAxis := @parameter3: org.jfree.chart.axis.CategoryAxis;

        state := @parameter4: org.jfree.chart.renderer.category.CategoryItemRendererState;

        row := @parameter5: int;

        column := @parameter6: int;

        $stack19 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack19 goto label1;

        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        goto label2;

     label1:
        space = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

     label2:
        $stack21 = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: int getColumnCount()>();

        $stack22 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        barW0 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack21, dataArea, $stack22);

        $stack24 = this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap>;

        groupCount = virtualinvoke $stack24.<org.jfree.data.KeyToGroupMap: int getGroupCount()>();

        $stack26 = this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap>;

        $stack27 = this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap>;

        $stack28 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)>(this);

        $stack29 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>($stack28);

        $stack30 = interfaceinvoke $stack29.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(row);

        $stack31 = virtualinvoke $stack27.<org.jfree.data.KeyToGroupMap: java.lang.Comparable getGroup(java.lang.Comparable)>($stack30);

        groupIndex = virtualinvoke $stack26.<org.jfree.data.KeyToGroupMap: int getGroupIndex(java.lang.Comparable)>($stack31);

        categoryCount = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: int getColumnCount()>();

        if groupCount <= 1 goto label3;

        $stack39 = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: double getItemMargin()>();

        $stack43 = space * $stack39;

        $stack40 = groupCount - 1;

        $stack41 = categoryCount * $stack40;

        $stack42 = (double) $stack41;

        groupGap = $stack43 / $stack42;

        groupW = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: double calculateSeriesWidth(double,org.jfree.chart.axis.CategoryAxis,int,int)>(space, domainAxis, categoryCount, groupCount);

        $stack46 = (double) groupIndex;

        $stack45 = groupW + groupGap;

        $stack47 = $stack46 * $stack45;

        $stack49 = barW0 + $stack47;

        $stack48 = groupW / 2.0;

        $stack50 = $stack49 + $stack48;

        $stack51 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack52 = $stack51 / 2.0;

        barW0 = $stack50 - $stack52;

        goto label4;

     label3:
        $stack34 = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: int getColumnCount()>();

        $stack35 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        $stack36 = virtualinvoke domainAxis.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(column, $stack34, dataArea, $stack35);

        $stack37 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        $stack38 = $stack37 / 2.0;

        barW0 = $stack36 - $stack38;

     label4:
        return barW0;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, int)
    {
        org.jfree.data.category.CategoryDataset dataset;
        int row, column, pass, i;
        java.lang.Number dataValue, v;
        double value, barW0, $stack50, barL0, $stack53, $stack54, $stack55, barLength, $stack59, $stack77, $stack90, positiveBase, negativeBase, d, i#27;
        org.jfree.chart.renderer.category.GroupedStackedBarRenderer this;
        org.jfree.data.KeyToGroupMap $stack39, $stack110;
        java.lang.Comparable $stack40, group, $stack111, $stack112;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.plot.PlotOrientation orientation, $stack46, $stack57;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        org.jfree.chart.renderer.category.CategoryItemRendererState state;
        byte $stack44, $stack66, $stack118, $stack48;
        boolean positive, inverted, $stack64, $stack113, $stack107, $stack74;
        org.jfree.chart.axis.ValueAxis rangeAxis;
        org.jfree.chart.ui.RectangleEdge location, barBase;
        java.awt.geom.Rectangle2D$Double $stack58, $stack73, $stack76, bar;
        org.jfree.chart.renderer.category.BarPainter $stack60;
        java.awt.Graphics2D g2;
        org.jfree.chart.labels.CategoryItemLabelGenerator generator;
        org.jfree.chart.entity.EntityCollection entities;
        org.jfree.chart.plot.PlotRenderingInfo $stack62;

        this := @this: org.jfree.chart.renderer.category.GroupedStackedBarRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.category.CategoryItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        plot := @parameter3: org.jfree.chart.plot.CategoryPlot;

        domainAxis := @parameter4: org.jfree.chart.axis.CategoryAxis;

        rangeAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter6: org.jfree.data.category.CategoryDataset;

        row := @parameter7: int;

        column := @parameter8: int;

        pass := @parameter9: int;

        dataValue = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(row, column);

        if dataValue != null goto label01;

        return;

     label01:
        value = virtualinvoke dataValue.<java.lang.Number: double doubleValue()>();

        $stack39 = this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap>;

        $stack40 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(row);

        group = virtualinvoke $stack39.<org.jfree.data.KeyToGroupMap: java.lang.Comparable getGroup(java.lang.Comparable)>($stack40);

        orientation = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        barW0 = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: double calculateBarW0(org.jfree.chart.plot.CategoryPlot,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.renderer.category.CategoryItemRendererState,int,int)>(plot, orientation, dataArea, domainAxis, state, row, column);

        positiveBase = 0.0;

        negativeBase = 0.0;

        i = 0;

     label02:
        if i >= row goto label05;

        $stack110 = this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap>;

        $stack111 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(i);

        $stack112 = virtualinvoke $stack110.<org.jfree.data.KeyToGroupMap: java.lang.Comparable getGroup(java.lang.Comparable)>($stack111);

        $stack113 = virtualinvoke group.<java.lang.Object: boolean equals(java.lang.Object)>($stack112);

        if $stack113 == 0 goto label04;

        v = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(i, column);

        if v == null goto label04;

        d = virtualinvoke v.<java.lang.Number: double doubleValue()>();

        $stack118 = d cmpl 0.0;

        if $stack118 <= 0 goto label03;

        positiveBase = positiveBase + d;

        goto label04;

     label03:
        negativeBase = negativeBase + d;

     label04:
        i = i + 1;

        goto label02;

     label05:
        $stack44 = value cmpl 0.0;

        if $stack44 <= 0 goto label06;

        $stack107 = 1;

        goto label07;

     label06:
        $stack107 = 0;

     label07:
        positive = $stack107;

        inverted = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        $stack46 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack46 goto label11;

        if $stack107 == 0 goto label08;

        if inverted != 0 goto label09;

     label08:
        if positive != 0 goto label10;

        if inverted != 0 goto label10;

     label09:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        goto label15;

     label10:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        goto label15;

     label11:
        if $stack107 == 0 goto label12;

        if inverted == 0 goto label13;

     label12:
        if positive != 0 goto label14;

        if inverted == 0 goto label14;

     label13:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        goto label15;

     label14:
        barBase = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

     label15:
        location = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        $stack48 = value cmpl 0.0;

        if $stack48 <= 0 goto label16;

        i#27 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(positiveBase, dataArea, location);

        $stack90 = positiveBase + value;

        d = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack90, dataArea, location);

        goto label17;

     label16:
        i#27 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(negativeBase, dataArea, location);

        $stack50 = negativeBase + value;

        d = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack50, dataArea, location);

     label17:
        barL0 = staticinvoke <java.lang.Math: double min(double,double)>(i#27, d);

        $stack53 = d - i#27;

        $stack54 = staticinvoke <java.lang.Math: double abs(double)>($stack53);

        $stack55 = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: double getMinimumBarLength()>();

        barLength = staticinvoke <java.lang.Math: double max(double,double)>($stack54, $stack55);

        $stack57 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack57 goto label18;

        $stack76 = new java.awt.geom.Rectangle2D$Double;

        $stack77 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        specialinvoke $stack76.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(barL0, barW0, barLength, $stack77);

        bar = $stack76;

        goto label19;

     label18:
        $stack58 = new java.awt.geom.Rectangle2D$Double;

        $stack59 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: double getBarWidth()>();

        specialinvoke $stack58.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(barW0, barL0, $stack59, barLength);

        bar = $stack58;

     label19:
        $stack60 = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.chart.renderer.category.BarPainter getBarPainter()>();

        interfaceinvoke $stack60.<org.jfree.chart.renderer.category.BarPainter: void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.chart.ui.RectangleEdge)>(g2, this, row, column, bar, barBase);

        generator = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.chart.labels.CategoryItemLabelGenerator getItemLabelGenerator(int,int)>(row, column);

        if generator == null goto label22;

        $stack64 = virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: boolean isItemLabelVisible(int,int)>(row, column);

        if $stack64 == 0 goto label22;

        $stack73 = bar;

        $stack66 = value cmpg 0.0;

        if $stack66 >= 0 goto label20;

        $stack74 = 1;

        goto label21;

     label20:
        $stack74 = 0;

     label21:
        virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>(g2, dataset, row, column, plot, generator, $stack73, $stack74);

     label22:
        $stack62 = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.plot.PlotRenderingInfo getInfo()>();

        if $stack62 == null goto label23;

        entities = virtualinvoke state.<org.jfree.chart.renderer.category.CategoryItemRendererState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label23;

        virtualinvoke this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: void addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)>(entities, dataset, row, column, bar);

     label23:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.category.GroupedStackedBarRenderer this, that;
        boolean $stack3, $stack6, $stack7;
        org.jfree.data.KeyToGroupMap $stack4, $stack5;

        this := @this: org.jfree.chart.renderer.category.GroupedStackedBarRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.category.GroupedStackedBarRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.category.GroupedStackedBarRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap>;

        $stack4 = that.<org.jfree.chart.renderer.category.GroupedStackedBarRenderer: org.jfree.data.KeyToGroupMap seriesToGroupMap>;

        $stack6 = virtualinvoke $stack5.<org.jfree.data.KeyToGroupMap: boolean equals(java.lang.Object)>($stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack7 = specialinvoke this.<org.jfree.chart.renderer.category.StackedBarRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack7;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.category.GroupedStackedBarRenderer: long serialVersionUID> = -2725921399005922939L;

        return;
    }
}
