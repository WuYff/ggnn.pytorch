public abstract class org.jfree.chart.renderer.AbstractRenderer extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.lang.Double ZERO;
    public static final java.awt.Paint DEFAULT_PAINT;
    public static final java.awt.Paint DEFAULT_OUTLINE_PAINT;
    public static final java.awt.Stroke DEFAULT_STROKE;
    public static final java.awt.Stroke DEFAULT_OUTLINE_STROKE;
    public static final java.awt.Shape DEFAULT_SHAPE;
    public static final java.awt.Font DEFAULT_VALUE_LABEL_FONT;
    public static final java.awt.Paint DEFAULT_VALUE_LABEL_PAINT;
    private org.jfree.chart.util.BooleanList seriesVisibleList;
    private boolean defaultSeriesVisible;
    private org.jfree.chart.util.BooleanList seriesVisibleInLegendList;
    private boolean defaultSeriesVisibleInLegend;
    private org.jfree.chart.util.PaintList paintList;
    private boolean autoPopulateSeriesPaint;
    private transient java.awt.Paint defaultPaint;
    private org.jfree.chart.util.PaintList fillPaintList;
    private boolean autoPopulateSeriesFillPaint;
    private transient java.awt.Paint defaultFillPaint;
    private org.jfree.chart.util.PaintList outlinePaintList;
    private boolean autoPopulateSeriesOutlinePaint;
    private transient java.awt.Paint defaultOutlinePaint;
    private org.jfree.chart.util.StrokeList strokeList;
    private boolean autoPopulateSeriesStroke;
    private transient java.awt.Stroke defaultStroke;
    private org.jfree.chart.util.StrokeList outlineStrokeList;
    private transient java.awt.Stroke defaultOutlineStroke;
    private boolean autoPopulateSeriesOutlineStroke;
    private org.jfree.chart.util.ShapeList shapeList;
    private boolean autoPopulateSeriesShape;
    private transient java.awt.Shape defaultShape;
    private org.jfree.chart.util.BooleanList itemLabelsVisibleList;
    private boolean defaultItemLabelsVisible;
    private java.util.Map itemLabelFontMap;
    private java.awt.Font defaultItemLabelFont;
    private org.jfree.chart.util.PaintList itemLabelPaintList;
    private transient java.awt.Paint defaultItemLabelPaint;
    private java.util.Map positiveItemLabelPositionMap;
    private org.jfree.chart.labels.ItemLabelPosition defaultPositiveItemLabelPosition;
    private java.util.Map negativeItemLabelPositionMap;
    private org.jfree.chart.labels.ItemLabelPosition defaultNegativeItemLabelPosition;
    private double itemLabelAnchorOffset;
    private org.jfree.chart.util.BooleanList createEntitiesList;
    private boolean defaultCreateEntities;
    private org.jfree.chart.util.ShapeList legendShapeList;
    private transient java.awt.Shape defaultLegendShape;
    private boolean treatLegendShapeAsLine;
    private java.util.Map legendTextFontMap;
    private java.awt.Font defaultLegendTextFont;
    private org.jfree.chart.util.PaintList legendTextPaint;
    private transient java.awt.Paint defaultLegendTextPaint;
    private boolean dataBoundsIncludesVisibleSeriesOnly;
    private int defaultEntityRadius;
    private transient javax.swing.event.EventListenerList listenerList;
    private transient org.jfree.chart.event.RendererChangeEvent event;
    private static final double ADJ;
    private static final double OPP;

    public void <init>()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.util.BooleanList $stack1, $stack2, $stack15, $stack28;
        org.jfree.chart.util.PaintList $stack3, $stack5, $stack7, $stack18, $stack31;
        java.awt.Paint $stack4, $stack8;
        java.awt.Color $stack6, $stack19;
        org.jfree.chart.util.StrokeList $stack9, $stack11;
        java.awt.Stroke $stack10, $stack12;
        org.jfree.chart.util.ShapeList $stack13, $stack29;
        java.awt.Shape $stack14;
        java.util.HashMap $stack16, $stack20, $stack24, $stack30;
        java.awt.Font $stack17;
        org.jfree.chart.labels.ItemLabelPosition $stack21, $stack25;
        org.jfree.chart.ui.TextAnchor $stack22, $stack26;
        org.jfree.chart.labels.ItemLabelAnchor $stack23, $stack27;
        javax.swing.event.EventListenerList $stack32;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset> = 2.0;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly> = 1;

        $stack1 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack1.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList> = $stack1;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisible> = 1;

        $stack2 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack2.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList> = $stack2;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisibleInLegend> = 1;

        $stack3 = new org.jfree.chart.util.PaintList;

        specialinvoke $stack3.<org.jfree.chart.util.PaintList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList> = $stack3;

        $stack4 = <org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint DEFAULT_PAINT>;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultPaint> = $stack4;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesPaint> = 1;

        $stack5 = new org.jfree.chart.util.PaintList;

        specialinvoke $stack5.<org.jfree.chart.util.PaintList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList fillPaintList> = $stack5;

        $stack6 = <java.awt.Color: java.awt.Color WHITE>;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultFillPaint> = $stack6;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesFillPaint> = 0;

        $stack7 = new org.jfree.chart.util.PaintList;

        specialinvoke $stack7.<org.jfree.chart.util.PaintList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList outlinePaintList> = $stack7;

        $stack8 = <org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint DEFAULT_OUTLINE_PAINT>;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultOutlinePaint> = $stack8;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesOutlinePaint> = 0;

        $stack9 = new org.jfree.chart.util.StrokeList;

        specialinvoke $stack9.<org.jfree.chart.util.StrokeList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList> = $stack9;

        $stack10 = <org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke DEFAULT_STROKE>;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultStroke> = $stack10;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesStroke> = 1;

        $stack11 = new org.jfree.chart.util.StrokeList;

        specialinvoke $stack11.<org.jfree.chart.util.StrokeList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList outlineStrokeList> = $stack11;

        $stack12 = <org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke DEFAULT_OUTLINE_STROKE>;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultOutlineStroke> = $stack12;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesOutlineStroke> = 0;

        $stack13 = new org.jfree.chart.util.ShapeList;

        specialinvoke $stack13.<org.jfree.chart.util.ShapeList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList shapeList> = $stack13;

        $stack14 = <org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape DEFAULT_SHAPE>;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape> = $stack14;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesShape> = 1;

        $stack15 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack15.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList itemLabelsVisibleList> = $stack15;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultItemLabelsVisible> = 0;

        $stack16 = new java.util.HashMap;

        specialinvoke $stack16.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map itemLabelFontMap> = $stack16;

        $stack17 = new java.awt.Font;

        specialinvoke $stack17.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 0, 10);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultItemLabelFont> = $stack17;

        $stack18 = new org.jfree.chart.util.PaintList;

        specialinvoke $stack18.<org.jfree.chart.util.PaintList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList itemLabelPaintList> = $stack18;

        $stack19 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultItemLabelPaint> = $stack19;

        $stack20 = new java.util.HashMap;

        specialinvoke $stack20.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map positiveItemLabelPositionMap> = $stack20;

        $stack21 = new org.jfree.chart.labels.ItemLabelPosition;

        $stack23 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE12>;

        $stack22 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor BOTTOM_CENTER>;

        specialinvoke $stack21.<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.ui.TextAnchor)>($stack23, $stack22);

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultPositiveItemLabelPosition> = $stack21;

        $stack24 = new java.util.HashMap;

        specialinvoke $stack24.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map negativeItemLabelPositionMap> = $stack24;

        $stack25 = new org.jfree.chart.labels.ItemLabelPosition;

        $stack27 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE6>;

        $stack26 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor TOP_CENTER>;

        specialinvoke $stack25.<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.ui.TextAnchor)>($stack27, $stack26);

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultNegativeItemLabelPosition> = $stack25;

        $stack28 = new org.jfree.chart.util.BooleanList;

        specialinvoke $stack28.<org.jfree.chart.util.BooleanList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList createEntitiesList> = $stack28;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultCreateEntities> = 1;

        this.<org.jfree.chart.renderer.AbstractRenderer: int defaultEntityRadius> = 3;

        $stack29 = new org.jfree.chart.util.ShapeList;

        specialinvoke $stack29.<org.jfree.chart.util.ShapeList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList legendShapeList> = $stack29;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultLegendShape> = null;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean treatLegendShapeAsLine> = 0;

        $stack30 = new java.util.HashMap;

        specialinvoke $stack30.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map legendTextFontMap> = $stack30;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultLegendTextFont> = null;

        $stack31 = new org.jfree.chart.util.PaintList;

        specialinvoke $stack31.<org.jfree.chart.util.PaintList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList legendTextPaint> = $stack31;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultLegendTextPaint> = null;

        $stack32 = new javax.swing.event.EventListenerList;

        specialinvoke $stack32.<javax.swing.event.EventListenerList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList> = $stack32;

        return;
    }

    public abstract org.jfree.chart.plot.DrawingSupplier getDrawingSupplier();

    protected void beginElementGroup(java.awt.Graphics2D, org.jfree.data.ItemKey)
    {
        org.jfree.data.ItemKey key;
        java.util.HashMap $stack5;
        java.lang.String $stack7;
        java.awt.Graphics2D g2;
        org.jfree.chart.ChartHints$Key $stack9;
        org.jfree.chart.renderer.AbstractRenderer this;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        key := @parameter1: org.jfree.data.ItemKey;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(key, "key");

        $stack5 = new java.util.HashMap;

        specialinvoke $stack5.<java.util.HashMap: void <init>(int)>(1);

        $stack7 = interfaceinvoke key.<org.jfree.data.ItemKey: java.lang.String toJSONString()>();

        interfaceinvoke $stack5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ref", $stack7);

        $stack9 = <org.jfree.chart.ChartHints: org.jfree.chart.ChartHints$Key KEY_BEGIN_ELEMENT>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack9, $stack5);

        return;
    }

    protected void endElementGroup(java.awt.Graphics2D)
    {
        java.awt.Graphics2D g2;
        java.lang.Boolean $stack2;
        org.jfree.chart.ChartHints$Key $stack3;
        org.jfree.chart.renderer.AbstractRenderer this;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        $stack3 = <org.jfree.chart.ChartHints: org.jfree.chart.ChartHints$Key KEY_END_ELEMENT>;

        $stack2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack3, $stack2);

        return;
    }

    public boolean getItemVisible(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series, item;
        boolean $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        item := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: boolean isSeriesVisible(int)>(series);

        return $stack3;
    }

    public boolean isSeriesVisible(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack4;
        java.lang.Boolean b;
        boolean result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisible>;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList>;

        b = virtualinvoke $stack4.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        if b == null goto label1;

        result = virtualinvoke b.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        return result;
    }

    public java.lang.Boolean getSeriesVisible(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack2;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        return $stack3;
    }

    public void setSeriesVisible(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.lang.Boolean visible;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        visible := @parameter1: java.lang.Boolean;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesVisible(int,java.lang.Boolean,boolean)>(series, visible, 1);

        return;
    }

    public void setSeriesVisible(int, java.lang.Boolean, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.lang.Boolean visible;
        org.jfree.chart.util.BooleanList $stack5;
        boolean notify;
        org.jfree.chart.event.RendererChangeEvent $stack6;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        visible := @parameter1: java.lang.Boolean;

        notify := @parameter2: boolean;

        $stack5 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList>;

        virtualinvoke $stack5.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, visible);

        if notify == 0 goto label1;

        $stack6 = new org.jfree.chart.event.RendererChangeEvent;

        specialinvoke $stack6.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object,boolean)>(this, 1);

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($stack6);

     label1:
        return;
    }

    public boolean getDefaultSeriesVisible()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisible>;

        return $stack1;
    }

    public void setDefaultSeriesVisible(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean visible;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        visible := @parameter0: boolean;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultSeriesVisible(boolean,boolean)>(visible, 1);

        return;
    }

    public void setDefaultSeriesVisible(boolean, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean visible, notify;
        org.jfree.chart.event.RendererChangeEvent $stack4;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        visible := @parameter0: boolean;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisible> = visible;

        if notify == 0 goto label1;

        $stack4 = new org.jfree.chart.event.RendererChangeEvent;

        specialinvoke $stack4.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object,boolean)>(this, 1);

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($stack4);

     label1:
        return;
    }

    public boolean isSeriesVisibleInLegend(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack4;
        java.lang.Boolean b;
        boolean result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisibleInLegend>;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList>;

        b = virtualinvoke $stack4.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        if b == null goto label1;

        result = virtualinvoke b.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        return result;
    }

    public java.lang.Boolean getSeriesVisibleInLegend(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack2;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        return $stack3;
    }

    public void setSeriesVisibleInLegend(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.lang.Boolean visible;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        visible := @parameter1: java.lang.Boolean;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)>(series, visible, 1);

        return;
    }

    public void setSeriesVisibleInLegend(int, java.lang.Boolean, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.lang.Boolean visible;
        org.jfree.chart.util.BooleanList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        visible := @parameter1: java.lang.Boolean;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList>;

        virtualinvoke $stack4.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, visible);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getDefaultSeriesVisibleInLegend()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisibleInLegend>;

        return $stack1;
    }

    public void setDefaultSeriesVisibleInLegend(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean visible;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        visible := @parameter0: boolean;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultSeriesVisibleInLegend(boolean,boolean)>(visible, 1);

        return;
    }

    public void setDefaultSeriesVisibleInLegend(boolean, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean visible, notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        visible := @parameter0: boolean;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisibleInLegend> = visible;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getItemPaint(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint lookupSeriesPaint(int)>(row);

        return $stack3;
    }

    public java.awt.Paint lookupSeriesPaint(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        boolean $stack6;
        org.jfree.chart.plot.DrawingSupplier supplier;
        java.awt.Paint seriesPaint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        seriesPaint = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint getSeriesPaint(int)>(series);

        if seriesPaint != null goto label1;

        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesPaint>;

        if $stack6 == 0 goto label1;

        supplier = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        if supplier == null goto label1;

        seriesPaint = interfaceinvoke supplier.<org.jfree.chart.plot.DrawingSupplier: java.awt.Paint getNextPaint()>();

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesPaint(int,java.awt.Paint,boolean)>(series, seriesPaint, 0);

     label1:
        if seriesPaint != null goto label2;

        seriesPaint = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultPaint>;

     label2:
        return seriesPaint;
    }

    public java.awt.Paint getSeriesPaint(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.PaintList $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.PaintList: java.awt.Paint getPaint(int)>(series);

        return $stack3;
    }

    public void setSeriesPaint(int, java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesPaint(int,java.awt.Paint,boolean)>(series, paint, 1);

        return;
    }

    public void setSeriesPaint(int, java.awt.Paint, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint paint;
        org.jfree.chart.util.PaintList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList>;

        virtualinvoke $stack4.<org.jfree.chart.util.PaintList: void setPaint(int,java.awt.Paint)>(series, paint);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public void clearSeriesPaints(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.util.PaintList $stack2;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        notify := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList>;

        virtualinvoke $stack2.<org.jfree.chart.util.PaintList: void clear()>();

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getDefaultPaint()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultPaint>;

        return $stack1;
    }

    public void setDefaultPaint(java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        paint := @parameter0: java.awt.Paint;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultPaint(java.awt.Paint,boolean)>(paint, 1);

        return;
    }

    public void setDefaultPaint(java.awt.Paint, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint paint;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        paint := @parameter0: java.awt.Paint;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultPaint> = paint;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getAutoPopulateSeriesPaint()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesPaint>;

        return $stack1;
    }

    public void setAutoPopulateSeriesPaint(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean auto;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        auto := @parameter0: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesPaint> = auto;

        return;
    }

    public java.awt.Paint getItemFillPaint(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint lookupSeriesFillPaint(int)>(row);

        return $stack3;
    }

    public java.awt.Paint lookupSeriesFillPaint(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        boolean $stack6;
        org.jfree.chart.plot.DrawingSupplier supplier;
        java.awt.Paint seriesFillPaint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        seriesFillPaint = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint getSeriesFillPaint(int)>(series);

        if seriesFillPaint != null goto label1;

        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesFillPaint>;

        if $stack6 == 0 goto label1;

        supplier = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        if supplier == null goto label1;

        seriesFillPaint = interfaceinvoke supplier.<org.jfree.chart.plot.DrawingSupplier: java.awt.Paint getNextFillPaint()>();

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesFillPaint(int,java.awt.Paint,boolean)>(series, seriesFillPaint, 0);

     label1:
        if seriesFillPaint != null goto label2;

        seriesFillPaint = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultFillPaint>;

     label2:
        return seriesFillPaint;
    }

    public java.awt.Paint getSeriesFillPaint(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.PaintList $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList fillPaintList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.PaintList: java.awt.Paint getPaint(int)>(series);

        return $stack3;
    }

    public void setSeriesFillPaint(int, java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesFillPaint(int,java.awt.Paint,boolean)>(series, paint, 1);

        return;
    }

    public void setSeriesFillPaint(int, java.awt.Paint, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint paint;
        org.jfree.chart.util.PaintList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList fillPaintList>;

        virtualinvoke $stack4.<org.jfree.chart.util.PaintList: void setPaint(int,java.awt.Paint)>(series, paint);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getDefaultFillPaint()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultFillPaint>;

        return $stack1;
    }

    public void setDefaultFillPaint(java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        paint := @parameter0: java.awt.Paint;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultFillPaint(java.awt.Paint,boolean)>(paint, 1);

        return;
    }

    public void setDefaultFillPaint(java.awt.Paint, boolean)
    {
        java.awt.Paint paint;
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        paint := @parameter0: java.awt.Paint;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultFillPaint> = paint;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getAutoPopulateSeriesFillPaint()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesFillPaint>;

        return $stack1;
    }

    public void setAutoPopulateSeriesFillPaint(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean auto;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        auto := @parameter0: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesFillPaint> = auto;

        return;
    }

    public java.awt.Paint getItemOutlinePaint(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint lookupSeriesOutlinePaint(int)>(row);

        return $stack3;
    }

    public java.awt.Paint lookupSeriesOutlinePaint(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        boolean $stack6;
        org.jfree.chart.plot.DrawingSupplier supplier;
        java.awt.Paint seriesOutlinePaint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        seriesOutlinePaint = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint getSeriesOutlinePaint(int)>(series);

        if seriesOutlinePaint != null goto label1;

        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesOutlinePaint>;

        if $stack6 == 0 goto label1;

        supplier = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        if supplier == null goto label1;

        seriesOutlinePaint = interfaceinvoke supplier.<org.jfree.chart.plot.DrawingSupplier: java.awt.Paint getNextOutlinePaint()>();

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesOutlinePaint(int,java.awt.Paint,boolean)>(series, seriesOutlinePaint, 0);

     label1:
        if seriesOutlinePaint != null goto label2;

        seriesOutlinePaint = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultOutlinePaint>;

     label2:
        return seriesOutlinePaint;
    }

    public java.awt.Paint getSeriesOutlinePaint(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.PaintList $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList outlinePaintList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.PaintList: java.awt.Paint getPaint(int)>(series);

        return $stack3;
    }

    public void setSeriesOutlinePaint(int, java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesOutlinePaint(int,java.awt.Paint,boolean)>(series, paint, 1);

        return;
    }

    public void setSeriesOutlinePaint(int, java.awt.Paint, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint paint;
        org.jfree.chart.util.PaintList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList outlinePaintList>;

        virtualinvoke $stack4.<org.jfree.chart.util.PaintList: void setPaint(int,java.awt.Paint)>(series, paint);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getDefaultOutlinePaint()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultOutlinePaint>;

        return $stack1;
    }

    public void setDefaultOutlinePaint(java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        paint := @parameter0: java.awt.Paint;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultOutlinePaint(java.awt.Paint,boolean)>(paint, 1);

        return;
    }

    public void setDefaultOutlinePaint(java.awt.Paint, boolean)
    {
        java.awt.Paint paint;
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        paint := @parameter0: java.awt.Paint;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultOutlinePaint> = paint;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getAutoPopulateSeriesOutlinePaint()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesOutlinePaint>;

        return $stack1;
    }

    public void setAutoPopulateSeriesOutlinePaint(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean auto;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        auto := @parameter0: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesOutlinePaint> = auto;

        return;
    }

    public java.awt.Stroke getItemStroke(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke lookupSeriesStroke(int)>(row);

        return $stack3;
    }

    public java.awt.Stroke lookupSeriesStroke(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        boolean $stack6;
        org.jfree.chart.plot.DrawingSupplier supplier;
        java.awt.Stroke result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        result = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke getSeriesStroke(int)>(series);

        if result != null goto label1;

        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesStroke>;

        if $stack6 == 0 goto label1;

        supplier = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        if supplier == null goto label1;

        result = interfaceinvoke supplier.<org.jfree.chart.plot.DrawingSupplier: java.awt.Stroke getNextStroke()>();

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesStroke(int,java.awt.Stroke,boolean)>(series, result, 0);

     label1:
        if result != null goto label2;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultStroke>;

     label2:
        return result;
    }

    public java.awt.Stroke getSeriesStroke(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.StrokeList $stack2;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.StrokeList: java.awt.Stroke getStroke(int)>(series);

        return $stack3;
    }

    public void setSeriesStroke(int, java.awt.Stroke)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Stroke stroke;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        stroke := @parameter1: java.awt.Stroke;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesStroke(int,java.awt.Stroke,boolean)>(series, stroke, 1);

        return;
    }

    public void setSeriesStroke(int, java.awt.Stroke, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Stroke stroke;
        org.jfree.chart.util.StrokeList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        stroke := @parameter1: java.awt.Stroke;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList>;

        virtualinvoke $stack4.<org.jfree.chart.util.StrokeList: void setStroke(int,java.awt.Stroke)>(series, stroke);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public void clearSeriesStrokes(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.util.StrokeList $stack2;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        notify := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList>;

        virtualinvoke $stack2.<org.jfree.chart.util.StrokeList: void clear()>();

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getDefaultStroke()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultStroke>;

        return $stack1;
    }

    public void setDefaultStroke(java.awt.Stroke)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Stroke stroke;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        stroke := @parameter0: java.awt.Stroke;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultStroke(java.awt.Stroke,boolean)>(stroke, 1);

        return;
    }

    public void setDefaultStroke(java.awt.Stroke, boolean)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        stroke := @parameter0: java.awt.Stroke;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultStroke> = stroke;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getAutoPopulateSeriesStroke()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesStroke>;

        return $stack1;
    }

    public void setAutoPopulateSeriesStroke(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean auto;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        auto := @parameter0: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesStroke> = auto;

        return;
    }

    public java.awt.Stroke getItemOutlineStroke(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke lookupSeriesOutlineStroke(int)>(row);

        return $stack3;
    }

    public java.awt.Stroke lookupSeriesOutlineStroke(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        boolean $stack6;
        org.jfree.chart.plot.DrawingSupplier supplier;
        java.awt.Stroke result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        result = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke getSeriesOutlineStroke(int)>(series);

        if result != null goto label1;

        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesOutlineStroke>;

        if $stack6 == 0 goto label1;

        supplier = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        if supplier == null goto label1;

        result = interfaceinvoke supplier.<org.jfree.chart.plot.DrawingSupplier: java.awt.Stroke getNextOutlineStroke()>();

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesOutlineStroke(int,java.awt.Stroke,boolean)>(series, result, 0);

     label1:
        if result != null goto label2;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultOutlineStroke>;

     label2:
        return result;
    }

    public java.awt.Stroke getSeriesOutlineStroke(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.StrokeList $stack2;
        java.awt.Stroke $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList outlineStrokeList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.StrokeList: java.awt.Stroke getStroke(int)>(series);

        return $stack3;
    }

    public void setSeriesOutlineStroke(int, java.awt.Stroke)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Stroke stroke;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        stroke := @parameter1: java.awt.Stroke;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesOutlineStroke(int,java.awt.Stroke,boolean)>(series, stroke, 1);

        return;
    }

    public void setSeriesOutlineStroke(int, java.awt.Stroke, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Stroke stroke;
        org.jfree.chart.util.StrokeList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        stroke := @parameter1: java.awt.Stroke;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList outlineStrokeList>;

        virtualinvoke $stack4.<org.jfree.chart.util.StrokeList: void setStroke(int,java.awt.Stroke)>(series, stroke);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getDefaultOutlineStroke()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultOutlineStroke>;

        return $stack1;
    }

    public void setDefaultOutlineStroke(java.awt.Stroke)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Stroke stroke;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        stroke := @parameter0: java.awt.Stroke;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultOutlineStroke(java.awt.Stroke,boolean)>(stroke, 1);

        return;
    }

    public void setDefaultOutlineStroke(java.awt.Stroke, boolean)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        stroke := @parameter0: java.awt.Stroke;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultOutlineStroke> = stroke;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getAutoPopulateSeriesOutlineStroke()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesOutlineStroke>;

        return $stack1;
    }

    public void setAutoPopulateSeriesOutlineStroke(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean auto;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        auto := @parameter0: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesOutlineStroke> = auto;

        return;
    }

    public java.awt.Shape getItemShape(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        java.awt.Shape $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape lookupSeriesShape(int)>(row);

        return $stack3;
    }

    public java.awt.Shape lookupSeriesShape(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        boolean $stack6;
        org.jfree.chart.plot.DrawingSupplier supplier;
        java.awt.Shape result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        result = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape getSeriesShape(int)>(series);

        if result != null goto label1;

        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesShape>;

        if $stack6 == 0 goto label1;

        supplier = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        if supplier == null goto label1;

        result = interfaceinvoke supplier.<org.jfree.chart.plot.DrawingSupplier: java.awt.Shape getNextShape()>();

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesShape(int,java.awt.Shape,boolean)>(series, result, 0);

     label1:
        if result != null goto label2;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape>;

     label2:
        return result;
    }

    public java.awt.Shape getSeriesShape(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.ShapeList $stack2;
        java.awt.Shape $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList shapeList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.ShapeList: java.awt.Shape getShape(int)>(series);

        return $stack3;
    }

    public void setSeriesShape(int, java.awt.Shape)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Shape shape;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        shape := @parameter1: java.awt.Shape;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesShape(int,java.awt.Shape,boolean)>(series, shape, 1);

        return;
    }

    public void setSeriesShape(int, java.awt.Shape, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Shape shape;
        org.jfree.chart.util.ShapeList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        shape := @parameter1: java.awt.Shape;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList shapeList>;

        virtualinvoke $stack4.<org.jfree.chart.util.ShapeList: void setShape(int,java.awt.Shape)>(series, shape);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Shape getDefaultShape()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape>;

        return $stack1;
    }

    public void setDefaultShape(java.awt.Shape)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Shape shape;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        shape := @parameter0: java.awt.Shape;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultShape(java.awt.Shape,boolean)>(shape, 1);

        return;
    }

    public void setDefaultShape(java.awt.Shape, boolean)
    {
        java.awt.Shape shape;
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        shape := @parameter0: java.awt.Shape;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(shape, "shape");

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape> = shape;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getAutoPopulateSeriesShape()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesShape>;

        return $stack1;
    }

    public void setAutoPopulateSeriesShape(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean auto;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        auto := @parameter0: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean autoPopulateSeriesShape> = auto;

        return;
    }

    public boolean isItemLabelVisible(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        boolean $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: boolean isSeriesItemLabelsVisible(int)>(row);

        return $stack3;
    }

    public boolean isSeriesItemLabelsVisible(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack3;
        java.lang.Boolean b;
        boolean $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList itemLabelsVisibleList>;

        b = virtualinvoke $stack3.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        if b != null goto label1;

        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultItemLabelsVisible>;

        return $stack6;

     label1:
        $stack5 = virtualinvoke b.<java.lang.Boolean: boolean booleanValue()>();

        return $stack5;
    }

    public void setSeriesItemLabelsVisible(int, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        boolean visible;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        visible := @parameter1: boolean;

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(visible);

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesItemLabelsVisible(int,java.lang.Boolean)>(series, $stack3);

        return;
    }

    public void setSeriesItemLabelsVisible(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.lang.Boolean visible;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        visible := @parameter1: java.lang.Boolean;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)>(series, visible, 1);

        return;
    }

    public void setSeriesItemLabelsVisible(int, java.lang.Boolean, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.lang.Boolean visible;
        org.jfree.chart.util.BooleanList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        visible := @parameter1: java.lang.Boolean;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList itemLabelsVisibleList>;

        virtualinvoke $stack4.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, visible);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getDefaultItemLabelsVisible()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultItemLabelsVisible>;

        return $stack1;
    }

    public void setDefaultItemLabelsVisible(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean visible;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        visible := @parameter0: boolean;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultItemLabelsVisible(boolean,boolean)>(visible, 1);

        return;
    }

    public void setDefaultItemLabelsVisible(boolean, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean visible, notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        visible := @parameter0: boolean;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultItemLabelsVisible> = visible;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Font getItemLabelFont(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        java.awt.Font result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        result = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font getSeriesItemLabelFont(int)>(row);

        if result != null goto label1;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultItemLabelFont>;

     label1:
        return result;
    }

    public java.awt.Font getSeriesItemLabelFont(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.util.Map $stack2;
        java.lang.Integer $stack3;
        java.lang.Object $stack4;
        java.awt.Font $stack5;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map itemLabelFontMap>;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(series);

        $stack4 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack3);

        $stack5 = (java.awt.Font) $stack4;

        return $stack5;
    }

    public void setSeriesItemLabelFont(int, java.awt.Font)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Font font;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        font := @parameter1: java.awt.Font;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesItemLabelFont(int,java.awt.Font,boolean)>(series, font, 1);

        return;
    }

    public void setSeriesItemLabelFont(int, java.awt.Font, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.util.Map $stack4;
        java.lang.Integer $stack5;
        java.awt.Font font;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        font := @parameter1: java.awt.Font;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map itemLabelFontMap>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(series);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, font);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Font getDefaultItemLabelFont()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Font $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultItemLabelFont>;

        return $stack1;
    }

    public void setDefaultItemLabelFont(java.awt.Font)
    {
        java.awt.Font font;
        org.jfree.chart.renderer.AbstractRenderer this;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        font := @parameter0: java.awt.Font;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(font, "font");

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultItemLabelFont(java.awt.Font,boolean)>(font, 1);

        return;
    }

    public void setDefaultItemLabelFont(java.awt.Font, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Font font;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        font := @parameter0: java.awt.Font;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultItemLabelFont> = font;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getItemLabelPaint(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        java.awt.Paint result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        result = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint getSeriesItemLabelPaint(int)>(row);

        if result != null goto label1;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultItemLabelPaint>;

     label1:
        return result;
    }

    public java.awt.Paint getSeriesItemLabelPaint(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.PaintList $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList itemLabelPaintList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.PaintList: java.awt.Paint getPaint(int)>(series);

        return $stack3;
    }

    public void setSeriesItemLabelPaint(int, java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesItemLabelPaint(int,java.awt.Paint,boolean)>(series, paint, 1);

        return;
    }

    public void setSeriesItemLabelPaint(int, java.awt.Paint, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint paint;
        org.jfree.chart.util.PaintList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList itemLabelPaintList>;

        virtualinvoke $stack4.<org.jfree.chart.util.PaintList: void setPaint(int,java.awt.Paint)>(series, paint);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getDefaultItemLabelPaint()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultItemLabelPaint>;

        return $stack1;
    }

    public void setDefaultItemLabelPaint(java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        paint := @parameter0: java.awt.Paint;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultItemLabelPaint(java.awt.Paint,boolean)>(paint, 1);

        return;
    }

    public void setDefaultItemLabelPaint(java.awt.Paint, boolean)
    {
        java.awt.Paint paint;
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        paint := @parameter0: java.awt.Paint;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultItemLabelPaint> = paint;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPosition(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        org.jfree.chart.labels.ItemLabelPosition $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition getSeriesPositiveItemLabelPosition(int)>(row);

        return $stack3;
    }

    public org.jfree.chart.labels.ItemLabelPosition getSeriesPositiveItemLabelPosition(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        java.lang.Object $stack5;
        org.jfree.chart.labels.ItemLabelPosition position;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map positiveItemLabelPositionMap>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(series);

        $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4);

        position = (org.jfree.chart.labels.ItemLabelPosition) $stack5;

        if position != null goto label1;

        position = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultPositiveItemLabelPosition>;

     label1:
        return position;
    }

    public void setSeriesPositiveItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.labels.ItemLabelPosition position;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        position := @parameter1: org.jfree.chart.labels.ItemLabelPosition;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)>(series, position, 1);

        return;
    }

    public void setSeriesPositiveItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.util.Map $stack4;
        java.lang.Integer $stack5;
        org.jfree.chart.labels.ItemLabelPosition position;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        position := @parameter1: org.jfree.chart.labels.ItemLabelPosition;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map positiveItemLabelPositionMap>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(series);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, position);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.labels.ItemLabelPosition getDefaultPositiveItemLabelPosition()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.labels.ItemLabelPosition $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultPositiveItemLabelPosition>;

        return $stack1;
    }

    public void setDefaultPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.labels.ItemLabelPosition position;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        position := @parameter0: org.jfree.chart.labels.ItemLabelPosition;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(position, 1);

        return;
    }

    public void setDefaultPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition, boolean)
    {
        org.jfree.chart.labels.ItemLabelPosition position;
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        position := @parameter0: org.jfree.chart.labels.ItemLabelPosition;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(position, "position");

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultPositiveItemLabelPosition> = position;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPosition(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int row, column;
        org.jfree.chart.labels.ItemLabelPosition $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        row := @parameter0: int;

        column := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition getSeriesNegativeItemLabelPosition(int)>(row);

        return $stack3;
    }

    public org.jfree.chart.labels.ItemLabelPosition getSeriesNegativeItemLabelPosition(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        java.lang.Object $stack5;
        org.jfree.chart.labels.ItemLabelPosition position;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map negativeItemLabelPositionMap>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(series);

        $stack5 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack4);

        position = (org.jfree.chart.labels.ItemLabelPosition) $stack5;

        if position != null goto label1;

        position = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultNegativeItemLabelPosition>;

     label1:
        return position;
    }

    public void setSeriesNegativeItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.labels.ItemLabelPosition position;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        position := @parameter1: org.jfree.chart.labels.ItemLabelPosition;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)>(series, position, 1);

        return;
    }

    public void setSeriesNegativeItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.util.Map $stack4;
        java.lang.Integer $stack5;
        org.jfree.chart.labels.ItemLabelPosition position;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        position := @parameter1: org.jfree.chart.labels.ItemLabelPosition;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map negativeItemLabelPositionMap>;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(series);

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack5, position);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public org.jfree.chart.labels.ItemLabelPosition getDefaultNegativeItemLabelPosition()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.labels.ItemLabelPosition $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultNegativeItemLabelPosition>;

        return $stack1;
    }

    public void setDefaultNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.labels.ItemLabelPosition position;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        position := @parameter0: org.jfree.chart.labels.ItemLabelPosition;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(position, 1);

        return;
    }

    public void setDefaultNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition, boolean)
    {
        org.jfree.chart.labels.ItemLabelPosition position;
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        position := @parameter0: org.jfree.chart.labels.ItemLabelPosition;

        notify := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(position, "position");

        this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultNegativeItemLabelPosition> = position;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public double getItemLabelAnchorOffset()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        return $stack1;
    }

    public void setItemLabelAnchorOffset(double)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        double offset;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        offset := @parameter0: double;

        this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset> = offset;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getItemCreateEntity(int, int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series, item;
        java.lang.Boolean b;
        boolean $stack5, $stack6;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        item := @parameter1: int;

        b = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.lang.Boolean getSeriesCreateEntities(int)>(series);

        if b == null goto label1;

        $stack6 = virtualinvoke b.<java.lang.Boolean: boolean booleanValue()>();

        return $stack6;

     label1:
        $stack5 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultCreateEntities>;

        return $stack5;
    }

    public java.lang.Boolean getSeriesCreateEntities(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.BooleanList $stack2;
        java.lang.Boolean $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList createEntitiesList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.BooleanList: java.lang.Boolean getBoolean(int)>(series);

        return $stack3;
    }

    public void setSeriesCreateEntities(int, java.lang.Boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.lang.Boolean create;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        create := @parameter1: java.lang.Boolean;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesCreateEntities(int,java.lang.Boolean,boolean)>(series, create, 1);

        return;
    }

    public void setSeriesCreateEntities(int, java.lang.Boolean, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.lang.Boolean create;
        org.jfree.chart.util.BooleanList $stack4;
        boolean notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        create := @parameter1: java.lang.Boolean;

        notify := @parameter2: boolean;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList createEntitiesList>;

        virtualinvoke $stack4.<org.jfree.chart.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(series, create);

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public boolean getDefaultCreateEntities()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultCreateEntities>;

        return $stack1;
    }

    public void setDefaultCreateEntities(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean create;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        create := @parameter0: boolean;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void setDefaultCreateEntities(boolean,boolean)>(create, 1);

        return;
    }

    public void setDefaultCreateEntities(boolean, boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean create, notify;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        create := @parameter0: boolean;

        notify := @parameter1: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultCreateEntities> = create;

        if notify == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public int getDefaultEntityRadius()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: int defaultEntityRadius>;

        return $stack1;
    }

    public void setDefaultEntityRadius(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int radius;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        radius := @parameter0: int;

        this.<org.jfree.chart.renderer.AbstractRenderer: int defaultEntityRadius> = radius;

        return;
    }

    public java.awt.Shape lookupLegendShape(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Shape result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        result = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape getLegendShape(int)>(series);

        if result != null goto label1;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultLegendShape>;

     label1:
        if result != null goto label2;

        result = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape lookupSeriesShape(int)>(series);

     label2:
        return result;
    }

    public java.awt.Shape getLegendShape(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.ShapeList $stack2;
        java.awt.Shape $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList legendShapeList>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.ShapeList: java.awt.Shape getShape(int)>(series);

        return $stack3;
    }

    public void setLegendShape(int, java.awt.Shape)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Shape shape;
        org.jfree.chart.util.ShapeList $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        shape := @parameter1: java.awt.Shape;

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList legendShapeList>;

        virtualinvoke $stack3.<org.jfree.chart.util.ShapeList: void setShape(int,java.awt.Shape)>(series, shape);

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Shape getDefaultLegendShape()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultLegendShape>;

        return $stack1;
    }

    public void setDefaultLegendShape(java.awt.Shape)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Shape shape;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        shape := @parameter0: java.awt.Shape;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultLegendShape> = shape;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

        return;
    }

    protected boolean getTreatLegendShapeAsLine()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean treatLegendShapeAsLine>;

        return $stack1;
    }

    protected void setTreatLegendShapeAsLine(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean treatAsLine, $stack2;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        treatAsLine := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean treatLegendShapeAsLine>;

        if $stack2 == treatAsLine goto label1;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean treatLegendShapeAsLine> = treatAsLine;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Font lookupLegendTextFont(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Font result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        result = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font getLegendTextFont(int)>(series);

        if result != null goto label1;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultLegendTextFont>;

     label1:
        return result;
    }

    public java.awt.Font getLegendTextFont(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.util.Map $stack2;
        java.lang.Integer $stack3;
        java.lang.Object $stack4;
        java.awt.Font $stack5;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map legendTextFontMap>;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(series);

        $stack4 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack3);

        $stack5 = (java.awt.Font) $stack4;

        return $stack5;
    }

    public void setLegendTextFont(int, java.awt.Font)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        java.awt.Font font;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        font := @parameter1: java.awt.Font;

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map legendTextFontMap>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(series);

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack4, font);

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Font getDefaultLegendTextFont()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Font $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultLegendTextFont>;

        return $stack1;
    }

    public void setDefaultLegendTextFont(java.awt.Font)
    {
        java.awt.Font font;
        org.jfree.chart.renderer.AbstractRenderer this;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        font := @parameter0: java.awt.Font;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(font, "font");

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultLegendTextFont> = font;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint lookupLegendTextPaint(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint result;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        result = virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint getLegendTextPaint(int)>(series);

        if result != null goto label1;

        result = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultLegendTextPaint>;

     label1:
        return result;
    }

    public java.awt.Paint getLegendTextPaint(int)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        org.jfree.chart.util.PaintList $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList legendTextPaint>;

        $stack3 = virtualinvoke $stack2.<org.jfree.chart.util.PaintList: java.awt.Paint getPaint(int)>(series);

        return $stack3;
    }

    public void setLegendTextPaint(int, java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        int series;
        java.awt.Paint paint;
        org.jfree.chart.util.PaintList $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        series := @parameter0: int;

        paint := @parameter1: java.awt.Paint;

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList legendTextPaint>;

        virtualinvoke $stack3.<org.jfree.chart.util.PaintList: void setPaint(int,java.awt.Paint)>(series, paint);

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getDefaultLegendTextPaint()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultLegendTextPaint>;

        return $stack1;
    }

    public void setDefaultLegendTextPaint(java.awt.Paint)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultLegendTextPaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getDataBoundsIncludesVisibleSeriesOnly()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly>;

        return $stack1;
    }

    public void setDataBoundsIncludesVisibleSeriesOnly(boolean)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        boolean visibleOnly;
        org.jfree.chart.event.RendererChangeEvent $stack2;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        visibleOnly := @parameter0: boolean;

        this.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly> = visibleOnly;

        $stack2 = new org.jfree.chart.event.RendererChangeEvent;

        specialinvoke $stack2.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object,boolean)>(this, 1);

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($stack2);

        return;
    }

    protected java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor, double, double, org.jfree.chart.plot.PlotOrientation)
    {
        org.jfree.chart.labels.ItemLabelAnchor anchor, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32;
        java.awt.geom.Point2D$Double $stack33, $stack38, $stack49, $stack60, $stack64, $stack75, $stack86, $stack90, $stack101, $stack112, $stack116, $stack127, $stack138, $stack141, $stack150, $stack159, $stack162, $stack171, $stack180, $stack183, $stack192, $stack201, $stack204, $stack213, $stack222, result;
        double x, y, $stack34, $stack35, $stack36, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57, $stack58, $stack59, $stack61, $stack62, $stack63, $stack65, $stack66, $stack67, $stack68, $stack69, $stack70, $stack71, $stack72, $stack73, $stack74, $stack76, $stack77, $stack78, $stack79, $stack80, $stack81, $stack82, $stack83, $stack84, $stack85, $stack87, $stack88, $stack89, $stack91, $stack92, $stack93, $stack94, $stack95, $stack96, $stack97, $stack98, $stack99, $stack100, $stack102, $stack103, $stack104, $stack105, $stack106, $stack107, $stack108, $stack109, $stack110, $stack111, $stack113, $stack114, $stack115, $stack117, $stack118, $stack119, $stack120, $stack121, $stack122, $stack123, $stack124, $stack125, $stack126, $stack128, $stack129, $stack130, $stack131, $stack132, $stack133, $stack134, $stack135, $stack136, $stack137, $stack139, $stack140, $stack142, $stack143, $stack144, $stack145, $stack146, $stack147, $stack148, $stack149, $stack151, $stack152, $stack153, $stack154, $stack155, $stack156, $stack157, $stack158, $stack160, $stack161, $stack163, $stack164, $stack165, $stack166, $stack167, $stack168, $stack169, $stack170, $stack172, $stack173, $stack174, $stack175, $stack176, $stack177, $stack178, $stack179, $stack181, $stack182, $stack184, $stack185, $stack186, $stack187, $stack188, $stack189, $stack190, $stack191, $stack193, $stack194, $stack195, $stack196, $stack197, $stack198, $stack199, $stack200, $stack202, $stack203, $stack205, $stack206, $stack207, $stack208, $stack209, $stack210, $stack211, $stack212, $stack214, $stack215, $stack216, $stack217, $stack218, $stack219, $stack220, $stack221;
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.plot.PlotOrientation orientation;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        anchor := @parameter0: org.jfree.chart.labels.ItemLabelAnchor;

        x := @parameter1: double;

        y := @parameter2: double;

        orientation := @parameter3: org.jfree.chart.plot.PlotOrientation;

        result = null;

        $stack8 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor CENTER>;

        if anchor != $stack8 goto label01;

        $stack222 = new java.awt.geom.Point2D$Double;

        specialinvoke $stack222.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x, y);

        result = $stack222;

        goto label25;

     label01:
        $stack9 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE1>;

        if anchor != $stack9 goto label02;

        $stack213 = new java.awt.geom.Point2D$Double;

        $stack215 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack214 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack216 = $stack215 * $stack214;

        $stack221 = x + $stack216;

        $stack218 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack217 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack219 = $stack218 * $stack217;

        $stack220 = y - $stack219;

        specialinvoke $stack213.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack221, $stack220);

        result = $stack213;

        goto label25;

     label02:
        $stack10 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE2>;

        if anchor != $stack10 goto label03;

        $stack204 = new java.awt.geom.Point2D$Double;

        $stack206 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack205 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack207 = $stack206 * $stack205;

        $stack212 = x + $stack207;

        $stack209 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack208 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack210 = $stack209 * $stack208;

        $stack211 = y - $stack210;

        specialinvoke $stack204.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack212, $stack211);

        result = $stack204;

        goto label25;

     label03:
        $stack11 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE3>;

        if anchor != $stack11 goto label04;

        $stack201 = new java.awt.geom.Point2D$Double;

        $stack202 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack203 = x + $stack202;

        specialinvoke $stack201.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack203, y);

        result = $stack201;

        goto label25;

     label04:
        $stack12 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE4>;

        if anchor != $stack12 goto label05;

        $stack192 = new java.awt.geom.Point2D$Double;

        $stack194 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack193 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack195 = $stack194 * $stack193;

        $stack200 = x + $stack195;

        $stack197 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack196 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack198 = $stack197 * $stack196;

        $stack199 = y + $stack198;

        specialinvoke $stack192.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack200, $stack199);

        result = $stack192;

        goto label25;

     label05:
        $stack13 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE5>;

        if anchor != $stack13 goto label06;

        $stack183 = new java.awt.geom.Point2D$Double;

        $stack185 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack184 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack186 = $stack185 * $stack184;

        $stack191 = x + $stack186;

        $stack188 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack187 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack189 = $stack188 * $stack187;

        $stack190 = y + $stack189;

        specialinvoke $stack183.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack191, $stack190);

        result = $stack183;

        goto label25;

     label06:
        $stack14 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE6>;

        if anchor != $stack14 goto label07;

        $stack180 = new java.awt.geom.Point2D$Double;

        $stack181 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack182 = y + $stack181;

        specialinvoke $stack180.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x, $stack182);

        result = $stack180;

        goto label25;

     label07:
        $stack15 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE7>;

        if anchor != $stack15 goto label08;

        $stack171 = new java.awt.geom.Point2D$Double;

        $stack173 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack172 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack174 = $stack173 * $stack172;

        $stack179 = x - $stack174;

        $stack176 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack175 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack177 = $stack176 * $stack175;

        $stack178 = y + $stack177;

        specialinvoke $stack171.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack179, $stack178);

        result = $stack171;

        goto label25;

     label08:
        $stack16 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE8>;

        if anchor != $stack16 goto label09;

        $stack162 = new java.awt.geom.Point2D$Double;

        $stack164 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack163 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack165 = $stack164 * $stack163;

        $stack170 = x - $stack165;

        $stack167 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack166 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack168 = $stack167 * $stack166;

        $stack169 = y + $stack168;

        specialinvoke $stack162.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack170, $stack169);

        result = $stack162;

        goto label25;

     label09:
        $stack17 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE9>;

        if anchor != $stack17 goto label10;

        $stack159 = new java.awt.geom.Point2D$Double;

        $stack160 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack161 = x - $stack160;

        specialinvoke $stack159.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack161, y);

        result = $stack159;

        goto label25;

     label10:
        $stack18 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE10>;

        if anchor != $stack18 goto label11;

        $stack150 = new java.awt.geom.Point2D$Double;

        $stack152 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack151 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack153 = $stack152 * $stack151;

        $stack158 = x - $stack153;

        $stack155 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack154 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack156 = $stack155 * $stack154;

        $stack157 = y - $stack156;

        specialinvoke $stack150.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack158, $stack157);

        result = $stack150;

        goto label25;

     label11:
        $stack19 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE11>;

        if anchor != $stack19 goto label12;

        $stack141 = new java.awt.geom.Point2D$Double;

        $stack143 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack142 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack144 = $stack143 * $stack142;

        $stack149 = x - $stack144;

        $stack146 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack145 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack147 = $stack146 * $stack145;

        $stack148 = y - $stack147;

        specialinvoke $stack141.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack149, $stack148);

        result = $stack141;

        goto label25;

     label12:
        $stack20 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor INSIDE12>;

        if anchor != $stack20 goto label13;

        $stack138 = new java.awt.geom.Point2D$Double;

        $stack139 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack140 = y - $stack139;

        specialinvoke $stack138.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x, $stack140);

        result = $stack138;

        goto label25;

     label13:
        $stack21 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE1>;

        if anchor != $stack21 goto label14;

        $stack127 = new java.awt.geom.Point2D$Double;

        $stack128 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack130 = 2.0 * $stack128;

        $stack129 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack131 = $stack130 * $stack129;

        $stack137 = x + $stack131;

        $stack132 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack134 = 2.0 * $stack132;

        $stack133 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack135 = $stack134 * $stack133;

        $stack136 = y - $stack135;

        specialinvoke $stack127.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack137, $stack136);

        result = $stack127;

        goto label25;

     label14:
        $stack22 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE2>;

        if anchor != $stack22 goto label15;

        $stack116 = new java.awt.geom.Point2D$Double;

        $stack117 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack119 = 2.0 * $stack117;

        $stack118 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack120 = $stack119 * $stack118;

        $stack126 = x + $stack120;

        $stack121 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack123 = 2.0 * $stack121;

        $stack122 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack124 = $stack123 * $stack122;

        $stack125 = y - $stack124;

        specialinvoke $stack116.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack126, $stack125);

        result = $stack116;

        goto label25;

     label15:
        $stack23 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE3>;

        if anchor != $stack23 goto label16;

        $stack112 = new java.awt.geom.Point2D$Double;

        $stack113 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack114 = 2.0 * $stack113;

        $stack115 = x + $stack114;

        specialinvoke $stack112.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack115, y);

        result = $stack112;

        goto label25;

     label16:
        $stack24 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE4>;

        if anchor != $stack24 goto label17;

        $stack101 = new java.awt.geom.Point2D$Double;

        $stack102 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack104 = 2.0 * $stack102;

        $stack103 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack105 = $stack104 * $stack103;

        $stack111 = x + $stack105;

        $stack106 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack108 = 2.0 * $stack106;

        $stack107 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack109 = $stack108 * $stack107;

        $stack110 = y + $stack109;

        specialinvoke $stack101.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack111, $stack110);

        result = $stack101;

        goto label25;

     label17:
        $stack25 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE5>;

        if anchor != $stack25 goto label18;

        $stack90 = new java.awt.geom.Point2D$Double;

        $stack91 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack93 = 2.0 * $stack91;

        $stack92 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack94 = $stack93 * $stack92;

        $stack100 = x + $stack94;

        $stack95 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack97 = 2.0 * $stack95;

        $stack96 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack98 = $stack97 * $stack96;

        $stack99 = y + $stack98;

        specialinvoke $stack90.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack100, $stack99);

        result = $stack90;

        goto label25;

     label18:
        $stack26 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE6>;

        if anchor != $stack26 goto label19;

        $stack86 = new java.awt.geom.Point2D$Double;

        $stack87 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack88 = 2.0 * $stack87;

        $stack89 = y + $stack88;

        specialinvoke $stack86.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x, $stack89);

        result = $stack86;

        goto label25;

     label19:
        $stack27 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE7>;

        if anchor != $stack27 goto label20;

        $stack75 = new java.awt.geom.Point2D$Double;

        $stack76 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack78 = 2.0 * $stack76;

        $stack77 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack79 = $stack78 * $stack77;

        $stack85 = x - $stack79;

        $stack80 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack82 = 2.0 * $stack80;

        $stack81 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack83 = $stack82 * $stack81;

        $stack84 = y + $stack83;

        specialinvoke $stack75.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack85, $stack84);

        result = $stack75;

        goto label25;

     label20:
        $stack28 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE8>;

        if anchor != $stack28 goto label21;

        $stack64 = new java.awt.geom.Point2D$Double;

        $stack65 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack67 = 2.0 * $stack65;

        $stack66 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack68 = $stack67 * $stack66;

        $stack74 = x - $stack68;

        $stack69 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack71 = 2.0 * $stack69;

        $stack70 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack72 = $stack71 * $stack70;

        $stack73 = y + $stack72;

        specialinvoke $stack64.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack74, $stack73);

        result = $stack64;

        goto label25;

     label21:
        $stack29 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE9>;

        if anchor != $stack29 goto label22;

        $stack60 = new java.awt.geom.Point2D$Double;

        $stack61 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack62 = 2.0 * $stack61;

        $stack63 = x - $stack62;

        specialinvoke $stack60.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack63, y);

        result = $stack60;

        goto label25;

     label22:
        $stack30 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE10>;

        if anchor != $stack30 goto label23;

        $stack49 = new java.awt.geom.Point2D$Double;

        $stack50 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack52 = 2.0 * $stack50;

        $stack51 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack53 = $stack52 * $stack51;

        $stack59 = x - $stack53;

        $stack54 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack56 = 2.0 * $stack54;

        $stack55 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack57 = $stack56 * $stack55;

        $stack58 = y - $stack57;

        specialinvoke $stack49.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack59, $stack58);

        result = $stack49;

        goto label25;

     label23:
        $stack31 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE11>;

        if anchor != $stack31 goto label24;

        $stack38 = new java.awt.geom.Point2D$Double;

        $stack39 = <org.jfree.chart.renderer.AbstractRenderer: double OPP>;

        $stack41 = 2.0 * $stack39;

        $stack40 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack42 = $stack41 * $stack40;

        $stack48 = x - $stack42;

        $stack43 = <org.jfree.chart.renderer.AbstractRenderer: double ADJ>;

        $stack45 = 2.0 * $stack43;

        $stack44 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack46 = $stack45 * $stack44;

        $stack47 = y - $stack46;

        specialinvoke $stack38.<java.awt.geom.Point2D$Double: void <init>(double,double)>($stack48, $stack47);

        result = $stack38;

        goto label25;

     label24:
        $stack32 = <org.jfree.chart.labels.ItemLabelAnchor: org.jfree.chart.labels.ItemLabelAnchor OUTSIDE12>;

        if anchor != $stack32 goto label25;

        $stack33 = new java.awt.geom.Point2D$Double;

        $stack34 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack35 = 2.0 * $stack34;

        $stack36 = y - $stack35;

        specialinvoke $stack33.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x, $stack36);

        result = $stack33;

     label25:
        return result;
    }

    public void addChangeListener(org.jfree.chart.event.RendererChangeListener)
    {
        org.jfree.chart.event.RendererChangeListener listener;
        org.jfree.chart.renderer.AbstractRenderer this;
        javax.swing.event.EventListenerList $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        listener := @parameter0: org.jfree.chart.event.RendererChangeListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(listener, "listener");

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList>;

        virtualinvoke $stack3.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "Lorg/jfree/chart/event/RendererChangeListener;", listener);

        return;
    }

    public void removeChangeListener(org.jfree.chart.event.RendererChangeListener)
    {
        org.jfree.chart.event.RendererChangeListener listener;
        org.jfree.chart.renderer.AbstractRenderer this;
        javax.swing.event.EventListenerList $stack3;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        listener := @parameter0: org.jfree.chart.event.RendererChangeListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(listener, "listener");

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList>;

        virtualinvoke $stack3.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>(class "Lorg/jfree/chart/event/RendererChangeListener;", listener);

        return;
    }

    public boolean hasListener(java.util.EventListener)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        javax.swing.event.EventListenerList $stack3;
        java.lang.Object[] $stack4;
        java.util.List list;
        java.util.EventListener listener;
        boolean $stack6;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        listener := @parameter0: java.util.EventListener;

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList>;

        $stack4 = virtualinvoke $stack3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        list = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        $stack6 = interfaceinvoke list.<java.util.List: boolean contains(java.lang.Object)>(listener);

        return $stack6;
    }

    protected void fireChangeEvent()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.event.RendererChangeEvent $stack1;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack1 = new org.jfree.chart.event.RendererChangeEvent;

        specialinvoke $stack1.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>(this);

        virtualinvoke this.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($stack1);

        return;
    }

    public void notifyListeners(org.jfree.chart.event.RendererChangeEvent)
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        javax.swing.event.EventListenerList $stack4;
        java.lang.Object[] ls;
        int $stack6, $stack9, i;
        java.lang.Object $stack7, $stack10;
        org.jfree.chart.event.RendererChangeEvent event;
        org.jfree.chart.event.RendererChangeListener $stack11;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        event := @parameter0: org.jfree.chart.event.RendererChangeEvent;

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList>;

        ls = virtualinvoke $stack4.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        $stack6 = lengthof ls;

        i = $stack6 - 2;

     label1:
        if i < 0 goto label3;

        $stack7 = ls[i];

        if $stack7 != class "Lorg/jfree/chart/event/RendererChangeListener;" goto label2;

        $stack9 = i + 1;

        $stack10 = ls[$stack9];

        $stack11 = (org.jfree.chart.event.RendererChangeListener) $stack10;

        interfaceinvoke $stack11.<org.jfree.chart.event.RendererChangeListener: void rendererChanged(org.jfree.chart.event.RendererChangeEvent)>(event);

     label2:
        i = i + -2;

        goto label1;

     label3:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.AbstractRenderer this, that;
        boolean $stack3, $stack4, $stack5, $stack6, $stack7, $stack12, $stack13, $stack14, $stack17, $stack18, $stack19, $stack22, $stack25, $stack28, $stack31, $stack34, $stack37, $stack40, $stack43, $stack46, $stack49, $stack52, $stack55, $stack58, $stack59, $stack61, $stack63, $stack66, $stack69, $stack72, $stack75, $stack78, $stack81, $stack84, $stack87, $stack93, $stack94, $stack95, $stack98, $stack101, $stack104, $stack107, $stack110, $stack113;
        int $stack8, $stack9;
        org.jfree.chart.util.BooleanList $stack10, $stack11, $stack15, $stack16, $stack56, $stack57, $stack91, $stack92;
        org.jfree.chart.util.PaintList $stack20, $stack21, $stack26, $stack27, $stack32, $stack33, $stack70, $stack71, $stack108, $stack109;
        java.awt.Paint $stack23, $stack24, $stack29, $stack30, $stack35, $stack36, $stack73, $stack74, $stack111, $stack112;
        org.jfree.chart.util.StrokeList $stack38, $stack39, $stack44, $stack45;
        java.awt.Stroke $stack41, $stack42, $stack47, $stack48;
        org.jfree.chart.util.ShapeList $stack50, $stack51, $stack96, $stack97;
        java.awt.Shape $stack53, $stack54, $stack99, $stack100;
        java.lang.Boolean $stack60, $stack62;
        java.util.Map $stack64, $stack65, $stack76, $stack77, $stack82, $stack83, $stack102, $stack103;
        java.awt.Font $stack67, $stack68, $stack105, $stack106;
        org.jfree.chart.labels.ItemLabelPosition $stack79, $stack80, $stack85, $stack86;
        double $stack88, $stack89;
        byte $stack90;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.renderer.AbstractRenderer;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.renderer.AbstractRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly>;

        $stack4 = that.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly>;

        if $stack5 == $stack4 goto label03;

        return 0;

     label03:
        $stack7 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean treatLegendShapeAsLine>;

        $stack6 = that.<org.jfree.chart.renderer.AbstractRenderer: boolean treatLegendShapeAsLine>;

        if $stack7 == $stack6 goto label04;

        return 0;

     label04:
        $stack9 = this.<org.jfree.chart.renderer.AbstractRenderer: int defaultEntityRadius>;

        $stack8 = that.<org.jfree.chart.renderer.AbstractRenderer: int defaultEntityRadius>;

        if $stack9 == $stack8 goto label05;

        return 0;

     label05:
        $stack11 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList>;

        $stack10 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList>;

        $stack12 = virtualinvoke $stack11.<org.jfree.chart.util.BooleanList: boolean equals(java.lang.Object)>($stack10);

        if $stack12 != 0 goto label06;

        return 0;

     label06:
        $stack14 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisible>;

        $stack13 = that.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisible>;

        if $stack14 == $stack13 goto label07;

        return 0;

     label07:
        $stack16 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList>;

        $stack15 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList>;

        $stack17 = virtualinvoke $stack16.<org.jfree.chart.util.BooleanList: boolean equals(java.lang.Object)>($stack15);

        if $stack17 != 0 goto label08;

        return 0;

     label08:
        $stack19 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisibleInLegend>;

        $stack18 = that.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisibleInLegend>;

        if $stack19 == $stack18 goto label09;

        return 0;

     label09:
        $stack21 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList>;

        $stack20 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList>;

        $stack22 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack21, $stack20);

        if $stack22 != 0 goto label10;

        return 0;

     label10:
        $stack24 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultPaint>;

        $stack23 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultPaint>;

        $stack25 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack24, $stack23);

        if $stack25 != 0 goto label11;

        return 0;

     label11:
        $stack27 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList fillPaintList>;

        $stack26 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList fillPaintList>;

        $stack28 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack27, $stack26);

        if $stack28 != 0 goto label12;

        return 0;

     label12:
        $stack30 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultFillPaint>;

        $stack29 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultFillPaint>;

        $stack31 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack30, $stack29);

        if $stack31 != 0 goto label13;

        return 0;

     label13:
        $stack33 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList outlinePaintList>;

        $stack32 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList outlinePaintList>;

        $stack34 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack33, $stack32);

        if $stack34 != 0 goto label14;

        return 0;

     label14:
        $stack36 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultOutlinePaint>;

        $stack35 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultOutlinePaint>;

        $stack37 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack36, $stack35);

        if $stack37 != 0 goto label15;

        return 0;

     label15:
        $stack39 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList>;

        $stack38 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList>;

        $stack40 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack39, $stack38);

        if $stack40 != 0 goto label16;

        return 0;

     label16:
        $stack42 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultStroke>;

        $stack41 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultStroke>;

        $stack43 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack42, $stack41);

        if $stack43 != 0 goto label17;

        return 0;

     label17:
        $stack45 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList outlineStrokeList>;

        $stack44 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList outlineStrokeList>;

        $stack46 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack45, $stack44);

        if $stack46 != 0 goto label18;

        return 0;

     label18:
        $stack48 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultOutlineStroke>;

        $stack47 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultOutlineStroke>;

        $stack49 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack48, $stack47);

        if $stack49 != 0 goto label19;

        return 0;

     label19:
        $stack51 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList shapeList>;

        $stack50 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList shapeList>;

        $stack52 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack51, $stack50);

        if $stack52 != 0 goto label20;

        return 0;

     label20:
        $stack54 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape>;

        $stack53 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape>;

        $stack55 = staticinvoke <org.jfree.chart.util.ShapeUtils: boolean equal(java.awt.Shape,java.awt.Shape)>($stack54, $stack53);

        if $stack55 != 0 goto label21;

        return 0;

     label21:
        $stack57 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList itemLabelsVisibleList>;

        $stack56 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList itemLabelsVisibleList>;

        $stack58 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack57, $stack56);

        if $stack58 != 0 goto label22;

        return 0;

     label22:
        $stack59 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultItemLabelsVisible>;

        $stack60 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack59);

        $stack61 = that.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultItemLabelsVisible>;

        $stack62 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack61);

        $stack63 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack60, $stack62);

        if $stack63 != 0 goto label23;

        return 0;

     label23:
        $stack65 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map itemLabelFontMap>;

        $stack64 = that.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map itemLabelFontMap>;

        $stack66 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack65, $stack64);

        if $stack66 != 0 goto label24;

        return 0;

     label24:
        $stack68 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultItemLabelFont>;

        $stack67 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultItemLabelFont>;

        $stack69 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack68, $stack67);

        if $stack69 != 0 goto label25;

        return 0;

     label25:
        $stack71 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList itemLabelPaintList>;

        $stack70 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList itemLabelPaintList>;

        $stack72 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack71, $stack70);

        if $stack72 != 0 goto label26;

        return 0;

     label26:
        $stack74 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultItemLabelPaint>;

        $stack73 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultItemLabelPaint>;

        $stack75 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack74, $stack73);

        if $stack75 != 0 goto label27;

        return 0;

     label27:
        $stack77 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map positiveItemLabelPositionMap>;

        $stack76 = that.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map positiveItemLabelPositionMap>;

        $stack78 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack77, $stack76);

        if $stack78 != 0 goto label28;

        return 0;

     label28:
        $stack80 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultPositiveItemLabelPosition>;

        $stack79 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultPositiveItemLabelPosition>;

        $stack81 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack80, $stack79);

        if $stack81 != 0 goto label29;

        return 0;

     label29:
        $stack83 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map negativeItemLabelPositionMap>;

        $stack82 = that.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map negativeItemLabelPositionMap>;

        $stack84 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack83, $stack82);

        if $stack84 != 0 goto label30;

        return 0;

     label30:
        $stack86 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultNegativeItemLabelPosition>;

        $stack85 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition defaultNegativeItemLabelPosition>;

        $stack87 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack86, $stack85);

        if $stack87 != 0 goto label31;

        return 0;

     label31:
        $stack89 = this.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack88 = that.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>;

        $stack90 = $stack89 cmpl $stack88;

        if $stack90 == 0 goto label32;

        return 0;

     label32:
        $stack92 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList createEntitiesList>;

        $stack91 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList createEntitiesList>;

        $stack93 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack92, $stack91);

        if $stack93 != 0 goto label33;

        return 0;

     label33:
        $stack95 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultCreateEntities>;

        $stack94 = that.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultCreateEntities>;

        if $stack95 == $stack94 goto label34;

        return 0;

     label34:
        $stack97 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList legendShapeList>;

        $stack96 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList legendShapeList>;

        $stack98 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack97, $stack96);

        if $stack98 != 0 goto label35;

        return 0;

     label35:
        $stack100 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultLegendShape>;

        $stack99 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultLegendShape>;

        $stack101 = staticinvoke <org.jfree.chart.util.ShapeUtils: boolean equal(java.awt.Shape,java.awt.Shape)>($stack100, $stack99);

        if $stack101 != 0 goto label36;

        return 0;

     label36:
        $stack103 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map legendTextFontMap>;

        $stack102 = that.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map legendTextFontMap>;

        $stack104 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack103, $stack102);

        if $stack104 != 0 goto label37;

        return 0;

     label37:
        $stack106 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultLegendTextFont>;

        $stack105 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font defaultLegendTextFont>;

        $stack107 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack106, $stack105);

        if $stack107 != 0 goto label38;

        return 0;

     label38:
        $stack109 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList legendTextPaint>;

        $stack108 = that.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList legendTextPaint>;

        $stack110 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack109, $stack108);

        if $stack110 != 0 goto label39;

        return 0;

     label39:
        $stack112 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultLegendTextPaint>;

        $stack111 = that.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultLegendTextPaint>;

        $stack113 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack112, $stack111);

        if $stack113 != 0 goto label40;

        return 0;

     label40:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.renderer.AbstractRenderer this;
        org.jfree.chart.util.BooleanList $stack2, $stack6, $stack30;
        boolean $stack4, $stack8, $stack32;
        org.jfree.chart.util.PaintList $stack10, $stack14, $stack18;
        java.awt.Paint $stack12, $stack16, $stack20;
        org.jfree.chart.util.StrokeList $stack22, $stack26;
        java.awt.Stroke $stack24, $stack28;
        int result#2;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,org.jfree.chart.util.BooleanList)>(193, $stack2);

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisible>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,boolean)>(result#2, $stack4);

        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,org.jfree.chart.util.BooleanList)>(result#2, $stack6);

        $stack8 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultSeriesVisibleInLegend>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,boolean)>(result#2, $stack8);

        $stack10 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,org.jfree.chart.util.PaintList)>(result#2, $stack10);

        $stack12 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultPaint>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,java.awt.Paint)>(result#2, $stack12);

        $stack14 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList fillPaintList>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,org.jfree.chart.util.PaintList)>(result#2, $stack14);

        $stack16 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultFillPaint>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,java.awt.Paint)>(result#2, $stack16);

        $stack18 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList outlinePaintList>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,org.jfree.chart.util.PaintList)>(result#2, $stack18);

        $stack20 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultOutlinePaint>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,java.awt.Paint)>(result#2, $stack20);

        $stack22 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,org.jfree.chart.util.StrokeList)>(result#2, $stack22);

        $stack24 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultStroke>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,java.awt.Stroke)>(result#2, $stack24);

        $stack26 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList outlineStrokeList>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,org.jfree.chart.util.StrokeList)>(result#2, $stack26);

        $stack28 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultOutlineStroke>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,java.awt.Stroke)>(result#2, $stack28);

        $stack30 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList itemLabelsVisibleList>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,org.jfree.chart.util.BooleanList)>(result#2, $stack30);

        $stack32 = this.<org.jfree.chart.renderer.AbstractRenderer: boolean defaultItemLabelsVisible>;

        result#2 = staticinvoke <org.jfree.chart.HashUtils: int hashCode(int,boolean)>(result#2, $stack32);

        return result#2;
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.AbstractRenderer this, clone;
        java.lang.Object $stack2, $stack23, $stack33, $stack37, $stack47, $stack54, $stack61, $stack65, $stack69, $stack73, $stack77, $stack81, $stack85, $stack89;
        org.jfree.chart.util.BooleanList $stack3, $stack4, $stack12, $stack17, $stack36, $stack38, $stack53, $stack55, $stack84, $stack86, $stack88, $stack90;
        org.jfree.chart.util.PaintList $stack5, $stack6, $stack7, $stack14, $stack20, $stack22, $stack24, $stack46, $stack48, $stack72, $stack74, $stack76, $stack78, $stack80, $stack82;
        org.jfree.chart.util.StrokeList $stack8, $stack9, $stack64, $stack66, $stack68, $stack70;
        org.jfree.chart.util.ShapeList $stack10, $stack18, $stack32, $stack34, $stack60, $stack62;
        java.awt.Shape $stack11, $stack57, $stack58;
        java.util.Map $stack13, $stack15, $stack16, $stack19, $stack30, $stack41, $stack44, $stack51;
        javax.swing.event.EventListenerList $stack21;
        java.util.HashMap $stack29, $stack40, $stack43, $stack50;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        $stack2 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        clone = (org.jfree.chart.renderer.AbstractRenderer) $stack2;

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList>;

        if $stack3 == null goto label01;

        $stack88 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList>;

        $stack89 = virtualinvoke $stack88.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack90 = (org.jfree.chart.util.BooleanList) $stack89;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleList> = $stack90;

     label01:
        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList>;

        if $stack4 == null goto label02;

        $stack84 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList>;

        $stack85 = virtualinvoke $stack84.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack86 = (org.jfree.chart.util.BooleanList) $stack85;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList seriesVisibleInLegendList> = $stack86;

     label02:
        $stack5 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList>;

        if $stack5 == null goto label03;

        $stack80 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList>;

        $stack81 = virtualinvoke $stack80.<org.jfree.chart.util.PaintList: java.lang.Object clone()>();

        $stack82 = (org.jfree.chart.util.PaintList) $stack81;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList paintList> = $stack82;

     label03:
        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList fillPaintList>;

        if $stack6 == null goto label04;

        $stack76 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList fillPaintList>;

        $stack77 = virtualinvoke $stack76.<org.jfree.chart.util.PaintList: java.lang.Object clone()>();

        $stack78 = (org.jfree.chart.util.PaintList) $stack77;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList fillPaintList> = $stack78;

     label04:
        $stack7 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList outlinePaintList>;

        if $stack7 == null goto label05;

        $stack72 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList outlinePaintList>;

        $stack73 = virtualinvoke $stack72.<org.jfree.chart.util.PaintList: java.lang.Object clone()>();

        $stack74 = (org.jfree.chart.util.PaintList) $stack73;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList outlinePaintList> = $stack74;

     label05:
        $stack8 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList>;

        if $stack8 == null goto label06;

        $stack68 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList>;

        $stack69 = virtualinvoke $stack68.<org.jfree.chart.util.StrokeList: java.lang.Object clone()>();

        $stack70 = (org.jfree.chart.util.StrokeList) $stack69;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList strokeList> = $stack70;

     label06:
        $stack9 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList outlineStrokeList>;

        if $stack9 == null goto label07;

        $stack64 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList outlineStrokeList>;

        $stack65 = virtualinvoke $stack64.<org.jfree.chart.util.StrokeList: java.lang.Object clone()>();

        $stack66 = (org.jfree.chart.util.StrokeList) $stack65;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.StrokeList outlineStrokeList> = $stack66;

     label07:
        $stack10 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList shapeList>;

        if $stack10 == null goto label08;

        $stack60 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList shapeList>;

        $stack61 = virtualinvoke $stack60.<org.jfree.chart.util.ShapeList: java.lang.Object clone()>();

        $stack62 = (org.jfree.chart.util.ShapeList) $stack61;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList shapeList> = $stack62;

     label08:
        $stack11 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape>;

        if $stack11 == null goto label09;

        $stack57 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape>;

        $stack58 = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape clone(java.awt.Shape)>($stack57);

        clone.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape> = $stack58;

     label09:
        $stack12 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList itemLabelsVisibleList>;

        if $stack12 == null goto label10;

        $stack53 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList itemLabelsVisibleList>;

        $stack54 = virtualinvoke $stack53.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack55 = (org.jfree.chart.util.BooleanList) $stack54;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList itemLabelsVisibleList> = $stack55;

     label10:
        $stack13 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map itemLabelFontMap>;

        if $stack13 == null goto label11;

        $stack50 = new java.util.HashMap;

        $stack51 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map itemLabelFontMap>;

        specialinvoke $stack50.<java.util.HashMap: void <init>(java.util.Map)>($stack51);

        clone.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map itemLabelFontMap> = $stack50;

     label11:
        $stack14 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList itemLabelPaintList>;

        if $stack14 == null goto label12;

        $stack46 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList itemLabelPaintList>;

        $stack47 = virtualinvoke $stack46.<org.jfree.chart.util.PaintList: java.lang.Object clone()>();

        $stack48 = (org.jfree.chart.util.PaintList) $stack47;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList itemLabelPaintList> = $stack48;

     label12:
        $stack15 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map positiveItemLabelPositionMap>;

        if $stack15 == null goto label13;

        $stack43 = new java.util.HashMap;

        $stack44 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map positiveItemLabelPositionMap>;

        specialinvoke $stack43.<java.util.HashMap: void <init>(java.util.Map)>($stack44);

        clone.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map positiveItemLabelPositionMap> = $stack43;

     label13:
        $stack16 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map negativeItemLabelPositionMap>;

        if $stack16 == null goto label14;

        $stack40 = new java.util.HashMap;

        $stack41 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map negativeItemLabelPositionMap>;

        specialinvoke $stack40.<java.util.HashMap: void <init>(java.util.Map)>($stack41);

        clone.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map negativeItemLabelPositionMap> = $stack40;

     label14:
        $stack17 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList createEntitiesList>;

        if $stack17 == null goto label15;

        $stack36 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList createEntitiesList>;

        $stack37 = virtualinvoke $stack36.<org.jfree.chart.util.BooleanList: java.lang.Object clone()>();

        $stack38 = (org.jfree.chart.util.BooleanList) $stack37;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.BooleanList createEntitiesList> = $stack38;

     label15:
        $stack18 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList legendShapeList>;

        if $stack18 == null goto label16;

        $stack32 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList legendShapeList>;

        $stack33 = virtualinvoke $stack32.<org.jfree.chart.util.ShapeList: java.lang.Object clone()>();

        $stack34 = (org.jfree.chart.util.ShapeList) $stack33;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.ShapeList legendShapeList> = $stack34;

     label16:
        $stack19 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map legendTextFontMap>;

        if $stack19 == null goto label17;

        $stack29 = new java.util.HashMap;

        $stack30 = this.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map legendTextFontMap>;

        specialinvoke $stack29.<java.util.HashMap: void <init>(java.util.Map)>($stack30);

        clone.<org.jfree.chart.renderer.AbstractRenderer: java.util.Map legendTextFontMap> = $stack29;

     label17:
        $stack20 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList legendTextPaint>;

        if $stack20 == null goto label18;

        $stack22 = this.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList legendTextPaint>;

        $stack23 = virtualinvoke $stack22.<org.jfree.chart.util.PaintList: java.lang.Object clone()>();

        $stack24 = (org.jfree.chart.util.PaintList) $stack23;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.util.PaintList legendTextPaint> = $stack24;

     label18:
        $stack21 = new javax.swing.event.EventListenerList;

        specialinvoke $stack21.<javax.swing.event.EventListenerList: void <init>()>();

        clone.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList> = $stack21;

        clone.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.event.RendererChangeEvent event> = null;

        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint $stack2, $stack3, $stack4, $stack8, $stack10;
        java.awt.Stroke $stack5, $stack6;
        java.awt.Shape $stack7, $stack9;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultFillPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultOutlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack4, stream);

        $stack5 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack5, stream);

        $stack6 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultOutlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack6, stream);

        $stack7 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack7, stream);

        $stack8 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultItemLabelPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack8, stream);

        $stack9 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultLegendShape>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack9, stream);

        $stack10 = this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultLegendTextPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack10, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.renderer.AbstractRenderer this;
        java.awt.Paint $stack2, $stack3, $stack4, $stack8, $stack10;
        java.awt.Stroke $stack5, $stack6;
        java.awt.Shape $stack7, $stack9;
        javax.swing.event.EventListenerList $stack11;

        this := @this: org.jfree.chart.renderer.AbstractRenderer;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultPaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultFillPaint> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultOutlinePaint> = $stack4;

        $stack5 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultStroke> = $stack5;

        $stack6 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke defaultOutlineStroke> = $stack6;

        $stack7 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultShape> = $stack7;

        $stack8 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultItemLabelPaint> = $stack8;

        $stack9 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape defaultLegendShape> = $stack9;

        $stack10 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint defaultLegendTextPaint> = $stack10;

        $stack11 = new javax.swing.event.EventListenerList;

        specialinvoke $stack11.<javax.swing.event.EventListenerList: void <init>()>();

        this.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList> = $stack11;

        return;
    }

    static void <clinit>()
    {
        java.lang.Double $stack0;
        java.awt.Color $stack1, $stack2, $stack7;
        java.awt.BasicStroke $stack3, $stack4;
        java.awt.geom.Rectangle2D$Double $stack5;
        java.awt.Font $stack6;
        double $stack8, $stack9;

        <org.jfree.chart.renderer.AbstractRenderer: long serialVersionUID> = -828267569428206075L;

        $stack0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        <org.jfree.chart.renderer.AbstractRenderer: java.lang.Double ZERO> = $stack0;

        $stack1 = <java.awt.Color: java.awt.Color BLUE>;

        <org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint DEFAULT_PAINT> = $stack1;

        $stack2 = <java.awt.Color: java.awt.Color GRAY>;

        <org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint DEFAULT_OUTLINE_PAINT> = $stack2;

        $stack3 = new java.awt.BasicStroke;

        specialinvoke $stack3.<java.awt.BasicStroke: void <init>(float)>(1.0F);

        <org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke DEFAULT_STROKE> = $stack3;

        $stack4 = new java.awt.BasicStroke;

        specialinvoke $stack4.<java.awt.BasicStroke: void <init>(float)>(1.0F);

        <org.jfree.chart.renderer.AbstractRenderer: java.awt.Stroke DEFAULT_OUTLINE_STROKE> = $stack4;

        $stack5 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack5.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(-3.0, -3.0, 6.0, 6.0);

        <org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape DEFAULT_SHAPE> = $stack5;

        $stack6 = new java.awt.Font;

        specialinvoke $stack6.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 0, 10);

        <org.jfree.chart.renderer.AbstractRenderer: java.awt.Font DEFAULT_VALUE_LABEL_FONT> = $stack6;

        $stack7 = <java.awt.Color: java.awt.Color BLACK>;

        <org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint DEFAULT_VALUE_LABEL_PAINT> = $stack7;

        $stack8 = staticinvoke <java.lang.Math: double cos(double)>(0.5235987755982988);

        <org.jfree.chart.renderer.AbstractRenderer: double ADJ> = $stack8;

        $stack9 = staticinvoke <java.lang.Math: double sin(double)>(0.5235987755982988);

        <org.jfree.chart.renderer.AbstractRenderer: double OPP> = $stack9;

        return;
    }
}
