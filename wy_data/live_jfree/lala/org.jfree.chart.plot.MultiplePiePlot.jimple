public class org.jfree.chart.plot.MultiplePiePlot extends org.jfree.chart.plot.Plot implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.jfree.chart.JFreeChart pieChart;
    private org.jfree.data.category.CategoryDataset dataset;
    private org.jfree.chart.util.TableOrder dataExtractOrder;
    private double limit;
    private java.lang.Comparable aggregatedItemsKey;
    private transient java.awt.Paint aggregatedItemsPaint;
    private transient java.util.Map sectionPaints;
    private transient java.awt.Shape legendItemShape;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.jfree.chart.plot.MultiplePiePlot this;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        specialinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>(null);

        return;
    }

    public void <init>(org.jfree.data.category.CategoryDataset)
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        org.jfree.data.category.CategoryDataset dataset;
        org.jfree.chart.plot.PiePlot $stack4;
        org.jfree.chart.JFreeChart $stack5, $stack6, $stack8, $stack13;
        org.jfree.chart.util.TableOrder $stack7;
        org.jfree.chart.title.TextTitle $stack9;
        java.awt.Font $stack10;
        org.jfree.chart.ui.RectangleEdge $stack12;
        java.awt.Color $stack14;
        java.util.HashMap $stack15;
        java.awt.geom.Ellipse2D$Double $stack16;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        specialinvoke this.<org.jfree.chart.plot.Plot: void <init>()>();

        this.<org.jfree.chart.plot.MultiplePiePlot: double limit> = 0.0;

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void setDataset(org.jfree.data.category.CategoryDataset)>(dataset);

        $stack4 = new org.jfree.chart.plot.PiePlot;

        specialinvoke $stack4.<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>(null);

        virtualinvoke $stack4.<org.jfree.chart.plot.PiePlot: void setIgnoreNullValues(boolean)>(1);

        $stack5 = new org.jfree.chart.JFreeChart;

        specialinvoke $stack5.<org.jfree.chart.JFreeChart: void <init>(org.jfree.chart.plot.Plot)>($stack4);

        this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart> = $stack5;

        $stack6 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        virtualinvoke $stack6.<org.jfree.chart.JFreeChart: void removeLegend()>();

        $stack7 = <org.jfree.chart.util.TableOrder: org.jfree.chart.util.TableOrder BY_COLUMN>;

        this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder> = $stack7;

        $stack8 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        virtualinvoke $stack8.<org.jfree.chart.JFreeChart: void setBackgroundPaint(java.awt.Paint)>(null);

        $stack9 = new org.jfree.chart.title.TextTitle;

        $stack10 = new java.awt.Font;

        specialinvoke $stack10.<java.awt.Font: void <init>(java.lang.String,int,int)>("SansSerif", 1, 12);

        specialinvoke $stack9.<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>("Series Title", $stack10);

        $stack12 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        virtualinvoke $stack9.<org.jfree.chart.title.TextTitle: void setPosition(org.jfree.chart.ui.RectangleEdge)>($stack12);

        $stack13 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        virtualinvoke $stack13.<org.jfree.chart.JFreeChart: void setTitle(org.jfree.chart.title.TextTitle)>($stack9);

        this.<org.jfree.chart.plot.MultiplePiePlot: java.lang.Comparable aggregatedItemsKey> = "Other";

        $stack14 = <java.awt.Color: java.awt.Color lightGray>;

        this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint> = $stack14;

        $stack15 = new java.util.HashMap;

        specialinvoke $stack15.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints> = $stack15;

        $stack16 = new java.awt.geom.Ellipse2D$Double;

        specialinvoke $stack16.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>(-4.0, -4.0, 8.0, 8.0);

        this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape legendItemShape> = $stack16;

        return;
    }

    public org.jfree.data.category.CategoryDataset getDataset()
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        org.jfree.data.category.CategoryDataset $stack1;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack1 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        return $stack1;
    }

    public void setDataset(org.jfree.data.category.CategoryDataset)
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        org.jfree.data.category.CategoryDataset $stack2, dataset, $stack8;
        org.jfree.data.general.DatasetChangeEvent $stack3;
        org.jfree.data.general.DatasetGroup $stack4;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        dataset := @parameter0: org.jfree.data.category.CategoryDataset;

        $stack2 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        if $stack2 == null goto label1;

        $stack8 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        interfaceinvoke $stack8.<org.jfree.data.category.CategoryDataset: void removeChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label1:
        this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset> = dataset;

        if dataset == null goto label2;

        $stack4 = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: org.jfree.data.general.DatasetGroup getGroup()>();

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void setDatasetGroup(org.jfree.data.general.DatasetGroup)>($stack4);

        interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>(this);

     label2:
        $stack3 = new org.jfree.data.general.DatasetChangeEvent;

        specialinvoke $stack3.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(this, dataset);

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($stack3);

        return;
    }

    public org.jfree.chart.JFreeChart getPieChart()
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        org.jfree.chart.JFreeChart $stack1;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack1 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        return $stack1;
    }

    public void setPieChart(org.jfree.chart.JFreeChart)
    {
        org.jfree.chart.JFreeChart pieChart;
        org.jfree.chart.plot.Plot $stack2;
        boolean $stack3;
        org.jfree.chart.plot.MultiplePiePlot this;
        java.lang.IllegalArgumentException $stack4;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        pieChart := @parameter0: org.jfree.chart.JFreeChart;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(pieChart, "pieChart");

        $stack2 = virtualinvoke pieChart.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        $stack3 = $stack2 instanceof org.jfree.chart.plot.PiePlot;

        if $stack3 != 0 goto label1;

        $stack4 = new java.lang.IllegalArgumentException;

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'pieChart\' argument must be a chart based on a PiePlot.");

        throw $stack4;

     label1:
        this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart> = pieChart;

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.util.TableOrder getDataExtractOrder()
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        org.jfree.chart.util.TableOrder $stack1;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack1 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder>;

        return $stack1;
    }

    public void setDataExtractOrder(org.jfree.chart.util.TableOrder)
    {
        org.jfree.chart.util.TableOrder order;
        org.jfree.chart.plot.MultiplePiePlot this;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        order := @parameter0: org.jfree.chart.util.TableOrder;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(order, "order");

        this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder> = order;

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void fireChangeEvent()>();

        return;
    }

    public double getLimit()
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack1 = this.<org.jfree.chart.plot.MultiplePiePlot: double limit>;

        return $stack1;
    }

    public void setLimit(double)
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        double limit;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        limit := @parameter0: double;

        this.<org.jfree.chart.plot.MultiplePiePlot: double limit> = limit;

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void fireChangeEvent()>();

        return;
    }

    public java.lang.Comparable getAggregatedItemsKey()
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        java.lang.Comparable $stack1;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack1 = this.<org.jfree.chart.plot.MultiplePiePlot: java.lang.Comparable aggregatedItemsKey>;

        return $stack1;
    }

    public void setAggregatedItemsKey(java.lang.Comparable)
    {
        java.lang.Comparable key;
        org.jfree.chart.plot.MultiplePiePlot this;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        key := @parameter0: java.lang.Comparable;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(key, "key");

        this.<org.jfree.chart.plot.MultiplePiePlot: java.lang.Comparable aggregatedItemsKey> = key;

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getAggregatedItemsPaint()
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack1 = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint>;

        return $stack1;
    }

    public void setAggregatedItemsPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.MultiplePiePlot this;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void fireChangeEvent()>();

        return;
    }

    public java.lang.String getPlotType()
    {
        org.jfree.chart.plot.MultiplePiePlot this;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        return "Multiple Pie Plot";
    }

    public java.awt.Shape getLegendItemShape()
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack1 = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape legendItemShape>;

        return $stack1;
    }

    public void setLegendItemShape(java.awt.Shape)
    {
        java.awt.Shape shape;
        org.jfree.chart.plot.MultiplePiePlot this;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        shape := @parameter0: java.awt.Shape;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(shape, "shape");

        this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape legendItemShape> = shape;

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void fireChangeEvent()>();

        return;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        org.jfree.chart.ui.RectangleInsets insets;
        java.awt.geom.Rectangle2D area;
        java.awt.Graphics2D g2;
        org.jfree.data.category.CategoryDataset $stack28, $stack32, $stack56, $stack62, $stack111, $stack143;
        boolean $stack29, $stack73, $stack93;
        org.jfree.chart.util.TableOrder $stack30, $stack31, $stack54, $stack55, $stack61;
        double $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack63, $stack101, $stack121, $stack122, $stack41, $stack42, $stack43, $stack45;
        int y, width, height, diff, $stack49, $stack50, $stack51, $stack52, $stack53, $stack71, $stack72, pieCount, displayCols, displayRows, temp, $stack44, $stack46, row, column, $stack47, xoffset, pieIndex, i, $stack67;
        java.lang.Comparable $stack57, key, $stack92, $stack102, $stack112;
        org.jfree.chart.JFreeChart $stack59, $stack65, $stack68;
        org.jfree.data.category.CategoryToPieDataset $stack60;
        byte $stack64, $stack123;
        org.jfree.chart.plot.Plot $stack66;
        org.jfree.chart.plot.PiePlot piePlot;
        org.jfree.chart.plot.PlotRenderingInfo info, $stack77;
        org.jfree.chart.ChartRenderingInfo $stack74, $stack85, i#81;
        org.jfree.chart.entity.EntityCollection $stack75, $stack76;
        java.lang.AssertionError $stack84;
        java.util.Map $stack94;
        java.lang.Object $stack95;
        java.awt.geom.Point2D anchor;
        org.jfree.chart.plot.PlotState parentState;
        java.awt.Rectangle $stack48;
        java.lang.String title;
        org.jfree.data.general.PieDataset piedataset;
        java.awt.Paint p;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        anchor := @parameter2: java.awt.geom.Point2D;

        parentState := @parameter3: org.jfree.chart.plot.PlotState;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        insets = virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.ui.RectangleInsets getInsets()>();

        virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(area);

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        $stack28 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        $stack29 = staticinvoke <org.jfree.data.general.DatasetUtils: boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset)>($stack28);

        if $stack29 == 0 goto label01;

        virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        return;

     label01:
        $stack31 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder>;

        $stack30 = <org.jfree.chart.util.TableOrder: org.jfree.chart.util.TableOrder BY_ROW>;

        if $stack31 != $stack30 goto label02;

        $stack143 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        pieCount = interfaceinvoke $stack143.<org.jfree.data.category.CategoryDataset: int getRowCount()>();

        goto label03;

     label02:
        $stack32 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        pieCount = interfaceinvoke $stack32.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

     label03:
        $stack34 = (double) pieCount;

        $stack35 = staticinvoke <java.lang.Math: double sqrt(double)>($stack34);

        $stack36 = staticinvoke <java.lang.Math: double ceil(double)>($stack35);

        displayCols = (int) $stack36;

        $stack38 = (double) pieCount;

        $stack37 = (double) displayCols;

        $stack39 = $stack38 / $stack37;

        $stack40 = staticinvoke <java.lang.Math: double ceil(double)>($stack39);

        displayRows = (int) $stack40;

        if displayCols <= displayRows goto label04;

        $stack121 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack122 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack123 = $stack121 cmpg $stack122;

        if $stack123 >= 0 goto label04;

        temp = displayCols;

        displayCols = displayRows;

        displayRows = temp;

     label04:
        specialinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void prefetchSectionPaints()>();

        $stack41 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        temp = (int) $stack41;

        $stack42 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        y = (int) $stack42;

        $stack43 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack44 = (int) $stack43;

        width = $stack44 / displayCols;

        $stack45 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack46 = (int) $stack45;

        height = $stack46 / displayRows;

        row = 0;

        column = 0;

        $stack47 = displayRows * displayCols;

        diff = $stack47 - pieCount;

        xoffset = 0;

        $stack48 = new java.awt.Rectangle;

        specialinvoke $stack48.<java.awt.Rectangle: void <init>()>();

        pieIndex = 0;

     label05:
        if pieIndex >= pieCount goto label18;

        $stack50 = temp + xoffset;

        $stack49 = width * column;

        $stack53 = $stack50 + $stack49;

        $stack51 = height * row;

        $stack52 = y + $stack51;

        virtualinvoke $stack48.<java.awt.Rectangle: void setBounds(int,int,int,int)>($stack53, $stack52, width, height);

        $stack55 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder>;

        $stack54 = <org.jfree.chart.util.TableOrder: org.jfree.chart.util.TableOrder BY_ROW>;

        if $stack55 != $stack54 goto label06;

        $stack111 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        $stack112 = interfaceinvoke $stack111.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(pieIndex);

        title = virtualinvoke $stack112.<java.lang.Object: java.lang.String toString()>();

        goto label07;

     label06:
        $stack56 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        $stack57 = interfaceinvoke $stack56.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getColumnKey(int)>(pieIndex);

        title = virtualinvoke $stack57.<java.lang.Object: java.lang.String toString()>();

     label07:
        $stack59 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        virtualinvoke $stack59.<org.jfree.chart.JFreeChart: void setTitle(java.lang.String)>(title);

        $stack60 = new org.jfree.data.category.CategoryToPieDataset;

        $stack62 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        $stack61 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder>;

        specialinvoke $stack60.<org.jfree.data.category.CategoryToPieDataset: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,int)>($stack62, $stack61, pieIndex);

        $stack63 = this.<org.jfree.chart.plot.MultiplePiePlot: double limit>;

        $stack64 = $stack63 cmpl 0.0;

        if $stack64 <= 0 goto label08;

        $stack102 = this.<org.jfree.chart.plot.MultiplePiePlot: java.lang.Comparable aggregatedItemsKey>;

        $stack101 = this.<org.jfree.chart.plot.MultiplePiePlot: double limit>;

        piedataset = staticinvoke <org.jfree.data.general.DatasetUtils: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)>($stack60, $stack102, $stack101);

        goto label09;

     label08:
        piedataset = $stack60;

     label09:
        $stack65 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        $stack66 = virtualinvoke $stack65.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        piePlot = (org.jfree.chart.plot.PiePlot) $stack66;

        virtualinvoke piePlot.<org.jfree.chart.plot.PiePlot: void setDataset(org.jfree.data.general.PieDataset)>(piedataset);

        virtualinvoke piePlot.<org.jfree.chart.plot.PiePlot: void setPieIndex(int)>(pieIndex);

        i = 0;

     label10:
        $stack67 = interfaceinvoke piedataset.<org.jfree.data.general.PieDataset: int getItemCount()>();

        if i >= $stack67 goto label13;

        key = interfaceinvoke piedataset.<org.jfree.data.general.PieDataset: java.lang.Comparable getKey(int)>(i);

        $stack92 = this.<org.jfree.chart.plot.MultiplePiePlot: java.lang.Comparable aggregatedItemsKey>;

        $stack93 = virtualinvoke key.<java.lang.Object: boolean equals(java.lang.Object)>($stack92);

        if $stack93 == 0 goto label11;

        p = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint>;

        goto label12;

     label11:
        $stack94 = this.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints>;

        $stack95 = interfaceinvoke $stack94.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        p = (java.awt.Paint) $stack95;

     label12:
        virtualinvoke piePlot.<org.jfree.chart.plot.PiePlot: void setSectionPaint(java.lang.Comparable,java.awt.Paint)>(key, p);

        i = i + 1;

        goto label10;

     label13:
        i#81 = null;

        if info == null goto label14;

        $stack85 = new org.jfree.chart.ChartRenderingInfo;

        specialinvoke $stack85.<org.jfree.chart.ChartRenderingInfo: void <init>()>();

        i#81 = $stack85;

     label14:
        $stack68 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        virtualinvoke $stack68.<org.jfree.chart.JFreeChart: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)>(g2, $stack48, i#81);

        if info == null goto label16;

        $stack73 = <org.jfree.chart.plot.MultiplePiePlot: boolean $assertionsDisabled>;

        if $stack73 != 0 goto label15;

        if i#81 != null goto label15;

        $stack84 = new java.lang.AssertionError;

        specialinvoke $stack84.<java.lang.AssertionError: void <init>()>();

        throw $stack84;

     label15:
        $stack74 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        $stack75 = virtualinvoke $stack74.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        $stack76 = virtualinvoke i#81.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        interfaceinvoke $stack75.<org.jfree.chart.entity.EntityCollection: void addAll(org.jfree.chart.entity.EntityCollection)>($stack76);

        $stack77 = virtualinvoke i#81.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()>();

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void addSubplotInfo(org.jfree.chart.plot.PlotRenderingInfo)>($stack77);

     label16:
        column = column + 1;

        if column != displayCols goto label17;

        column = 0;

        row = row + 1;

        $stack71 = displayRows - 1;

        if row != $stack71 goto label17;

        if diff == 0 goto label17;

        $stack72 = diff * width;

        xoffset = $stack72 / 2;

     label17:
        pieIndex = pieIndex + 1;

        goto label05;

     label18:
        return;
    }

    private void prefetchSectionPaints()
    {
        org.jfree.chart.plot.MultiplePiePlot this;
        org.jfree.chart.JFreeChart $stack5;
        org.jfree.chart.plot.Plot $stack6;
        org.jfree.chart.plot.PiePlot piePlot;
        org.jfree.chart.util.TableOrder $stack7, $stack8;
        org.jfree.data.category.CategoryDataset $stack9, $stack11, $stack25, $stack27;
        int $stack10, $stack26, c;
        java.util.Map $stack18, $stack34, $stack30, $stack14;
        java.lang.Object $stack19, $stack35;
        org.jfree.chart.plot.DrawingSupplier $stack23, $stack39;
        java.lang.Comparable key;
        java.awt.Paint p;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack5 = virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart getPieChart()>();

        $stack6 = virtualinvoke $stack5.<org.jfree.chart.JFreeChart: org.jfree.chart.plot.Plot getPlot()>();

        piePlot = (org.jfree.chart.plot.PiePlot) $stack6;

        $stack8 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder>;

        $stack7 = <org.jfree.chart.util.TableOrder: org.jfree.chart.util.TableOrder BY_ROW>;

        if $stack8 != $stack7 goto label4;

        c = 0;

     label1:
        $stack25 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        $stack26 = interfaceinvoke $stack25.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        if c >= $stack26 goto label3;

        $stack27 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        key = interfaceinvoke $stack27.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getColumnKey(int)>(c);

        p = virtualinvoke piePlot.<org.jfree.chart.plot.PiePlot: java.awt.Paint getSectionPaint(java.lang.Comparable)>(key);

        if p != null goto label2;

        $stack34 = this.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints>;

        $stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        p = (java.awt.Paint) $stack35;

        if p != null goto label2;

        $stack39 = virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        p = interfaceinvoke $stack39.<org.jfree.chart.plot.DrawingSupplier: java.awt.Paint getNextPaint()>();

     label2:
        $stack30 = this.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints>;

        interfaceinvoke $stack30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, p);

        c = c + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        c = 0;

     label5:
        $stack9 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        $stack10 = interfaceinvoke $stack9.<org.jfree.data.category.CategoryDataset: int getRowCount()>();

        if c >= $stack10 goto label7;

        $stack11 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        key = interfaceinvoke $stack11.<org.jfree.data.category.CategoryDataset: java.lang.Comparable getRowKey(int)>(c);

        p = virtualinvoke piePlot.<org.jfree.chart.plot.PiePlot: java.awt.Paint getSectionPaint(java.lang.Comparable)>(key);

        if p != null goto label6;

        $stack18 = this.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints>;

        $stack19 = interfaceinvoke $stack18.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        p = (java.awt.Paint) $stack19;

        if p != null goto label6;

        $stack23 = virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()>();

        p = interfaceinvoke $stack23.<org.jfree.chart.plot.DrawingSupplier: java.awt.Paint getNextPaint()>();

     label6:
        $stack14 = this.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints>;

        interfaceinvoke $stack14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, p);

        c = c + 1;

        goto label5;

     label7:
        return;
    }

    public org.jfree.chart.LegendItemCollection getLegendItems()
    {
        org.jfree.chart.LegendItemCollection $stack10;
        org.jfree.chart.plot.MultiplePiePlot this;
        org.jfree.data.category.CategoryDataset $stack11, $stack41, $stack43, $stack46;
        org.jfree.chart.util.TableOrder $stack12, $stack13, $stack14, $stack15;
        java.util.Iterator iterator;
        boolean $stack17;
        double $stack18;
        byte $stack19;
        org.jfree.chart.LegendItem $stack20, $stack36;
        java.lang.Comparable $stack21, $stack23, key;
        java.lang.String $stack22, $stack24, label;
        java.awt.Shape $stack27, $stack39;
        java.awt.Paint $stack28, $stack30, paint;
        java.awt.Stroke $stack29, $stack40;
        java.lang.Object $stack32, $stack35;
        java.util.Map $stack34;
        java.util.List keys;
        int section;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack10 = new org.jfree.chart.LegendItemCollection;

        specialinvoke $stack10.<org.jfree.chart.LegendItemCollection: void <init>()>();

        $stack11 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        if $stack11 != null goto label1;

        return $stack10;

     label1:
        keys = null;

        specialinvoke this.<org.jfree.chart.plot.MultiplePiePlot: void prefetchSectionPaints()>();

        $stack13 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder>;

        $stack12 = <org.jfree.chart.util.TableOrder: org.jfree.chart.util.TableOrder BY_ROW>;

        if $stack13 != $stack12 goto label2;

        $stack46 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        keys = interfaceinvoke $stack46.<org.jfree.data.category.CategoryDataset: java.util.List getColumnKeys()>();

        goto label3;

     label2:
        $stack15 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder>;

        $stack14 = <org.jfree.chart.util.TableOrder: org.jfree.chart.util.TableOrder BY_COLUMN>;

        if $stack15 != $stack14 goto label3;

        $stack43 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset dataset>;

        keys = interfaceinvoke $stack43.<org.jfree.data.category.CategoryDataset: java.util.List getRowKeys()>();

     label3:
        if keys != null goto label4;

        return $stack10;

     label4:
        section = 0;

        iterator = interfaceinvoke keys.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $stack17 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label6;

        $stack32 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack32;

        label = virtualinvoke key.<java.lang.Object: java.lang.String toString()>();

        $stack34 = this.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints>;

        $stack35 = interfaceinvoke $stack34.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        paint = (java.awt.Paint) $stack35;

        $stack36 = new org.jfree.chart.LegendItem;

        $stack39 = virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape getLegendItemShape()>();

        $stack40 = <org.jfree.chart.plot.Plot: java.awt.Stroke DEFAULT_OUTLINE_STROKE>;

        specialinvoke $stack36.<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>(label, label, null, null, $stack39, paint, $stack40, paint);

        virtualinvoke $stack36.<org.jfree.chart.LegendItem: void setSeriesKey(java.lang.Comparable)>(key);

        virtualinvoke $stack36.<org.jfree.chart.LegendItem: void setSeriesIndex(int)>(section);

        $stack41 = virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.data.category.CategoryDataset getDataset()>();

        virtualinvoke $stack36.<org.jfree.chart.LegendItem: void setDataset(org.jfree.data.general.Dataset)>($stack41);

        virtualinvoke $stack10.<org.jfree.chart.LegendItemCollection: void add(org.jfree.chart.LegendItem)>($stack36);

        section = section + 1;

        goto label5;

     label6:
        $stack18 = this.<org.jfree.chart.plot.MultiplePiePlot: double limit>;

        $stack19 = $stack18 cmpl 0.0;

        if $stack19 <= 0 goto label7;

        $stack20 = new org.jfree.chart.LegendItem;

        $stack21 = this.<org.jfree.chart.plot.MultiplePiePlot: java.lang.Comparable aggregatedItemsKey>;

        $stack22 = virtualinvoke $stack21.<java.lang.Object: java.lang.String toString()>();

        $stack23 = this.<org.jfree.chart.plot.MultiplePiePlot: java.lang.Comparable aggregatedItemsKey>;

        $stack24 = virtualinvoke $stack23.<java.lang.Object: java.lang.String toString()>();

        $stack27 = virtualinvoke this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape getLegendItemShape()>();

        $stack30 = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint>;

        $stack29 = <org.jfree.chart.plot.Plot: java.awt.Stroke DEFAULT_OUTLINE_STROKE>;

        $stack28 = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint>;

        specialinvoke $stack20.<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>($stack22, $stack24, null, null, $stack27, $stack30, $stack29, $stack28);

        virtualinvoke $stack10.<org.jfree.chart.LegendItemCollection: void add(org.jfree.chart.LegendItem)>($stack20);

     label7:
        return $stack10;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.plot.MultiplePiePlot this, that;
        boolean $stack3, $stack11, $stack14, $stack17, $stack20, $stack21;
        org.jfree.chart.util.TableOrder $stack4, $stack5;
        double $stack6, $stack7;
        byte $stack8;
        java.lang.Comparable $stack9, $stack10;
        java.awt.Paint $stack12, $stack13;
        org.jfree.chart.JFreeChart $stack15, $stack16;
        java.awt.Shape $stack18, $stack19;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.plot.MultiplePiePlot;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.plot.MultiplePiePlot) obj;

        $stack5 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder>;

        $stack4 = that.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.util.TableOrder dataExtractOrder>;

        if $stack5 == $stack4 goto label3;

        return 0;

     label3:
        $stack7 = this.<org.jfree.chart.plot.MultiplePiePlot: double limit>;

        $stack6 = that.<org.jfree.chart.plot.MultiplePiePlot: double limit>;

        $stack8 = $stack7 cmpl $stack6;

        if $stack8 == 0 goto label4;

        return 0;

     label4:
        $stack10 = this.<org.jfree.chart.plot.MultiplePiePlot: java.lang.Comparable aggregatedItemsKey>;

        $stack9 = that.<org.jfree.chart.plot.MultiplePiePlot: java.lang.Comparable aggregatedItemsKey>;

        $stack11 = virtualinvoke $stack10.<java.lang.Object: boolean equals(java.lang.Object)>($stack9);

        if $stack11 != 0 goto label5;

        return 0;

     label5:
        $stack13 = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint>;

        $stack12 = that.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint>;

        $stack14 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack13, $stack12);

        if $stack14 != 0 goto label6;

        return 0;

     label6:
        $stack16 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        $stack15 = that.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        $stack17 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack16, $stack15);

        if $stack17 != 0 goto label7;

        return 0;

     label7:
        $stack19 = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape legendItemShape>;

        $stack18 = that.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape legendItemShape>;

        $stack20 = staticinvoke <org.jfree.chart.util.ShapeUtils: boolean equal(java.awt.Shape,java.awt.Shape)>($stack19, $stack18);

        if $stack20 != 0 goto label8;

        return 0;

     label8:
        $stack21 = specialinvoke this.<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>(obj);

        if $stack21 != 0 goto label9;

        return 0;

     label9:
        return 1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.plot.MultiplePiePlot this, clone;
        java.lang.Object $stack2, $stack4;
        org.jfree.chart.JFreeChart $stack3, $stack5;
        java.util.HashMap $stack6;
        java.util.Map $stack7;
        java.awt.Shape $stack8, $stack9;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        $stack2 = specialinvoke this.<org.jfree.chart.plot.Plot: java.lang.Object clone()>();

        clone = (org.jfree.chart.plot.MultiplePiePlot) $stack2;

        $stack3 = this.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart>;

        $stack4 = virtualinvoke $stack3.<org.jfree.chart.JFreeChart: java.lang.Object clone()>();

        $stack5 = (org.jfree.chart.JFreeChart) $stack4;

        clone.<org.jfree.chart.plot.MultiplePiePlot: org.jfree.chart.JFreeChart pieChart> = $stack5;

        $stack6 = new java.util.HashMap;

        $stack7 = this.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints>;

        specialinvoke $stack6.<java.util.HashMap: void <init>(java.util.Map)>($stack7);

        clone.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints> = $stack6;

        $stack8 = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape legendItemShape>;

        $stack9 = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape clone(java.awt.Shape)>($stack8);

        clone.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape legendItemShape> = $stack9;

        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.plot.MultiplePiePlot this;
        java.awt.Paint $stack2;
        java.awt.Shape $stack3;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape legendItemShape>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack3, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.plot.MultiplePiePlot this;
        java.awt.Paint $stack2;
        java.awt.Shape $stack3;
        java.util.HashMap $stack4;

        this := @this: org.jfree.chart.plot.MultiplePiePlot;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Paint aggregatedItemsPaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.MultiplePiePlot: java.awt.Shape legendItemShape> = $stack3;

        $stack4 = new java.util.HashMap;

        specialinvoke $stack4.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.plot.MultiplePiePlot: java.util.Map sectionPaints> = $stack4;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $stack0;
        boolean $stack1, $stack2;

        <org.jfree.chart.plot.MultiplePiePlot: long serialVersionUID> = -355377800470807389L;

        $stack0 = class "Lorg/jfree/chart/plot/MultiplePiePlot;";

        $stack1 = virtualinvoke $stack0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $stack1 != 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        <org.jfree.chart.plot.MultiplePiePlot: boolean $assertionsDisabled> = $stack2;

        return;
    }
}
