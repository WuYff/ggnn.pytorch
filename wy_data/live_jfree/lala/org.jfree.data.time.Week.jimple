public class org.jfree.data.time.Week extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final int FIRST_WEEK_IN_YEAR;
    public static final int LAST_WEEK_IN_YEAR;
    private short year;
    private byte week;
    private long firstMillisecond;
    private long lastMillisecond;

    public void <init>()
    {
        org.jfree.data.time.Week this;
        java.util.Date $stack1;

        this := @this: org.jfree.data.time.Week;

        $stack1 = new java.util.Date;

        specialinvoke $stack1.<java.util.Date: void <init>()>();

        specialinvoke this.<org.jfree.data.time.Week: void <init>(java.util.Date)>($stack1);

        return;
    }

    public void <init>(int, int)
    {
        org.jfree.data.time.Week this;
        int week, year;
        java.lang.IllegalArgumentException $stack3;
        byte $stack4;
        short $stack5;
        java.util.Calendar $stack6;

        this := @this: org.jfree.data.time.Week;

        week := @parameter0: int;

        year := @parameter1: int;

        specialinvoke this.<org.jfree.data.time.RegularTimePeriod: void <init>()>();

        if week < 1 goto label1;

        if week <= 53 goto label2;

     label1:
        $stack3 = new java.lang.IllegalArgumentException;

        specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'week\' argument must be in the range 1 - 53.");

        throw $stack3;

     label2:
        $stack4 = (byte) week;

        this.<org.jfree.data.time.Week: byte week> = $stack4;

        $stack5 = (short) year;

        this.<org.jfree.data.time.Week: short year> = $stack5;

        $stack6 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke this.<org.jfree.data.time.Week: void peg(java.util.Calendar)>($stack6);

        return;
    }

    public void <init>(int, org.jfree.data.time.Year)
    {
        org.jfree.data.time.Week this;
        int week, $stack5;
        java.lang.IllegalArgumentException $stack3;
        byte $stack4;
        org.jfree.data.time.Year year;
        short $stack6;
        java.util.Calendar $stack7;

        this := @this: org.jfree.data.time.Week;

        week := @parameter0: int;

        year := @parameter1: org.jfree.data.time.Year;

        specialinvoke this.<org.jfree.data.time.RegularTimePeriod: void <init>()>();

        if week < 1 goto label1;

        if week <= 53 goto label2;

     label1:
        $stack3 = new java.lang.IllegalArgumentException;

        specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'week\' argument must be in the range 1 - 53.");

        throw $stack3;

     label2:
        $stack4 = (byte) week;

        this.<org.jfree.data.time.Week: byte week> = $stack4;

        $stack5 = virtualinvoke year.<org.jfree.data.time.Year: int getYear()>();

        $stack6 = (short) $stack5;

        this.<org.jfree.data.time.Week: short year> = $stack6;

        $stack7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke this.<org.jfree.data.time.Week: void peg(java.util.Calendar)>($stack7);

        return;
    }

    public void <init>(java.util.Date)
    {
        org.jfree.data.time.Week this;
        java.util.Date time;
        java.util.TimeZone $stack2;
        java.util.Locale $stack3;

        this := @this: org.jfree.data.time.Week;

        time := @parameter0: java.util.Date;

        $stack2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $stack3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke this.<org.jfree.data.time.Week: void <init>(java.util.Date,java.util.TimeZone,java.util.Locale)>(time, $stack2, $stack3);

        return;
    }

    public void <init>(java.util.Date, java.util.TimeZone, java.util.Locale)
    {
        org.jfree.data.time.Week this;
        java.util.Date time;
        java.util.TimeZone zone;
        java.util.Locale locale;
        java.util.Calendar calendar;
        int tempWeek, $stack9, $stack12, $stack19, $stack27, $stack28, yyyy;
        byte $stack10, $stack14;
        short $stack29, $stack13;

        this := @this: org.jfree.data.time.Week;

        time := @parameter0: java.util.Date;

        zone := @parameter1: java.util.TimeZone;

        locale := @parameter2: java.util.Locale;

        specialinvoke this.<org.jfree.data.time.RegularTimePeriod: void <init>()>();

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(time, "time");

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(zone, "zone");

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(locale, "locale");

        calendar = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>(zone, locale);

        virtualinvoke calendar.<java.util.Calendar: void setTime(java.util.Date)>(time);

        tempWeek = virtualinvoke calendar.<java.util.Calendar: int get(int)>(3);

        if tempWeek != 1 goto label1;

        $stack19 = virtualinvoke calendar.<java.util.Calendar: int get(int)>(2);

        if $stack19 != 11 goto label1;

        this.<org.jfree.data.time.Week: byte week> = 1;

        $stack27 = virtualinvoke calendar.<java.util.Calendar: int get(int)>(1);

        $stack28 = $stack27 + 1;

        $stack29 = (short) $stack28;

        this.<org.jfree.data.time.Week: short year> = $stack29;

        goto label3;

     label1:
        $stack9 = staticinvoke <java.lang.Math: int min(int,int)>(tempWeek, 53);

        $stack10 = (byte) $stack9;

        this.<org.jfree.data.time.Week: byte week> = $stack10;

        yyyy = virtualinvoke calendar.<java.util.Calendar: int get(int)>(1);

        $stack12 = virtualinvoke calendar.<java.util.Calendar: int get(int)>(2);

        if $stack12 != 0 goto label2;

        $stack14 = this.<org.jfree.data.time.Week: byte week>;

        if $stack14 < 52 goto label2;

        yyyy = yyyy + -1;

     label2:
        $stack13 = (short) yyyy;

        this.<org.jfree.data.time.Week: short year> = $stack13;

     label3:
        virtualinvoke this.<org.jfree.data.time.Week: void peg(java.util.Calendar)>(calendar);

        return;
    }

    public org.jfree.data.time.Year getYear()
    {
        org.jfree.data.time.Year $stack1;
        org.jfree.data.time.Week this;
        short $stack2;

        this := @this: org.jfree.data.time.Week;

        $stack1 = new org.jfree.data.time.Year;

        $stack2 = this.<org.jfree.data.time.Week: short year>;

        specialinvoke $stack1.<org.jfree.data.time.Year: void <init>(int)>($stack2);

        return $stack1;
    }

    public int getYearValue()
    {
        org.jfree.data.time.Week this;
        short $stack1;

        this := @this: org.jfree.data.time.Week;

        $stack1 = this.<org.jfree.data.time.Week: short year>;

        return $stack1;
    }

    public int getWeek()
    {
        org.jfree.data.time.Week this;
        byte $stack1;

        this := @this: org.jfree.data.time.Week;

        $stack1 = this.<org.jfree.data.time.Week: byte week>;

        return $stack1;
    }

    public long getFirstMillisecond()
    {
        org.jfree.data.time.Week this;
        long $stack1;

        this := @this: org.jfree.data.time.Week;

        $stack1 = this.<org.jfree.data.time.Week: long firstMillisecond>;

        return $stack1;
    }

    public long getLastMillisecond()
    {
        org.jfree.data.time.Week this;
        long $stack1;

        this := @this: org.jfree.data.time.Week;

        $stack1 = this.<org.jfree.data.time.Week: long lastMillisecond>;

        return $stack1;
    }

    public void peg(java.util.Calendar)
    {
        org.jfree.data.time.Week this;
        java.util.Calendar calendar;
        long $stack2, $stack3;

        this := @this: org.jfree.data.time.Week;

        calendar := @parameter0: java.util.Calendar;

        $stack2 = virtualinvoke this.<org.jfree.data.time.Week: long getFirstMillisecond(java.util.Calendar)>(calendar);

        this.<org.jfree.data.time.Week: long firstMillisecond> = $stack2;

        $stack3 = virtualinvoke this.<org.jfree.data.time.Week: long getLastMillisecond(java.util.Calendar)>(calendar);

        this.<org.jfree.data.time.Week: long lastMillisecond> = $stack3;

        return;
    }

    public org.jfree.data.time.RegularTimePeriod previous()
    {
        org.jfree.data.time.Week this, $stack8, $stack11, result;
        byte $stack4, $stack12;
        short $stack5, $stack6, $stack13;
        int yy, $stack9, $stack14;
        java.util.Calendar prevYearCalendar;

        this := @this: org.jfree.data.time.Week;

        $stack4 = this.<org.jfree.data.time.Week: byte week>;

        if $stack4 == 1 goto label1;

        $stack11 = new org.jfree.data.time.Week;

        $stack12 = this.<org.jfree.data.time.Week: byte week>;

        $stack14 = $stack12 - 1;

        $stack13 = this.<org.jfree.data.time.Week: short year>;

        specialinvoke $stack11.<org.jfree.data.time.Week: void <init>(int,int)>($stack14, $stack13);

        result = $stack11;

        goto label3;

     label1:
        $stack5 = this.<org.jfree.data.time.Week: short year>;

        if $stack5 <= 1900 goto label2;

        $stack6 = this.<org.jfree.data.time.Week: short year>;

        yy = $stack6 - 1;

        prevYearCalendar = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke prevYearCalendar.<java.util.Calendar: void set(int,int,int)>(yy, 11, 31);

        $stack8 = new org.jfree.data.time.Week;

        $stack9 = virtualinvoke prevYearCalendar.<java.util.Calendar: int getActualMaximum(int)>(3);

        specialinvoke $stack8.<org.jfree.data.time.Week: void <init>(int,int)>($stack9, yy);

        result = $stack8;

        goto label3;

     label2:
        result = null;

     label3:
        return result;
    }

    public org.jfree.data.time.RegularTimePeriod next()
    {
        org.jfree.data.time.Week this, $stack10, $stack14, $stack18, result;
        byte $stack4, $stack8, $stack15, $stack19;
        java.util.Calendar calendar;
        short $stack6, $stack9, $stack11, $stack16, $stack20;
        int actualMaxWeek, $stack12, $stack17, $stack21;

        this := @this: org.jfree.data.time.Week;

        $stack4 = this.<org.jfree.data.time.Week: byte week>;

        if $stack4 >= 52 goto label1;

        $stack18 = new org.jfree.data.time.Week;

        $stack19 = this.<org.jfree.data.time.Week: byte week>;

        $stack21 = $stack19 + 1;

        $stack20 = this.<org.jfree.data.time.Week: short year>;

        specialinvoke $stack18.<org.jfree.data.time.Week: void <init>(int,int)>($stack21, $stack20);

        result = $stack18;

        goto label4;

     label1:
        calendar = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $stack6 = this.<org.jfree.data.time.Week: short year>;

        virtualinvoke calendar.<java.util.Calendar: void set(int,int,int)>($stack6, 11, 31);

        actualMaxWeek = virtualinvoke calendar.<java.util.Calendar: int getActualMaximum(int)>(3);

        $stack8 = this.<org.jfree.data.time.Week: byte week>;

        if $stack8 >= actualMaxWeek goto label2;

        $stack14 = new org.jfree.data.time.Week;

        $stack15 = this.<org.jfree.data.time.Week: byte week>;

        $stack17 = $stack15 + 1;

        $stack16 = this.<org.jfree.data.time.Week: short year>;

        specialinvoke $stack14.<org.jfree.data.time.Week: void <init>(int,int)>($stack17, $stack16);

        result = $stack14;

        goto label4;

     label2:
        $stack9 = this.<org.jfree.data.time.Week: short year>;

        if $stack9 >= 9999 goto label3;

        $stack10 = new org.jfree.data.time.Week;

        $stack11 = this.<org.jfree.data.time.Week: short year>;

        $stack12 = $stack11 + 1;

        specialinvoke $stack10.<org.jfree.data.time.Week: void <init>(int,int)>(1, $stack12);

        result = $stack10;

        goto label4;

     label3:
        result = null;

     label4:
        return result;
    }

    public long getSerialIndex()
    {
        org.jfree.data.time.Week this;
        short $stack1;
        long $stack2, $stack4, $stack5, $stack6;
        byte $stack3;

        this := @this: org.jfree.data.time.Week;

        $stack1 = this.<org.jfree.data.time.Week: short year>;

        $stack2 = (long) $stack1;

        $stack5 = $stack2 * 53L;

        $stack3 = this.<org.jfree.data.time.Week: byte week>;

        $stack4 = (long) $stack3;

        $stack6 = $stack5 + $stack4;

        return $stack6;
    }

    public long getFirstMillisecond(java.util.Calendar)
    {
        java.util.Calendar calendar, c;
        java.lang.Object $stack3;
        org.jfree.data.time.Week this;
        short $stack4;
        byte $stack5;
        int $stack7;
        long $stack8;

        this := @this: org.jfree.data.time.Week;

        calendar := @parameter0: java.util.Calendar;

        $stack3 = virtualinvoke calendar.<java.util.Calendar: java.lang.Object clone()>();

        c = (java.util.Calendar) $stack3;

        virtualinvoke c.<java.util.Calendar: void clear()>();

        $stack4 = this.<org.jfree.data.time.Week: short year>;

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(1, $stack4);

        $stack5 = this.<org.jfree.data.time.Week: byte week>;

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(3, $stack5);

        $stack7 = virtualinvoke c.<java.util.Calendar: int getFirstDayOfWeek()>();

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(7, $stack7);

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(10, 0);

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(14, 0);

        $stack8 = virtualinvoke c.<java.util.Calendar: long getTimeInMillis()>();

        return $stack8;
    }

    public long getLastMillisecond(java.util.Calendar)
    {
        java.util.Calendar calendar, c;
        java.lang.Object $stack3;
        org.jfree.data.time.Week this;
        short $stack4;
        byte $stack5;
        int $stack6, $stack8;
        long $stack9, $stack10;

        this := @this: org.jfree.data.time.Week;

        calendar := @parameter0: java.util.Calendar;

        $stack3 = virtualinvoke calendar.<java.util.Calendar: java.lang.Object clone()>();

        c = (java.util.Calendar) $stack3;

        virtualinvoke c.<java.util.Calendar: void clear()>();

        $stack4 = this.<org.jfree.data.time.Week: short year>;

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(1, $stack4);

        $stack5 = this.<org.jfree.data.time.Week: byte week>;

        $stack6 = $stack5 + 1;

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(3, $stack6);

        $stack8 = virtualinvoke c.<java.util.Calendar: int getFirstDayOfWeek()>();

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(7, $stack8);

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(10, 0);

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke c.<java.util.Calendar: void set(int,int)>(14, 0);

        $stack9 = virtualinvoke c.<java.util.Calendar: long getTimeInMillis()>();

        $stack10 = $stack9 - 1L;

        return $stack10;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack1, $stack2, $stack4, $stack5, $stack7;
        org.jfree.data.time.Week this;
        byte $stack3;
        short $stack6;
        java.lang.String $stack8;

        this := @this: org.jfree.data.time.Week;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Week ");

        $stack3 = this.<org.jfree.data.time.Week: byte week>;

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack6 = this.<org.jfree.data.time.Week: short year>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack8;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.data.time.Week this, that;
        boolean $stack3;
        byte $stack4, $stack5;
        short $stack6, $stack7;

        this := @this: org.jfree.data.time.Week;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.data.time.Week;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.data.time.Week) obj;

        $stack5 = this.<org.jfree.data.time.Week: byte week>;

        $stack4 = that.<org.jfree.data.time.Week: byte week>;

        if $stack5 == $stack4 goto label3;

        return 0;

     label3:
        $stack7 = this.<org.jfree.data.time.Week: short year>;

        $stack6 = that.<org.jfree.data.time.Week: short year>;

        if $stack7 == $stack6 goto label4;

        return 0;

     label4:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.data.time.Week this;
        byte $stack2;
        int $stack3, $stack5, result#2;
        short $stack4;

        this := @this: org.jfree.data.time.Week;

        $stack3 = 37 * 17;

        $stack2 = this.<org.jfree.data.time.Week: byte week>;

        result#2 = $stack3 + $stack2;

        $stack5 = 37 * result#2;

        $stack4 = this.<org.jfree.data.time.Week: short year>;

        result#2 = $stack5 + $stack4;

        return result#2;
    }

    public int compareTo(java.lang.Object)
    {
        java.lang.Object o1;
        boolean $stack4, $stack5;
        org.jfree.data.time.Week w, this;
        short $stack7;
        org.jfree.data.time.Year $stack8;
        int $stack9, $stack11, result;
        byte $stack10;

        this := @this: org.jfree.data.time.Week;

        o1 := @parameter0: java.lang.Object;

        $stack4 = o1 instanceof org.jfree.data.time.Week;

        if $stack4 == 0 goto label2;

        w = (org.jfree.data.time.Week) o1;

        $stack7 = this.<org.jfree.data.time.Week: short year>;

        $stack8 = virtualinvoke w.<org.jfree.data.time.Week: org.jfree.data.time.Year getYear()>();

        $stack9 = virtualinvoke $stack8.<org.jfree.data.time.Year: int getYear()>();

        result = $stack7 - $stack9;

        if result != 0 goto label1;

        $stack10 = this.<org.jfree.data.time.Week: byte week>;

        $stack11 = virtualinvoke w.<org.jfree.data.time.Week: int getWeek()>();

        result = $stack10 - $stack11;

     label1:
        goto label4;

     label2:
        $stack5 = o1 instanceof org.jfree.data.time.RegularTimePeriod;

        if $stack5 == 0 goto label3;

        result = 0;

        goto label4;

     label3:
        result = 1;

     label4:
        return result;
    }

    public static org.jfree.data.time.Week parseWeek(java.lang.String)
    {
        int i, $stack12, $stack13, w;
        org.jfree.data.time.TimePeriodFormatException $stack9, $stack18, $stack22, $stack25;
        java.lang.String $stack10, s1, $stack14, s2, s, s#3;
        org.jfree.data.time.Week $stack20, $stack24, result;
        org.jfree.data.time.Year y;

        s := @parameter0: java.lang.String;

        result = null;

        if s == null goto label7;

        s#3 = virtualinvoke s.<java.lang.String: java.lang.String trim()>();

        i = staticinvoke <org.jfree.data.time.Week: int findSeparator(java.lang.String)>(s#3);

        if i == -1 goto label6;

        $stack10 = virtualinvoke s#3.<java.lang.String: java.lang.String substring(int,int)>(0, i);

        s1 = virtualinvoke $stack10.<java.lang.String: java.lang.String trim()>();

        $stack12 = i + 1;

        $stack13 = virtualinvoke s#3.<java.lang.String: int length()>();

        $stack14 = virtualinvoke s#3.<java.lang.String: java.lang.String substring(int,int)>($stack12, $stack13);

        s2 = virtualinvoke $stack14.<java.lang.String: java.lang.String trim()>();

        y = staticinvoke <org.jfree.data.time.Week: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>(s1);

        if y == null goto label2;

        w = staticinvoke <org.jfree.data.time.Week: int stringToWeek(java.lang.String)>(s2);

        if w != -1 goto label1;

        $stack25 = new org.jfree.data.time.TimePeriodFormatException;

        specialinvoke $stack25.<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>("Can\'t evaluate the week.");

        throw $stack25;

     label1:
        $stack24 = new org.jfree.data.time.Week;

        specialinvoke $stack24.<org.jfree.data.time.Week: void <init>(int,org.jfree.data.time.Year)>(w, y);

        result = $stack24;

        goto label5;

     label2:
        y = staticinvoke <org.jfree.data.time.Week: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>(s2);

        if y == null goto label4;

        w = staticinvoke <org.jfree.data.time.Week: int stringToWeek(java.lang.String)>(s1);

        if w != -1 goto label3;

        $stack22 = new org.jfree.data.time.TimePeriodFormatException;

        specialinvoke $stack22.<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>("Can\'t evaluate the week.");

        throw $stack22;

     label3:
        $stack20 = new org.jfree.data.time.Week;

        specialinvoke $stack20.<org.jfree.data.time.Week: void <init>(int,org.jfree.data.time.Year)>(w, y);

        result = $stack20;

        goto label5;

     label4:
        $stack18 = new org.jfree.data.time.TimePeriodFormatException;

        specialinvoke $stack18.<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>("Can\'t evaluate the year.");

        throw $stack18;

     label5:
        goto label7;

     label6:
        $stack9 = new org.jfree.data.time.TimePeriodFormatException;

        specialinvoke $stack9.<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>("Could not find separator.");

        throw $stack9;

     label7:
        return result;
    }

    private static int findSeparator(java.lang.String)
    {
        java.lang.String s;
        int result;

        s := @parameter0: java.lang.String;

        result = virtualinvoke s.<java.lang.String: int indexOf(int)>(45);

        if result != -1 goto label1;

        result = virtualinvoke s.<java.lang.String: int indexOf(int)>(44);

     label1:
        if result != -1 goto label2;

        result = virtualinvoke s.<java.lang.String: int indexOf(int)>(32);

     label2:
        if result != -1 goto label3;

        result = virtualinvoke s.<java.lang.String: int indexOf(int)>(46);

     label3:
        return result;
    }

    private static org.jfree.data.time.Year evaluateAsYear(java.lang.String)
    {
        java.lang.String s;
        org.jfree.data.time.TimePeriodFormatException $stack4;
        org.jfree.data.time.Year result;

        s := @parameter0: java.lang.String;

        result = null;

     label1:
        result = staticinvoke <org.jfree.data.time.Year: org.jfree.data.time.Year parseYear(java.lang.String)>(s);

     label2:
        goto label4;

     label3:
        $stack4 := @caughtexception;

     label4:
        return result;

        catch org.jfree.data.time.TimePeriodFormatException from label1 to label2 with label3;
    }

    private static int stringToWeek(java.lang.String)
    {
        java.lang.NumberFormatException $stack7;
        java.lang.String s, s#3;
        int result;

        s := @parameter0: java.lang.String;

        result = -1;

        s#3 = virtualinvoke s.<java.lang.String: java.lang.String replace(char,char)>(87, 32);

        s#3 = virtualinvoke s#3.<java.lang.String: java.lang.String trim()>();

     label1:
        result = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(s#3);

        if result < 1 goto label2;

        if result <= 53 goto label3;

     label2:
        result = -1;

     label3:
        goto label5;

     label4:
        $stack7 := @caughtexception;

     label5:
        return result;

        catch java.lang.NumberFormatException from label1 to label3 with label4;
    }

    public static void <clinit>()
    {
        <org.jfree.data.time.Week: int LAST_WEEK_IN_YEAR> = 53;

        <org.jfree.data.time.Week: int FIRST_WEEK_IN_YEAR> = 1;

        <org.jfree.data.time.Week: long serialVersionUID> = 1856387786939865061L;

        return;
    }
}
