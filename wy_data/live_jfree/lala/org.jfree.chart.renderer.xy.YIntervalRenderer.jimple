public class org.jfree.chart.renderer.xy.YIntervalRenderer extends org.jfree.chart.renderer.xy.AbstractXYItemRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.jfree.chart.labels.XYItemLabelGenerator additionalItemLabelGenerator;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.YIntervalRenderer this;

        this := @this: org.jfree.chart.renderer.xy.YIntervalRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>();

        this.<org.jfree.chart.renderer.xy.YIntervalRenderer: org.jfree.chart.labels.XYItemLabelGenerator additionalItemLabelGenerator> = null;

        return;
    }

    public org.jfree.chart.labels.XYItemLabelGenerator getAdditionalItemLabelGenerator()
    {
        org.jfree.chart.renderer.xy.YIntervalRenderer this;
        org.jfree.chart.labels.XYItemLabelGenerator $stack1;

        this := @this: org.jfree.chart.renderer.xy.YIntervalRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.YIntervalRenderer: org.jfree.chart.labels.XYItemLabelGenerator additionalItemLabelGenerator>;

        return $stack1;
    }

    public void setAdditionalItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)
    {
        org.jfree.chart.renderer.xy.YIntervalRenderer this;
        org.jfree.chart.labels.XYItemLabelGenerator generator;

        this := @this: org.jfree.chart.renderer.xy.YIntervalRenderer;

        generator := @parameter0: org.jfree.chart.labels.XYItemLabelGenerator;

        this.<org.jfree.chart.renderer.xy.YIntervalRenderer: org.jfree.chart.labels.XYItemLabelGenerator additionalItemLabelGenerator> = generator;

        virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.renderer.xy.YIntervalRenderer this;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.Range $stack2;

        this := @this: org.jfree.chart.renderer.xy.YIntervalRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        $stack2 = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>(dataset, 1);

        return $stack2;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.chart.renderer.xy.YIntervalRenderer this;
        int series, item, pass;
        boolean $stack37, $stack56, $stack58;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.xy.IntervalXYDataset intervalDataset;
        double x, yLow, yHigh, xx, yyLow, yyHigh;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge xAxisLocation, yAxisLocation;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        java.awt.Paint p;
        java.awt.Stroke s;
        java.awt.Shape shape, hotspot, top, bottom;
        org.jfree.chart.plot.PlotOrientation orientation, $stack50, $stack51;
        java.lang.IllegalStateException $stack52;
        java.awt.geom.Line2D$Double $stack53, $stack62, line;
        java.awt.Graphics2D g2;
        org.jfree.chart.ChartRenderingInfo $stack78;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.entity.EntityCollection entities;

        this := @this: org.jfree.chart.renderer.xy.YIntervalRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        $stack37 = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: boolean getItemVisible(int,int)>(series, item);

        if $stack37 != 0 goto label1;

        return;

     label1:
        entities = null;

        if info == null goto label2;

        $stack78 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        entities = virtualinvoke $stack78.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

     label2:
        intervalDataset = (org.jfree.data.xy.IntervalXYDataset) dataset;

        x = interfaceinvoke intervalDataset.<org.jfree.data.xy.IntervalXYDataset: double getXValue(int,int)>(series, item);

        yLow = interfaceinvoke intervalDataset.<org.jfree.data.xy.IntervalXYDataset: double getStartYValue(int,int)>(series, item);

        yHigh = interfaceinvoke intervalDataset.<org.jfree.data.xy.IntervalXYDataset: double getEndYValue(int,int)>(series, item);

        xAxisLocation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        yAxisLocation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        xx = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x, dataArea, xAxisLocation);

        yyLow = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yLow, dataArea, yAxisLocation);

        yyHigh = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(yHigh, dataArea, yAxisLocation);

        p = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        s = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: java.awt.Stroke getItemStroke(int,int)>(series, item);

        shape = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: java.awt.Shape getItemShape(int,int)>(series, item);

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack50 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack50 goto label3;

        $stack62 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack62.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yyLow, xx, yyHigh, xx);

        line = $stack62;

        top = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(shape, yyHigh, xx);

        bottom = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(shape, yyLow, xx);

        goto label5;

     label3:
        $stack51 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack51 goto label4;

        $stack53 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack53.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, yyLow, xx, yyHigh);

        line = $stack53;

        top = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(shape, xx, yyHigh);

        bottom = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>(shape, xx, yyLow);

        goto label5;

     label4:
        $stack52 = new java.lang.IllegalStateException;

        specialinvoke $stack52.<java.lang.IllegalStateException: void <init>()>();

        throw $stack52;

     label5:
        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(p);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(s);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(top);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(bottom);

        $stack56 = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: boolean isItemLabelVisible(int,int)>(series, item);

        if $stack56 == 0 goto label6;

        virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)>(g2, orientation, dataset, series, item, xx, yyHigh, 0);

        specialinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: void drawAdditionalItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double)>(g2, orientation, dataset, series, item, xx, yyLow);

     label6:
        hotspot = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createLineRegion(java.awt.geom.Line2D,float)>(line, 4.0F);

        if entities == null goto label7;

        $stack58 = interfaceinvoke hotspot.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(dataArea);

        if $stack58 == 0 goto label7;

        virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(entities, hotspot, dataset, series, item, 0.0, 0.0);

     label7:
        return;
    }

    private void drawAdditionalItemLabel(java.awt.Graphics2D, org.jfree.chart.plot.PlotOrientation, org.jfree.data.xy.XYDataset, int, int, double, double)
    {
        org.jfree.chart.renderer.xy.YIntervalRenderer this;
        org.jfree.chart.labels.XYItemLabelGenerator $stack15, $stack18;
        int series, item;
        java.awt.Font labelFont;
        java.awt.Paint paint;
        java.awt.Graphics2D g2;
        org.jfree.data.xy.XYDataset dataset;
        java.lang.String label;
        org.jfree.chart.labels.ItemLabelPosition position;
        org.jfree.chart.labels.ItemLabelAnchor $stack21;
        double x, y, $stack23, $stack25, $stack28;
        org.jfree.chart.plot.PlotOrientation orientation;
        java.awt.geom.Point2D anchorPoint;
        float $stack24, $stack26;
        org.jfree.chart.ui.TextAnchor $stack27, $stack29;

        this := @this: org.jfree.chart.renderer.xy.YIntervalRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        orientation := @parameter1: org.jfree.chart.plot.PlotOrientation;

        dataset := @parameter2: org.jfree.data.xy.XYDataset;

        series := @parameter3: int;

        item := @parameter4: int;

        x := @parameter5: double;

        y := @parameter6: double;

        $stack15 = this.<org.jfree.chart.renderer.xy.YIntervalRenderer: org.jfree.chart.labels.XYItemLabelGenerator additionalItemLabelGenerator>;

        if $stack15 != null goto label1;

        return;

     label1:
        labelFont = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: java.awt.Font getItemLabelFont(int,int)>(series, item);

        paint = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: java.awt.Paint getItemLabelPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>(labelFont);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        $stack18 = this.<org.jfree.chart.renderer.xy.YIntervalRenderer: org.jfree.chart.labels.XYItemLabelGenerator additionalItemLabelGenerator>;

        label = interfaceinvoke $stack18.<org.jfree.chart.labels.XYItemLabelGenerator: java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int,int)>(dataset, series, item);

        position = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPosition(int,int)>(series, item);

        $stack21 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.labels.ItemLabelAnchor getItemLabelAnchor()>();

        anchorPoint = virtualinvoke this.<org.jfree.chart.renderer.xy.YIntervalRenderer: java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,double,double,org.jfree.chart.plot.PlotOrientation)>($stack21, x, y, orientation);

        $stack23 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getX()>();

        $stack24 = (float) $stack23;

        $stack25 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getY()>();

        $stack26 = (float) $stack25;

        $stack27 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.ui.TextAnchor getTextAnchor()>();

        $stack28 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: double getAngle()>();

        $stack29 = virtualinvoke position.<org.jfree.chart.labels.ItemLabelPosition: org.jfree.chart.ui.TextAnchor getRotationAnchor()>();

        staticinvoke <org.jfree.chart.text.TextUtils: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor,double,org.jfree.chart.ui.TextAnchor)>(label, g2, $stack24, $stack26, $stack27, $stack28, $stack29);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.YIntervalRenderer this, that;
        boolean $stack3, $stack6, $stack7;
        org.jfree.chart.labels.XYItemLabelGenerator $stack4, $stack5;

        this := @this: org.jfree.chart.renderer.xy.YIntervalRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.YIntervalRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.xy.YIntervalRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.YIntervalRenderer: org.jfree.chart.labels.XYItemLabelGenerator additionalItemLabelGenerator>;

        $stack4 = that.<org.jfree.chart.renderer.xy.YIntervalRenderer: org.jfree.chart.labels.XYItemLabelGenerator additionalItemLabelGenerator>;

        $stack6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack5, $stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack7 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack7;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.xy.YIntervalRenderer this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.renderer.xy.YIntervalRenderer;

        $stack1 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.xy.YIntervalRenderer: long serialVersionUID> = -2951586537224143260L;

        return;
    }
}
