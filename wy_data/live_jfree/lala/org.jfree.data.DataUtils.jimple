public abstract class org.jfree.data.DataUtils extends java.lang.Object
{

    public void <init>()
    {
        org.jfree.data.DataUtils this;

        this := @this: org.jfree.data.DataUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean equal(double[][], double[][])
    {
        double[][] a, b;
        int $stack3, $stack4, $stack5, i;
        double[] $stack6, $stack7;
        boolean $stack8, $stack11;

        a := @parameter0: double[][];

        b := @parameter1: double[][];

        if a != null goto label3;

        if b != null goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        return $stack11;

     label3:
        if b != null goto label4;

        return 0;

     label4:
        $stack4 = lengthof a;

        $stack3 = lengthof b;

        if $stack4 == $stack3 goto label5;

        return 0;

     label5:
        i = 0;

     label6:
        $stack5 = lengthof a;

        if i >= $stack5 goto label8;

        $stack7 = a[i];

        $stack6 = b[i];

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack7, $stack6);

        if $stack8 != 0 goto label7;

        return 0;

     label7:
        i = i + 1;

        goto label6;

     label8:
        return 1;
    }

    public static double[][] clone(double[][])
    {
        double[][] source, clone;
        int $stack4, $stack5, $stack10, $stack12, i;
        double[] $stack6, $stack9, row, $stack11, $stack13;

        source := @parameter0: double[][];

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(source, "source");

        $stack4 = lengthof source;

        clone = newarray (double[])[$stack4];

        i = 0;

     label1:
        $stack5 = lengthof source;

        if i >= $stack5 goto label3;

        $stack6 = source[i];

        if $stack6 == null goto label2;

        $stack9 = source[i];

        $stack10 = lengthof $stack9;

        row = newarray (double)[$stack10];

        $stack13 = source[i];

        $stack11 = source[i];

        $stack12 = lengthof $stack11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack13, 0, row, 0, $stack12);

        clone[i] = row;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return clone;
    }

    public static double calculateColumnTotal(org.jfree.data.Values2D, int)
    {
        org.jfree.data.Values2D data;
        int rowCount, column, r;
        java.lang.Number n;
        double $stack11, total;

        data := @parameter0: org.jfree.data.Values2D;

        column := @parameter1: int;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(data, "data");

        total = 0.0;

        rowCount = interfaceinvoke data.<org.jfree.data.Values2D: int getRowCount()>();

        r = 0;

     label1:
        if r >= rowCount goto label3;

        n = interfaceinvoke data.<org.jfree.data.Values2D: java.lang.Number getValue(int,int)>(r, column);

        if n == null goto label2;

        $stack11 = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        total = total + $stack11;

     label2:
        r = r + 1;

        goto label1;

     label3:
        return total;
    }

    public static double calculateColumnTotal(org.jfree.data.Values2D, int, int[])
    {
        org.jfree.data.Values2D data;
        int rowCount, $stack10, row, column, v;
        int[] validRows;
        java.lang.Number n;
        double $stack14, total;

        data := @parameter0: org.jfree.data.Values2D;

        column := @parameter1: int;

        validRows := @parameter2: int[];

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(data, "data");

        total = 0.0;

        rowCount = interfaceinvoke data.<org.jfree.data.Values2D: int getRowCount()>();

        v = 0;

     label1:
        $stack10 = lengthof validRows;

        if v >= $stack10 goto label3;

        row = validRows[v];

        if row >= rowCount goto label2;

        n = interfaceinvoke data.<org.jfree.data.Values2D: java.lang.Number getValue(int,int)>(row, column);

        if n == null goto label2;

        $stack14 = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        total = total + $stack14;

     label2:
        v = v + 1;

        goto label1;

     label3:
        return total;
    }

    public static double calculateRowTotal(org.jfree.data.Values2D, int)
    {
        org.jfree.data.Values2D data;
        int columnCount, row, c;
        java.lang.Number n;
        double $stack11, total;

        data := @parameter0: org.jfree.data.Values2D;

        row := @parameter1: int;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(data, "data");

        total = 0.0;

        columnCount = interfaceinvoke data.<org.jfree.data.Values2D: int getColumnCount()>();

        c = 0;

     label1:
        if c >= columnCount goto label3;

        n = interfaceinvoke data.<org.jfree.data.Values2D: java.lang.Number getValue(int,int)>(row, c);

        if n == null goto label2;

        $stack11 = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        total = total + $stack11;

     label2:
        c = c + 1;

        goto label1;

     label3:
        return total;
    }

    public static double calculateRowTotal(org.jfree.data.Values2D, int, int[])
    {
        org.jfree.data.Values2D data;
        int colCount, $stack10, col, row, v;
        int[] validCols;
        java.lang.Number n;
        double $stack14, total;

        data := @parameter0: org.jfree.data.Values2D;

        row := @parameter1: int;

        validCols := @parameter2: int[];

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(data, "data");

        total = 0.0;

        colCount = interfaceinvoke data.<org.jfree.data.Values2D: int getColumnCount()>();

        v = 0;

     label1:
        $stack10 = lengthof validCols;

        if v >= $stack10 goto label3;

        col = validCols[v];

        if col >= colCount goto label2;

        n = interfaceinvoke data.<org.jfree.data.Values2D: java.lang.Number getValue(int,int)>(row, col);

        if n == null goto label2;

        $stack14 = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        total = total + $stack14;

     label2:
        v = v + 1;

        goto label1;

     label3:
        return total;
    }

    public static java.lang.Number[] createNumberArray(double[])
    {
        double[] data;
        int $stack3, $stack4, i;
        java.lang.Number[] result;
        double $stack5;
        java.lang.Double $stack6;

        data := @parameter0: double[];

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(data, "data");

        $stack3 = lengthof data;

        result = newarray (java.lang.Number)[$stack3];

        i = 0;

     label1:
        $stack4 = lengthof data;

        if i >= $stack4 goto label2;

        $stack5 = data[i];

        $stack6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack5);

        result[i] = $stack6;

        i = i + 1;

        goto label1;

     label2:
        return result;
    }

    public static java.lang.Number[][] createNumberArray2D(double[][])
    {
        double[][] data;
        int l1, i;
        java.lang.Number[][] result;
        double[] $stack4;
        java.lang.Number[] $stack5;

        data := @parameter0: double[][];

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(data, "data");

        l1 = lengthof data;

        result = newarray (java.lang.Number[])[l1];

        i = 0;

     label1:
        if i >= l1 goto label2;

        $stack4 = data[i];

        $stack5 = staticinvoke <org.jfree.data.DataUtils: java.lang.Number[] createNumberArray(double[])>($stack4);

        result[i] = $stack5;

        i = i + 1;

        goto label1;

     label2:
        return result;
    }

    public static org.jfree.data.KeyedValues getCumulativePercentages(org.jfree.data.KeyedValues)
    {
        org.jfree.data.KeyedValues data;
        org.jfree.data.DefaultKeyedValues $stack8;
        int $stack9, $stack10, i;
        java.lang.Number v;
        java.lang.Comparable $stack12;
        java.lang.Double $stack13;
        double $stack14, $stack17, $stack26, total, i#3;

        data := @parameter0: org.jfree.data.KeyedValues;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(data, "data");

        $stack8 = new org.jfree.data.DefaultKeyedValues;

        specialinvoke $stack8.<org.jfree.data.DefaultKeyedValues: void <init>()>();

        total = 0.0;

        i = 0;

     label1:
        $stack9 = interfaceinvoke data.<org.jfree.data.KeyedValues: int getItemCount()>();

        if i >= $stack9 goto label3;

        v = interfaceinvoke data.<org.jfree.data.KeyedValues: java.lang.Number getValue(int)>(i);

        if v == null goto label2;

        $stack26 = virtualinvoke v.<java.lang.Number: double doubleValue()>();

        total = total + $stack26;

     label2:
        i = i + 1;

        goto label1;

     label3:
        i#3 = 0.0;

        i = 0;

     label4:
        $stack10 = interfaceinvoke data.<org.jfree.data.KeyedValues: int getItemCount()>();

        if i >= $stack10 goto label6;

        v = interfaceinvoke data.<org.jfree.data.KeyedValues: java.lang.Number getValue(int)>(i);

        if v == null goto label5;

        $stack17 = virtualinvoke v.<java.lang.Number: double doubleValue()>();

        i#3 = i#3 + $stack17;

     label5:
        $stack12 = interfaceinvoke data.<org.jfree.data.KeyedValues: java.lang.Comparable getKey(int)>(i);

        $stack13 = new java.lang.Double;

        $stack14 = i#3 / total;

        specialinvoke $stack13.<java.lang.Double: void <init>(double)>($stack14);

        virtualinvoke $stack8.<org.jfree.data.DefaultKeyedValues: void addValue(java.lang.Comparable,java.lang.Number)>($stack12, $stack13);

        i = i + 1;

        goto label4;

     label6:
        return $stack8;
    }
}
