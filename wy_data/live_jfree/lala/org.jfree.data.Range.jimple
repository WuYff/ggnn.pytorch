public class org.jfree.data.Range extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private double lower;
    private double upper;

    public strictfp void <init>(double, double)
    {
        org.jfree.data.Range this;
        double lower, upper;
        byte $stack6;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack10, $stack11, $stack12;
        java.lang.String msg;
        java.lang.IllegalArgumentException $stack14;

        this := @this: org.jfree.data.Range;

        lower := @parameter0: double;

        upper := @parameter1: double;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack6 = lower cmpl upper;

        if $stack6 <= 0 goto label1;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Range(double, double): require lower (");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(lower);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") <= upper (");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(upper);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        msg = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack14 = new java.lang.IllegalArgumentException;

        specialinvoke $stack14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(msg);

        throw $stack14;

     label1:
        this.<org.jfree.data.Range: double lower> = lower;

        this.<org.jfree.data.Range: double upper> = upper;

        return;
    }

    public strictfp double getLowerBound()
    {
        org.jfree.data.Range this;
        double $stack1;

        this := @this: org.jfree.data.Range;

        $stack1 = this.<org.jfree.data.Range: double lower>;

        return $stack1;
    }

    public strictfp double getUpperBound()
    {
        org.jfree.data.Range this;
        double $stack1;

        this := @this: org.jfree.data.Range;

        $stack1 = this.<org.jfree.data.Range: double upper>;

        return $stack1;
    }

    public strictfp double getLength()
    {
        org.jfree.data.Range this;
        double $stack1, $stack2, $stack3;

        this := @this: org.jfree.data.Range;

        $stack2 = this.<org.jfree.data.Range: double upper>;

        $stack1 = this.<org.jfree.data.Range: double lower>;

        $stack3 = $stack2 - $stack1;

        return $stack3;
    }

    public strictfp double getCentralValue()
    {
        org.jfree.data.Range this;
        double $stack1, $stack2, $stack3, $stack4, $stack5;

        this := @this: org.jfree.data.Range;

        $stack1 = this.<org.jfree.data.Range: double lower>;

        $stack4 = $stack1 / 2.0;

        $stack2 = this.<org.jfree.data.Range: double upper>;

        $stack3 = $stack2 / 2.0;

        $stack5 = $stack4 + $stack3;

        return $stack5;
    }

    public strictfp boolean contains(double)
    {
        double value, $stack3, $stack5;
        org.jfree.data.Range this;
        byte $stack4, $stack6;
        boolean $stack7;

        this := @this: org.jfree.data.Range;

        value := @parameter0: double;

        $stack3 = this.<org.jfree.data.Range: double lower>;

        $stack4 = value cmpl $stack3;

        if $stack4 < 0 goto label1;

        $stack5 = this.<org.jfree.data.Range: double upper>;

        $stack6 = value cmpg $stack5;

        if $stack6 > 0 goto label1;

        $stack7 = 1;

        goto label2;

     label1:
        $stack7 = 0;

     label2:
        return $stack7;
    }

    public strictfp boolean intersects(double, double)
    {
        double b0, $stack5, $stack7, b1, $stack11;
        org.jfree.data.Range this;
        byte $stack6, $stack8, $stack9, $stack12;
        boolean $stack13, $stack10;

        this := @this: org.jfree.data.Range;

        b0 := @parameter0: double;

        b1 := @parameter1: double;

        $stack5 = this.<org.jfree.data.Range: double lower>;

        $stack6 = b0 cmpg $stack5;

        if $stack6 > 0 goto label3;

        $stack11 = this.<org.jfree.data.Range: double lower>;

        $stack12 = b1 cmpl $stack11;

        if $stack12 <= 0 goto label1;

        $stack13 = 1;

        goto label2;

     label1:
        $stack13 = 0;

     label2:
        return $stack13;

     label3:
        $stack7 = this.<org.jfree.data.Range: double upper>;

        $stack8 = b0 cmpg $stack7;

        if $stack8 >= 0 goto label4;

        $stack9 = b1 cmpl b0;

        if $stack9 < 0 goto label4;

        $stack10 = 1;

        goto label5;

     label4:
        $stack10 = 0;

     label5:
        return $stack10;
    }

    public strictfp boolean intersects(org.jfree.data.Range)
    {
        org.jfree.data.Range this, range;
        double $stack2, $stack3;
        boolean $stack4;

        this := @this: org.jfree.data.Range;

        range := @parameter0: org.jfree.data.Range;

        $stack2 = virtualinvoke range.<org.jfree.data.Range: double getLowerBound()>();

        $stack3 = virtualinvoke range.<org.jfree.data.Range: double getUpperBound()>();

        $stack4 = virtualinvoke this.<org.jfree.data.Range: boolean intersects(double,double)>($stack2, $stack3);

        return $stack4;
    }

    public strictfp double constrain(double)
    {
        double value, $stack6, $stack8, result;
        org.jfree.data.Range this;
        boolean $stack5;
        byte $stack7, $stack9;

        this := @this: org.jfree.data.Range;

        value := @parameter0: double;

        result = value;

        $stack5 = virtualinvoke this.<org.jfree.data.Range: boolean contains(double)>(value);

        if $stack5 != 0 goto label2;

        $stack6 = this.<org.jfree.data.Range: double upper>;

        $stack7 = value cmpl $stack6;

        if $stack7 <= 0 goto label1;

        result = this.<org.jfree.data.Range: double upper>;

        goto label2;

     label1:
        $stack8 = this.<org.jfree.data.Range: double lower>;

        $stack9 = value cmpg $stack8;

        if $stack9 >= 0 goto label2;

        result = this.<org.jfree.data.Range: double lower>;

     label2:
        return result;
    }

    public static strictfp org.jfree.data.Range combine(org.jfree.data.Range, org.jfree.data.Range)
    {
        org.jfree.data.Range range1, range2, $stack12;
        double $stack6, $stack7, l, $stack9, $stack10, u;

        range1 := @parameter0: org.jfree.data.Range;

        range2 := @parameter1: org.jfree.data.Range;

        if range1 != null goto label1;

        return range2;

     label1:
        if range2 != null goto label2;

        return range1;

     label2:
        $stack6 = virtualinvoke range1.<org.jfree.data.Range: double getLowerBound()>();

        $stack7 = virtualinvoke range2.<org.jfree.data.Range: double getLowerBound()>();

        l = staticinvoke <java.lang.Math: double min(double,double)>($stack6, $stack7);

        $stack9 = virtualinvoke range1.<org.jfree.data.Range: double getUpperBound()>();

        $stack10 = virtualinvoke range2.<org.jfree.data.Range: double getUpperBound()>();

        u = staticinvoke <java.lang.Math: double max(double,double)>($stack9, $stack10);

        $stack12 = new org.jfree.data.Range;

        specialinvoke $stack12.<org.jfree.data.Range: void <init>(double,double)>(l, u);

        return $stack12;
    }

    public static strictfp org.jfree.data.Range combineIgnoringNaN(org.jfree.data.Range, org.jfree.data.Range)
    {
        org.jfree.data.Range range1, range2, $stack13;
        double $stack6, $stack7, l, $stack9, $stack10, u;
        boolean $stack12, $stack14, $stack17, $stack18;

        range1 := @parameter0: org.jfree.data.Range;

        range2 := @parameter1: org.jfree.data.Range;

        if range1 != null goto label2;

        if range2 == null goto label1;

        $stack18 = virtualinvoke range2.<org.jfree.data.Range: boolean isNaNRange()>();

        if $stack18 == 0 goto label1;

        return null;

     label1:
        return range2;

     label2:
        if range2 != null goto label4;

        $stack17 = virtualinvoke range1.<org.jfree.data.Range: boolean isNaNRange()>();

        if $stack17 == 0 goto label3;

        return null;

     label3:
        return range1;

     label4:
        $stack6 = virtualinvoke range1.<org.jfree.data.Range: double getLowerBound()>();

        $stack7 = virtualinvoke range2.<org.jfree.data.Range: double getLowerBound()>();

        l = staticinvoke <org.jfree.data.Range: double min(double,double)>($stack6, $stack7);

        $stack9 = virtualinvoke range1.<org.jfree.data.Range: double getUpperBound()>();

        $stack10 = virtualinvoke range2.<org.jfree.data.Range: double getUpperBound()>();

        u = staticinvoke <org.jfree.data.Range: double max(double,double)>($stack9, $stack10);

        $stack12 = staticinvoke <java.lang.Double: boolean isNaN(double)>(l);

        if $stack12 == 0 goto label5;

        $stack14 = staticinvoke <java.lang.Double: boolean isNaN(double)>(u);

        if $stack14 == 0 goto label5;

        return null;

     label5:
        $stack13 = new org.jfree.data.Range;

        specialinvoke $stack13.<org.jfree.data.Range: void <init>(double,double)>(l, u);

        return $stack13;
    }

    private static strictfp double min(double, double)
    {
        double d1, d2, $stack6;
        boolean $stack4, $stack5;

        d1 := @parameter0: double;

        d2 := @parameter1: double;

        $stack4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $stack4 == 0 goto label1;

        return d2;

     label1:
        $stack5 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $stack5 == 0 goto label2;

        return d1;

     label2:
        $stack6 = staticinvoke <java.lang.Math: double min(double,double)>(d1, d2);

        return $stack6;
    }

    private static strictfp double max(double, double)
    {
        double d1, d2, $stack6;
        boolean $stack4, $stack5;

        d1 := @parameter0: double;

        d2 := @parameter1: double;

        $stack4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $stack4 == 0 goto label1;

        return d2;

     label1:
        $stack5 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $stack5 == 0 goto label2;

        return d1;

     label2:
        $stack6 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d2);

        return $stack6;
    }

    public static strictfp org.jfree.data.Range expandToInclude(org.jfree.data.Range, double)
    {
        org.jfree.data.Range range, $stack7, $stack9, $stack11;
        double value, $stack3, $stack5, $stack8, $stack10;
        byte $stack4, $stack6;

        range := @parameter0: org.jfree.data.Range;

        value := @parameter1: double;

        if range != null goto label1;

        $stack11 = new org.jfree.data.Range;

        specialinvoke $stack11.<org.jfree.data.Range: void <init>(double,double)>(value, value);

        return $stack11;

     label1:
        $stack3 = virtualinvoke range.<org.jfree.data.Range: double getLowerBound()>();

        $stack4 = value cmpg $stack3;

        if $stack4 >= 0 goto label2;

        $stack9 = new org.jfree.data.Range;

        $stack10 = virtualinvoke range.<org.jfree.data.Range: double getUpperBound()>();

        specialinvoke $stack9.<org.jfree.data.Range: void <init>(double,double)>(value, $stack10);

        return $stack9;

     label2:
        $stack5 = virtualinvoke range.<org.jfree.data.Range: double getUpperBound()>();

        $stack6 = value cmpl $stack5;

        if $stack6 <= 0 goto label3;

        $stack7 = new org.jfree.data.Range;

        $stack8 = virtualinvoke range.<org.jfree.data.Range: double getLowerBound()>();

        specialinvoke $stack7.<org.jfree.data.Range: void <init>(double,double)>($stack8, value);

        return $stack7;

     label3:
        return range;
    }

    public static strictfp org.jfree.data.Range expand(org.jfree.data.Range, double, double)
    {
        org.jfree.data.Range range, $stack17;
        double length, $stack12, lowerMargin, $stack13, $stack14, upperMargin, $stack15, $stack18, $stack19, lower, upper;
        byte $stack16;

        range := @parameter0: org.jfree.data.Range;

        lowerMargin := @parameter1: double;

        upperMargin := @parameter2: double;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(range, "range");

        length = virtualinvoke range.<org.jfree.data.Range: double getLength()>();

        $stack12 = virtualinvoke range.<org.jfree.data.Range: double getLowerBound()>();

        $stack13 = length * lowerMargin;

        lower = $stack12 - $stack13;

        $stack14 = virtualinvoke range.<org.jfree.data.Range: double getUpperBound()>();

        $stack15 = length * upperMargin;

        upper = $stack14 + $stack15;

        $stack16 = lower cmpl upper;

        if $stack16 <= 0 goto label1;

        $stack19 = lower / 2.0;

        $stack18 = upper / 2.0;

        lower = $stack19 + $stack18;

        upper = lower;

     label1:
        $stack17 = new org.jfree.data.Range;

        specialinvoke $stack17.<org.jfree.data.Range: void <init>(double,double)>(lower, upper);

        return $stack17;
    }

    public static strictfp org.jfree.data.Range shift(org.jfree.data.Range, double)
    {
        org.jfree.data.Range base, $stack3;
        double delta;

        base := @parameter0: org.jfree.data.Range;

        delta := @parameter1: double;

        $stack3 = staticinvoke <org.jfree.data.Range: org.jfree.data.Range shift(org.jfree.data.Range,double,boolean)>(base, delta, 0);

        return $stack3;
    }

    public static strictfp org.jfree.data.Range shift(org.jfree.data.Range, double, boolean)
    {
        org.jfree.data.Range base, $stack4, $stack9;
        boolean allowZeroCrossing;
        double $stack5, delta, $stack6, $stack7, $stack8, $stack10, $stack11, $stack12, $stack13;

        base := @parameter0: org.jfree.data.Range;

        delta := @parameter1: double;

        allowZeroCrossing := @parameter2: boolean;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(base, "base");

        if allowZeroCrossing == 0 goto label1;

        $stack9 = new org.jfree.data.Range;

        $stack10 = virtualinvoke base.<org.jfree.data.Range: double getLowerBound()>();

        $stack11 = $stack10 + delta;

        $stack12 = virtualinvoke base.<org.jfree.data.Range: double getUpperBound()>();

        $stack13 = $stack12 + delta;

        specialinvoke $stack9.<org.jfree.data.Range: void <init>(double,double)>($stack11, $stack13);

        return $stack9;

     label1:
        $stack4 = new org.jfree.data.Range;

        $stack5 = virtualinvoke base.<org.jfree.data.Range: double getLowerBound()>();

        $stack6 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($stack5, delta);

        $stack7 = virtualinvoke base.<org.jfree.data.Range: double getUpperBound()>();

        $stack8 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($stack7, delta);

        specialinvoke $stack4.<org.jfree.data.Range: void <init>(double,double)>($stack6, $stack8);

        return $stack4;
    }

    private static strictfp double shiftWithNoZeroCrossing(double, double)
    {
        double value, delta, $stack6, $stack7, $stack8, $stack9, $stack10;
        byte $stack4, $stack5;

        value := @parameter0: double;

        delta := @parameter1: double;

        $stack4 = value cmpl 0.0;

        if $stack4 <= 0 goto label1;

        $stack9 = value + delta;

        $stack10 = staticinvoke <java.lang.Math: double max(double,double)>($stack9, 0.0);

        return $stack10;

     label1:
        $stack5 = value cmpg 0.0;

        if $stack5 >= 0 goto label2;

        $stack7 = value + delta;

        $stack8 = staticinvoke <java.lang.Math: double min(double,double)>($stack7, 0.0);

        return $stack8;

     label2:
        $stack6 = value + delta;

        return $stack6;
    }

    public static strictfp org.jfree.data.Range scale(org.jfree.data.Range, double)
    {
        org.jfree.data.Range base, $stack4;
        double factor, $stack5, $stack6, $stack7, $stack8;
        byte $stack3;
        java.lang.IllegalArgumentException $stack9;

        base := @parameter0: org.jfree.data.Range;

        factor := @parameter1: double;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(base, "base");

        $stack3 = factor cmpg 0.0;

        if $stack3 >= 0 goto label1;

        $stack9 = new java.lang.IllegalArgumentException;

        specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative \'factor\' argument.");

        throw $stack9;

     label1:
        $stack4 = new org.jfree.data.Range;

        $stack5 = virtualinvoke base.<org.jfree.data.Range: double getLowerBound()>();

        $stack6 = $stack5 * factor;

        $stack7 = virtualinvoke base.<org.jfree.data.Range: double getUpperBound()>();

        $stack8 = $stack7 * factor;

        specialinvoke $stack4.<org.jfree.data.Range: void <init>(double,double)>($stack6, $stack8);

        return $stack4;
    }

    public strictfp boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        boolean $stack3;
        org.jfree.data.Range range, this;
        double $stack4, $stack5, $stack7, $stack8;
        byte $stack6, $stack9;

        this := @this: org.jfree.data.Range;

        obj := @parameter0: java.lang.Object;

        $stack3 = obj instanceof org.jfree.data.Range;

        if $stack3 != 0 goto label1;

        return 0;

     label1:
        range = (org.jfree.data.Range) obj;

        $stack5 = this.<org.jfree.data.Range: double lower>;

        $stack4 = range.<org.jfree.data.Range: double lower>;

        $stack6 = $stack5 cmpl $stack4;

        if $stack6 == 0 goto label2;

        return 0;

     label2:
        $stack8 = this.<org.jfree.data.Range: double upper>;

        $stack7 = range.<org.jfree.data.Range: double upper>;

        $stack9 = $stack8 cmpl $stack7;

        if $stack9 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public strictfp boolean isNaNRange()
    {
        org.jfree.data.Range this;
        double $stack1, $stack3;
        boolean $stack2, $stack4, $stack5;

        this := @this: org.jfree.data.Range;

        $stack1 = this.<org.jfree.data.Range: double lower>;

        $stack2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($stack1);

        if $stack2 == 0 goto label1;

        $stack3 = this.<org.jfree.data.Range: double upper>;

        $stack4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($stack3);

        if $stack4 == 0 goto label1;

        $stack5 = 1;

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        return $stack5;
    }

    public strictfp int hashCode()
    {
        org.jfree.data.Range this;
        double $stack4, $stack8;
        long $stack6, $stack7, $stack10, $stack11, temp;
        int $stack12, $stack13, result;

        this := @this: org.jfree.data.Range;

        $stack4 = this.<org.jfree.data.Range: double lower>;

        temp = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack4);

        $stack6 = temp >>> 32;

        $stack7 = temp ^ $stack6;

        result = (int) $stack7;

        $stack8 = this.<org.jfree.data.Range: double upper>;

        temp = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack8);

        $stack13 = 29 * result;

        $stack10 = temp >>> 32;

        $stack11 = temp ^ $stack10;

        $stack12 = (int) $stack11;

        result = $stack13 + $stack12;

        return result;
    }

    public strictfp java.lang.String toString()
    {
        java.lang.StringBuilder $stack1, $stack2, $stack4, $stack5, $stack7, $stack8;
        org.jfree.data.Range this;
        double $stack3, $stack6;
        java.lang.String $stack9;

        this := @this: org.jfree.data.Range;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Range[");

        $stack3 = this.<org.jfree.data.Range: double lower>;

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack6 = this.<org.jfree.data.Range: double upper>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack9;
    }

    public static void <clinit>()
    {
        <org.jfree.data.Range: long serialVersionUID> = -906333695431863380L;

        return;
    }
}
