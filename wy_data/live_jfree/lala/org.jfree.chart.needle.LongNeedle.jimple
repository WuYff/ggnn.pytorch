public class org.jfree.chart.needle.LongNeedle extends org.jfree.chart.needle.MeterNeedle implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.jfree.chart.needle.LongNeedle this;

        this := @this: org.jfree.chart.needle.LongNeedle;

        specialinvoke this.<org.jfree.chart.needle.MeterNeedle: void <init>()>();

        virtualinvoke this.<org.jfree.chart.needle.LongNeedle: void setRotateY(double)>(0.8);

        return;
    }

    protected void drawNeedle(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, double)
    {
        java.awt.geom.GeneralPath $stack19, $stack20, $stack21;
        java.awt.geom.Rectangle2D plotArea;
        double $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, angle, $stack49, $stack50;
        float minX, minY, maxX, maxY, midX, midY, $stack34, $stack35, y;
        byte $stack36, $stack46;
        java.awt.geom.Point2D rotate;
        org.jfree.chart.needle.LongNeedle this;
        java.awt.Paint $stack38, $stack39, $stack41, $stack42, $stack44, $stack37;
        java.awt.Graphics2D g2;
        java.awt.Stroke $stack40;
        java.awt.geom.AffineTransform $stack48, $stack51, $stack53, $stack55;
        java.awt.Shape s1, s2, s3;

        this := @this: org.jfree.chart.needle.LongNeedle;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        rotate := @parameter2: java.awt.geom.Point2D;

        angle := @parameter3: double;

        $stack19 = new java.awt.geom.GeneralPath;

        specialinvoke $stack19.<java.awt.geom.GeneralPath: void <init>()>();

        $stack20 = new java.awt.geom.GeneralPath;

        specialinvoke $stack20.<java.awt.geom.GeneralPath: void <init>()>();

        $stack21 = new java.awt.geom.GeneralPath;

        specialinvoke $stack21.<java.awt.geom.GeneralPath: void <init>()>();

        $stack22 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        minX = (float) $stack22;

        $stack23 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        minY = (float) $stack23;

        $stack24 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        maxX = (float) $stack24;

        $stack25 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        maxY = (float) $stack25;

        $stack26 = (double) minX;

        $stack27 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack28 = $stack27 * 0.5;

        $stack29 = $stack26 + $stack28;

        midX = (float) $stack29;

        $stack30 = (double) minY;

        $stack31 = virtualinvoke plotArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack32 = $stack31 * 0.8;

        $stack33 = $stack30 + $stack32;

        midY = (float) $stack33;

        $stack34 = maxY - midY;

        $stack35 = 2.0F * $stack34;

        y = maxY - $stack35;

        $stack36 = y cmpg minY;

        if $stack36 >= 0 goto label1;

        y = minY;

     label1:
        virtualinvoke $stack19.<java.awt.geom.GeneralPath: void moveTo(float,float)>(minX, midY);

        virtualinvoke $stack19.<java.awt.geom.GeneralPath: void lineTo(float,float)>(midX, minY);

        virtualinvoke $stack19.<java.awt.geom.GeneralPath: void lineTo(float,float)>(midX, y);

        virtualinvoke $stack19.<java.awt.geom.GeneralPath: void closePath()>();

        virtualinvoke $stack20.<java.awt.geom.GeneralPath: void moveTo(float,float)>(maxX, midY);

        virtualinvoke $stack20.<java.awt.geom.GeneralPath: void lineTo(float,float)>(midX, minY);

        virtualinvoke $stack20.<java.awt.geom.GeneralPath: void lineTo(float,float)>(midX, y);

        virtualinvoke $stack20.<java.awt.geom.GeneralPath: void closePath()>();

        virtualinvoke $stack21.<java.awt.geom.GeneralPath: void moveTo(float,float)>(minX, midY);

        virtualinvoke $stack21.<java.awt.geom.GeneralPath: void lineTo(float,float)>(midX, maxY);

        virtualinvoke $stack21.<java.awt.geom.GeneralPath: void lineTo(float,float)>(maxX, midY);

        virtualinvoke $stack21.<java.awt.geom.GeneralPath: void lineTo(float,float)>(midX, y);

        virtualinvoke $stack21.<java.awt.geom.GeneralPath: void closePath()>();

        s1 = $stack19;

        s2 = $stack20;

        s3 = $stack21;

        if rotate == null goto label2;

        $stack46 = angle cmpl 0.0;

        if $stack46 == 0 goto label2;

        $stack48 = virtualinvoke this.<org.jfree.chart.needle.LongNeedle: java.awt.geom.AffineTransform getTransform()>();

        $stack49 = virtualinvoke rotate.<java.awt.geom.Point2D: double getX()>();

        $stack50 = virtualinvoke rotate.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $stack48.<java.awt.geom.AffineTransform: void setToRotation(double,double,double)>(angle, $stack49, $stack50);

        $stack51 = <org.jfree.chart.needle.LongNeedle: java.awt.geom.AffineTransform transform>;

        s1 = virtualinvoke $stack19.<java.awt.geom.GeneralPath: java.awt.Shape createTransformedShape(java.awt.geom.AffineTransform)>($stack51);

        $stack53 = <org.jfree.chart.needle.LongNeedle: java.awt.geom.AffineTransform transform>;

        s2 = virtualinvoke $stack20.<java.awt.geom.GeneralPath: java.awt.Shape createTransformedShape(java.awt.geom.AffineTransform)>($stack53);

        $stack55 = <org.jfree.chart.needle.LongNeedle: java.awt.geom.AffineTransform transform>;

        s3 = virtualinvoke $stack21.<java.awt.geom.GeneralPath: java.awt.Shape createTransformedShape(java.awt.geom.AffineTransform)>($stack55);

     label2:
        $stack37 = virtualinvoke this.<org.jfree.chart.needle.LongNeedle: java.awt.Paint getHighlightPaint()>();

        if $stack37 == null goto label3;

        $stack44 = virtualinvoke this.<org.jfree.chart.needle.LongNeedle: java.awt.Paint getHighlightPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack44);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(s3);

     label3:
        $stack38 = virtualinvoke this.<org.jfree.chart.needle.LongNeedle: java.awt.Paint getFillPaint()>();

        if $stack38 == null goto label4;

        $stack42 = virtualinvoke this.<org.jfree.chart.needle.LongNeedle: java.awt.Paint getFillPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack42);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(s1);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(s2);

     label4:
        $stack39 = virtualinvoke this.<org.jfree.chart.needle.LongNeedle: java.awt.Paint getOutlinePaint()>();

        if $stack39 == null goto label5;

        $stack40 = virtualinvoke this.<org.jfree.chart.needle.LongNeedle: java.awt.Stroke getOutlineStroke()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack40);

        $stack41 = virtualinvoke this.<org.jfree.chart.needle.LongNeedle: java.awt.Paint getOutlinePaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack41);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(s1);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(s2);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(s3);

     label5:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.needle.LongNeedle this;
        boolean $stack2, $stack3;

        this := @this: org.jfree.chart.needle.LongNeedle;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack2 = obj instanceof org.jfree.chart.needle.LongNeedle;

        if $stack2 != 0 goto label2;

        return 0;

     label2:
        $stack3 = specialinvoke this.<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>(obj);

        return $stack3;
    }

    public int hashCode()
    {
        org.jfree.chart.needle.LongNeedle this;
        int $stack1;

        this := @this: org.jfree.chart.needle.LongNeedle;

        $stack1 = specialinvoke this.<org.jfree.chart.needle.MeterNeedle: int hashCode()>();

        return $stack1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.needle.LongNeedle this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.needle.LongNeedle;

        $stack1 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.needle.LongNeedle: long serialVersionUID> = -4319985779783688159L;

        return;
    }
}
