public class org.jfree.chart.block.BlockContainer extends org.jfree.chart.block.AbstractBlock implements org.jfree.chart.block.Block, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private java.util.List blocks;
    private org.jfree.chart.block.Arrangement arrangement;

    public void <init>()
    {
        org.jfree.chart.block.BlockContainer this;
        org.jfree.chart.block.BorderArrangement $stack1;

        this := @this: org.jfree.chart.block.BlockContainer;

        $stack1 = new org.jfree.chart.block.BorderArrangement;

        specialinvoke $stack1.<org.jfree.chart.block.BorderArrangement: void <init>()>();

        specialinvoke this.<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>($stack1);

        return;
    }

    public void <init>(org.jfree.chart.block.Arrangement)
    {
        org.jfree.chart.block.BlockContainer this;
        org.jfree.chart.block.Arrangement arrangement;
        java.util.ArrayList $stack2;

        this := @this: org.jfree.chart.block.BlockContainer;

        arrangement := @parameter0: org.jfree.chart.block.Arrangement;

        specialinvoke this.<org.jfree.chart.block.AbstractBlock: void <init>()>();

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(arrangement, "arrangement");

        this.<org.jfree.chart.block.BlockContainer: org.jfree.chart.block.Arrangement arrangement> = arrangement;

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.chart.block.BlockContainer: java.util.List blocks> = $stack2;

        return;
    }

    public org.jfree.chart.block.Arrangement getArrangement()
    {
        org.jfree.chart.block.BlockContainer this;
        org.jfree.chart.block.Arrangement $stack1;

        this := @this: org.jfree.chart.block.BlockContainer;

        $stack1 = this.<org.jfree.chart.block.BlockContainer: org.jfree.chart.block.Arrangement arrangement>;

        return $stack1;
    }

    public void setArrangement(org.jfree.chart.block.Arrangement)
    {
        org.jfree.chart.block.Arrangement arrangement;
        org.jfree.chart.block.BlockContainer this;

        this := @this: org.jfree.chart.block.BlockContainer;

        arrangement := @parameter0: org.jfree.chart.block.Arrangement;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(arrangement, "arrangement");

        this.<org.jfree.chart.block.BlockContainer: org.jfree.chart.block.Arrangement arrangement> = arrangement;

        return;
    }

    public boolean isEmpty()
    {
        org.jfree.chart.block.BlockContainer this;
        java.util.List $stack1;
        boolean $stack2;

        this := @this: org.jfree.chart.block.BlockContainer;

        $stack1 = this.<org.jfree.chart.block.BlockContainer: java.util.List blocks>;

        $stack2 = interfaceinvoke $stack1.<java.util.List: boolean isEmpty()>();

        return $stack2;
    }

    public java.util.List getBlocks()
    {
        org.jfree.chart.block.BlockContainer this;
        java.util.List $stack1, $stack2;

        this := @this: org.jfree.chart.block.BlockContainer;

        $stack1 = this.<org.jfree.chart.block.BlockContainer: java.util.List blocks>;

        $stack2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack1);

        return $stack2;
    }

    public void add(org.jfree.chart.block.Block)
    {
        org.jfree.chart.block.BlockContainer this;
        org.jfree.chart.block.Block block;

        this := @this: org.jfree.chart.block.BlockContainer;

        block := @parameter0: org.jfree.chart.block.Block;

        virtualinvoke this.<org.jfree.chart.block.BlockContainer: void add(org.jfree.chart.block.Block,java.lang.Object)>(block, null);

        return;
    }

    public void add(org.jfree.chart.block.Block, java.lang.Object)
    {
        org.jfree.chart.block.BlockContainer this;
        org.jfree.chart.block.Block block;
        java.util.List $stack3;
        java.lang.Object key;
        org.jfree.chart.block.Arrangement $stack5;

        this := @this: org.jfree.chart.block.BlockContainer;

        block := @parameter0: org.jfree.chart.block.Block;

        key := @parameter1: java.lang.Object;

        $stack3 = this.<org.jfree.chart.block.BlockContainer: java.util.List blocks>;

        interfaceinvoke $stack3.<java.util.List: boolean add(java.lang.Object)>(block);

        $stack5 = this.<org.jfree.chart.block.BlockContainer: org.jfree.chart.block.Arrangement arrangement>;

        interfaceinvoke $stack5.<org.jfree.chart.block.Arrangement: void add(org.jfree.chart.block.Block,java.lang.Object)>(block, key);

        return;
    }

    public void clear()
    {
        org.jfree.chart.block.BlockContainer this;
        java.util.List $stack1;
        org.jfree.chart.block.Arrangement $stack2;

        this := @this: org.jfree.chart.block.BlockContainer;

        $stack1 = this.<org.jfree.chart.block.BlockContainer: java.util.List blocks>;

        interfaceinvoke $stack1.<java.util.List: void clear()>();

        $stack2 = this.<org.jfree.chart.block.BlockContainer: org.jfree.chart.block.Arrangement arrangement>;

        interfaceinvoke $stack2.<org.jfree.chart.block.Arrangement: void clear()>();

        return;
    }

    public org.jfree.chart.ui.Size2D arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)
    {
        org.jfree.chart.block.BlockContainer this;
        java.awt.Graphics2D g2;
        org.jfree.chart.block.RectangleConstraint constraint;
        org.jfree.chart.block.Arrangement $stack3;
        org.jfree.chart.ui.Size2D $stack4;

        this := @this: org.jfree.chart.block.BlockContainer;

        g2 := @parameter0: java.awt.Graphics2D;

        constraint := @parameter1: org.jfree.chart.block.RectangleConstraint;

        $stack3 = this.<org.jfree.chart.block.BlockContainer: org.jfree.chart.block.Arrangement arrangement>;

        $stack4 = interfaceinvoke $stack3.<org.jfree.chart.block.Arrangement: org.jfree.chart.ui.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>(this, g2, constraint);

        return $stack4;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.block.BlockContainer this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D area;

        this := @this: org.jfree.chart.block.BlockContainer;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        virtualinvoke this.<org.jfree.chart.block.BlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>(g2, area, null);

        return;
    }

    public java.lang.Object draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)
    {
        java.lang.Object params, $stack24, r, $stack15;
        boolean $stack14, $stack37, $stack39, $stack21;
        java.awt.geom.Rectangle2D area, bounds, contentArea;
        org.jfree.chart.block.BlockContainer this;
        java.awt.Graphics2D g2;
        java.util.Iterator iterator;
        org.jfree.chart.block.BlockResult $stack22, block#49;
        java.awt.geom.Rectangle2D$Double $stack26;
        double $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34;
        org.jfree.chart.block.EntityBlockResult ebr;
        org.jfree.chart.entity.EntityCollection ec;
        org.jfree.chart.block.EntityBlockParams ebp;
        org.jfree.chart.entity.StandardEntityCollection $stack52, sec;
        java.util.List $stack19;
        org.jfree.chart.block.Block block;

        this := @this: org.jfree.chart.block.BlockContainer;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        params := @parameter2: java.lang.Object;

        sec = null;

        $stack14 = params instanceof org.jfree.chart.block.EntityBlockParams;

        if $stack14 == 0 goto label1;

        ebp = (org.jfree.chart.block.EntityBlockParams) params;

        $stack39 = interfaceinvoke ebp.<org.jfree.chart.block.EntityBlockParams: boolean getGenerateEntities()>();

        if $stack39 == 0 goto label1;

        $stack52 = new org.jfree.chart.entity.StandardEntityCollection;

        specialinvoke $stack52.<org.jfree.chart.entity.StandardEntityCollection: void <init>()>();

        sec = $stack52;

     label1:
        $stack15 = virtualinvoke area.<java.awt.geom.Rectangle2D: java.lang.Object clone()>();

        contentArea = (java.awt.geom.Rectangle2D) $stack15;

        contentArea = virtualinvoke this.<org.jfree.chart.block.BlockContainer: java.awt.geom.Rectangle2D trimMargin(java.awt.geom.Rectangle2D)>(contentArea);

        virtualinvoke this.<org.jfree.chart.block.BlockContainer: void drawBorder(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, contentArea);

        contentArea = virtualinvoke this.<org.jfree.chart.block.BlockContainer: java.awt.geom.Rectangle2D trimBorder(java.awt.geom.Rectangle2D)>(contentArea);

        virtualinvoke this.<org.jfree.chart.block.BlockContainer: java.awt.geom.Rectangle2D trimPadding(java.awt.geom.Rectangle2D)>(contentArea);

        $stack19 = this.<org.jfree.chart.block.BlockContainer: java.util.List blocks>;

        iterator = interfaceinvoke $stack19.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack21 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack21 == 0 goto label4;

        $stack24 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        block = (org.jfree.chart.block.Block) $stack24;

        bounds = interfaceinvoke block.<org.jfree.chart.block.Block: java.awt.geom.Rectangle2D getBounds()>();

        $stack26 = new java.awt.geom.Rectangle2D$Double;

        $stack27 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getX()>();

        $stack28 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack29 = $stack27 + $stack28;

        $stack30 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getY()>();

        $stack31 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack32 = $stack30 + $stack31;

        $stack33 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack34 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack26.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack29, $stack32, $stack33, $stack34);

        r = interfaceinvoke block.<org.jfree.chart.block.Block: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>(g2, $stack26, params);

        if sec == null goto label3;

        $stack37 = r instanceof org.jfree.chart.block.EntityBlockResult;

        if $stack37 == 0 goto label3;

        ebr = (org.jfree.chart.block.EntityBlockResult) r;

        ec = interfaceinvoke ebr.<org.jfree.chart.block.EntityBlockResult: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        virtualinvoke sec.<org.jfree.chart.entity.StandardEntityCollection: void addAll(org.jfree.chart.entity.EntityCollection)>(ec);

     label3:
        goto label2;

     label4:
        block#49 = null;

        if sec == null goto label5;

        $stack22 = new org.jfree.chart.block.BlockResult;

        specialinvoke $stack22.<org.jfree.chart.block.BlockResult: void <init>()>();

        block#49 = $stack22;

        virtualinvoke $stack22.<org.jfree.chart.block.BlockResult: void setEntityCollection(org.jfree.chart.entity.EntityCollection)>(sec);

     label5:
        return block#49;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.block.BlockContainer this, that;
        boolean $stack3, $stack4, $stack7, $stack10;
        org.jfree.chart.block.Arrangement $stack5, $stack6;
        java.util.List $stack8, $stack9;

        this := @this: org.jfree.chart.block.BlockContainer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.block.BlockContainer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        $stack4 = specialinvoke this.<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>(obj);

        if $stack4 != 0 goto label3;

        return 0;

     label3:
        that = (org.jfree.chart.block.BlockContainer) obj;

        $stack6 = this.<org.jfree.chart.block.BlockContainer: org.jfree.chart.block.Arrangement arrangement>;

        $stack5 = that.<org.jfree.chart.block.BlockContainer: org.jfree.chart.block.Arrangement arrangement>;

        $stack7 = virtualinvoke $stack6.<java.lang.Object: boolean equals(java.lang.Object)>($stack5);

        if $stack7 != 0 goto label4;

        return 0;

     label4:
        $stack9 = this.<org.jfree.chart.block.BlockContainer: java.util.List blocks>;

        $stack8 = that.<org.jfree.chart.block.BlockContainer: java.util.List blocks>;

        $stack10 = interfaceinvoke $stack9.<java.util.List: boolean equals(java.lang.Object)>($stack8);

        if $stack10 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.block.BlockContainer this;
        java.util.List $stack2;
        int $stack3, $stack4, $stack6, $stack7, hash#2;
        org.jfree.chart.block.Arrangement $stack5;

        this := @this: org.jfree.chart.block.BlockContainer;

        $stack3 = 97 * 3;

        $stack2 = this.<org.jfree.chart.block.BlockContainer: java.util.List blocks>;

        $stack4 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack2);

        hash#2 = $stack3 + $stack4;

        $stack6 = 97 * hash#2;

        $stack5 = this.<org.jfree.chart.block.BlockContainer: org.jfree.chart.block.Arrangement arrangement>;

        $stack7 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($stack5);

        hash#2 = $stack6 + $stack7;

        return hash#2;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.block.BlockContainer this, clone;
        java.lang.Object $stack2;

        this := @this: org.jfree.chart.block.BlockContainer;

        $stack2 = specialinvoke this.<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>();

        clone = (org.jfree.chart.block.BlockContainer) $stack2;

        return clone;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.block.BlockContainer: long serialVersionUID> = 8199508075695195293L;

        return;
    }
}
