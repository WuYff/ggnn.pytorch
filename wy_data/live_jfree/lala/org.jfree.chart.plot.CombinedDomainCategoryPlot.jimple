public class org.jfree.chart.plot.CombinedDomainCategoryPlot extends org.jfree.chart.plot.CategoryPlot implements org.jfree.chart.event.PlotChangeListener
{
    private static final long serialVersionUID;
    private java.util.List subplots;
    private double gap;
    private transient java.awt.geom.Rectangle2D[] subplotAreas;

    public void <init>()
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.axis.CategoryAxis $stack1;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        $stack1 = new org.jfree.chart.axis.CategoryAxis;

        specialinvoke $stack1.<org.jfree.chart.axis.CategoryAxis: void <init>()>();

        specialinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void <init>(org.jfree.chart.axis.CategoryAxis)>($stack1);

        return;
    }

    public void <init>(org.jfree.chart.axis.CategoryAxis)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.axis.CategoryAxis domainAxis;
        java.util.ArrayList $stack2;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        domainAxis := @parameter0: org.jfree.chart.axis.CategoryAxis;

        specialinvoke this.<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>(null, domainAxis, null, null);

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>()>();

        this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots> = $stack2;

        this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: double gap> = 5.0;

        return;
    }

    public double getGap()
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: double gap>;

        return $stack1;
    }

    public void setGap(double)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        double gap;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        gap := @parameter0: double;

        this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: double gap> = gap;

        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void fireChangeEvent()>();

        return;
    }

    public void add(org.jfree.chart.plot.CategoryPlot)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.plot.CategoryPlot subplot;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        subplot := @parameter0: org.jfree.chart.plot.CategoryPlot;

        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void add(org.jfree.chart.plot.CategoryPlot,int)>(subplot, 1);

        return;
    }

    public void add(org.jfree.chart.plot.CategoryPlot, int)
    {
        org.jfree.chart.plot.CategoryPlot subplot;
        int weight;
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.ui.RectangleInsets $stack4;
        org.jfree.chart.plot.PlotOrientation $stack5;
        java.util.List $stack6;
        org.jfree.chart.axis.CategoryAxis axis;
        java.lang.IllegalArgumentException $stack10;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        subplot := @parameter0: org.jfree.chart.plot.CategoryPlot;

        weight := @parameter1: int;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(subplot, "subplot");

        if weight >= 1 goto label1;

        $stack10 = new java.lang.IllegalArgumentException;

        specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Require weight >= 1.");

        throw $stack10;

     label1:
        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void setParent(org.jfree.chart.plot.Plot)>(this);

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void setWeight(int)>(weight);

        $stack4 = new org.jfree.chart.ui.RectangleInsets;

        specialinvoke $stack4.<org.jfree.chart.ui.RectangleInsets: void <init>(double,double,double,double)>(0.0, 0.0, 0.0, 0.0);

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void setInsets(org.jfree.chart.ui.RectangleInsets)>($stack4);

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void setDomainAxis(org.jfree.chart.axis.CategoryAxis)>(null);

        $stack5 = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>($stack5);

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void addChangeListener(org.jfree.chart.event.PlotChangeListener)>(this);

        $stack6 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        interfaceinvoke $stack6.<java.util.List: boolean add(java.lang.Object)>(subplot);

        axis = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis()>();

        if axis == null goto label2;

        virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: void configure()>();

     label2:
        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void fireChangeEvent()>();

        return;
    }

    public void remove(org.jfree.chart.plot.CategoryPlot)
    {
        org.jfree.chart.plot.CategoryPlot subplot;
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        java.util.List $stack6, $stack8, $stack14;
        int size, position, i;
        org.jfree.chart.axis.CategoryAxis domain;
        java.lang.Object $stack15;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        subplot := @parameter0: org.jfree.chart.plot.CategoryPlot;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(subplot, "subplot");

        position = -1;

        $stack6 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        size = interfaceinvoke $stack6.<java.util.List: int size()>();

        i = 0;

     label1:
        if position != -1 goto label3;

        if i >= size goto label3;

        $stack14 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack15 = interfaceinvoke $stack14.<java.util.List: java.lang.Object get(int)>(i);

        if $stack15 != subplot goto label2;

        position = i;

     label2:
        i = i + 1;

        goto label1;

     label3:
        if position == -1 goto label5;

        $stack8 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        interfaceinvoke $stack8.<java.util.List: java.lang.Object remove(int)>(position);

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void setParent(org.jfree.chart.plot.Plot)>(null);

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void removeChangeListener(org.jfree.chart.event.PlotChangeListener)>(this);

        domain = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis()>();

        if domain == null goto label4;

        virtualinvoke domain.<org.jfree.chart.axis.CategoryAxis: void configure()>();

     label4:
        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void fireChangeEvent()>();

     label5:
        return;
    }

    public java.util.List getSubplots()
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        java.util.List $stack1, $stack2, $stack3, $stack4;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        $stack1 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        if $stack1 == null goto label1;

        $stack3 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack3);

        return $stack4;

     label1:
        $stack2 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $stack2;
    }

    public org.jfree.chart.plot.CategoryPlot findSubplot(org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;
        int subplotIndex;
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        java.util.List $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.plot.CategoryPlot result;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        info := @parameter0: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter1: java.awt.geom.Point2D;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(info, "info");

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(source, "source");

        result = null;

        subplotIndex = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: int getSubplotIndex(java.awt.geom.Point2D)>(source);

        if subplotIndex < 0 goto label1;

        $stack6 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>(subplotIndex);

        result = (org.jfree.chart.plot.CategoryPlot) $stack7;

     label1:
        return result;
    }

    public void zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        double factor;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>(factor, info, source, 0);

        return;
    }

    public void zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D, boolean)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;
        java.util.List $stack9;
        java.util.Iterator iterator;
        boolean $stack11, useAnchor;
        java.lang.Object $stack12;
        double factor;
        org.jfree.chart.plot.CategoryPlot subplot;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        useAnchor := @parameter3: boolean;

        subplot = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.plot.CategoryPlot findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(info, source);

        if subplot == null goto label1;

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>(factor, info, source, useAnchor);

        goto label3;

     label1:
        $stack9 = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List getSubplots()>();

        iterator = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack11 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label3;

        $stack12 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        subplot = (org.jfree.chart.plot.CategoryPlot) $stack12;

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)>(factor, info, source, useAnchor);

        goto label2;

     label3:
        return;
    }

    public void zoomRangeAxes(double, double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;
        java.util.List $stack10;
        java.util.Iterator iterator;
        boolean $stack12;
        java.lang.Object $stack13;
        double lowerPercent, upperPercent;
        org.jfree.chart.plot.CategoryPlot subplot;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        lowerPercent := @parameter0: double;

        upperPercent := @parameter1: double;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter3: java.awt.geom.Point2D;

        subplot = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.plot.CategoryPlot findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(info, source);

        if subplot == null goto label1;

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(lowerPercent, upperPercent, info, source);

        goto label3;

     label1:
        $stack10 = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List getSubplots()>();

        iterator = interfaceinvoke $stack10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack12 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label3;

        $stack13 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        subplot = (org.jfree.chart.plot.CategoryPlot) $stack13;

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)>(lowerPercent, upperPercent, info, source);

        goto label2;

     label3:
        return;
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D)
    {
        org.jfree.chart.axis.AxisSpace $stack19, fixed, space, w#95;
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.plot.PlotOrientation orientation, $stack32, $stack33, $stack36, $stack37, $stack93, $stack94;
        org.jfree.chart.axis.AxisLocation $stack23;
        boolean $stack25;
        java.awt.geom.Rectangle2D plotArea, categoryAxis#24, $stack39;
        java.awt.geom.Rectangle2D[] $stack29, $stack48, $stack64, $stack38;
        java.util.List $stack34, $stack79, $stack27;
        java.lang.Object $stack35, $stack80;
        org.jfree.chart.plot.CategoryPlot plot, sub;
        java.awt.Graphics2D g2;
        int $stack43, $stack59, $stack69, $stack75, $stack81, categoryEdge#40, totalWeight, i;
        double $stack44, $stack45, $stack46, $stack49, $stack50, $stack51, $stack60, $stack61, $stack62, $stack65, $stack66, $stack67, $stack68, $stack70, $stack71, $stack72, $stack74, $stack76, $stack77, $stack78, $stack95, $stack96, $stack97, $stack98, i#65, y, usableSize, w;
        java.awt.geom.Rectangle2D$Double $stack47, $stack63;
        org.jfree.chart.axis.CategoryAxis $stack84, categoryAxis;
        org.jfree.chart.ui.RectangleEdge categoryEdge;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        $stack19 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack19.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        space = $stack19;

        orientation = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        fixed = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace()>();

        if fixed == null goto label02;

        $stack93 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack93 goto label01;

        $stack97 = virtualinvoke fixed.<org.jfree.chart.axis.AxisSpace: double getLeft()>();

        virtualinvoke $stack19.<org.jfree.chart.axis.AxisSpace: void setLeft(double)>($stack97);

        $stack98 = virtualinvoke fixed.<org.jfree.chart.axis.AxisSpace: double getRight()>();

        virtualinvoke $stack19.<org.jfree.chart.axis.AxisSpace: void setRight(double)>($stack98);

        goto label04;

     label01:
        $stack94 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack94 goto label04;

        $stack95 = virtualinvoke fixed.<org.jfree.chart.axis.AxisSpace: double getTop()>();

        virtualinvoke $stack19.<org.jfree.chart.axis.AxisSpace: void setTop(double)>($stack95);

        $stack96 = virtualinvoke fixed.<org.jfree.chart.axis.AxisSpace: double getBottom()>();

        virtualinvoke $stack19.<org.jfree.chart.axis.AxisSpace: void setBottom(double)>($stack96);

        goto label04;

     label02:
        categoryAxis = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis()>();

        $stack23 = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation()>();

        categoryEdge = staticinvoke <org.jfree.chart.plot.Plot: org.jfree.chart.ui.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>($stack23, orientation);

        if categoryAxis == null goto label03;

        space = virtualinvoke categoryAxis.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)>(g2, this, plotArea, categoryEdge, $stack19);

        goto label04;

     label03:
        $stack25 = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: boolean getDrawSharedDomainAxis()>();

        if $stack25 == 0 goto label04;

        $stack84 = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis()>();

        space = virtualinvoke $stack84.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)>(g2, this, plotArea, categoryEdge, $stack19);

     label04:
        categoryAxis#24 = virtualinvoke space.<org.jfree.chart.axis.AxisSpace: java.awt.geom.Rectangle2D shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(plotArea, null);

        $stack27 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        categoryEdge#40 = interfaceinvoke $stack27.<java.util.List: int size()>();

        totalWeight = 0;

        i = 0;

     label05:
        if i >= categoryEdge#40 goto label06;

        $stack79 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack80 = interfaceinvoke $stack79.<java.util.List: java.lang.Object get(int)>(i);

        sub = (org.jfree.chart.plot.CategoryPlot) $stack80;

        $stack81 = virtualinvoke sub.<org.jfree.chart.plot.CategoryPlot: int getWeight()>();

        totalWeight = totalWeight + $stack81;

        i = i + 1;

        goto label05;

     label06:
        $stack29 = newarray (java.awt.geom.Rectangle2D)[categoryEdge#40];

        this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.awt.geom.Rectangle2D[] subplotAreas> = $stack29;

        i#65 = virtualinvoke categoryAxis#24.<java.awt.geom.Rectangle2D: double getX()>();

        y = virtualinvoke categoryAxis#24.<java.awt.geom.Rectangle2D: double getY()>();

        usableSize = 0.0;

        $stack32 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack32 goto label07;

        $stack74 = virtualinvoke categoryAxis#24.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack77 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: double gap>;

        $stack75 = categoryEdge#40 - 1;

        $stack76 = (double) $stack75;

        $stack78 = $stack77 * $stack76;

        usableSize = $stack74 - $stack78;

        goto label08;

     label07:
        $stack33 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack33 goto label08;

        $stack68 = virtualinvoke categoryAxis#24.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack71 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: double gap>;

        $stack69 = categoryEdge#40 - 1;

        $stack70 = (double) $stack69;

        $stack72 = $stack71 * $stack70;

        usableSize = $stack68 - $stack72;

     label08:
        i = 0;

     label09:
        if i >= categoryEdge#40 goto label12;

        $stack34 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack35 = interfaceinvoke $stack34.<java.util.List: java.lang.Object get(int)>(i);

        plot = (org.jfree.chart.plot.CategoryPlot) $stack35;

        $stack36 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack36 goto label10;

        $stack59 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: int getWeight()>();

        $stack60 = (double) $stack59;

        $stack62 = usableSize * $stack60;

        $stack61 = (double) totalWeight;

        w = $stack62 / $stack61;

        $stack64 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.awt.geom.Rectangle2D[] subplotAreas>;

        $stack63 = new java.awt.geom.Rectangle2D$Double;

        $stack65 = virtualinvoke categoryAxis#24.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack63.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(i#65, y, w, $stack65);

        $stack64[i] = $stack63;

        $stack67 = i#65 + w;

        $stack66 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: double gap>;

        i#65 = $stack67 + $stack66;

        goto label11;

     label10:
        $stack37 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack37 goto label11;

        $stack43 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: int getWeight()>();

        $stack44 = (double) $stack43;

        $stack46 = usableSize * $stack44;

        $stack45 = (double) totalWeight;

        w = $stack46 / $stack45;

        $stack48 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.awt.geom.Rectangle2D[] subplotAreas>;

        $stack47 = new java.awt.geom.Rectangle2D$Double;

        $stack49 = virtualinvoke categoryAxis#24.<java.awt.geom.Rectangle2D: double getWidth()>();

        specialinvoke $stack47.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(i#65, y, $stack49, w);

        $stack48[i] = $stack47;

        $stack51 = y + w;

        $stack50 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: double gap>;

        y = $stack51 + $stack50;

     label11:
        $stack38 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.awt.geom.Rectangle2D[] subplotAreas>;

        $stack39 = $stack38[i];

        w#95 = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>(g2, $stack39, null);

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void ensureAtLeast(org.jfree.chart.axis.AxisSpace)>(w#95);

        i = i + 1;

        goto label09;

     label12:
        return space;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.PlotRenderingInfo info, $stack61, subplotInfo;
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.ui.RectangleInsets insets;
        java.awt.geom.Rectangle2D area, dataArea, $stack52, $stack48;
        double $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, cursor;
        java.awt.Graphics2D g2;
        org.jfree.chart.axis.AxisSpace space;
        org.jfree.chart.axis.CategoryAxis axis;
        org.jfree.chart.ui.RectangleEdge domainEdge;
        org.jfree.chart.axis.AxisState axisState;
        java.util.Map $stack41;
        java.util.List $stack45, $stack43;
        java.lang.Object $stack46;
        org.jfree.chart.plot.CategoryPlot plot;
        java.awt.geom.Point2D anchor, subAnchor;
        java.awt.geom.Rectangle2D[] $stack51, $stack47;
        boolean $stack53;
        org.jfree.chart.ChartRenderingInfo $stack62;
        org.jfree.chart.plot.PlotState $stack65, parentState;
        int i, $stack44;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        anchor := @parameter2: java.awt.geom.Point2D;

        parentState := @parameter3: org.jfree.chart.plot.PlotState;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        if info == null goto label1;

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void setPlotArea(java.awt.geom.Rectangle2D)>(area);

     label1:
        insets = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.ui.RectangleInsets getInsets()>();

        $stack19 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack20 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack21 = $stack19 + $stack20;

        $stack22 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack23 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack24 = $stack22 + $stack23;

        $stack25 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack26 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack27 = $stack25 - $stack26;

        $stack28 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        $stack29 = $stack27 - $stack28;

        $stack30 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack31 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack32 = $stack30 - $stack31;

        $stack33 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        $stack34 = $stack32 - $stack33;

        virtualinvoke area.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($stack21, $stack24, $stack29, $stack34);

        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)>(null);

        space = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, area);

        dataArea = virtualinvoke space.<org.jfree.chart.axis.AxisSpace: java.awt.geom.Rectangle2D shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(area, null);

        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)>(space);

        axis = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.CategoryAxis getDomainAxis()>();

        domainEdge = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        cursor = staticinvoke <org.jfree.chart.ui.RectangleEdge: double coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(dataArea, domainEdge);

        axisState = virtualinvoke axis.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, cursor, area, dataArea, domainEdge, info);

        if parentState != null goto label2;

        $stack65 = new org.jfree.chart.plot.PlotState;

        specialinvoke $stack65.<org.jfree.chart.plot.PlotState: void <init>()>();

        parentState = $stack65;

     label2:
        $stack41 = virtualinvoke parentState.<org.jfree.chart.plot.PlotState: java.util.Map getSharedAxisStates()>();

        interfaceinvoke $stack41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(axis, axisState);

        i = 0;

     label3:
        $stack43 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack44 = interfaceinvoke $stack43.<java.util.List: int size()>();

        if i >= $stack44 goto label6;

        $stack45 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack46 = interfaceinvoke $stack45.<java.util.List: java.lang.Object get(int)>(i);

        plot = (org.jfree.chart.plot.CategoryPlot) $stack46;

        subplotInfo = null;

        if info == null goto label4;

        $stack61 = new org.jfree.chart.plot.PlotRenderingInfo;

        $stack62 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        specialinvoke $stack61.<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>($stack62);

        subplotInfo = $stack61;

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void addSubplotInfo(org.jfree.chart.plot.PlotRenderingInfo)>($stack61);

     label4:
        subAnchor = null;

        if anchor == null goto label5;

        $stack51 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.awt.geom.Rectangle2D[] subplotAreas>;

        $stack52 = $stack51[i];

        $stack53 = virtualinvoke $stack52.<java.awt.geom.Rectangle2D: boolean contains(java.awt.geom.Point2D)>(anchor);

        if $stack53 == 0 goto label5;

        subAnchor = anchor;

     label5:
        $stack47 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.awt.geom.Rectangle2D[] subplotAreas>;

        $stack48 = $stack47[i];

        virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>(g2, $stack48, subAnchor, parentState, subplotInfo);

        i = i + 1;

        goto label3;

     label6:
        if info == null goto label7;

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void setDataArea(java.awt.geom.Rectangle2D)>(dataArea);

     label7:
        return;
    }

    protected void setFixedRangeAxisSpaceForSubplots(org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        java.util.List $stack4;
        java.util.Iterator iterator;
        boolean $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.plot.CategoryPlot plot;
        org.jfree.chart.axis.AxisSpace space;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        $stack4 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        iterator = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        plot = (org.jfree.chart.plot.CategoryPlot) $stack7;

        virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)>(space, 0);

        goto label1;

     label2:
        return;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.plot.PlotOrientation orientation;
        java.util.List $stack4;
        java.util.Iterator iterator;
        boolean $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.plot.CategoryPlot plot;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        orientation := @parameter0: org.jfree.chart.plot.PlotOrientation;

        specialinvoke this.<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>(orientation);

        $stack4 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        iterator = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        plot = (org.jfree.chart.plot.CategoryPlot) $stack7;

        virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>(orientation);

        goto label1;

     label2:
        return;
    }

    public void setShadowGenerator(org.jfree.chart.util.ShadowGenerator)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.util.ShadowGenerator generator;
        java.util.List $stack4;
        java.util.Iterator iterator;
        boolean $stack6;
        java.lang.Object $stack7;
        org.jfree.chart.plot.CategoryPlot plot;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        generator := @parameter0: org.jfree.chart.util.ShadowGenerator;

        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void setNotify(boolean)>(0);

        specialinvoke this.<org.jfree.chart.plot.CategoryPlot: void setShadowGenerator(org.jfree.chart.util.ShadowGenerator)>(generator);

        $stack4 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        iterator = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack6 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack6 == 0 goto label2;

        $stack7 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        plot = (org.jfree.chart.plot.CategoryPlot) $stack7;

        virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: void setShadowGenerator(org.jfree.chart.util.ShadowGenerator)>(generator);

        goto label1;

     label2:
        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void setNotify(boolean)>(1);

        return;
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.data.Range $stack2;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        $stack2 = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>(axis);

        return $stack2;
    }

    public org.jfree.chart.LegendItemCollection getLegendItems()
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.LegendItemCollection $stack6, more, result;
        java.util.List $stack7, $stack9;
        java.util.Iterator iterator;
        boolean $stack11;
        java.lang.Object $stack12;
        org.jfree.chart.plot.CategoryPlot plot;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        result = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: org.jfree.chart.LegendItemCollection getFixedLegendItems()>();

        if result != null goto label2;

        $stack6 = new org.jfree.chart.LegendItemCollection;

        specialinvoke $stack6.<org.jfree.chart.LegendItemCollection: void <init>()>();

        result = $stack6;

        $stack7 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        if $stack7 == null goto label2;

        $stack9 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        iterator = interfaceinvoke $stack9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label2;

        $stack12 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        plot = (org.jfree.chart.plot.CategoryPlot) $stack12;

        more = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.LegendItemCollection getLegendItems()>();

        virtualinvoke $stack6.<org.jfree.chart.LegendItemCollection: void addAll(org.jfree.chart.LegendItemCollection)>(more);

        goto label1;

     label2:
        return result;
    }

    public java.util.List getCategories()
    {
        java.util.ArrayList $stack7;
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        java.util.List $stack8, $stack9, $stack10, more;
        java.util.Iterator iterator, moreIterator;
        boolean $stack12, $stack17, $stack20;
        java.lang.Object $stack14, $stack19;
        org.jfree.chart.plot.CategoryPlot plot;
        java.lang.Comparable category;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        $stack7 = new java.util.ArrayList;

        specialinvoke $stack7.<java.util.ArrayList: void <init>()>();

        $stack8 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        if $stack8 == null goto label5;

        $stack10 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        iterator = interfaceinvoke $stack10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label5;

        $stack14 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        plot = (org.jfree.chart.plot.CategoryPlot) $stack14;

        more = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: java.util.List getCategories()>();

        moreIterator = interfaceinvoke more.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack17 = interfaceinvoke moreIterator.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label4;

        $stack19 = interfaceinvoke moreIterator.<java.util.Iterator: java.lang.Object next()>();

        category = (java.lang.Comparable) $stack19;

        $stack20 = interfaceinvoke $stack7.<java.util.List: boolean contains(java.lang.Object)>(category);

        if $stack20 != 0 goto label3;

        interfaceinvoke $stack7.<java.util.List: boolean add(java.lang.Object)>(category);

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        $stack9 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack7);

        return $stack9;
    }

    public java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        java.util.List $stack2;
        org.jfree.chart.axis.CategoryAxis axis;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        axis := @parameter0: org.jfree.chart.axis.CategoryAxis;

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List getCategories()>();

        return $stack2;
    }

    public void handleClick(int, int, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.PlotRenderingInfo info, subplotInfo;
        java.awt.geom.Rectangle2D dataArea;
        int x, y, $stack13, i;
        double $stack9, $stack10;
        boolean $stack11;
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        java.util.List $stack12, $stack14;
        java.lang.Object $stack15;
        org.jfree.chart.plot.CategoryPlot subplot;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        x := @parameter0: int;

        y := @parameter1: int;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        dataArea = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack10 = (double) x;

        $stack9 = (double) y;

        $stack11 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: boolean contains(double,double)>($stack10, $stack9);

        if $stack11 == 0 goto label2;

        i = 0;

     label1:
        $stack12 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack13 = interfaceinvoke $stack12.<java.util.List: int size()>();

        if i >= $stack13 goto label2;

        $stack14 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack15 = interfaceinvoke $stack14.<java.util.List: java.lang.Object get(int)>(i);

        subplot = (org.jfree.chart.plot.CategoryPlot) $stack15;

        subplotInfo = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.plot.PlotRenderingInfo getSubplotInfo(int)>(i);

        virtualinvoke subplot.<org.jfree.chart.plot.CategoryPlot: void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)>(x, y, subplotInfo);

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    public void plotChanged(org.jfree.chart.event.PlotChangeEvent)
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this;
        org.jfree.chart.event.PlotChangeEvent event;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        event := @parameter0: org.jfree.chart.event.PlotChangeEvent;

        virtualinvoke this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>(event);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.plot.CombinedDomainCategoryPlot this, that;
        boolean $stack3, $stack9, $stack10;
        double $stack4, $stack5;
        byte $stack6;
        java.util.List $stack7, $stack8;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.plot.CombinedDomainCategoryPlot;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.plot.CombinedDomainCategoryPlot) obj;

        $stack5 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: double gap>;

        $stack4 = that.<org.jfree.chart.plot.CombinedDomainCategoryPlot: double gap>;

        $stack6 = $stack5 cmpl $stack4;

        if $stack6 == 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack7 = that.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack8, $stack7);

        if $stack9 != 0 goto label4;

        return 0;

     label4:
        $stack10 = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: boolean equals(java.lang.Object)>(obj);

        return $stack10;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.plot.CombinedDomainCategoryPlot this, result;
        java.lang.Object $stack4, $stack10;
        java.util.List $stack5, $stack6, $stack7;
        java.util.Iterator it;
        boolean $stack9;
        org.jfree.chart.plot.Plot child;

        this := @this: org.jfree.chart.plot.CombinedDomainCategoryPlot;

        $stack4 = specialinvoke this.<org.jfree.chart.plot.CategoryPlot: java.lang.Object clone()>();

        result = (org.jfree.chart.plot.CombinedDomainCategoryPlot) $stack4;

        $stack5 = this.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        $stack6 = staticinvoke <org.jfree.chart.util.CloneUtils: java.util.List cloneList(java.util.List)>($stack5);

        result.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots> = $stack6;

        $stack7 = result.<org.jfree.chart.plot.CombinedDomainCategoryPlot: java.util.List subplots>;

        it = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label2;

        $stack10 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        child = (org.jfree.chart.plot.Plot) $stack10;

        virtualinvoke child.<org.jfree.chart.plot.Plot: void setParent(org.jfree.chart.plot.Plot)>(result);

        goto label1;

     label2:
        return result;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.plot.CombinedDomainCategoryPlot: long serialVersionUID> = 8207194522653701572L;

        return;
    }
}
