public abstract class org.jfree.chart.date.SerialDate extends java.lang.Object implements java.lang.Comparable, java.io.Serializable, org.jfree.chart.date.MonthConstants
{
    private static final long serialVersionUID;
    public static final java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS;
    public static final int SERIAL_LOWER_BOUND;
    public static final int SERIAL_UPPER_BOUND;
    public static final int MINIMUM_YEAR_SUPPORTED;
    public static final int MAXIMUM_YEAR_SUPPORTED;
    public static final int MONDAY;
    public static final int TUESDAY;
    public static final int WEDNESDAY;
    public static final int THURSDAY;
    public static final int FRIDAY;
    public static final int SATURDAY;
    public static final int SUNDAY;
    static final int[] LAST_DAY_OF_MONTH;
    static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH;
    static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;
    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH;
    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;
    public static final int FIRST_WEEK_IN_MONTH;
    public static final int SECOND_WEEK_IN_MONTH;
    public static final int THIRD_WEEK_IN_MONTH;
    public static final int FOURTH_WEEK_IN_MONTH;
    public static final int LAST_WEEK_IN_MONTH;
    public static final int INCLUDE_NONE;
    public static final int INCLUDE_FIRST;
    public static final int INCLUDE_SECOND;
    public static final int INCLUDE_BOTH;
    public static final int PRECEDING;
    public static final int NEAREST;
    public static final int FOLLOWING;
    private java.lang.String description;

    protected void <init>()
    {
        org.jfree.chart.date.SerialDate this;

        this := @this: org.jfree.chart.date.SerialDate;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isValidWeekdayCode(int)
    {
        int code;

        code := @parameter0: int;

        tableswitch(code)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public static int stringToWeekdayCode(java.lang.String)
    {
        java.text.DateFormatSymbols $stack5, $stack7;
        java.lang.String[] shortWeekdayNames, weekDayNames;
        int $stack10, result, i;
        java.lang.String $stack11, $stack13, s, s#3;
        boolean $stack12, $stack14;

        s := @parameter0: java.lang.String;

        $stack5 = <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS>;

        shortWeekdayNames = virtualinvoke $stack5.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();

        $stack7 = <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS>;

        weekDayNames = virtualinvoke $stack7.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();

        result = -1;

        s#3 = virtualinvoke s.<java.lang.String: java.lang.String trim()>();

        i = 0;

     label1:
        $stack10 = lengthof weekDayNames;

        if i >= $stack10 goto label4;

        $stack11 = shortWeekdayNames[i];

        $stack12 = virtualinvoke s#3.<java.lang.String: boolean equals(java.lang.Object)>($stack11);

        if $stack12 == 0 goto label2;

        result = i;

        goto label4;

     label2:
        $stack13 = weekDayNames[i];

        $stack14 = virtualinvoke s#3.<java.lang.String: boolean equals(java.lang.Object)>($stack13);

        if $stack14 == 0 goto label3;

        result = i;

        goto label4;

     label3:
        i = i + 1;

        goto label1;

     label4:
        return result;
    }

    public static java.lang.String weekdayCodeToString(int)
    {
        java.text.DateFormatSymbols $stack2;
        java.lang.String[] weekdays;
        int weekday;
        java.lang.String $stack4;

        weekday := @parameter0: int;

        $stack2 = <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS>;

        weekdays = virtualinvoke $stack2.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();

        $stack4 = weekdays[weekday];

        return $stack4;
    }

    public static java.lang.String[] getMonths()
    {
        java.lang.String[] $stack0;

        $stack0 = staticinvoke <org.jfree.chart.date.SerialDate: java.lang.String[] getMonths(boolean)>(0);

        return $stack0;
    }

    public static java.lang.String[] getMonths(boolean)
    {
        boolean shortened;
        java.text.DateFormatSymbols $stack1, $stack3;
        java.lang.String[] $stack2, $stack4;

        shortened := @parameter0: boolean;

        if shortened == 0 goto label1;

        $stack3 = <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS>;

        $stack4 = virtualinvoke $stack3.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();

        return $stack4;

     label1:
        $stack1 = <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS>;

        $stack2 = virtualinvoke $stack1.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();

        return $stack2;
    }

    public static boolean isValidMonthCode(int)
    {
        int code;

        code := @parameter0: int;

        tableswitch(code)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label1;
            case 10: goto label1;
            case 11: goto label1;
            case 12: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public static int monthCodeToQuarter(int)
    {
        int code;
        java.lang.IllegalArgumentException $stack1;

        code := @parameter0: int;

        tableswitch(code)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label4;
            case 11: goto label4;
            case 12: goto label4;
            default: goto label5;
        };

     label1:
        return 1;

     label2:
        return 2;

     label3:
        return 3;

     label4:
        return 4;

     label5:
        $stack1 = new java.lang.IllegalArgumentException;

        specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SerialDate.monthCodeToQuarter: invalid month code.");

        throw $stack1;
    }

    public static java.lang.String monthCodeToString(int)
    {
        int month;
        java.lang.String $stack1;

        month := @parameter0: int;

        $stack1 = staticinvoke <org.jfree.chart.date.SerialDate: java.lang.String monthCodeToString(int,boolean)>(month, 0);

        return $stack1;
    }

    public static java.lang.String monthCodeToString(int, boolean)
    {
        int month, $stack6;
        boolean $stack3, shortened;
        java.text.DateFormatSymbols $stack4, $stack8;
        java.lang.String $stack7;
        java.lang.IllegalArgumentException $stack13;
        java.lang.String[] months;

        month := @parameter0: int;

        shortened := @parameter1: boolean;

        $stack3 = staticinvoke <org.jfree.chart.date.SerialDate: boolean isValidMonthCode(int)>(month);

        if $stack3 != 0 goto label1;

        $stack13 = new java.lang.IllegalArgumentException;

        specialinvoke $stack13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SerialDate.monthCodeToString: month outside valid range.");

        throw $stack13;

     label1:
        if shortened == 0 goto label2;

        $stack8 = <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS>;

        months = virtualinvoke $stack8.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();

        goto label3;

     label2:
        $stack4 = <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS>;

        months = virtualinvoke $stack4.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();

     label3:
        $stack6 = month - 1;

        $stack7 = months[$stack6];

        return $stack7;
    }

    public static int stringToMonthCode(java.lang.String)
    {
        java.text.DateFormatSymbols $stack5, $stack7;
        java.lang.String[] shortMonthNames, monthNames;
        java.lang.String $stack12, $stack14, s, s#3;
        boolean $stack13, $stack15;
        java.lang.NumberFormatException $stack20;
        int result, i#5, $stack11;

        s := @parameter0: java.lang.String;

        $stack5 = <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS>;

        shortMonthNames = virtualinvoke $stack5.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();

        $stack7 = <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS>;

        monthNames = virtualinvoke $stack7.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();

        result = -1;

        s#3 = virtualinvoke s.<java.lang.String: java.lang.String trim()>();

     label1:
        result = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(s#3);

     label2:
        goto label4;

     label3:
        $stack20 := @caughtexception;

     label4:
        if result < 1 goto label5;

        if result <= 12 goto label9;

     label5:
        i#5 = 0;

     label6:
        $stack11 = lengthof monthNames;

        if i#5 >= $stack11 goto label9;

        $stack12 = shortMonthNames[i#5];

        $stack13 = virtualinvoke s#3.<java.lang.String: boolean equals(java.lang.Object)>($stack12);

        if $stack13 == 0 goto label7;

        result = i#5 + 1;

        goto label9;

     label7:
        $stack14 = monthNames[i#5];

        $stack15 = virtualinvoke s#3.<java.lang.String: boolean equals(java.lang.Object)>($stack14);

        if $stack15 == 0 goto label8;

        result = i#5 + 1;

        goto label9;

     label8:
        i#5 = i#5 + 1;

        goto label6;

     label9:
        return result;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isValidWeekInMonthCode(int)
    {
        int code;

        code := @parameter0: int;

        tableswitch(code)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isLeapYear(int)
    {
        int yyyy, $stack1, $stack2, $stack3;

        yyyy := @parameter0: int;

        $stack1 = yyyy % 4;

        if $stack1 == 0 goto label1;

        return 0;

     label1:
        $stack2 = yyyy % 400;

        if $stack2 != 0 goto label2;

        return 1;

     label2:
        $stack3 = yyyy % 100;

        if $stack3 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static int leapYearCount(int)
    {
        int yyyy, $stack4, leap4, $stack5, leap100, $stack6, leap400, $stack7, $stack8;

        yyyy := @parameter0: int;

        $stack4 = yyyy - 1896;

        leap4 = $stack4 / 4;

        $stack5 = yyyy - 1800;

        leap100 = $stack5 / 100;

        $stack6 = yyyy - 1600;

        leap400 = $stack6 / 400;

        $stack7 = leap4 - leap100;

        $stack8 = $stack7 + leap400;

        return $stack8;
    }

    public static int lastDayOfMonth(int, int)
    {
        int month, result, yyyy, $stack5;
        int[] $stack3;
        boolean $stack4;

        month := @parameter0: int;

        yyyy := @parameter1: int;

        $stack3 = <org.jfree.chart.date.SerialDate: int[] LAST_DAY_OF_MONTH>;

        result = $stack3[month];

        if month == 2 goto label1;

        return result;

     label1:
        $stack4 = staticinvoke <org.jfree.chart.date.SerialDate: boolean isLeapYear(int)>(yyyy);

        if $stack4 == 0 goto label2;

        $stack5 = result + 1;

        return $stack5;

     label2:
        return result;
    }

    public static org.jfree.chart.date.SerialDate addDays(int, org.jfree.chart.date.SerialDate)
    {
        org.jfree.chart.date.SerialDate base, $stack4;
        int $stack3, days, serialDayNumber;

        days := @parameter0: int;

        base := @parameter1: org.jfree.chart.date.SerialDate;

        $stack3 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int toSerial()>();

        serialDayNumber = $stack3 + days;

        $stack4 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate createInstance(int)>(serialDayNumber);

        return $stack4;
    }

    public static org.jfree.chart.date.SerialDate addMonths(int, org.jfree.chart.date.SerialDate)
    {
        org.jfree.chart.date.SerialDate base, $stack24;
        int $stack6, $stack7, $stack8, months, $stack9, $stack10, $stack11, yy, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, mm, $stack21, $stack22, dd;
        java.lang.IllegalArgumentException $stack12;

        months := @parameter0: int;

        base := @parameter1: org.jfree.chart.date.SerialDate;

        $stack6 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getYYYY()>();

        $stack7 = 12 * $stack6;

        $stack8 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getMonth()>();

        $stack9 = $stack7 + $stack8;

        $stack10 = $stack9 + months;

        $stack11 = $stack10 - 1;

        yy = $stack11 / 12;

        if yy < 1900 goto label1;

        if yy <= 9999 goto label2;

     label1:
        $stack12 = new java.lang.IllegalArgumentException;

        specialinvoke $stack12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Call to addMonths resulted in unsupported year");

        throw $stack12;

     label2:
        $stack14 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getYYYY()>();

        $stack15 = 12 * $stack14;

        $stack16 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getMonth()>();

        $stack17 = $stack15 + $stack16;

        $stack18 = $stack17 + months;

        $stack19 = $stack18 - 1;

        $stack20 = $stack19 % 12;

        mm = $stack20 + 1;

        $stack21 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getDayOfMonth()>();

        $stack22 = staticinvoke <org.jfree.chart.date.SerialDate: int lastDayOfMonth(int,int)>(mm, yy);

        dd = staticinvoke <java.lang.Math: int min(int,int)>($stack21, $stack22);

        $stack24 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate createInstance(int,int,int)>(dd, mm, yy);

        return $stack24;
    }

    public static org.jfree.chart.date.SerialDate addYears(int, org.jfree.chart.date.SerialDate)
    {
        org.jfree.chart.date.SerialDate base, $stack13;
        int baseY, baseM, baseD, years, targetY, $stack11, targetD;
        java.lang.IllegalArgumentException $stack10;

        years := @parameter0: int;

        base := @parameter1: org.jfree.chart.date.SerialDate;

        baseY = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getYYYY()>();

        baseM = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getMonth()>();

        baseD = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getDayOfMonth()>();

        targetY = baseY + years;

        if targetY < 1900 goto label1;

        if targetY <= 9999 goto label2;

     label1:
        $stack10 = new java.lang.IllegalArgumentException;

        specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Call to addYears resulted in unsupported year");

        throw $stack10;

     label2:
        $stack11 = staticinvoke <org.jfree.chart.date.SerialDate: int lastDayOfMonth(int,int)>(baseM, targetY);

        targetD = staticinvoke <java.lang.Math: int min(int,int)>(baseD, $stack11);

        $stack13 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate createInstance(int,int,int)>(targetD, baseM, targetY);

        return $stack13;
    }

    public static org.jfree.chart.date.SerialDate getPreviousDayOfWeek(int, org.jfree.chart.date.SerialDate)
    {
        int targetWeekday, baseDOW, $stack6, $stack8, $stack10, adjust;
        boolean $stack4;
        org.jfree.chart.date.SerialDate base, $stack9;
        java.lang.IllegalArgumentException $stack14;

        targetWeekday := @parameter0: int;

        base := @parameter1: org.jfree.chart.date.SerialDate;

        $stack4 = staticinvoke <org.jfree.chart.date.SerialDate: boolean isValidWeekdayCode(int)>(targetWeekday);

        if $stack4 != 0 goto label1;

        $stack14 = new java.lang.IllegalArgumentException;

        specialinvoke $stack14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid day-of-the-week code.");

        throw $stack14;

     label1:
        baseDOW = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getDayOfWeek()>();

        if baseDOW <= targetWeekday goto label2;

        $stack10 = targetWeekday - baseDOW;

        adjust = staticinvoke <java.lang.Math: int min(int,int)>(0, $stack10);

        goto label3;

     label2:
        $stack6 = targetWeekday - baseDOW;

        $stack8 = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack6);

        adjust = -7 + $stack8;

     label3:
        $stack9 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate addDays(int,org.jfree.chart.date.SerialDate)>(adjust, base);

        return $stack9;
    }

    public static org.jfree.chart.date.SerialDate getFollowingDayOfWeek(int, org.jfree.chart.date.SerialDate)
    {
        int targetWeekday, baseDOW, $stack6, $stack9, $stack11, adjust;
        boolean $stack4;
        org.jfree.chart.date.SerialDate base, $stack8;
        java.lang.IllegalArgumentException $stack14;

        targetWeekday := @parameter0: int;

        base := @parameter1: org.jfree.chart.date.SerialDate;

        $stack4 = staticinvoke <org.jfree.chart.date.SerialDate: boolean isValidWeekdayCode(int)>(targetWeekday);

        if $stack4 != 0 goto label1;

        $stack14 = new java.lang.IllegalArgumentException;

        specialinvoke $stack14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid day-of-the-week code.");

        throw $stack14;

     label1:
        baseDOW = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getDayOfWeek()>();

        if baseDOW <= targetWeekday goto label2;

        $stack9 = targetWeekday - baseDOW;

        $stack11 = staticinvoke <java.lang.Math: int min(int,int)>(0, $stack9);

        adjust = 7 + $stack11;

        goto label3;

     label2:
        $stack6 = targetWeekday - baseDOW;

        adjust = staticinvoke <java.lang.Math: int max(int,int)>(0, $stack6);

     label3:
        $stack8 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate addDays(int,org.jfree.chart.date.SerialDate)>(adjust, base);

        return $stack8;
    }

    public static org.jfree.chart.date.SerialDate getNearestDayOfWeek(int, org.jfree.chart.date.SerialDate)
    {
        int targetDOW, baseDOW, $stack6, $stack7, adjust;
        boolean $stack4;
        org.jfree.chart.date.SerialDate base, $stack8;
        java.lang.IllegalArgumentException $stack13;

        targetDOW := @parameter0: int;

        base := @parameter1: org.jfree.chart.date.SerialDate;

        $stack4 = staticinvoke <org.jfree.chart.date.SerialDate: boolean isValidWeekdayCode(int)>(targetDOW);

        if $stack4 != 0 goto label1;

        $stack13 = new java.lang.IllegalArgumentException;

        specialinvoke $stack13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid day-of-the-week code.");

        throw $stack13;

     label1:
        baseDOW = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getDayOfWeek()>();

        $stack6 = targetDOW - baseDOW;

        $stack7 = staticinvoke <java.lang.Math: int abs(int)>($stack6);

        adjust = neg $stack7;

        if adjust < 4 goto label2;

        adjust = 7 - adjust;

     label2:
        if adjust > -4 goto label3;

        adjust = 7 + adjust;

     label3:
        $stack8 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate addDays(int,org.jfree.chart.date.SerialDate)>(adjust, base);

        return $stack8;
    }

    public org.jfree.chart.date.SerialDate getEndOfCurrentMonth(org.jfree.chart.date.SerialDate)
    {
        org.jfree.chart.date.SerialDate base, $stack8, this;
        int $stack3, $stack4, last, $stack6, $stack7;

        this := @this: org.jfree.chart.date.SerialDate;

        base := @parameter0: org.jfree.chart.date.SerialDate;

        $stack3 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getMonth()>();

        $stack4 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getYYYY()>();

        last = staticinvoke <org.jfree.chart.date.SerialDate: int lastDayOfMonth(int,int)>($stack3, $stack4);

        $stack6 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getMonth()>();

        $stack7 = virtualinvoke base.<org.jfree.chart.date.SerialDate: int getYYYY()>();

        $stack8 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate createInstance(int,int,int)>(last, $stack6, $stack7);

        return $stack8;
    }

    public static java.lang.String weekInMonthToString(int)
    {
        int count;

        count := @parameter0: int;

        tableswitch(count)
        {
            case 0: goto label5;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label6;
        };

     label1:
        return "First";

     label2:
        return "Second";

     label3:
        return "Third";

     label4:
        return "Fourth";

     label5:
        return "Last";

     label6:
        return "SerialDate.weekInMonthToString(): invalid code.";
    }

    public static java.lang.String relativeToString(int)
    {
        int relative;

        relative := @parameter0: int;

        tableswitch(relative)
        {
            case -1: goto label1;
            case 0: goto label2;
            case 1: goto label3;
            default: goto label4;
        };

     label1:
        return "Preceding";

     label2:
        return "Nearest";

     label3:
        return "Following";

     label4:
        return "ERROR : Relative To String";
    }

    public static org.jfree.chart.date.SerialDate createInstance(int, int, int)
    {
        org.jfree.chart.date.SpreadsheetDate $stack3;
        int day, month, yyyy;

        day := @parameter0: int;

        month := @parameter1: int;

        yyyy := @parameter2: int;

        $stack3 = new org.jfree.chart.date.SpreadsheetDate;

        specialinvoke $stack3.<org.jfree.chart.date.SpreadsheetDate: void <init>(int,int,int)>(day, month, yyyy);

        return $stack3;
    }

    public static org.jfree.chart.date.SerialDate createInstance(int)
    {
        org.jfree.chart.date.SpreadsheetDate $stack1;
        int serial;

        serial := @parameter0: int;

        $stack1 = new org.jfree.chart.date.SpreadsheetDate;

        specialinvoke $stack1.<org.jfree.chart.date.SpreadsheetDate: void <init>(int)>(serial);

        return $stack1;
    }

    public static org.jfree.chart.date.SerialDate createInstance(java.util.Date)
    {
        java.util.GregorianCalendar $stack2;
        java.util.Date date;
        org.jfree.chart.date.SpreadsheetDate $stack3;
        int $stack4, $stack5, $stack6, $stack7;

        date := @parameter0: java.util.Date;

        $stack2 = new java.util.GregorianCalendar;

        specialinvoke $stack2.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $stack2.<java.util.GregorianCalendar: void setTime(java.util.Date)>(date);

        $stack3 = new org.jfree.chart.date.SpreadsheetDate;

        $stack4 = virtualinvoke $stack2.<java.util.GregorianCalendar: int get(int)>(5);

        $stack5 = virtualinvoke $stack2.<java.util.GregorianCalendar: int get(int)>(2);

        $stack6 = $stack5 + 1;

        $stack7 = virtualinvoke $stack2.<java.util.GregorianCalendar: int get(int)>(1);

        specialinvoke $stack3.<org.jfree.chart.date.SpreadsheetDate: void <init>(int,int,int)>($stack4, $stack6, $stack7);

        return $stack3;
    }

    public abstract int toSerial();

    public abstract java.util.Date toDate();

    public java.lang.String getDescription()
    {
        org.jfree.chart.date.SerialDate this;
        java.lang.String $stack1;

        this := @this: org.jfree.chart.date.SerialDate;

        $stack1 = this.<org.jfree.chart.date.SerialDate: java.lang.String description>;

        return $stack1;
    }

    public void setDescription(java.lang.String)
    {
        org.jfree.chart.date.SerialDate this;
        java.lang.String description;

        this := @this: org.jfree.chart.date.SerialDate;

        description := @parameter0: java.lang.String;

        this.<org.jfree.chart.date.SerialDate: java.lang.String description> = description;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack7, $stack8, $stack10;
        org.jfree.chart.date.SerialDate this;
        int $stack2, $stack5, $stack9;
        java.lang.String $stack6, $stack11;

        this := @this: org.jfree.chart.date.SerialDate;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke this.<org.jfree.chart.date.SerialDate: int getDayOfMonth()>();

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $stack5 = virtualinvoke this.<org.jfree.chart.date.SerialDate: int getMonth()>();

        $stack6 = staticinvoke <org.jfree.chart.date.SerialDate: java.lang.String monthCodeToString(int)>($stack5);

        $stack7 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $stack9 = virtualinvoke this.<org.jfree.chart.date.SerialDate: int getYYYY()>();

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack11;
    }

    public abstract int getYYYY();

    public abstract int getMonth();

    public abstract int getDayOfMonth();

    public abstract int getDayOfWeek();

    public abstract int compare(org.jfree.chart.date.SerialDate);

    public abstract boolean isOn(org.jfree.chart.date.SerialDate);

    public abstract boolean isBefore(org.jfree.chart.date.SerialDate);

    public abstract boolean isOnOrBefore(org.jfree.chart.date.SerialDate);

    public abstract boolean isAfter(org.jfree.chart.date.SerialDate);

    public abstract boolean isOnOrAfter(org.jfree.chart.date.SerialDate);

    public abstract boolean isInRange(org.jfree.chart.date.SerialDate, org.jfree.chart.date.SerialDate);

    public abstract boolean isInRange(org.jfree.chart.date.SerialDate, org.jfree.chart.date.SerialDate, int);

    public org.jfree.chart.date.SerialDate getPreviousDayOfWeek(int)
    {
        int targetDOW;
        org.jfree.chart.date.SerialDate this, $stack2;

        this := @this: org.jfree.chart.date.SerialDate;

        targetDOW := @parameter0: int;

        $stack2 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate getPreviousDayOfWeek(int,org.jfree.chart.date.SerialDate)>(targetDOW, this);

        return $stack2;
    }

    public org.jfree.chart.date.SerialDate getFollowingDayOfWeek(int)
    {
        int targetDOW;
        org.jfree.chart.date.SerialDate this, $stack2;

        this := @this: org.jfree.chart.date.SerialDate;

        targetDOW := @parameter0: int;

        $stack2 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate getFollowingDayOfWeek(int,org.jfree.chart.date.SerialDate)>(targetDOW, this);

        return $stack2;
    }

    public org.jfree.chart.date.SerialDate getNearestDayOfWeek(int)
    {
        int targetDOW;
        org.jfree.chart.date.SerialDate this, $stack2;

        this := @this: org.jfree.chart.date.SerialDate;

        targetDOW := @parameter0: int;

        $stack2 = staticinvoke <org.jfree.chart.date.SerialDate: org.jfree.chart.date.SerialDate getNearestDayOfWeek(int,org.jfree.chart.date.SerialDate)>(targetDOW, this);

        return $stack2;
    }

    static void <clinit>()
    {
        java.text.SimpleDateFormat $stack0;
        java.text.DateFormatSymbols $stack1;
        int[] $stack2, $stack3, $stack4, $stack5, $stack6;

        <org.jfree.chart.date.SerialDate: int FOLLOWING> = 1;

        <org.jfree.chart.date.SerialDate: int NEAREST> = 0;

        <org.jfree.chart.date.SerialDate: int PRECEDING> = -1;

        <org.jfree.chart.date.SerialDate: int INCLUDE_BOTH> = 3;

        <org.jfree.chart.date.SerialDate: int INCLUDE_SECOND> = 2;

        <org.jfree.chart.date.SerialDate: int INCLUDE_FIRST> = 1;

        <org.jfree.chart.date.SerialDate: int INCLUDE_NONE> = 0;

        <org.jfree.chart.date.SerialDate: int LAST_WEEK_IN_MONTH> = 0;

        <org.jfree.chart.date.SerialDate: int FOURTH_WEEK_IN_MONTH> = 4;

        <org.jfree.chart.date.SerialDate: int THIRD_WEEK_IN_MONTH> = 3;

        <org.jfree.chart.date.SerialDate: int SECOND_WEEK_IN_MONTH> = 2;

        <org.jfree.chart.date.SerialDate: int FIRST_WEEK_IN_MONTH> = 1;

        <org.jfree.chart.date.SerialDate: int SUNDAY> = 1;

        <org.jfree.chart.date.SerialDate: int SATURDAY> = 7;

        <org.jfree.chart.date.SerialDate: int FRIDAY> = 6;

        <org.jfree.chart.date.SerialDate: int THURSDAY> = 5;

        <org.jfree.chart.date.SerialDate: int WEDNESDAY> = 4;

        <org.jfree.chart.date.SerialDate: int TUESDAY> = 3;

        <org.jfree.chart.date.SerialDate: int MONDAY> = 2;

        <org.jfree.chart.date.SerialDate: int MAXIMUM_YEAR_SUPPORTED> = 9999;

        <org.jfree.chart.date.SerialDate: int MINIMUM_YEAR_SUPPORTED> = 1900;

        <org.jfree.chart.date.SerialDate: int SERIAL_UPPER_BOUND> = 2958465;

        <org.jfree.chart.date.SerialDate: int SERIAL_LOWER_BOUND> = 2;

        <org.jfree.chart.date.SerialDate: long serialVersionUID> = -293716040467423637L;

        $stack0 = new java.text.SimpleDateFormat;

        specialinvoke $stack0.<java.text.SimpleDateFormat: void <init>()>();

        $stack1 = virtualinvoke $stack0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols getDateFormatSymbols()>();

        <org.jfree.chart.date.SerialDate: java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS> = $stack1;

        $stack2 = newarray (int)[13];

        $stack2[0] = 0;

        $stack2[1] = 31;

        $stack2[2] = 28;

        $stack2[3] = 31;

        $stack2[4] = 30;

        $stack2[5] = 31;

        $stack2[6] = 30;

        $stack2[7] = 31;

        $stack2[8] = 31;

        $stack2[9] = 30;

        $stack2[10] = 31;

        $stack2[11] = 30;

        $stack2[12] = 31;

        <org.jfree.chart.date.SerialDate: int[] LAST_DAY_OF_MONTH> = $stack2;

        $stack3 = newarray (int)[13];

        $stack3[0] = 0;

        $stack3[1] = 31;

        $stack3[2] = 59;

        $stack3[3] = 90;

        $stack3[4] = 120;

        $stack3[5] = 151;

        $stack3[6] = 181;

        $stack3[7] = 212;

        $stack3[8] = 243;

        $stack3[9] = 273;

        $stack3[10] = 304;

        $stack3[11] = 334;

        $stack3[12] = 365;

        <org.jfree.chart.date.SerialDate: int[] AGGREGATE_DAYS_TO_END_OF_MONTH> = $stack3;

        $stack4 = newarray (int)[14];

        $stack4[0] = 0;

        $stack4[1] = 0;

        $stack4[2] = 31;

        $stack4[3] = 59;

        $stack4[4] = 90;

        $stack4[5] = 120;

        $stack4[6] = 151;

        $stack4[7] = 181;

        $stack4[8] = 212;

        $stack4[9] = 243;

        $stack4[10] = 273;

        $stack4[11] = 304;

        $stack4[12] = 334;

        $stack4[13] = 365;

        <org.jfree.chart.date.SerialDate: int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH> = $stack4;

        $stack5 = newarray (int)[13];

        $stack5[0] = 0;

        $stack5[1] = 31;

        $stack5[2] = 60;

        $stack5[3] = 91;

        $stack5[4] = 121;

        $stack5[5] = 152;

        $stack5[6] = 182;

        $stack5[7] = 213;

        $stack5[8] = 244;

        $stack5[9] = 274;

        $stack5[10] = 305;

        $stack5[11] = 335;

        $stack5[12] = 366;

        <org.jfree.chart.date.SerialDate: int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH> = $stack5;

        $stack6 = newarray (int)[14];

        $stack6[0] = 0;

        $stack6[1] = 0;

        $stack6[2] = 31;

        $stack6[3] = 60;

        $stack6[4] = 91;

        $stack6[5] = 121;

        $stack6[6] = 152;

        $stack6[7] = 182;

        $stack6[8] = 213;

        $stack6[9] = 244;

        $stack6[10] = 274;

        $stack6[11] = 305;

        $stack6[12] = 335;

        $stack6[13] = 366;

        <org.jfree.chart.date.SerialDate: int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH> = $stack6;

        return;
    }
}
