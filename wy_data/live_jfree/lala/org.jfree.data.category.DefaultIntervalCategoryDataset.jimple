public class org.jfree.data.category.DefaultIntervalCategoryDataset extends org.jfree.data.general.AbstractSeriesDataset implements org.jfree.data.category.IntervalCategoryDataset
{
    private java.lang.Comparable[] seriesKeys;
    private java.lang.Comparable[] categoryKeys;
    private java.lang.Number[][] startData;
    private java.lang.Number[][] endData;

    public void <init>(double[][], double[][])
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        double[][] starts, ends;
        java.lang.Number[][] $stack3, $stack4;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        starts := @parameter0: double[][];

        ends := @parameter1: double[][];

        $stack3 = staticinvoke <org.jfree.data.DataUtils: java.lang.Number[][] createNumberArray2D(double[][])>(starts);

        $stack4 = staticinvoke <org.jfree.data.DataUtils: java.lang.Number[][] createNumberArray2D(double[][])>(ends);

        specialinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: void <init>(java.lang.Number[][],java.lang.Number[][])>($stack3, $stack4);

        return;
    }

    public void <init>(java.lang.Number[][], java.lang.Number[][])
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Number[][] starts, ends;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        starts := @parameter0: java.lang.Number[][];

        ends := @parameter1: java.lang.Number[][];

        specialinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>(null, null, starts, ends);

        return;
    }

    public void <init>(java.lang.String[], java.lang.Number[][], java.lang.Number[][])
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.String[] seriesNames;
        java.lang.Number[][] starts, ends;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        seriesNames := @parameter0: java.lang.String[];

        starts := @parameter1: java.lang.Number[][];

        ends := @parameter2: java.lang.Number[][];

        specialinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>(seriesNames, null, starts, ends);

        return;
    }

    public void <init>(java.lang.Comparable[], java.lang.Comparable[], java.lang.Number[][], java.lang.Number[][])
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Number[][] starts, ends;
        java.util.ResourceBundle resources;
        int seriesCount, $stack11, $stack22, $stack29, $stack32, errMsg#3;
        java.lang.Comparable[] $stack12, $stack13, seriesKeys, $stack19, categoryKeys, $stack28;
        java.lang.StringBuilder $stack14, $stack16, $stack17, $stack23, $stack25, $stack26;
        java.lang.String $stack15, $stack24, errMsg;
        java.lang.Number[] $stack20, $stack21;
        java.lang.IllegalArgumentException $stack30, $stack31, $stack39, $stack40;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        seriesKeys := @parameter0: java.lang.Comparable[];

        categoryKeys := @parameter1: java.lang.Comparable[];

        starts := @parameter2: java.lang.Number[][];

        ends := @parameter3: java.lang.Number[][];

        specialinvoke this.<org.jfree.data.general.AbstractSeriesDataset: void <init>()>();

        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> = starts;

        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData> = ends;

        if starts == null goto label10;

        if ends == null goto label10;

        resources = staticinvoke <org.jfree.chart.util.ResourceBundleWrapper: java.util.ResourceBundle getBundle(java.lang.String)>("org.jfree.data.resources.DataPackageResources");

        seriesCount = lengthof starts;

        $stack11 = lengthof ends;

        if seriesCount == $stack11 goto label01;

        $stack40 = new java.lang.IllegalArgumentException;

        specialinvoke $stack40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.");

        throw $stack40;

     label01:
        if seriesCount <= 0 goto label09;

        if seriesKeys == null goto label03;

        $stack32 = lengthof seriesKeys;

        if $stack32 == seriesCount goto label02;

        $stack39 = new java.lang.IllegalArgumentException;

        specialinvoke $stack39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of series keys does not match the number of series in the data.");

        throw $stack39;

     label02:
        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = seriesKeys;

        goto label04;

     label03:
        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke resources.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("series.default-prefix");

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        errMsg = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = specialinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] generateKeys(int,java.lang.String)>(seriesCount, errMsg);

        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = $stack19;

     label04:
        $stack20 = starts[0];

        errMsg#3 = lengthof $stack20;

        $stack21 = ends[0];

        $stack22 = lengthof $stack21;

        if errMsg#3 == $stack22 goto label05;

        $stack31 = new java.lang.IllegalArgumentException;

        specialinvoke $stack31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.");

        throw $stack31;

     label05:
        if categoryKeys == null goto label07;

        $stack29 = lengthof categoryKeys;

        if $stack29 == errMsg#3 goto label06;

        $stack30 = new java.lang.IllegalArgumentException;

        specialinvoke $stack30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of category keys does not match the number of categories in the data.");

        throw $stack30;

     label06:
        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> = categoryKeys;

        goto label08;

     label07:
        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = virtualinvoke resources.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("categories.default-prefix");

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        errMsg = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = specialinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] generateKeys(int,java.lang.String)>(errMsg#3, errMsg);

        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> = $stack28;

     label08:
        goto label10;

     label09:
        $stack12 = newarray (java.lang.Comparable)[0];

        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = $stack12;

        $stack13 = newarray (java.lang.Comparable)[0];

        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> = $stack13;

     label10:
        return;
    }

    public int getSeriesCount()
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Number[][] $stack2, $stack3;
        int result;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        result = 0;

        $stack2 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        if $stack2 == null goto label1;

        $stack3 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        result = lengthof $stack3;

     label1:
        return result;
    }

    public int getSeriesIndex(java.lang.Comparable)
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable[] $stack4, $stack6;
        int $stack5, result, i;
        java.lang.Comparable seriesKey, $stack7;
        boolean $stack8;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        seriesKey := @parameter0: java.lang.Comparable;

        result = -1;

        i = 0;

     label1:
        $stack4 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack5 = lengthof $stack4;

        if i >= $stack5 goto label3;

        $stack6 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack7 = $stack6[i];

        $stack8 = virtualinvoke seriesKey.<java.lang.Object: boolean equals(java.lang.Object)>($stack7);

        if $stack8 == 0 goto label2;

        result = i;

        goto label3;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return result;
    }

    public java.lang.Comparable getSeriesKey(int)
    {
        int series, $stack2;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.IllegalArgumentException $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack6;
        java.lang.String $stack7;
        java.lang.Comparable[] $stack8;
        java.lang.Comparable $stack9;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        series := @parameter0: int;

        $stack2 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>();

        if series >= $stack2 goto label1;

        if series >= 0 goto label2;

     label1:
        $stack3 = new java.lang.IllegalArgumentException;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such series : ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(series);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack7);

        throw $stack3;

     label2:
        $stack8 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack9 = $stack8[series];

        return $stack9;
    }

    public void setSeriesKeys(java.lang.Comparable[])
    {
        java.lang.Comparable[] seriesKeys;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        int $stack2, $stack3;
        java.lang.IllegalArgumentException $stack4;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        seriesKeys := @parameter0: java.lang.Comparable[];

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(seriesKeys, "seriesKeys");

        $stack2 = lengthof seriesKeys;

        $stack3 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>();

        if $stack2 == $stack3 goto label1;

        $stack4 = new java.lang.IllegalArgumentException;

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of series keys does not match the data.");

        throw $stack4;

     label1:
        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = seriesKeys;

        virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: void fireDatasetChanged()>();

        return;
    }

    public int getCategoryCount()
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Number[][] $stack2, $stack5;
        int $stack3, result;
        java.lang.Number[] $stack6;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        result = 0;

        $stack2 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        if $stack2 == null goto label1;

        $stack3 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>();

        if $stack3 <= 0 goto label1;

        $stack5 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        $stack6 = $stack5[0];

        result = lengthof $stack6;

     label1:
        return result;
    }

    public java.util.List getColumnKeys()
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable[] $stack1, $stack2;
        java.util.List $stack3, $stack4;
        java.util.ArrayList $stack5;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        $stack1 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        if $stack1 != null goto label1;

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        return $stack5;

     label1:
        $stack2 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        $stack3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack2);

        $stack4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack3);

        return $stack4;
    }

    public void setCategoryKeys(java.lang.Comparable[])
    {
        java.lang.Comparable[] categoryKeys;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        int $stack3, $stack4, $stack5, i;
        java.lang.Comparable $stack6;
        java.lang.IllegalArgumentException $stack9, $stack10;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        categoryKeys := @parameter0: java.lang.Comparable[];

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(categoryKeys, "categoryKeys");

        $stack3 = lengthof categoryKeys;

        $stack4 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getCategoryCount()>();

        if $stack3 == $stack4 goto label1;

        $stack10 = new java.lang.IllegalArgumentException;

        specialinvoke $stack10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of categories does not match the data.");

        throw $stack10;

     label1:
        i = 0;

     label2:
        $stack5 = lengthof categoryKeys;

        if i >= $stack5 goto label4;

        $stack6 = categoryKeys[i];

        if $stack6 != null goto label3;

        $stack9 = new java.lang.IllegalArgumentException;

        specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset.setCategoryKeys(): null category not permitted.");

        throw $stack9;

     label3:
        i = i + 1;

        goto label2;

     label4:
        this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> = categoryKeys;

        virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: void fireDatasetChanged()>();

        return;
    }

    public java.lang.Number getValue(java.lang.Comparable, java.lang.Comparable)
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable series, category;
        int seriesIndex, itemIndex;
        java.lang.Number $stack7;
        org.jfree.data.UnknownKeyException $stack8, $stack9;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        series := @parameter0: java.lang.Comparable;

        category := @parameter1: java.lang.Comparable;

        seriesIndex = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesIndex(java.lang.Comparable)>(series);

        if seriesIndex >= 0 goto label1;

        $stack9 = new org.jfree.data.UnknownKeyException;

        specialinvoke $stack9.<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>("Unknown \'series\' key.");

        throw $stack9;

     label1:
        itemIndex = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getColumnIndex(java.lang.Comparable)>(category);

        if itemIndex >= 0 goto label2;

        $stack8 = new org.jfree.data.UnknownKeyException;

        specialinvoke $stack8.<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>("Unknown \'category\' key.");

        throw $stack8;

     label2:
        $stack7 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number getValue(int,int)>(seriesIndex, itemIndex);

        return $stack7;
    }

    public java.lang.Number getValue(int, int)
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        int series, category;
        java.lang.Number $stack3;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        series := @parameter0: int;

        category := @parameter1: int;

        $stack3 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number getEndValue(int,int)>(series, category);

        return $stack3;
    }

    public java.lang.Number getStartValue(java.lang.Comparable, java.lang.Comparable)
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable series, category;
        int seriesIndex, itemIndex;
        java.lang.Number $stack7;
        org.jfree.data.UnknownKeyException $stack8, $stack9;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        series := @parameter0: java.lang.Comparable;

        category := @parameter1: java.lang.Comparable;

        seriesIndex = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesIndex(java.lang.Comparable)>(series);

        if seriesIndex >= 0 goto label1;

        $stack9 = new org.jfree.data.UnknownKeyException;

        specialinvoke $stack9.<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>("Unknown \'series\' key.");

        throw $stack9;

     label1:
        itemIndex = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getColumnIndex(java.lang.Comparable)>(category);

        if itemIndex >= 0 goto label2;

        $stack8 = new org.jfree.data.UnknownKeyException;

        specialinvoke $stack8.<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>("Unknown \'category\' key.");

        throw $stack8;

     label2:
        $stack7 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number getStartValue(int,int)>(seriesIndex, itemIndex);

        return $stack7;
    }

    public java.lang.Number getStartValue(int, int)
    {
        int series, $stack4, category, $stack6;
        java.lang.IllegalArgumentException $stack3, $stack5;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Number[][] $stack7;
        java.lang.Number[] $stack8;
        java.lang.Number $stack9;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        series := @parameter0: int;

        category := @parameter1: int;

        if series < 0 goto label1;

        $stack4 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>();

        if series < $stack4 goto label2;

     label1:
        $stack3 = new java.lang.IllegalArgumentException;

        specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset.getValue(): series index out of range.");

        throw $stack3;

     label2:
        if category < 0 goto label3;

        $stack6 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getCategoryCount()>();

        if category < $stack6 goto label4;

     label3:
        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset.getValue(): category index out of range.");

        throw $stack5;

     label4:
        $stack7 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        $stack8 = $stack7[series];

        $stack9 = $stack8[category];

        return $stack9;
    }

    public java.lang.Number getEndValue(java.lang.Comparable, java.lang.Comparable)
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable series, category;
        int seriesIndex, itemIndex;
        java.lang.Number $stack7;
        org.jfree.data.UnknownKeyException $stack8, $stack9;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        series := @parameter0: java.lang.Comparable;

        category := @parameter1: java.lang.Comparable;

        seriesIndex = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesIndex(java.lang.Comparable)>(series);

        if seriesIndex >= 0 goto label1;

        $stack9 = new org.jfree.data.UnknownKeyException;

        specialinvoke $stack9.<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>("Unknown \'series\' key.");

        throw $stack9;

     label1:
        itemIndex = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getColumnIndex(java.lang.Comparable)>(category);

        if itemIndex >= 0 goto label2;

        $stack8 = new org.jfree.data.UnknownKeyException;

        specialinvoke $stack8.<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>("Unknown \'category\' key.");

        throw $stack8;

     label2:
        $stack7 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number getEndValue(int,int)>(seriesIndex, itemIndex);

        return $stack7;
    }

    public java.lang.Number getEndValue(int, int)
    {
        int series, $stack4, category, $stack6;
        java.lang.IllegalArgumentException $stack3, $stack5;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Number[][] $stack7;
        java.lang.Number[] $stack8;
        java.lang.Number $stack9;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        series := @parameter0: int;

        category := @parameter1: int;

        if series < 0 goto label1;

        $stack4 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>();

        if series < $stack4 goto label2;

     label1:
        $stack3 = new java.lang.IllegalArgumentException;

        specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset.getValue(): series index out of range.");

        throw $stack3;

     label2:
        if category < 0 goto label3;

        $stack6 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getCategoryCount()>();

        if category < $stack6 goto label4;

     label3:
        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset.getValue(): category index out of range.");

        throw $stack5;

     label4:
        $stack7 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData>;

        $stack8 = $stack7[series];

        $stack9 = $stack8[category];

        return $stack9;
    }

    public void setStartValue(int, java.lang.Comparable, java.lang.Number)
    {
        int series, $stack6, $stack7, categoryIndex;
        java.lang.IllegalArgumentException $stack5, $stack11;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable category;
        java.lang.Number[][] $stack9;
        java.lang.Number value;
        java.lang.Number[] $stack10;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        series := @parameter0: int;

        category := @parameter1: java.lang.Comparable;

        value := @parameter2: java.lang.Number;

        if series < 0 goto label1;

        $stack6 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>();

        $stack7 = $stack6 - 1;

        if series <= $stack7 goto label2;

     label1:
        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset.setValue: series outside valid range.");

        throw $stack5;

     label2:
        categoryIndex = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getCategoryIndex(java.lang.Comparable)>(category);

        if categoryIndex >= 0 goto label3;

        $stack11 = new java.lang.IllegalArgumentException;

        specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset.setValue: unrecognised category.");

        throw $stack11;

     label3:
        $stack9 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        $stack10 = $stack9[series];

        $stack10[categoryIndex] = value;

        virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: void fireDatasetChanged()>();

        return;
    }

    public void setEndValue(int, java.lang.Comparable, java.lang.Number)
    {
        int series, $stack6, $stack7, categoryIndex;
        java.lang.IllegalArgumentException $stack5, $stack11;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable category;
        java.lang.Number[][] $stack9;
        java.lang.Number value;
        java.lang.Number[] $stack10;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        series := @parameter0: int;

        category := @parameter1: java.lang.Comparable;

        value := @parameter2: java.lang.Number;

        if series < 0 goto label1;

        $stack6 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>();

        $stack7 = $stack6 - 1;

        if series <= $stack7 goto label2;

     label1:
        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset.setValue: series outside valid range.");

        throw $stack5;

     label2:
        categoryIndex = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getCategoryIndex(java.lang.Comparable)>(category);

        if categoryIndex >= 0 goto label3;

        $stack11 = new java.lang.IllegalArgumentException;

        specialinvoke $stack11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DefaultIntervalCategoryDataset.setValue: unrecognised category.");

        throw $stack11;

     label3:
        $stack9 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData>;

        $stack10 = $stack9[series];

        $stack10[categoryIndex] = value;

        virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: void fireDatasetChanged()>();

        return;
    }

    public int getCategoryIndex(java.lang.Comparable)
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable[] $stack4, $stack6;
        int $stack5, result, i;
        java.lang.Comparable category, $stack7;
        boolean $stack8;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        category := @parameter0: java.lang.Comparable;

        result = -1;

        i = 0;

     label1:
        $stack4 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        $stack5 = lengthof $stack4;

        if i >= $stack5 goto label3;

        $stack6 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        $stack7 = $stack6[i];

        $stack8 = virtualinvoke category.<java.lang.Object: boolean equals(java.lang.Object)>($stack7);

        if $stack8 == 0 goto label2;

        result = i;

        goto label3;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return result;
    }

    private java.lang.Comparable[] generateKeys(int, java.lang.String)
    {
        int count, $stack8, i;
        java.lang.Comparable[] result;
        java.lang.StringBuilder $stack6, $stack7, $stack9;
        java.lang.String prefix, name;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        count := @parameter0: int;

        prefix := @parameter1: java.lang.String;

        result = newarray (java.lang.Comparable)[count];

        i = 0;

     label1:
        if i >= count goto label2;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix);

        $stack8 = i + 1;

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack8);

        name = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        result[i] = name;

        i = i + 1;

        goto label1;

     label2:
        return result;
    }

    public java.lang.Comparable getColumnKey(int)
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        int column;
        java.lang.Comparable[] $stack2;
        java.lang.Comparable $stack3;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        column := @parameter0: int;

        $stack2 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        $stack3 = $stack2[column];

        return $stack3;
    }

    public int getColumnIndex(java.lang.Comparable)
    {
        java.lang.Comparable columnKey;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        int $stack2;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        columnKey := @parameter0: java.lang.Comparable;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(columnKey, "columnKey");

        $stack2 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getCategoryIndex(java.lang.Comparable)>(columnKey);

        return $stack2;
    }

    public int getRowIndex(java.lang.Comparable)
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable rowKey;
        int $stack2;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        rowKey := @parameter0: java.lang.Comparable;

        $stack2 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesIndex(java.lang.Comparable)>(rowKey);

        return $stack2;
    }

    public java.util.List getRowKeys()
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable[] $stack1, $stack2;
        java.util.List $stack3, $stack4;
        java.util.ArrayList $stack5;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        $stack1 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        if $stack1 != null goto label1;

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        return $stack5;

     label1:
        $stack2 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack2);

        $stack4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack3);

        return $stack4;
    }

    public java.lang.Comparable getRowKey(int)
    {
        int row, $stack2;
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.IllegalArgumentException $stack3;
        java.lang.Comparable[] $stack4;
        java.lang.Comparable $stack5;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        row := @parameter0: int;

        $stack2 = virtualinvoke this.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getRowCount()>();

        if row >= $stack2 goto label1;

        if row >= 0 goto label2;

     label1:
        $stack3 = new java.lang.IllegalArgumentException;

        specialinvoke $stack3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'row\' argument is out of bounds.");

        throw $stack3;

     label2:
        $stack4 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack5 = $stack4[row];

        return $stack5;
    }

    public int getColumnCount()
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable[] $stack1;
        int $stack2;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        $stack1 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        $stack2 = lengthof $stack1;

        return $stack2;
    }

    public int getRowCount()
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable[] $stack1;
        int $stack2;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        $stack1 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack2 = lengthof $stack1;

        return $stack2;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.data.category.DefaultIntervalCategoryDataset this, that;
        boolean $stack3, $stack6, $stack9, $stack12, $stack15;
        java.lang.Comparable[] $stack4, $stack5, $stack7, $stack8;
        java.lang.Number[][] $stack10, $stack11, $stack13, $stack14;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.data.category.DefaultIntervalCategoryDataset;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.data.category.DefaultIntervalCategoryDataset) obj;

        $stack5 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack4 = that.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack5, $stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        $stack7 = that.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack8, $stack7);

        if $stack9 != 0 goto label4;

        return 0;

     label4:
        $stack11 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        $stack10 = that.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        $stack12 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: boolean equal(java.lang.Number[][],java.lang.Number[][])>($stack11, $stack10);

        if $stack12 != 0 goto label5;

        return 0;

     label5:
        $stack14 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData>;

        $stack13 = that.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData>;

        $stack15 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: boolean equal(java.lang.Number[][],java.lang.Number[][])>($stack14, $stack13);

        if $stack15 != 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this;
        java.lang.Comparable[] $stack2, $stack5;
        int $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, hash#2;
        java.lang.Number[][] $stack8, $stack11;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        $stack3 = 61 * 3;

        $stack2 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack4 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($stack2);

        hash#2 = $stack3 + $stack4;

        $stack6 = 61 * hash#2;

        $stack5 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        $stack7 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($stack5);

        hash#2 = $stack6 + $stack7;

        $stack9 = 61 * hash#2;

        $stack8 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        $stack10 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($stack8);

        hash#2 = $stack9 + $stack10;

        $stack12 = 61 * hash#2;

        $stack11 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData>;

        $stack13 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($stack11);

        hash#2 = $stack12 + $stack13;

        return hash#2;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.data.category.DefaultIntervalCategoryDataset this, clone;
        java.lang.Object $stack2, $stack4, $stack8;
        java.lang.Comparable[] $stack3, $stack5, $stack6, $stack7, $stack9, $stack10;
        java.lang.Number[][] $stack11, $stack12, $stack13, $stack14;

        this := @this: org.jfree.data.category.DefaultIntervalCategoryDataset;

        $stack2 = specialinvoke this.<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>();

        clone = (org.jfree.data.category.DefaultIntervalCategoryDataset) $stack2;

        $stack3 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>;

        $stack4 = virtualinvoke $stack3.<java.lang.Object: java.lang.Object clone()>();

        $stack5 = (java.lang.Comparable[]) $stack4;

        $stack6 = (java.lang.Comparable[]) $stack5;

        clone.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> = $stack6;

        $stack7 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>;

        $stack8 = virtualinvoke $stack7.<java.lang.Object: java.lang.Object clone()>();

        $stack9 = (java.lang.Comparable[]) $stack8;

        $stack10 = (java.lang.Comparable[]) $stack9;

        clone.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = $stack10;

        $stack11 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>;

        $stack12 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($stack11);

        clone.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> = $stack12;

        $stack13 = this.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData>;

        $stack14 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($stack13);

        clone.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData> = $stack14;

        return clone;
    }

    private static boolean equal(java.lang.Number[][], java.lang.Number[][])
    {
        java.lang.Number[][] array1, array2;
        int $stack3, $stack4, $stack5, i;
        java.lang.Number[] $stack6, $stack7;
        boolean $stack8, $stack11;

        array1 := @parameter0: java.lang.Number[][];

        array2 := @parameter1: java.lang.Number[][];

        if array1 != null goto label3;

        if array2 != null goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        return $stack11;

     label3:
        if array2 != null goto label4;

        return 0;

     label4:
        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label5;

        return 0;

     label5:
        i = 0;

     label6:
        $stack5 = lengthof array1;

        if i >= $stack5 goto label8;

        $stack7 = array1[i];

        $stack6 = array2[i];

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack6);

        if $stack8 != 0 goto label7;

        return 0;

     label7:
        i = i + 1;

        goto label6;

     label8:
        return 1;
    }

    private static java.lang.Number[][] clone(java.lang.Number[][])
    {
        java.lang.Number[][] array, result;
        int $stack5, $stack6, $stack7, $stack8, i;
        java.lang.Number[] child, copychild;

        array := @parameter0: java.lang.Number[][];

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(array, "array");

        $stack5 = lengthof array;

        result = newarray (java.lang.Number[])[$stack5];

        i = 0;

     label1:
        $stack6 = lengthof array;

        if i >= $stack6 goto label2;

        child = array[i];

        $stack7 = lengthof child;

        copychild = newarray (java.lang.Number)[$stack7];

        $stack8 = lengthof child;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(child, 0, copychild, 0, $stack8);

        result[i] = copychild;

        i = i + 1;

        goto label1;

     label2:
        return result;
    }
}
