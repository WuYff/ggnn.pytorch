public final enum class org.jfree.chart.ui.RectangleEdge extends java.lang.Enum
{
    public static final enum org.jfree.chart.ui.RectangleEdge TOP;
    public static final enum org.jfree.chart.ui.RectangleEdge BOTTOM;
    public static final enum org.jfree.chart.ui.RectangleEdge LEFT;
    public static final enum org.jfree.chart.ui.RectangleEdge RIGHT;
    private static final org.jfree.chart.ui.RectangleEdge[] $VALUES;

    public static org.jfree.chart.ui.RectangleEdge[] values()
    {
        org.jfree.chart.ui.RectangleEdge[] $stack0, $stack2;
        java.lang.Object $stack1;

        $stack0 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge[] $VALUES>;

        $stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (org.jfree.chart.ui.RectangleEdge[]) $stack1;

        return $stack2;
    }

    public static org.jfree.chart.ui.RectangleEdge valueOf(java.lang.String)
    {
        java.lang.String name;
        java.lang.Enum $stack1;
        org.jfree.chart.ui.RectangleEdge $stack2;

        name := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/jfree/chart/ui/RectangleEdge;", name);

        $stack2 = (org.jfree.chart.ui.RectangleEdge) $stack1;

        return $stack2;
    }

    private void <init>(java.lang.String, int)
    {
        org.jfree.chart.ui.RectangleEdge this;
        java.lang.String l1;
        int l2;

        this := @this: org.jfree.chart.ui.RectangleEdge;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }

    public static boolean isTopOrBottom(org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge, $stack1, $stack2;
        boolean $stack3;

        edge := @parameter0: org.jfree.chart.ui.RectangleEdge;

        $stack1 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge == $stack1 goto label1;

        $stack2 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack2 goto label2;

     label1:
        $stack3 = 1;

        goto label3;

     label2:
        $stack3 = 0;

     label3:
        return $stack3;
    }

    public static boolean isLeftOrRight(org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge, $stack1, $stack2;
        boolean $stack3;

        edge := @parameter0: org.jfree.chart.ui.RectangleEdge;

        $stack1 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge == $stack1 goto label1;

        $stack2 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack2 goto label2;

     label1:
        $stack3 = 1;

        goto label3;

     label2:
        $stack3 = 0;

     label3:
        return $stack3;
    }

    public static org.jfree.chart.ui.RectangleEdge opposite(org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge, $stack4, $stack5, $stack6, $stack7;
        int[] $stack1;
        int $stack2, $stack3;

        edge := @parameter0: org.jfree.chart.ui.RectangleEdge;

        $stack1 = <org.jfree.chart.ui.RectangleEdge$1: int[] $SwitchMap$org$jfree$chart$ui$RectangleEdge>;

        $stack2 = virtualinvoke edge.<org.jfree.chart.ui.RectangleEdge: int ordinal()>();

        $stack3 = $stack1[$stack2];

        tableswitch($stack3)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $stack7 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        return $stack7;

     label2:
        $stack6 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        return $stack6;

     label3:
        $stack5 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        return $stack5;

     label4:
        $stack4 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        return $stack4;

     label5:
        return null;
    }

    public static double coordinate(java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge;
        int[] $stack2;
        int $stack3, $stack4;
        java.awt.geom.Rectangle2D rectangle;
        double $stack5, $stack6, $stack7, $stack8;

        rectangle := @parameter0: java.awt.geom.Rectangle2D;

        edge := @parameter1: org.jfree.chart.ui.RectangleEdge;

        $stack2 = <org.jfree.chart.ui.RectangleEdge$1: int[] $SwitchMap$org$jfree$chart$ui$RectangleEdge>;

        $stack3 = virtualinvoke edge.<org.jfree.chart.ui.RectangleEdge: int ordinal()>();

        $stack4 = $stack2[$stack3];

        tableswitch($stack4)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $stack8 = virtualinvoke rectangle.<java.awt.geom.Rectangle2D: double getMinY()>();

        return $stack8;

     label2:
        $stack7 = virtualinvoke rectangle.<java.awt.geom.Rectangle2D: double getMaxY()>();

        return $stack7;

     label3:
        $stack6 = virtualinvoke rectangle.<java.awt.geom.Rectangle2D: double getMinX()>();

        return $stack6;

     label4:
        $stack5 = virtualinvoke rectangle.<java.awt.geom.Rectangle2D: double getMaxX()>();

        return $stack5;

     label5:
        return 0.0;
    }

    static void <clinit>()
    {
        org.jfree.chart.ui.RectangleEdge $stack0, $stack1, $stack2, $stack3, $stack5, $stack6, $stack7, $stack8;
        org.jfree.chart.ui.RectangleEdge[] $stack4;

        $stack0 = new org.jfree.chart.ui.RectangleEdge;

        specialinvoke $stack0.<org.jfree.chart.ui.RectangleEdge: void <init>(java.lang.String,int)>("TOP", 0);

        <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP> = $stack0;

        $stack1 = new org.jfree.chart.ui.RectangleEdge;

        specialinvoke $stack1.<org.jfree.chart.ui.RectangleEdge: void <init>(java.lang.String,int)>("BOTTOM", 1);

        <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM> = $stack1;

        $stack2 = new org.jfree.chart.ui.RectangleEdge;

        specialinvoke $stack2.<org.jfree.chart.ui.RectangleEdge: void <init>(java.lang.String,int)>("LEFT", 2);

        <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT> = $stack2;

        $stack3 = new org.jfree.chart.ui.RectangleEdge;

        specialinvoke $stack3.<org.jfree.chart.ui.RectangleEdge: void <init>(java.lang.String,int)>("RIGHT", 3);

        <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT> = $stack3;

        $stack4 = newarray (org.jfree.chart.ui.RectangleEdge)[4];

        $stack5 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        $stack4[0] = $stack5;

        $stack6 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        $stack4[1] = $stack6;

        $stack7 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        $stack4[2] = $stack7;

        $stack8 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        $stack4[3] = $stack8;

        <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge[] $VALUES> = $stack4;

        return;
    }
}
