public class org.jfree.chart.plot.RingPlot extends org.jfree.chart.plot.PiePlot implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.jfree.chart.plot.CenterTextMode centerTextMode;
    private java.lang.String centerText;
    private java.text.Format centerTextFormatter;
    private java.awt.Font centerTextFont;
    private java.awt.Color centerTextColor;
    private boolean separatorsVisible;
    private transient java.awt.Stroke separatorStroke;
    private transient java.awt.Paint separatorPaint;
    private double innerSeparatorExtension;
    private double outerSeparatorExtension;
    private double sectionDepth;

    public void <init>()
    {
        org.jfree.chart.plot.RingPlot this;

        this := @this: org.jfree.chart.plot.RingPlot;

        specialinvoke this.<org.jfree.chart.plot.RingPlot: void <init>(org.jfree.data.general.PieDataset)>(null);

        return;
    }

    public void <init>(org.jfree.data.general.PieDataset)
    {
        org.jfree.chart.plot.RingPlot this;
        org.jfree.data.general.PieDataset dataset;
        org.jfree.chart.plot.CenterTextMode $stack2, $stack4;
        java.text.DecimalFormat $stack3, $stack5;
        java.awt.Font $stack6;
        java.awt.Color $stack7, $stack9;
        java.awt.BasicStroke $stack8;

        this := @this: org.jfree.chart.plot.RingPlot;

        dataset := @parameter0: org.jfree.data.general.PieDataset;

        specialinvoke this.<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>(dataset);

        $stack2 = <org.jfree.chart.plot.CenterTextMode: org.jfree.chart.plot.CenterTextMode NONE>;

        this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.plot.CenterTextMode centerTextMode> = $stack2;

        $stack3 = new java.text.DecimalFormat;

        specialinvoke $stack3.<java.text.DecimalFormat: void <init>(java.lang.String)>("0.00");

        this.<org.jfree.chart.plot.RingPlot: java.text.Format centerTextFormatter> = $stack3;

        $stack4 = <org.jfree.chart.plot.CenterTextMode: org.jfree.chart.plot.CenterTextMode NONE>;

        this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.plot.CenterTextMode centerTextMode> = $stack4;

        this.<org.jfree.chart.plot.RingPlot: java.lang.String centerText> = null;

        $stack5 = new java.text.DecimalFormat;

        specialinvoke $stack5.<java.text.DecimalFormat: void <init>(java.lang.String)>("0.00");

        this.<org.jfree.chart.plot.RingPlot: java.text.Format centerTextFormatter> = $stack5;

        $stack6 = <org.jfree.chart.plot.RingPlot: java.awt.Font DEFAULT_LABEL_FONT>;

        this.<org.jfree.chart.plot.RingPlot: java.awt.Font centerTextFont> = $stack6;

        $stack7 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.plot.RingPlot: java.awt.Color centerTextColor> = $stack7;

        this.<org.jfree.chart.plot.RingPlot: boolean separatorsVisible> = 1;

        $stack8 = new java.awt.BasicStroke;

        specialinvoke $stack8.<java.awt.BasicStroke: void <init>(float)>(0.5F);

        this.<org.jfree.chart.plot.RingPlot: java.awt.Stroke separatorStroke> = $stack8;

        $stack9 = <java.awt.Color: java.awt.Color GRAY>;

        this.<org.jfree.chart.plot.RingPlot: java.awt.Paint separatorPaint> = $stack9;

        this.<org.jfree.chart.plot.RingPlot: double innerSeparatorExtension> = 0.2;

        this.<org.jfree.chart.plot.RingPlot: double outerSeparatorExtension> = 0.2;

        this.<org.jfree.chart.plot.RingPlot: double sectionDepth> = 0.2;

        return;
    }

    public org.jfree.chart.plot.CenterTextMode getCenterTextMode()
    {
        org.jfree.chart.plot.RingPlot this;
        org.jfree.chart.plot.CenterTextMode $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.plot.CenterTextMode centerTextMode>;

        return $stack1;
    }

    public void setCenterTextMode(org.jfree.chart.plot.CenterTextMode)
    {
        org.jfree.chart.plot.CenterTextMode mode;
        org.jfree.chart.plot.RingPlot this;

        this := @this: org.jfree.chart.plot.RingPlot;

        mode := @parameter0: org.jfree.chart.plot.CenterTextMode;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(mode, "mode");

        this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.plot.CenterTextMode centerTextMode> = mode;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public java.lang.String getCenterText()
    {
        org.jfree.chart.plot.RingPlot this;
        java.lang.String $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: java.lang.String centerText>;

        return $stack1;
    }

    public void setCenterText(java.lang.String)
    {
        org.jfree.chart.plot.RingPlot this;
        java.lang.String text;

        this := @this: org.jfree.chart.plot.RingPlot;

        text := @parameter0: java.lang.String;

        this.<org.jfree.chart.plot.RingPlot: java.lang.String centerText> = text;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public java.text.Format getCenterTextFormatter()
    {
        org.jfree.chart.plot.RingPlot this;
        java.text.Format $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: java.text.Format centerTextFormatter>;

        return $stack1;
    }

    public void setCenterTextFormatter(java.text.Format)
    {
        java.text.Format formatter;
        org.jfree.chart.plot.RingPlot this;

        this := @this: org.jfree.chart.plot.RingPlot;

        formatter := @parameter0: java.text.Format;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(formatter, "formatter");

        this.<org.jfree.chart.plot.RingPlot: java.text.Format centerTextFormatter> = formatter;

        return;
    }

    public java.awt.Font getCenterTextFont()
    {
        org.jfree.chart.plot.RingPlot this;
        java.awt.Font $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: java.awt.Font centerTextFont>;

        return $stack1;
    }

    public void setCenterTextFont(java.awt.Font)
    {
        java.awt.Font font;
        org.jfree.chart.plot.RingPlot this;

        this := @this: org.jfree.chart.plot.RingPlot;

        font := @parameter0: java.awt.Font;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(font, "font");

        this.<org.jfree.chart.plot.RingPlot: java.awt.Font centerTextFont> = font;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Color getCenterTextColor()
    {
        org.jfree.chart.plot.RingPlot this;
        java.awt.Color $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: java.awt.Color centerTextColor>;

        return $stack1;
    }

    public void setCenterTextColor(java.awt.Color)
    {
        java.awt.Color color;
        org.jfree.chart.plot.RingPlot this;

        this := @this: org.jfree.chart.plot.RingPlot;

        color := @parameter0: java.awt.Color;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(color, "color");

        this.<org.jfree.chart.plot.RingPlot: java.awt.Color centerTextColor> = color;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public boolean getSeparatorsVisible()
    {
        org.jfree.chart.plot.RingPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: boolean separatorsVisible>;

        return $stack1;
    }

    public void setSeparatorsVisible(boolean)
    {
        org.jfree.chart.plot.RingPlot this;
        boolean visible;

        this := @this: org.jfree.chart.plot.RingPlot;

        visible := @parameter0: boolean;

        this.<org.jfree.chart.plot.RingPlot: boolean separatorsVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Stroke getSeparatorStroke()
    {
        org.jfree.chart.plot.RingPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: java.awt.Stroke separatorStroke>;

        return $stack1;
    }

    public void setSeparatorStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.RingPlot this;

        this := @this: org.jfree.chart.plot.RingPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.RingPlot: java.awt.Stroke separatorStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getSeparatorPaint()
    {
        org.jfree.chart.plot.RingPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: java.awt.Paint separatorPaint>;

        return $stack1;
    }

    public void setSeparatorPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.RingPlot this;

        this := @this: org.jfree.chart.plot.RingPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.RingPlot: java.awt.Paint separatorPaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public double getInnerSeparatorExtension()
    {
        org.jfree.chart.plot.RingPlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: double innerSeparatorExtension>;

        return $stack1;
    }

    public void setInnerSeparatorExtension(double)
    {
        org.jfree.chart.plot.RingPlot this;
        double proportion;

        this := @this: org.jfree.chart.plot.RingPlot;

        proportion := @parameter0: double;

        this.<org.jfree.chart.plot.RingPlot: double innerSeparatorExtension> = proportion;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public double getOuterSeparatorExtension()
    {
        org.jfree.chart.plot.RingPlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: double outerSeparatorExtension>;

        return $stack1;
    }

    public void setOuterSeparatorExtension(double)
    {
        org.jfree.chart.plot.RingPlot this;
        double proportion;

        this := @this: org.jfree.chart.plot.RingPlot;

        proportion := @parameter0: double;

        this.<org.jfree.chart.plot.RingPlot: double outerSeparatorExtension> = proportion;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public double getSectionDepth()
    {
        org.jfree.chart.plot.RingPlot this;
        double $stack1;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = this.<org.jfree.chart.plot.RingPlot: double sectionDepth>;

        return $stack1;
    }

    public void setSectionDepth(double)
    {
        org.jfree.chart.plot.RingPlot this;
        double sectionDepth;

        this := @this: org.jfree.chart.plot.RingPlot;

        sectionDepth := @parameter0: double;

        this.<org.jfree.chart.plot.RingPlot: double sectionDepth> = sectionDepth;

        virtualinvoke this.<org.jfree.chart.plot.RingPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlot, java.lang.Integer, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.RingPlot this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea;
        org.jfree.chart.plot.PiePlot plot;
        java.lang.Integer index;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.plot.PiePlotState state;

        this := @this: org.jfree.chart.plot.RingPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        plot := @parameter2: org.jfree.chart.plot.PiePlot;

        index := @parameter3: java.lang.Integer;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        state = specialinvoke this.<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>(g2, plotArea, plot, index, info);

        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setPassesRequired(int)>(3);

        return state;
    }

    protected void drawItem(java.awt.Graphics2D, int, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState, int)
    {
        org.jfree.chart.plot.RingPlot this;
        org.jfree.data.general.PieDataset dataset;
        int section, currentPass, $stack97, $stack98;
        java.lang.Number n;
        double value, $stack48, $stack49, $stack50, angle, $stack51, $stack52, mep, $stack61, depth, $stack66, $stack67, $stack70, $stack73, $stack83, $stack84, $stack122, $stack124, $stack138, $stack139, $stack141, $stack184, $stack185, $stack186, angle1, angle2, ep, shadowXOffset, shadowYOffset;
        org.jfree.chart.util.Rotation direction, $stack44, $stack45;
        java.lang.IllegalStateException $stack46;
        org.jfree.chart.plot.PiePlotState state;
        byte $stack53, $stack56;
        java.lang.Comparable key;
        java.awt.geom.Rectangle2D $stack57, $stack58, arcBounds, dataArea;
        java.awt.geom.Arc2D$Double $stack60, $stack65;
        org.jfree.chart.ui.RectangleInsets $stack62;
        org.jfree.chart.util.UnitType $stack63;
        java.awt.geom.Rectangle2D$Double $stack64;
        java.awt.geom.GeneralPath $stack68;
        java.awt.geom.Point2D $stack69, $stack72, $stack78, $stack79;
        float $stack71, $stack74, $stack123, $stack126, $stack136, $stack137;
        java.awt.geom.PathIterator $stack75, $stack76;
        java.awt.geom.Line2D$Double $stack77;
        boolean $stack82, $stack91, $stack115, $stack118;
        java.awt.Graphics2D g2;
        java.awt.Stroke $stack86, outlineStroke;
        java.awt.Paint $stack87, shadowPaint, shadowXOffset#11;
        org.jfree.chart.urls.PieURLGenerator urlGenerator;
        org.jfree.chart.entity.PieSectionEntity $stack96;
        org.jfree.chart.plot.CenterTextMode $stack113, $stack114, $stack116, $stack117;
        java.awt.Font $stack120;
        java.awt.Color $stack121;
        org.jfree.chart.ui.TextAnchor $stack125;
        java.text.Format $stack129;
        org.jfree.chart.util.ShadowGenerator $stack135;
        java.awt.Shape shadowArc;
        java.lang.String shadowYOffset#15, tip, url;
        org.jfree.chart.plot.PlotRenderingInfo $stack92;
        org.jfree.chart.entity.EntityCollection shadowYOffset#22;
        org.jfree.chart.labels.PieToolTipGenerator shadowArc#24;
        java.awt.geom.Line2D shadowPaint#26;

        this := @this: org.jfree.chart.plot.RingPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        section := @parameter1: int;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        state := @parameter3: org.jfree.chart.plot.PiePlotState;

        currentPass := @parameter4: int;

        dataset = virtualinvoke this.<org.jfree.chart.plot.RingPlot: org.jfree.data.general.PieDataset getDataset()>();

        n = interfaceinvoke dataset.<org.jfree.data.general.PieDataset: java.lang.Number getValue(int)>(section);

        if n != null goto label01;

        return;

     label01:
        value = virtualinvoke n.<java.lang.Number: double doubleValue()>();

        direction = virtualinvoke this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.util.Rotation getDirection()>();

        $stack44 = <org.jfree.chart.util.Rotation: org.jfree.chart.util.Rotation CLOCKWISE>;

        if direction != $stack44 goto label02;

        angle1 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getLatestAngle()>();

        $stack184 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getTotal()>();

        $stack185 = value / $stack184;

        $stack186 = $stack185 * 360.0;

        angle2 = angle1 - $stack186;

        goto label04;

     label02:
        $stack45 = <org.jfree.chart.util.Rotation: org.jfree.chart.util.Rotation ANTICLOCKWISE>;

        if direction != $stack45 goto label03;

        angle1 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getLatestAngle()>();

        $stack48 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: double getTotal()>();

        $stack49 = value / $stack48;

        $stack50 = $stack49 * 360.0;

        angle2 = angle1 + $stack50;

        goto label04;

     label03:
        $stack46 = new java.lang.IllegalStateException;

        specialinvoke $stack46.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Rotation type not recognised.");

        throw $stack46;

     label04:
        angle = angle2 - angle1;

        $stack51 = staticinvoke <java.lang.Math: double abs(double)>(angle);

        $stack52 = virtualinvoke this.<org.jfree.chart.plot.RingPlot: double getMinimumArcAngleToDraw()>();

        $stack53 = $stack51 cmpl $stack52;

        if $stack53 <= 0 goto label16;

        key = virtualinvoke this.<org.jfree.chart.plot.RingPlot: java.lang.Comparable getSectionKey(int)>(section);

        ep = 0.0;

        mep = virtualinvoke this.<org.jfree.chart.plot.RingPlot: double getMaximumExplodePercent()>();

        $stack56 = mep cmpl 0.0;

        if $stack56 <= 0 goto label05;

        $stack141 = virtualinvoke this.<org.jfree.chart.plot.RingPlot: double getExplodePercent(java.lang.Comparable)>(key);

        ep = $stack141 / mep;

     label05:
        $stack57 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getPieArea()>();

        $stack58 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: java.awt.geom.Rectangle2D getExplodedPieArea()>();

        arcBounds = virtualinvoke this.<org.jfree.chart.plot.RingPlot: java.awt.geom.Rectangle2D getArcBounds(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double,double)>($stack57, $stack58, angle1, angle, ep);

        $stack60 = new java.awt.geom.Arc2D$Double;

        specialinvoke $stack60.<java.awt.geom.Arc2D$Double: void <init>(java.awt.geom.Rectangle2D,double,double,int)>(arcBounds, angle1, angle, 0);

        $stack61 = this.<org.jfree.chart.plot.RingPlot: double sectionDepth>;

        depth = $stack61 / 2.0;

        $stack62 = new org.jfree.chart.ui.RectangleInsets;

        $stack63 = <org.jfree.chart.util.UnitType: org.jfree.chart.util.UnitType RELATIVE>;

        specialinvoke $stack62.<org.jfree.chart.ui.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>($stack63, depth, depth, depth, depth);

        $stack64 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack64.<java.awt.geom.Rectangle2D$Double: void <init>()>();

        virtualinvoke $stack64.<java.awt.geom.Rectangle2D: void setRect(java.awt.geom.Rectangle2D)>(arcBounds);

        virtualinvoke $stack62.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>($stack64);

        $stack65 = new java.awt.geom.Arc2D$Double;

        $stack67 = angle1 + angle;

        $stack66 = neg angle;

        specialinvoke $stack65.<java.awt.geom.Arc2D$Double: void <init>(java.awt.geom.Rectangle2D,double,double,int)>($stack64, $stack67, $stack66, 0);

        $stack68 = new java.awt.geom.GeneralPath;

        specialinvoke $stack68.<java.awt.geom.GeneralPath: void <init>()>();

        $stack69 = virtualinvoke $stack60.<java.awt.geom.Arc2D$Double: java.awt.geom.Point2D getStartPoint()>();

        $stack70 = virtualinvoke $stack69.<java.awt.geom.Point2D: double getX()>();

        $stack71 = (float) $stack70;

        $stack72 = virtualinvoke $stack60.<java.awt.geom.Arc2D$Double: java.awt.geom.Point2D getStartPoint()>();

        $stack73 = virtualinvoke $stack72.<java.awt.geom.Point2D: double getY()>();

        $stack74 = (float) $stack73;

        virtualinvoke $stack68.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack71, $stack74);

        $stack75 = virtualinvoke $stack60.<java.awt.geom.Arc2D$Double: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        virtualinvoke $stack68.<java.awt.geom.GeneralPath: void append(java.awt.geom.PathIterator,boolean)>($stack75, 0);

        $stack76 = virtualinvoke $stack65.<java.awt.geom.Arc2D$Double: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

        virtualinvoke $stack68.<java.awt.geom.GeneralPath: void append(java.awt.geom.PathIterator,boolean)>($stack76, 1);

        virtualinvoke $stack68.<java.awt.geom.GeneralPath: void closePath()>();

        $stack77 = new java.awt.geom.Line2D$Double;

        $stack78 = virtualinvoke $stack65.<java.awt.geom.Arc2D$Double: java.awt.geom.Point2D getEndPoint()>();

        $stack79 = virtualinvoke $stack60.<java.awt.geom.Arc2D$Double: java.awt.geom.Point2D getStartPoint()>();

        specialinvoke $stack77.<java.awt.geom.Line2D$Double: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D)>($stack78, $stack79);

        if currentPass != 0 goto label07;

        shadowPaint = virtualinvoke this.<org.jfree.chart.plot.RingPlot: java.awt.Paint getShadowPaint()>();

        shadowXOffset = virtualinvoke this.<org.jfree.chart.plot.RingPlot: double getShadowXOffset()>();

        shadowYOffset = virtualinvoke this.<org.jfree.chart.plot.RingPlot: double getShadowYOffset()>();

        if shadowPaint == null goto label06;

        $stack135 = virtualinvoke this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.util.ShadowGenerator getShadowGenerator()>();

        if $stack135 != null goto label06;

        $stack136 = (float) shadowXOffset;

        $stack139 = (double) $stack136;

        $stack137 = (float) shadowYOffset;

        $stack138 = (double) $stack137;

        shadowArc = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>($stack68, $stack139, $stack138);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(shadowPaint);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(shadowArc);

     label06:
        goto label16;

     label07:
        if currentPass != 1 goto label15;

        shadowPaint = virtualinvoke this.<org.jfree.chart.plot.RingPlot: java.awt.Paint lookupSectionPaint(java.lang.Comparable)>(key);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(shadowPaint);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack68);

        shadowXOffset#11 = virtualinvoke this.<org.jfree.chart.plot.RingPlot: java.awt.Paint lookupSectionOutlinePaint(java.lang.Comparable)>(key);

        outlineStroke = virtualinvoke this.<org.jfree.chart.plot.RingPlot: java.awt.Stroke lookupSectionOutlineStroke(java.lang.Comparable)>(key);

        $stack91 = virtualinvoke this.<org.jfree.chart.plot.RingPlot: boolean getSectionOutlinesVisible()>();

        if $stack91 == 0 goto label08;

        if shadowXOffset#11 == null goto label08;

        if outlineStroke == null goto label08;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(shadowXOffset#11);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(outlineStroke);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack68);

     label08:
        if section != 0 goto label11;

        shadowYOffset#15 = null;

        $stack114 = this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.plot.CenterTextMode centerTextMode>;

        $stack113 = <org.jfree.chart.plot.CenterTextMode: org.jfree.chart.plot.CenterTextMode VALUE>;

        $stack115 = virtualinvoke $stack114.<org.jfree.chart.plot.CenterTextMode: boolean equals(java.lang.Object)>($stack113);

        if $stack115 == 0 goto label09;

        $stack129 = this.<org.jfree.chart.plot.RingPlot: java.text.Format centerTextFormatter>;

        shadowYOffset#15 = virtualinvoke $stack129.<java.text.Format: java.lang.String format(java.lang.Object)>(n);

        goto label10;

     label09:
        $stack117 = this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.plot.CenterTextMode centerTextMode>;

        $stack116 = <org.jfree.chart.plot.CenterTextMode: org.jfree.chart.plot.CenterTextMode FIXED>;

        $stack118 = virtualinvoke $stack117.<org.jfree.chart.plot.CenterTextMode: boolean equals(java.lang.Object)>($stack116);

        if $stack118 == 0 goto label10;

        shadowYOffset#15 = this.<org.jfree.chart.plot.RingPlot: java.lang.String centerText>;

     label10:
        if shadowYOffset#15 == null goto label11;

        $stack120 = this.<org.jfree.chart.plot.RingPlot: java.awt.Font centerTextFont>;

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack120);

        $stack121 = this.<org.jfree.chart.plot.RingPlot: java.awt.Color centerTextColor>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack121);

        $stack122 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $stack123 = (float) $stack122;

        $stack124 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getCenterY()>();

        $stack126 = (float) $stack124;

        $stack125 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER>;

        staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.ui.TextAnchor)>(shadowYOffset#15, g2, $stack123, $stack126, $stack125);

     label11:
        $stack92 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: org.jfree.chart.plot.PlotRenderingInfo getInfo()>();

        if $stack92 == null goto label14;

        shadowYOffset#22 = virtualinvoke state.<org.jfree.chart.plot.PiePlotState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if shadowYOffset#22 == null goto label14;

        tip = null;

        shadowArc#24 = virtualinvoke this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator()>();

        if shadowArc#24 == null goto label12;

        tip = interfaceinvoke shadowArc#24.<org.jfree.chart.labels.PieToolTipGenerator: java.lang.String generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)>(dataset, key);

     label12:
        url = null;

        urlGenerator = virtualinvoke this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.urls.PieURLGenerator getURLGenerator()>();

        if urlGenerator == null goto label13;

        $stack98 = virtualinvoke this.<org.jfree.chart.plot.RingPlot: int getPieIndex()>();

        url = interfaceinvoke urlGenerator.<org.jfree.chart.urls.PieURLGenerator: java.lang.String generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)>(dataset, key, $stack98);

     label13:
        $stack96 = new org.jfree.chart.entity.PieSectionEntity;

        $stack97 = virtualinvoke this.<org.jfree.chart.plot.RingPlot: int getPieIndex()>();

        specialinvoke $stack96.<org.jfree.chart.entity.PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>($stack68, dataset, $stack97, section, key, tip, url);

        interfaceinvoke shadowYOffset#22.<org.jfree.chart.entity.EntityCollection: void add(org.jfree.chart.entity.ChartEntity)>($stack96);

     label14:
        goto label16;

     label15:
        if currentPass != 2 goto label16;

        $stack82 = this.<org.jfree.chart.plot.RingPlot: boolean separatorsVisible>;

        if $stack82 == 0 goto label16;

        $stack84 = this.<org.jfree.chart.plot.RingPlot: double innerSeparatorExtension>;

        $stack83 = this.<org.jfree.chart.plot.RingPlot: double outerSeparatorExtension>;

        shadowPaint#26 = staticinvoke <org.jfree.chart.util.LineUtils: java.awt.geom.Line2D extendLine(java.awt.geom.Line2D,double,double)>($stack77, $stack84, $stack83);

        $stack86 = this.<org.jfree.chart.plot.RingPlot: java.awt.Stroke separatorStroke>;

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack86);

        $stack87 = this.<org.jfree.chart.plot.RingPlot: java.awt.Paint separatorPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack87);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(shadowPaint#26);

     label16:
        virtualinvoke state.<org.jfree.chart.plot.PiePlotState: void setLatestAngle(double)>(angle2);

        return;
    }

    protected double getLabelLinkDepth()
    {
        org.jfree.chart.plot.RingPlot this;
        double $stack1, $stack2, $stack3, $stack4;

        this := @this: org.jfree.chart.plot.RingPlot;

        $stack1 = specialinvoke this.<org.jfree.chart.plot.PiePlot: double getLabelLinkDepth()>();

        $stack2 = virtualinvoke this.<org.jfree.chart.plot.RingPlot: double getSectionDepth()>();

        $stack3 = $stack2 / 2.0;

        $stack4 = staticinvoke <java.lang.Math: double min(double,double)>($stack1, $stack3);

        return $stack4;
    }

    public boolean equals(java.lang.Object)
    {
        org.jfree.chart.plot.RingPlot this, that;
        java.lang.Object obj;
        boolean $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack19, $stack20, $stack23, $stack26, $stack36;
        org.jfree.chart.plot.CenterTextMode $stack4, $stack5;
        java.lang.String $stack7, $stack8;
        java.text.Format $stack10, $stack11;
        java.awt.Font $stack13, $stack14;
        java.awt.Color $stack16, $stack17;
        java.awt.Stroke $stack21, $stack22;
        java.awt.Paint $stack24, $stack25;
        double $stack27, $stack28, $stack30, $stack31, $stack33, $stack34;
        byte $stack29, $stack32, $stack35;

        this := @this: org.jfree.chart.plot.RingPlot;

        obj := @parameter0: java.lang.Object;

        if this != obj goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.plot.RingPlot;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        that = (org.jfree.chart.plot.RingPlot) obj;

        $stack5 = this.<org.jfree.chart.plot.RingPlot: org.jfree.chart.plot.CenterTextMode centerTextMode>;

        $stack4 = that.<org.jfree.chart.plot.RingPlot: org.jfree.chart.plot.CenterTextMode centerTextMode>;

        $stack6 = virtualinvoke $stack5.<org.jfree.chart.plot.CenterTextMode: boolean equals(java.lang.Object)>($stack4);

        if $stack6 != 0 goto label03;

        return 0;

     label03:
        $stack8 = this.<org.jfree.chart.plot.RingPlot: java.lang.String centerText>;

        $stack7 = that.<org.jfree.chart.plot.RingPlot: java.lang.String centerText>;

        $stack9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack8, $stack7);

        if $stack9 != 0 goto label04;

        return 0;

     label04:
        $stack11 = this.<org.jfree.chart.plot.RingPlot: java.text.Format centerTextFormatter>;

        $stack10 = that.<org.jfree.chart.plot.RingPlot: java.text.Format centerTextFormatter>;

        $stack12 = virtualinvoke $stack11.<java.lang.Object: boolean equals(java.lang.Object)>($stack10);

        if $stack12 != 0 goto label05;

        return 0;

     label05:
        $stack14 = this.<org.jfree.chart.plot.RingPlot: java.awt.Font centerTextFont>;

        $stack13 = that.<org.jfree.chart.plot.RingPlot: java.awt.Font centerTextFont>;

        $stack15 = virtualinvoke $stack14.<java.awt.Font: boolean equals(java.lang.Object)>($stack13);

        if $stack15 != 0 goto label06;

        return 0;

     label06:
        $stack17 = this.<org.jfree.chart.plot.RingPlot: java.awt.Color centerTextColor>;

        $stack16 = that.<org.jfree.chart.plot.RingPlot: java.awt.Color centerTextColor>;

        $stack18 = virtualinvoke $stack17.<java.awt.Color: boolean equals(java.lang.Object)>($stack16);

        if $stack18 != 0 goto label07;

        return 0;

     label07:
        $stack20 = this.<org.jfree.chart.plot.RingPlot: boolean separatorsVisible>;

        $stack19 = that.<org.jfree.chart.plot.RingPlot: boolean separatorsVisible>;

        if $stack20 == $stack19 goto label08;

        return 0;

     label08:
        $stack22 = this.<org.jfree.chart.plot.RingPlot: java.awt.Stroke separatorStroke>;

        $stack21 = that.<org.jfree.chart.plot.RingPlot: java.awt.Stroke separatorStroke>;

        $stack23 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack22, $stack21);

        if $stack23 != 0 goto label09;

        return 0;

     label09:
        $stack25 = this.<org.jfree.chart.plot.RingPlot: java.awt.Paint separatorPaint>;

        $stack24 = that.<org.jfree.chart.plot.RingPlot: java.awt.Paint separatorPaint>;

        $stack26 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack25, $stack24);

        if $stack26 != 0 goto label10;

        return 0;

     label10:
        $stack28 = this.<org.jfree.chart.plot.RingPlot: double innerSeparatorExtension>;

        $stack27 = that.<org.jfree.chart.plot.RingPlot: double innerSeparatorExtension>;

        $stack29 = $stack28 cmpl $stack27;

        if $stack29 == 0 goto label11;

        return 0;

     label11:
        $stack31 = this.<org.jfree.chart.plot.RingPlot: double outerSeparatorExtension>;

        $stack30 = that.<org.jfree.chart.plot.RingPlot: double outerSeparatorExtension>;

        $stack32 = $stack31 cmpl $stack30;

        if $stack32 == 0 goto label12;

        return 0;

     label12:
        $stack34 = this.<org.jfree.chart.plot.RingPlot: double sectionDepth>;

        $stack33 = that.<org.jfree.chart.plot.RingPlot: double sectionDepth>;

        $stack35 = $stack34 cmpl $stack33;

        if $stack35 == 0 goto label13;

        return 0;

     label13:
        $stack36 = specialinvoke this.<org.jfree.chart.plot.PiePlot: boolean equals(java.lang.Object)>(obj);

        return $stack36;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.plot.RingPlot this;
        java.awt.Stroke $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.plot.RingPlot;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.plot.RingPlot: java.awt.Stroke separatorStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.plot.RingPlot: java.awt.Paint separatorPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.plot.RingPlot this;
        java.awt.Stroke $stack2;
        java.awt.Paint $stack3;

        this := @this: org.jfree.chart.plot.RingPlot;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.RingPlot: java.awt.Stroke separatorStroke> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.RingPlot: java.awt.Paint separatorPaint> = $stack3;

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.plot.RingPlot: long serialVersionUID> = 1556064784129676620L;

        return;
    }
}
