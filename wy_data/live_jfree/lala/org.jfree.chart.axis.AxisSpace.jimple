public class org.jfree.chart.axis.AxisSpace extends java.lang.Object implements java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private double top;
    private double bottom;
    private double left;
    private double right;

    public void <init>()
    {
        org.jfree.chart.axis.AxisSpace this;

        this := @this: org.jfree.chart.axis.AxisSpace;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.jfree.chart.axis.AxisSpace: double top> = 0.0;

        this.<org.jfree.chart.axis.AxisSpace: double bottom> = 0.0;

        this.<org.jfree.chart.axis.AxisSpace: double left> = 0.0;

        this.<org.jfree.chart.axis.AxisSpace: double right> = 0.0;

        return;
    }

    public double getTop()
    {
        org.jfree.chart.axis.AxisSpace this;
        double $stack1;

        this := @this: org.jfree.chart.axis.AxisSpace;

        $stack1 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        return $stack1;
    }

    public void setTop(double)
    {
        org.jfree.chart.axis.AxisSpace this;
        double space;

        this := @this: org.jfree.chart.axis.AxisSpace;

        space := @parameter0: double;

        this.<org.jfree.chart.axis.AxisSpace: double top> = space;

        return;
    }

    public double getBottom()
    {
        org.jfree.chart.axis.AxisSpace this;
        double $stack1;

        this := @this: org.jfree.chart.axis.AxisSpace;

        $stack1 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        return $stack1;
    }

    public void setBottom(double)
    {
        org.jfree.chart.axis.AxisSpace this;
        double space;

        this := @this: org.jfree.chart.axis.AxisSpace;

        space := @parameter0: double;

        this.<org.jfree.chart.axis.AxisSpace: double bottom> = space;

        return;
    }

    public double getLeft()
    {
        org.jfree.chart.axis.AxisSpace this;
        double $stack1;

        this := @this: org.jfree.chart.axis.AxisSpace;

        $stack1 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        return $stack1;
    }

    public void setLeft(double)
    {
        org.jfree.chart.axis.AxisSpace this;
        double space;

        this := @this: org.jfree.chart.axis.AxisSpace;

        space := @parameter0: double;

        this.<org.jfree.chart.axis.AxisSpace: double left> = space;

        return;
    }

    public double getRight()
    {
        org.jfree.chart.axis.AxisSpace this;
        double $stack1;

        this := @this: org.jfree.chart.axis.AxisSpace;

        $stack1 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        return $stack1;
    }

    public void setRight(double)
    {
        org.jfree.chart.axis.AxisSpace this;
        double space;

        this := @this: org.jfree.chart.axis.AxisSpace;

        space := @parameter0: double;

        this.<org.jfree.chart.axis.AxisSpace: double right> = space;

        return;
    }

    public void add(double, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge, $stack4, $stack5, $stack6, $stack7;
        java.lang.IllegalStateException $stack8;
        org.jfree.chart.axis.AxisSpace this;
        double space, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16;

        this := @this: org.jfree.chart.axis.AxisSpace;

        space := @parameter0: double;

        edge := @parameter1: org.jfree.chart.ui.RectangleEdge;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(edge, "edge");

        $stack4 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack4 goto label1;

        $stack15 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack16 = $stack15 + space;

        this.<org.jfree.chart.axis.AxisSpace: double top> = $stack16;

        goto label5;

     label1:
        $stack5 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack5 goto label2;

        $stack13 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        $stack14 = $stack13 + space;

        this.<org.jfree.chart.axis.AxisSpace: double bottom> = $stack14;

        goto label5;

     label2:
        $stack6 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack6 goto label3;

        $stack11 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack12 = $stack11 + space;

        this.<org.jfree.chart.axis.AxisSpace: double left> = $stack12;

        goto label5;

     label3:
        $stack7 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack7 goto label4;

        $stack9 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack10 = $stack9 + space;

        this.<org.jfree.chart.axis.AxisSpace: double right> = $stack10;

        goto label5;

     label4:
        $stack8 = new java.lang.IllegalStateException;

        specialinvoke $stack8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unrecognised \'edge\' argument.");

        throw $stack8;

     label5:
        return;
    }

    public void ensureAtLeast(org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.axis.AxisSpace this, space;
        double $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13;

        this := @this: org.jfree.chart.axis.AxisSpace;

        space := @parameter0: org.jfree.chart.axis.AxisSpace;

        $stack3 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack2 = space.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack4 = staticinvoke <java.lang.Math: double max(double,double)>($stack3, $stack2);

        this.<org.jfree.chart.axis.AxisSpace: double top> = $stack4;

        $stack6 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        $stack5 = space.<org.jfree.chart.axis.AxisSpace: double bottom>;

        $stack7 = staticinvoke <java.lang.Math: double max(double,double)>($stack6, $stack5);

        this.<org.jfree.chart.axis.AxisSpace: double bottom> = $stack7;

        $stack9 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack8 = space.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack10 = staticinvoke <java.lang.Math: double max(double,double)>($stack9, $stack8);

        this.<org.jfree.chart.axis.AxisSpace: double left> = $stack10;

        $stack12 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack11 = space.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack13 = staticinvoke <java.lang.Math: double max(double,double)>($stack12, $stack11);

        this.<org.jfree.chart.axis.AxisSpace: double right> = $stack13;

        return;
    }

    public void ensureAtLeast(double, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge, $stack4, $stack5, $stack6, $stack7;
        java.lang.IllegalStateException $stack8;
        org.jfree.chart.axis.AxisSpace this;
        double space, $stack9, $stack11, $stack13, $stack15;
        byte $stack10, $stack12, $stack14, $stack16;

        this := @this: org.jfree.chart.axis.AxisSpace;

        space := @parameter0: double;

        edge := @parameter1: org.jfree.chart.ui.RectangleEdge;

        $stack4 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack4 goto label1;

        $stack15 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack16 = $stack15 cmpg space;

        if $stack16 >= 0 goto label5;

        this.<org.jfree.chart.axis.AxisSpace: double top> = space;

        goto label5;

     label1:
        $stack5 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack5 goto label2;

        $stack13 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        $stack14 = $stack13 cmpg space;

        if $stack14 >= 0 goto label5;

        this.<org.jfree.chart.axis.AxisSpace: double bottom> = space;

        goto label5;

     label2:
        $stack6 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack6 goto label3;

        $stack11 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack12 = $stack11 cmpg space;

        if $stack12 >= 0 goto label5;

        this.<org.jfree.chart.axis.AxisSpace: double left> = space;

        goto label5;

     label3:
        $stack7 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack7 goto label4;

        $stack9 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack10 = $stack9 cmpg space;

        if $stack10 >= 0 goto label5;

        this.<org.jfree.chart.axis.AxisSpace: double right> = space;

        goto label5;

     label4:
        $stack8 = new java.lang.IllegalStateException;

        specialinvoke $stack8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AxisSpace.ensureAtLeast(): unrecognised AxisLocation.");

        throw $stack8;

     label5:
        return;
    }

    public java.awt.geom.Rectangle2D shrink(java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D area, result;
        double $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18;
        org.jfree.chart.axis.AxisSpace this;
        java.awt.geom.Rectangle2D$Double $stack19;

        this := @this: org.jfree.chart.axis.AxisSpace;

        area := @parameter0: java.awt.geom.Rectangle2D;

        result := @parameter1: java.awt.geom.Rectangle2D;

        if result != null goto label1;

        $stack19 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack19.<java.awt.geom.Rectangle2D$Double: void <init>()>();

        result = $stack19;

     label1:
        $stack3 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack4 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack5 = $stack3 + $stack4;

        $stack6 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack7 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack8 = $stack6 + $stack7;

        $stack9 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack10 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack12 = $stack9 - $stack10;

        $stack11 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack13 = $stack12 - $stack11;

        $stack14 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack15 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack17 = $stack14 - $stack15;

        $stack16 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        $stack18 = $stack17 - $stack16;

        virtualinvoke result.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($stack5, $stack8, $stack13, $stack18);

        return result;
    }

    public java.awt.geom.Rectangle2D expand(java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D area, result;
        double $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18;
        org.jfree.chart.axis.AxisSpace this;
        java.awt.geom.Rectangle2D$Double $stack19;

        this := @this: org.jfree.chart.axis.AxisSpace;

        area := @parameter0: java.awt.geom.Rectangle2D;

        result := @parameter1: java.awt.geom.Rectangle2D;

        if result != null goto label1;

        $stack19 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $stack19.<java.awt.geom.Rectangle2D$Double: void <init>()>();

        result = $stack19;

     label1:
        $stack3 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack4 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack5 = $stack3 - $stack4;

        $stack6 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack7 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack8 = $stack6 - $stack7;

        $stack9 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack10 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack12 = $stack9 + $stack10;

        $stack11 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack13 = $stack12 + $stack11;

        $stack14 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack15 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack17 = $stack14 + $stack15;

        $stack16 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        $stack18 = $stack17 + $stack16;

        virtualinvoke result.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($stack5, $stack8, $stack13, $stack18);

        return result;
    }

    public java.awt.geom.Rectangle2D reserved(java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge, $stack4, $stack5, $stack6, $stack7;
        java.awt.geom.Rectangle2D$Double $stack8, $stack16, $stack21, $stack28, result;
        java.awt.geom.Rectangle2D area;
        double $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack17, $stack18, $stack19, $stack20, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack29, $stack30, $stack31, $stack32;
        org.jfree.chart.axis.AxisSpace this;

        this := @this: org.jfree.chart.axis.AxisSpace;

        area := @parameter0: java.awt.geom.Rectangle2D;

        edge := @parameter1: org.jfree.chart.ui.RectangleEdge;

        result = null;

        $stack4 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack4 goto label1;

        $stack28 = new java.awt.geom.Rectangle2D$Double;

        $stack29 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack30 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack31 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack32 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        specialinvoke $stack28.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack29, $stack30, $stack31, $stack32);

        result = $stack28;

        goto label4;

     label1:
        $stack5 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack5 goto label2;

        $stack21 = new java.awt.geom.Rectangle2D$Double;

        $stack22 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack23 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack24 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack25 = $stack23 - $stack24;

        $stack26 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack27 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        specialinvoke $stack21.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack22, $stack25, $stack26, $stack27);

        result = $stack21;

        goto label4;

     label2:
        $stack6 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack6 goto label3;

        $stack16 = new java.awt.geom.Rectangle2D$Double;

        $stack17 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack18 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack19 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack20 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack16.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack17, $stack18, $stack19, $stack20);

        result = $stack16;

        goto label4;

     label3:
        $stack7 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack7 goto label4;

        $stack8 = new java.awt.geom.Rectangle2D$Double;

        $stack9 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack10 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack11 = $stack9 - $stack10;

        $stack12 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getY()>();

        $stack13 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack14 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $stack8.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack11, $stack12, $stack13, $stack14);

        result = $stack8;

     label4:
        return result;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.axis.AxisSpace this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.axis.AxisSpace;

        $stack1 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        return $stack1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.axis.AxisSpace this, that;
        boolean $stack3;
        double $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14;
        byte $stack6, $stack9, $stack12, $stack15;

        this := @this: org.jfree.chart.axis.AxisSpace;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.axis.AxisSpace;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.axis.AxisSpace) obj;

        $stack5 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack4 = that.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack6 = $stack5 cmpl $stack4;

        if $stack6 == 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        $stack7 = that.<org.jfree.chart.axis.AxisSpace: double bottom>;

        $stack9 = $stack8 cmpl $stack7;

        if $stack9 == 0 goto label4;

        return 0;

     label4:
        $stack11 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack10 = that.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack12 = $stack11 cmpl $stack10;

        if $stack12 == 0 goto label5;

        return 0;

     label5:
        $stack14 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack13 = that.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack15 = $stack14 cmpl $stack13;

        if $stack15 == 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.axis.AxisSpace this;
        double $stack4, $stack10, $stack16, $stack22;
        long $stack6, $stack7, $stack12, $stack13, $stack18, $stack19, $stack24, $stack25, l;
        int $stack8, $stack9, $stack14, $stack15, $stack20, $stack21, $stack26, $stack27, result#3;

        this := @this: org.jfree.chart.axis.AxisSpace;

        $stack4 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        l = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack4);

        $stack9 = 37 * 23;

        $stack6 = l >>> 32;

        $stack7 = l ^ $stack6;

        $stack8 = (int) $stack7;

        result#3 = $stack9 + $stack8;

        $stack10 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        l = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack10);

        $stack15 = 37 * result#3;

        $stack12 = l >>> 32;

        $stack13 = l ^ $stack12;

        $stack14 = (int) $stack13;

        result#3 = $stack15 + $stack14;

        $stack16 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        l = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack16);

        $stack21 = 37 * result#3;

        $stack18 = l >>> 32;

        $stack19 = l ^ $stack18;

        $stack20 = (int) $stack19;

        result#3 = $stack21 + $stack20;

        $stack22 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        l = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($stack22);

        $stack27 = 37 * result#3;

        $stack24 = l >>> 32;

        $stack25 = l ^ $stack24;

        $stack26 = (int) $stack25;

        result#3 = $stack27 + $stack26;

        return result#3;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16;
        org.jfree.chart.axis.AxisSpace this;
        java.lang.String $stack2, $stack17;
        double $stack5, $stack8, $stack11, $stack14;

        this := @this: org.jfree.chart.axis.AxisSpace;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = specialinvoke this.<java.lang.Object: java.lang.String toString()>();

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[left=");

        $stack5 = this.<org.jfree.chart.axis.AxisSpace: double left>;

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",right=");

        $stack8 = this.<org.jfree.chart.axis.AxisSpace: double right>;

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",top=");

        $stack11 = this.<org.jfree.chart.axis.AxisSpace: double top>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",bottom=");

        $stack14 = this.<org.jfree.chart.axis.AxisSpace: double bottom>;

        $stack15 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($stack14);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack17;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.axis.AxisSpace: long serialVersionUID> = -2490732595134766305L;

        return;
    }
}
