public class org.jfree.chart.axis.CategoryAxis extends org.jfree.chart.axis.Axis implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final double DEFAULT_AXIS_MARGIN;
    public static final double DEFAULT_CATEGORY_MARGIN;
    private double lowerMargin;
    private double upperMargin;
    private double categoryMargin;
    private int maximumCategoryLabelLines;
    private float maximumCategoryLabelWidthRatio;
    private int categoryLabelPositionOffset;
    private org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions;
    private java.util.Map tickLabelFontMap;
    private transient java.util.Map tickLabelPaintMap;
    private java.util.Map categoryLabelToolTips;
    private java.util.Map categoryLabelURLs;

    public void <init>()
    {
        org.jfree.chart.axis.CategoryAxis this;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        specialinvoke this.<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>(null);

        return;
    }

    public void <init>(java.lang.String)
    {
        org.jfree.chart.axis.CategoryAxis this;
        java.lang.String label;
        org.jfree.chart.axis.CategoryLabelPositions $stack2;
        java.util.HashMap $stack3, $stack4, $stack5, $stack6;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        label := @parameter0: java.lang.String;

        specialinvoke this.<org.jfree.chart.axis.Axis: void <init>(java.lang.String)>(label);

        this.<org.jfree.chart.axis.CategoryAxis: double lowerMargin> = 0.05;

        this.<org.jfree.chart.axis.CategoryAxis: double upperMargin> = 0.05;

        this.<org.jfree.chart.axis.CategoryAxis: double categoryMargin> = 0.2;

        this.<org.jfree.chart.axis.CategoryAxis: int maximumCategoryLabelLines> = 1;

        this.<org.jfree.chart.axis.CategoryAxis: float maximumCategoryLabelWidthRatio> = 0.0F;

        this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset> = 4;

        $stack2 = <org.jfree.chart.axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions STANDARD>;

        this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions> = $stack2;

        $stack3 = new java.util.HashMap;

        specialinvoke $stack3.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelFontMap> = $stack3;

        $stack4 = new java.util.HashMap;

        specialinvoke $stack4.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap> = $stack4;

        $stack5 = new java.util.HashMap;

        specialinvoke $stack5.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips> = $stack5;

        $stack6 = new java.util.HashMap;

        specialinvoke $stack6.<java.util.HashMap: void <init>()>();

        this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelURLs> = $stack6;

        return;
    }

    public double getLowerMargin()
    {
        org.jfree.chart.axis.CategoryAxis this;
        double $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = this.<org.jfree.chart.axis.CategoryAxis: double lowerMargin>;

        return $stack1;
    }

    public void setLowerMargin(double)
    {
        org.jfree.chart.axis.CategoryAxis this;
        double margin;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        margin := @parameter0: double;

        this.<org.jfree.chart.axis.CategoryAxis: double lowerMargin> = margin;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public double getUpperMargin()
    {
        org.jfree.chart.axis.CategoryAxis this;
        double $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = this.<org.jfree.chart.axis.CategoryAxis: double upperMargin>;

        return $stack1;
    }

    public void setUpperMargin(double)
    {
        org.jfree.chart.axis.CategoryAxis this;
        double margin;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        margin := @parameter0: double;

        this.<org.jfree.chart.axis.CategoryAxis: double upperMargin> = margin;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public double getCategoryMargin()
    {
        org.jfree.chart.axis.CategoryAxis this;
        double $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = this.<org.jfree.chart.axis.CategoryAxis: double categoryMargin>;

        return $stack1;
    }

    public void setCategoryMargin(double)
    {
        org.jfree.chart.axis.CategoryAxis this;
        double margin;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        margin := @parameter0: double;

        this.<org.jfree.chart.axis.CategoryAxis: double categoryMargin> = margin;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public int getMaximumCategoryLabelLines()
    {
        org.jfree.chart.axis.CategoryAxis this;
        int $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = this.<org.jfree.chart.axis.CategoryAxis: int maximumCategoryLabelLines>;

        return $stack1;
    }

    public void setMaximumCategoryLabelLines(int)
    {
        org.jfree.chart.axis.CategoryAxis this;
        int lines;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        lines := @parameter0: int;

        this.<org.jfree.chart.axis.CategoryAxis: int maximumCategoryLabelLines> = lines;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public float getMaximumCategoryLabelWidthRatio()
    {
        org.jfree.chart.axis.CategoryAxis this;
        float $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = this.<org.jfree.chart.axis.CategoryAxis: float maximumCategoryLabelWidthRatio>;

        return $stack1;
    }

    public void setMaximumCategoryLabelWidthRatio(float)
    {
        org.jfree.chart.axis.CategoryAxis this;
        float ratio;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        ratio := @parameter0: float;

        this.<org.jfree.chart.axis.CategoryAxis: float maximumCategoryLabelWidthRatio> = ratio;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public int getCategoryLabelPositionOffset()
    {
        org.jfree.chart.axis.CategoryAxis this;
        int $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        return $stack1;
    }

    public void setCategoryLabelPositionOffset(int)
    {
        org.jfree.chart.axis.CategoryAxis this;
        int offset;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        offset := @parameter0: int;

        this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset> = offset;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.axis.CategoryLabelPositions getCategoryLabelPositions()
    {
        org.jfree.chart.axis.CategoryAxis this;
        org.jfree.chart.axis.CategoryLabelPositions $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions>;

        return $stack1;
    }

    public void setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)
    {
        org.jfree.chart.axis.CategoryLabelPositions positions;
        org.jfree.chart.axis.CategoryAxis this;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        positions := @parameter0: org.jfree.chart.axis.CategoryLabelPositions;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(positions, "positions");

        this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions> = positions;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Font getTickLabelFont(java.lang.Comparable)
    {
        java.lang.Comparable category;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack3;
        java.lang.Object $stack4;
        java.awt.Font result;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        $stack3 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelFontMap>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(category);

        result = (java.awt.Font) $stack4;

        if result != null goto label1;

        result = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Font getTickLabelFont()>();

     label1:
        return result;
    }

    public void setTickLabelFont(java.lang.Comparable, java.awt.Font)
    {
        java.lang.Comparable category;
        java.awt.Font font;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack3, $stack5;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        font := @parameter1: java.awt.Font;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        if font != null goto label1;

        $stack5 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelFontMap>;

        interfaceinvoke $stack5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(category);

        goto label2;

     label1:
        $stack3 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelFontMap>;

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(category, font);

     label2:
        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getTickLabelPaint(java.lang.Comparable)
    {
        java.lang.Comparable category;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack3;
        java.lang.Object $stack4;
        java.awt.Paint result;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        $stack3 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(category);

        result = (java.awt.Paint) $stack4;

        if result != null goto label1;

        result = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Paint getTickLabelPaint()>();

     label1:
        return result;
    }

    public void setTickLabelPaint(java.lang.Comparable, java.awt.Paint)
    {
        java.lang.Comparable category;
        java.awt.Paint paint;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack3, $stack5;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        paint := @parameter1: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        if paint != null goto label1;

        $stack5 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap>;

        interfaceinvoke $stack5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(category);

        goto label2;

     label1:
        $stack3 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap>;

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(category, paint);

     label2:
        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public void addCategoryLabelToolTip(java.lang.Comparable, java.lang.String)
    {
        java.lang.Comparable category;
        org.jfree.chart.axis.CategoryAxis this;
        java.lang.String tooltip;
        java.util.Map $stack3;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        tooltip := @parameter1: java.lang.String;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        $stack3 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips>;

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(category, tooltip);

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public java.lang.String getCategoryLabelToolTip(java.lang.Comparable)
    {
        java.lang.Comparable category;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack2;
        java.lang.Object $stack3;
        java.lang.String $stack4;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        $stack2 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(category);

        $stack4 = (java.lang.String) $stack3;

        return $stack4;
    }

    public void removeCategoryLabelToolTip(java.lang.Comparable)
    {
        java.lang.Comparable category;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack2;
        java.lang.Object $stack3;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        $stack2 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(category);

        if $stack3 == null goto label1;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

     label1:
        return;
    }

    public void clearCategoryLabelToolTips()
    {
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips>;

        interfaceinvoke $stack1.<java.util.Map: void clear()>();

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public void addCategoryLabelURL(java.lang.Comparable, java.lang.String)
    {
        java.lang.Comparable category;
        org.jfree.chart.axis.CategoryAxis this;
        java.lang.String url;
        java.util.Map $stack3;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        url := @parameter1: java.lang.String;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        $stack3 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelURLs>;

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(category, url);

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public java.lang.String getCategoryLabelURL(java.lang.Comparable)
    {
        java.lang.Comparable category;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack2;
        java.lang.Object $stack3;
        java.lang.String $stack4;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        $stack2 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelURLs>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object get(java.lang.Object)>(category);

        $stack4 = (java.lang.String) $stack3;

        return $stack4;
    }

    public void removeCategoryLabelURL(java.lang.Comparable)
    {
        java.lang.Comparable category;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack2;
        java.lang.Object $stack3;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(category, "category");

        $stack2 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelURLs>;

        $stack3 = interfaceinvoke $stack2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(category);

        if $stack3 == null goto label1;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

     label1:
        return;
    }

    public void clearCategoryLabelURLs()
    {
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelURLs>;

        interfaceinvoke $stack1.<java.util.Map: void clear()>();

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void fireChangeEvent()>();

        return;
    }

    public double getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor, int, int, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.axis.CategoryAnchor anchor, $stack8, $stack9, $stack10;
        org.jfree.chart.axis.CategoryAxis this;
        int category, categoryCount;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.ui.RectangleEdge edge;
        double result;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        anchor := @parameter0: org.jfree.chart.axis.CategoryAnchor;

        category := @parameter1: int;

        categoryCount := @parameter2: int;

        area := @parameter3: java.awt.geom.Rectangle2D;

        edge := @parameter4: org.jfree.chart.ui.RectangleEdge;

        result = 0.0;

        $stack8 = <org.jfree.chart.axis.CategoryAnchor: org.jfree.chart.axis.CategoryAnchor START>;

        if anchor != $stack8 goto label1;

        result = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(category, categoryCount, area, edge);

        goto label3;

     label1:
        $stack9 = <org.jfree.chart.axis.CategoryAnchor: org.jfree.chart.axis.CategoryAnchor MIDDLE>;

        if anchor != $stack9 goto label2;

        result = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(category, categoryCount, area, edge);

        goto label3;

     label2:
        $stack10 = <org.jfree.chart.axis.CategoryAnchor: org.jfree.chart.axis.CategoryAnchor END>;

        if anchor != $stack10 goto label3;

        result = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(category, categoryCount, area, edge);

     label3:
        return result;
    }

    public double getCategoryStart(int, int, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge, $stack11, $stack21, $stack22, $stack41;
        java.awt.geom.Rectangle2D area;
        double $stack12, $stack13, $stack14, $stack15, categorySize, categoryGapWidth, $stack23, $stack24, $stack25, $stack26, result, $stack19, $stack18, $stack20;
        org.jfree.chart.axis.CategoryAxis this;
        int categoryCount, category;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: int;

        categoryCount := @parameter1: int;

        area := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        result = 0.0;

        $stack11 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge == $stack11 goto label1;

        $stack21 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack21 goto label2;

     label1:
        $stack12 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getX()>();

        $stack13 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack14 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getLowerMargin()>();

        $stack15 = $stack13 * $stack14;

        result = $stack12 + $stack15;

        goto label4;

     label2:
        $stack22 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge == $stack22 goto label3;

        $stack41 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack41 goto label4;

     label3:
        $stack23 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack24 = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack25 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getLowerMargin()>();

        $stack26 = $stack24 * $stack25;

        result = $stack23 + $stack26;

     label4:
        categorySize = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryCount, area, edge);

        categoryGapWidth = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double calculateCategoryGapSize(int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryCount, area, edge);

        $stack19 = (double) category;

        $stack18 = categorySize + categoryGapWidth;

        $stack20 = $stack19 * $stack18;

        result = result + $stack20;

        return result;
    }

    public double getCategoryMiddle(int, int, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        int category, categoryCount;
        java.lang.IllegalArgumentException $stack5;
        java.lang.StringBuilder $stack6, $stack7, $stack8;
        java.lang.String $stack9;
        org.jfree.chart.axis.CategoryAxis this;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.ui.RectangleEdge edge;
        double $stack10, $stack11, $stack12, $stack13;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: int;

        categoryCount := @parameter1: int;

        area := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        if category < 0 goto label1;

        if category < categoryCount goto label2;

     label1:
        $stack5 = new java.lang.IllegalArgumentException;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid category index: ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(category);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack9);

        throw $stack5;

     label2:
        $stack10 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(category, categoryCount, area, edge);

        $stack11 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryCount, area, edge);

        $stack12 = $stack11 / 2.0;

        $stack13 = $stack10 + $stack12;

        return $stack13;
    }

    public double getCategoryEnd(int, int, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.axis.CategoryAxis this;
        int category, categoryCount;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.ui.RectangleEdge edge;
        double $stack5, $stack6, $stack7;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: int;

        categoryCount := @parameter1: int;

        area := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        $stack5 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(category, categoryCount, area, edge);

        $stack6 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryCount, area, edge);

        $stack7 = $stack5 + $stack6;

        return $stack7;
    }

    public double getCategoryMiddle(java.lang.Comparable, java.util.List, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        java.util.List categories;
        java.lang.Comparable category;
        int categoryIndex, categoryCount;
        org.jfree.chart.axis.CategoryAxis this;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.ui.RectangleEdge edge;
        double $stack9;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        categories := @parameter1: java.util.List;

        area := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(categories, "categories");

        categoryIndex = interfaceinvoke categories.<java.util.List: int indexOf(java.lang.Object)>(category);

        categoryCount = interfaceinvoke categories.<java.util.List: int size()>();

        $stack9 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, categoryCount, area, edge);

        return $stack9;
    }

    public double getCategorySeriesMiddle(java.lang.Comparable, java.lang.Comparable, org.jfree.data.category.CategoryDataset, double, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.data.category.CategoryDataset dataset;
        java.lang.Comparable category, seriesKey;
        int categoryIndex, categoryCount, seriesIndex, seriesCount, $stack28;
        org.jfree.chart.axis.CategoryAxis this;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.ui.RectangleEdge edge;
        double start, end, width, itemMargin, $stack29, $stack30, gap, $stack31, $stack32, $stack33, ww, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        seriesKey := @parameter1: java.lang.Comparable;

        dataset := @parameter2: org.jfree.data.category.CategoryDataset;

        itemMargin := @parameter3: double;

        area := @parameter4: java.awt.geom.Rectangle2D;

        edge := @parameter5: org.jfree.chart.ui.RectangleEdge;

        categoryIndex = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnIndex(java.lang.Comparable)>(category);

        categoryCount = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getColumnCount()>();

        seriesIndex = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getRowIndex(java.lang.Comparable)>(seriesKey);

        seriesCount = interfaceinvoke dataset.<org.jfree.data.category.CategoryDataset: int getRowCount()>();

        start = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, categoryCount, area, edge);

        end = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, categoryCount, area, edge);

        width = end - start;

        if seriesCount != 1 goto label1;

        $stack40 = width / 2.0;

        $stack41 = start + $stack40;

        return $stack41;

     label1:
        $stack30 = width * itemMargin;

        $stack28 = seriesCount - 1;

        $stack29 = (double) $stack28;

        gap = $stack30 / $stack29;

        $stack31 = 1.0 - itemMargin;

        $stack33 = width * $stack31;

        $stack32 = (double) seriesCount;

        ww = $stack33 / $stack32;

        $stack35 = (double) seriesIndex;

        $stack34 = ww + gap;

        $stack36 = $stack35 * $stack34;

        $stack38 = start + $stack36;

        $stack37 = ww / 2.0;

        $stack39 = $stack38 + $stack37;

        return $stack39;
    }

    public double getCategorySeriesMiddle(int, int, int, int, double, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.axis.CategoryAxis this;
        int categoryIndex, categoryCount, seriesCount, $stack21, seriesIndex;
        java.awt.geom.Rectangle2D area;
        org.jfree.chart.ui.RectangleEdge edge;
        double start, end, width, itemMargin, $stack22, $stack23, gap, $stack24, $stack25, $stack26, ww, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        categoryIndex := @parameter0: int;

        categoryCount := @parameter1: int;

        seriesIndex := @parameter2: int;

        seriesCount := @parameter3: int;

        itemMargin := @parameter4: double;

        area := @parameter5: java.awt.geom.Rectangle2D;

        edge := @parameter6: org.jfree.chart.ui.RectangleEdge;

        start = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, categoryCount, area, edge);

        end = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, categoryCount, area, edge);

        width = end - start;

        if seriesCount != 1 goto label1;

        $stack33 = width / 2.0;

        $stack34 = start + $stack33;

        return $stack34;

     label1:
        $stack23 = width * itemMargin;

        $stack21 = seriesCount - 1;

        $stack22 = (double) $stack21;

        gap = $stack23 / $stack22;

        $stack24 = 1.0 - itemMargin;

        $stack26 = width * $stack24;

        $stack25 = (double) seriesCount;

        ww = $stack26 / $stack25;

        $stack28 = (double) seriesIndex;

        $stack27 = ww + gap;

        $stack29 = $stack28 * $stack27;

        $stack31 = start + $stack29;

        $stack30 = ww / 2.0;

        $stack32 = $stack31 + $stack30;

        return $stack32;
    }

    protected double calculateCategorySize(int, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge, $stack8, $stack24, $stack25, $stack29;
        java.awt.geom.Rectangle2D area;
        int categoryCount;
        org.jfree.chart.axis.CategoryAxis this;
        double $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, available, result;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        categoryCount := @parameter0: int;

        area := @parameter1: java.awt.geom.Rectangle2D;

        edge := @parameter2: org.jfree.chart.ui.RectangleEdge;

        available = 0.0;

        $stack8 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge == $stack8 goto label1;

        $stack24 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack24 goto label2;

     label1:
        available = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        goto label4;

     label2:
        $stack25 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge == $stack25 goto label3;

        $stack29 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack29 goto label4;

     label3:
        available = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

     label4:
        if categoryCount <= 1 goto label5;

        $stack16 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getLowerMargin()>();

        $stack17 = 1.0 - $stack16;

        $stack18 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getUpperMargin()>();

        $stack19 = $stack17 - $stack18;

        $stack20 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryMargin()>();

        $stack21 = $stack19 - $stack20;

        result = available * $stack21;

        $stack22 = (double) categoryCount;

        result = result / $stack22;

        goto label6;

     label5:
        $stack11 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getLowerMargin()>();

        $stack12 = 1.0 - $stack11;

        $stack13 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getUpperMargin()>();

        $stack14 = $stack12 - $stack13;

        result = available * $stack14;

     label6:
        return result;
    }

    protected double calculateCategoryGapSize(int, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge, $stack8, $stack15, $stack16, $stack20;
        java.awt.geom.Rectangle2D area;
        int categoryCount, $stack11;
        org.jfree.chart.axis.CategoryAxis this;
        double $stack10, $stack12, $stack13, result, available;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        categoryCount := @parameter0: int;

        area := @parameter1: java.awt.geom.Rectangle2D;

        edge := @parameter2: org.jfree.chart.ui.RectangleEdge;

        result = 0.0;

        available = 0.0;

        $stack8 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge == $stack8 goto label1;

        $stack15 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack15 goto label2;

     label1:
        available = virtualinvoke area.<java.awt.geom.Rectangle2D: double getWidth()>();

        goto label4;

     label2:
        $stack16 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge == $stack16 goto label3;

        $stack20 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack20 goto label4;

     label3:
        available = virtualinvoke area.<java.awt.geom.Rectangle2D: double getHeight()>();

     label4:
        if categoryCount <= 1 goto label5;

        $stack10 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryMargin()>();

        $stack13 = available * $stack10;

        $stack11 = categoryCount - 1;

        $stack12 = (double) $stack11;

        result = $stack13 / $stack12;

     label5:
        return result;
    }

    public org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D, org.jfree.chart.plot.Plot, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.axis.AxisSpace)
    {
        org.jfree.chart.axis.CategoryAxis this;
        boolean $stack15, $stack16, $stack19, $stack18;
        java.awt.Graphics2D g2;
        org.jfree.chart.ui.RectangleEdge edge, $stack34, $stack35, $stack36, $stack37;
        double labelWidth, $stack22, $stack23, $stack24, labelHeight, $stack28, $stack29, $stack30, tickLabelHeight, tickLabelWidth;
        int $stack21, $stack27;
        java.awt.Font $stack31;
        org.jfree.chart.axis.AxisState $stack32;
        java.awt.geom.Rectangle2D plotArea, state#25;
        org.jfree.chart.axis.AxisSpace $stack46, space;
        org.jfree.chart.plot.Plot plot;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        plot := @parameter1: org.jfree.chart.plot.Plot;

        plotArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        space := @parameter4: org.jfree.chart.axis.AxisSpace;

        if space != null goto label1;

        $stack46 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack46.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        space = $stack46;

     label1:
        $stack15 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: boolean isVisible()>();

        if $stack15 != 0 goto label2;

        return space;

     label2:
        tickLabelHeight = 0.0;

        tickLabelWidth = 0.0;

        $stack16 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: boolean isTickLabelsVisible()>();

        if $stack16 == 0 goto label6;

        $stack31 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Font getTickLabelFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack31);

        $stack32 = new org.jfree.chart.axis.AxisState;

        specialinvoke $stack32.<org.jfree.chart.axis.AxisState: void <init>()>();

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(g2, $stack32, plotArea, edge);

        $stack34 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack34 goto label3;

        tickLabelHeight = virtualinvoke $stack32.<org.jfree.chart.axis.AxisState: double getMax()>();

        goto label6;

     label3:
        $stack35 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack35 goto label4;

        tickLabelHeight = virtualinvoke $stack32.<org.jfree.chart.axis.AxisState: double getMax()>();

        goto label6;

     label4:
        $stack36 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack36 goto label5;

        tickLabelWidth = virtualinvoke $stack32.<org.jfree.chart.axis.AxisState: double getMax()>();

        goto label6;

     label5:
        $stack37 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack37 goto label6;

        tickLabelWidth = virtualinvoke $stack32.<org.jfree.chart.axis.AxisState: double getMax()>();

     label6:
        state#25 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.geom.Rectangle2D getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.ui.RectangleEdge)>(g2, edge);

        $stack18 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack18 == 0 goto label7;

        labelHeight = virtualinvoke state#25.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack29 = labelHeight + tickLabelHeight;

        $stack27 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack28 = (double) $stack27;

        $stack30 = $stack29 + $stack28;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void add(double,org.jfree.chart.ui.RectangleEdge)>($stack30, edge);

        goto label8;

     label7:
        $stack19 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack19 == 0 goto label8;

        labelWidth = virtualinvoke state#25.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack23 = labelWidth + tickLabelWidth;

        $stack21 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack22 = (double) $stack21;

        $stack24 = $stack23 + $stack22;

        virtualinvoke space.<org.jfree.chart.axis.AxisSpace: void add(double,org.jfree.chart.ui.RectangleEdge)>($stack24, edge);

     label8:
        return space;
    }

    public void configure()
    {
        org.jfree.chart.axis.CategoryAxis this;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        return;
    }

    public org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.axis.CategoryAxis this;
        boolean $stack9, $stack10, $stack12;
        org.jfree.chart.axis.AxisState $stack11, $stack36, state;
        double cursor;
        java.awt.geom.Rectangle2D dataArea, plotArea;
        org.jfree.chart.ui.RectangleEdge edge;
        org.jfree.chart.plot.PlotRenderingInfo plotState;
        java.awt.Graphics2D g2;
        java.text.AttributedString $stack14, $stack17;
        java.lang.String $stack15;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        cursor := @parameter1: double;

        plotArea := @parameter2: java.awt.geom.Rectangle2D;

        dataArea := @parameter3: java.awt.geom.Rectangle2D;

        edge := @parameter4: org.jfree.chart.ui.RectangleEdge;

        plotState := @parameter5: org.jfree.chart.plot.PlotRenderingInfo;

        $stack9 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: boolean isVisible()>();

        if $stack9 != 0 goto label1;

        $stack36 = new org.jfree.chart.axis.AxisState;

        specialinvoke $stack36.<org.jfree.chart.axis.AxisState: void <init>(double)>(cursor);

        return $stack36;

     label1:
        $stack10 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: boolean isAxisLineVisible()>();

        if $stack10 == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void drawAxisLine(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(g2, cursor, dataArea, edge);

     label2:
        $stack11 = new org.jfree.chart.axis.AxisState;

        specialinvoke $stack11.<org.jfree.chart.axis.AxisState: void <init>(double)>(cursor);

        $stack12 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: boolean isTickMarksVisible()>();

        if $stack12 == 0 goto label3;

        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void drawTickMarks(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisState)>(g2, cursor, dataArea, edge, $stack11);

     label3:
        virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: void createAndAddEntity(double,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(cursor, $stack11, dataArea, edge, plotState);

        state = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisState drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>(g2, plotArea, dataArea, edge, $stack11, plotState);

        $stack14 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.text.AttributedString getAttributedLabel()>();

        if $stack14 == null goto label4;

        $stack17 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.text.AttributedString getAttributedLabel()>();

        state = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisState drawAttributedLabel(java.text.AttributedString,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisState)>($stack17, g2, plotArea, dataArea, edge, state);

        goto label5;

     label4:
        $stack15 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.lang.String getLabel()>();

        state = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisState drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisState)>($stack15, g2, plotArea, dataArea, edge, state);

     label5:
        return state;
    }

    protected org.jfree.chart.axis.AxisState drawCategoryLabels(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.axis.AxisState, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.axis.AxisState state;
        org.jfree.chart.axis.CategoryAxis this;
        boolean $stack27, $stack30, $stack32, $stack34;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea, dataArea;
        org.jfree.chart.ui.RectangleEdge edge, $stack31, $stack33, $stack35, $stack36, $stack57, $stack58, $stack59, $stack60;
        java.util.List ticks;
        java.util.Iterator iterator;
        double $stack37, $stack39, $stack41, $stack43, $stack44, $stack46, $stack47, $stack49, $stack102, $stack104, $stack105, $stack136, $stack138, $stack139, $stack144, $stack146, $stack147, $stack152, $stack154, $stack155, x0, x1, y0, y1, $stack63, $stack62, $stack67, $stack69, $stack72, $stack74, $stack76, $stack77, $stack79, $stack82, $stack84, $stack86, tick#222;
        int $stack38, $stack42, $stack45, $stack48, $stack98, $stack100, $stack103, $stack132, $stack134, $stack137, $stack140, $stack142, $stack145, $stack148, $stack150, $stack153, categoryIndex;
        java.lang.Object $stack50;
        java.lang.Comparable $stack51, $stack53, $stack92, $stack94, $stack97;
        java.awt.Font $stack52;
        java.awt.Paint $stack54;
        org.jfree.chart.axis.CategoryLabelPositions $stack55;
        org.jfree.chart.axis.CategoryLabelPosition position;
        java.awt.geom.Point2D anchorPoint;
        org.jfree.chart.text.TextBlock block;
        java.awt.Shape bounds;
        org.jfree.chart.plot.PlotRenderingInfo plotState;
        org.jfree.chart.ChartRenderingInfo $stack89, $stack90;
        org.jfree.chart.entity.EntityCollection entities;
        java.lang.String tooltip, url;
        org.jfree.chart.entity.CategoryLabelEntity $stack96;
        org.jfree.chart.axis.CategoryTick tick;
        java.awt.geom.Rectangle2D$Double $stack61;
        org.jfree.chart.ui.RectangleAnchor $stack64;
        float $stack68, $stack70, $stack73, $stack75, $stack78, $stack80, $stack83, $stack85;
        org.jfree.chart.text.TextBlockAnchor $stack71, $stack81;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        state := @parameter4: org.jfree.chart.axis.AxisState;

        plotState := @parameter5: org.jfree.chart.plot.PlotRenderingInfo;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(state, "state");

        $stack27 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: boolean isTickLabelsVisible()>();

        if $stack27 != 0 goto label01;

        return state;

     label01:
        ticks = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(g2, state, plotArea, edge);

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void setTicks(java.util.List)>(ticks);

        categoryIndex = 0;

        iterator = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack30 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack30 == 0 goto label08;

        $stack50 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.CategoryTick) $stack50;

        $stack51 = virtualinvoke tick.<org.jfree.chart.axis.CategoryTick: java.lang.Comparable getCategory()>();

        $stack52 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Font getTickLabelFont(java.lang.Comparable)>($stack51);

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack52);

        $stack53 = virtualinvoke tick.<org.jfree.chart.axis.CategoryTick: java.lang.Comparable getCategory()>();

        $stack54 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Paint getTickLabelPaint(java.lang.Comparable)>($stack53);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack54);

        $stack55 = this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions>;

        position = virtualinvoke $stack55.<org.jfree.chart.axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPosition getLabelPosition(org.jfree.chart.ui.RectangleEdge)>(edge);

        x0 = 0.0;

        x1 = 0.0;

        y0 = 0.0;

        y1 = 0.0;

        $stack57 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack57 goto label03;

        $stack148 = interfaceinvoke ticks.<java.util.List: int size()>();

        x0 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, $stack148, dataArea, edge);

        $stack150 = interfaceinvoke ticks.<java.util.List: int size()>();

        x1 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, $stack150, dataArea, edge);

        $stack152 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack153 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack154 = (double) $stack153;

        y1 = $stack152 - $stack154;

        $stack155 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getMax()>();

        y0 = y1 - $stack155;

        goto label06;

     label03:
        $stack58 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack58 goto label04;

        $stack140 = interfaceinvoke ticks.<java.util.List: int size()>();

        x0 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, $stack140, dataArea, edge);

        $stack142 = interfaceinvoke ticks.<java.util.List: int size()>();

        x1 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, $stack142, dataArea, edge);

        $stack144 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack145 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack146 = (double) $stack145;

        y0 = $stack144 + $stack146;

        $stack147 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getMax()>();

        y1 = y0 + $stack147;

        goto label06;

     label04:
        $stack59 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack59 goto label05;

        $stack132 = interfaceinvoke ticks.<java.util.List: int size()>();

        y0 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, $stack132, dataArea, edge);

        $stack134 = interfaceinvoke ticks.<java.util.List: int size()>();

        y1 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, $stack134, dataArea, edge);

        $stack136 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack137 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack138 = (double) $stack137;

        x1 = $stack136 - $stack138;

        $stack139 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getMax()>();

        x0 = x1 - $stack139;

        goto label06;

     label05:
        $stack60 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack60 goto label06;

        $stack98 = interfaceinvoke ticks.<java.util.List: int size()>();

        y0 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, $stack98, dataArea, edge);

        $stack100 = interfaceinvoke ticks.<java.util.List: int size()>();

        y1 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(categoryIndex, $stack100, dataArea, edge);

        $stack102 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getCursor()>();

        $stack103 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack104 = (double) $stack103;

        x0 = $stack102 + $stack104;

        $stack105 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getMax()>();

        x1 = x0 - $stack105;

     label06:
        $stack61 = new java.awt.geom.Rectangle2D$Double;

        $stack63 = x1 - x0;

        $stack62 = y1 - y0;

        specialinvoke $stack61.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(x0, y0, $stack63, $stack62);

        $stack64 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: org.jfree.chart.ui.RectangleAnchor getCategoryAnchor()>();

        anchorPoint = virtualinvoke $stack64.<org.jfree.chart.ui.RectangleAnchor: java.awt.geom.Point2D getAnchorPoint(java.awt.geom.Rectangle2D)>($stack61);

        block = virtualinvoke tick.<org.jfree.chart.axis.CategoryTick: org.jfree.chart.text.TextBlock getLabel()>();

        $stack67 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getX()>();

        $stack68 = (float) $stack67;

        $stack69 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getY()>();

        $stack70 = (float) $stack69;

        $stack71 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: org.jfree.chart.text.TextBlockAnchor getLabelAnchor()>();

        $stack72 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getX()>();

        $stack73 = (float) $stack72;

        $stack74 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getY()>();

        $stack75 = (float) $stack74;

        $stack76 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: double getAngle()>();

        virtualinvoke block.<org.jfree.chart.text.TextBlock: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)>(g2, $stack68, $stack70, $stack71, $stack73, $stack75, $stack76);

        $stack77 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getX()>();

        $stack78 = (float) $stack77;

        $stack79 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getY()>();

        $stack80 = (float) $stack79;

        $stack81 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: org.jfree.chart.text.TextBlockAnchor getLabelAnchor()>();

        $stack82 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getX()>();

        $stack83 = (float) $stack82;

        $stack84 = virtualinvoke anchorPoint.<java.awt.geom.Point2D: double getY()>();

        $stack85 = (float) $stack84;

        $stack86 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: double getAngle()>();

        bounds = virtualinvoke block.<org.jfree.chart.text.TextBlock: java.awt.Shape calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)>(g2, $stack78, $stack80, $stack81, $stack83, $stack85, $stack86);

        if plotState == null goto label07;

        $stack89 = virtualinvoke plotState.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        if $stack89 == null goto label07;

        $stack90 = virtualinvoke plotState.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        entities = virtualinvoke $stack90.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label07;

        $stack92 = virtualinvoke tick.<org.jfree.chart.axis.CategoryTick: java.lang.Comparable getCategory()>();

        tooltip = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.lang.String getCategoryLabelToolTip(java.lang.Comparable)>($stack92);

        $stack94 = virtualinvoke tick.<org.jfree.chart.axis.CategoryTick: java.lang.Comparable getCategory()>();

        url = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.lang.String getCategoryLabelURL(java.lang.Comparable)>($stack94);

        $stack96 = new org.jfree.chart.entity.CategoryLabelEntity;

        $stack97 = virtualinvoke tick.<org.jfree.chart.axis.CategoryTick: java.lang.Comparable getCategory()>();

        specialinvoke $stack96.<org.jfree.chart.entity.CategoryLabelEntity: void <init>(java.lang.Comparable,java.awt.Shape,java.lang.String,java.lang.String)>($stack97, bounds, tooltip, url);

        interfaceinvoke entities.<org.jfree.chart.entity.EntityCollection: void add(org.jfree.chart.entity.ChartEntity)>($stack96);

     label07:
        categoryIndex = categoryIndex + 1;

        goto label02;

     label08:
        $stack31 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        $stack32 = virtualinvoke edge.<org.jfree.chart.ui.RectangleEdge: boolean equals(java.lang.Object)>($stack31);

        if $stack32 == 0 goto label09;

        $stack47 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getMax()>();

        $stack48 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack49 = (double) $stack48;

        tick#222 = $stack47 + $stack49;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorUp(double)>(tick#222);

        goto label12;

     label09:
        $stack33 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        $stack34 = virtualinvoke edge.<org.jfree.chart.ui.RectangleEdge: boolean equals(java.lang.Object)>($stack33);

        if $stack34 == 0 goto label10;

        $stack44 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getMax()>();

        $stack45 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack46 = (double) $stack45;

        tick#222 = $stack44 + $stack46;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorDown(double)>(tick#222);

        goto label12;

     label10:
        $stack35 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack35 goto label11;

        $stack41 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getMax()>();

        $stack42 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack43 = (double) $stack42;

        tick#222 = $stack41 + $stack43;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorLeft(double)>(tick#222);

        goto label12;

     label11:
        $stack36 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack36 goto label12;

        $stack37 = virtualinvoke state.<org.jfree.chart.axis.AxisState: double getMax()>();

        $stack38 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack39 = (double) $stack38;

        tick#222 = $stack37 + $stack39;

        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorRight(double)>(tick#222);

     label12:
        return state;
    }

    public java.util.List refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        java.util.ArrayList $stack18;
        java.awt.geom.Rectangle2D dataArea;
        double $stack19, $stack21, $stack27, $stack32, $stack43, $stack53, $stack76, $stack80, max, $stack48;
        byte $stack20, $stack22, $stack28;
        org.jfree.chart.axis.CategoryAxis this;
        org.jfree.chart.plot.Plot $stack23;
        org.jfree.chart.plot.CategoryPlot plot;
        java.util.List categories;
        org.jfree.chart.axis.AxisState state;
        org.jfree.chart.ui.RectangleEdge edge, $stack42, $stack51, $stack52, $stack65;
        org.jfree.chart.axis.CategoryLabelPositions $stack25;
        org.jfree.chart.axis.CategoryLabelPosition position;
        org.jfree.chart.axis.CategoryLabelWidthType $stack29, $stack30;
        boolean $stack31, $stack34;
        java.util.Iterator iterator;
        java.lang.Object $stack38;
        java.lang.Comparable category;
        java.awt.Graphics2D g2;
        java.awt.Font $stack39;
        float $stack40, r, l;
        org.jfree.chart.text.TextBlock label;
        int $stack79;
        org.jfree.chart.axis.CategoryTick $stack45;
        org.jfree.chart.text.TextBlockAnchor $stack46;
        org.jfree.chart.ui.TextAnchor $stack47;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.axis.AxisState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        $stack18 = new java.util.ArrayList;

        specialinvoke $stack18.<java.util.ArrayList: void <init>()>();

        $stack19 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack20 = $stack19 cmpg 0.0;

        if $stack20 <= 0 goto label01;

        $stack21 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack22 = $stack21 cmpg 0.0;

        if $stack22 >= 0 goto label02;

     label01:
        return $stack18;

     label02:
        $stack23 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.plot.Plot getPlot()>();

        plot = (org.jfree.chart.plot.CategoryPlot) $stack23;

        categories = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)>(this);

        max = 0.0;

        if categories == null goto label12;

        $stack25 = this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions>;

        position = virtualinvoke $stack25.<org.jfree.chart.axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPosition getLabelPosition(org.jfree.chart.ui.RectangleEdge)>(edge);

        r = this.<org.jfree.chart.axis.CategoryAxis: float maximumCategoryLabelWidthRatio>;

        $stack27 = (double) r;

        $stack28 = $stack27 cmpg 0.0;

        if $stack28 > 0 goto label03;

        r = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: float getWidthRatio()>();

     label03:
        $stack29 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: org.jfree.chart.axis.CategoryLabelWidthType getWidthType()>();

        $stack30 = <org.jfree.chart.axis.CategoryLabelWidthType: org.jfree.chart.axis.CategoryLabelWidthType CATEGORY>;

        if $stack29 != $stack30 goto label04;

        $stack79 = interfaceinvoke categories.<java.util.List: int size()>();

        $stack80 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double calculateCategorySize(int,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack79, dataArea, edge);

        l = (float) $stack80;

        goto label06;

     label04:
        $stack31 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack31 == 0 goto label05;

        $stack76 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getWidth()>();

        l = (float) $stack76;

        goto label06;

     label05:
        $stack32 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        l = (float) $stack32;

     label06:
        iterator = interfaceinvoke categories.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $stack34 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack34 == 0 goto label12;

        $stack38 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        category = (java.lang.Comparable) $stack38;

        $stack39 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Font getTickLabelFont(java.lang.Comparable)>(category);

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($stack39);

        $stack40 = l * r;

        label = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.ui.RectangleEdge,java.awt.Graphics2D)>(category, $stack40, edge, g2);

        $stack42 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge == $stack42 goto label08;

        $stack51 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        if edge != $stack51 goto label09;

     label08:
        $stack43 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)>(label, position, g2);

        max = staticinvoke <java.lang.Math: double max(double,double)>(max, $stack43);

        goto label11;

     label09:
        $stack52 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge == $stack52 goto label10;

        $stack65 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        if edge != $stack65 goto label11;

     label10:
        $stack53 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)>(label, position, g2);

        max = staticinvoke <java.lang.Math: double max(double,double)>(max, $stack53);

     label11:
        $stack45 = new org.jfree.chart.axis.CategoryTick;

        $stack46 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: org.jfree.chart.text.TextBlockAnchor getLabelAnchor()>();

        $stack47 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: org.jfree.chart.ui.TextAnchor getRotationAnchor()>();

        $stack48 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: double getAngle()>();

        specialinvoke $stack45.<org.jfree.chart.axis.CategoryTick: void <init>(java.lang.Comparable,org.jfree.chart.text.TextBlock,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.ui.TextAnchor,double)>(category, label, $stack46, $stack47, $stack48);

        interfaceinvoke $stack18.<java.util.List: boolean add(java.lang.Object)>($stack45);

        goto label07;

     label12:
        virtualinvoke state.<org.jfree.chart.axis.AxisState: void setMax(double)>(max);

        return $stack18;
    }

    public void drawTickMarks(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.axis.AxisState)
    {
        org.jfree.chart.axis.CategoryAxis this;
        org.jfree.chart.plot.Plot p;
        org.jfree.chart.plot.CategoryPlot plot;
        float $stack21, $stack22;
        double il, ol, cursor, $stack46, $stack47, $stack53, $stack54, $stack60, $stack61, $stack67, $stack68, x;
        java.awt.geom.Line2D$Double $stack23;
        java.util.List categories;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack25;
        java.awt.Stroke $stack26;
        java.awt.RenderingHints$Key $stack27, $stack30, $stack39;
        java.lang.Object saved, $stack29, $stack44, $stack51, $stack58, $stack65;
        org.jfree.chart.ui.RectangleEdge edge, $stack31, $stack33, $stack35, $stack37;
        boolean $stack32, $stack34, $stack36, $stack38, $stack41, $stack50, $stack57, $stack64;
        org.jfree.chart.axis.AxisState state;
        java.awt.geom.Rectangle2D dataArea;
        java.util.Iterator iterator;
        java.lang.Comparable key;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        cursor := @parameter1: double;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        state := @parameter4: org.jfree.chart.axis.AxisState;

        p = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.plot.Plot getPlot()>();

        if p != null goto label01;

        return;

     label01:
        plot = (org.jfree.chart.plot.CategoryPlot) p;

        $stack21 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: float getTickMarkInsideLength()>();

        il = (double) $stack21;

        $stack22 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: float getTickMarkOutsideLength()>();

        ol = (double) $stack22;

        $stack23 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack23.<java.awt.geom.Line2D$Double: void <init>()>();

        categories = virtualinvoke plot.<org.jfree.chart.plot.CategoryPlot: java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)>(this);

        $stack25 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Paint getTickMarkPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack25);

        $stack26 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Stroke getTickMarkStroke()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack26);

        $stack27 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        saved = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack27);

        $stack30 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $stack29 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack30, $stack29);

        $stack31 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        $stack32 = virtualinvoke edge.<org.jfree.chart.ui.RectangleEdge: boolean equals(java.lang.Object)>($stack31);

        if $stack32 == 0 goto label04;

        iterator = interfaceinvoke categories.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $stack64 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack64 == 0 goto label03;

        $stack65 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack65;

        x = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(java.lang.Comparable,java.util.List,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(key, categories, dataArea, edge);

        $stack67 = cursor + il;

        virtualinvoke $stack23.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(x, cursor, x, $stack67);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        $stack68 = cursor - ol;

        virtualinvoke $stack23.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(x, cursor, x, $stack68);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        goto label02;

     label03:
        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorUp(double)>(ol);

        goto label13;

     label04:
        $stack33 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        $stack34 = virtualinvoke edge.<org.jfree.chart.ui.RectangleEdge: boolean equals(java.lang.Object)>($stack33);

        if $stack34 == 0 goto label07;

        iterator = interfaceinvoke categories.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $stack57 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack57 == 0 goto label06;

        $stack58 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack58;

        x = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(java.lang.Comparable,java.util.List,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(key, categories, dataArea, edge);

        $stack60 = cursor - il;

        virtualinvoke $stack23.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(x, cursor, x, $stack60);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        $stack61 = cursor + ol;

        virtualinvoke $stack23.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(x, cursor, x, $stack61);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        goto label05;

     label06:
        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorDown(double)>(ol);

        goto label13;

     label07:
        $stack35 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        $stack36 = virtualinvoke edge.<org.jfree.chart.ui.RectangleEdge: boolean equals(java.lang.Object)>($stack35);

        if $stack36 == 0 goto label10;

        iterator = interfaceinvoke categories.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $stack50 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack50 == 0 goto label09;

        $stack51 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack51;

        x = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(java.lang.Comparable,java.util.List,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(key, categories, dataArea, edge);

        $stack53 = cursor + il;

        virtualinvoke $stack23.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(cursor, x, $stack53, x);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        $stack54 = cursor - ol;

        virtualinvoke $stack23.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(cursor, x, $stack54, x);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        goto label08;

     label09:
        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorLeft(double)>(ol);

        goto label13;

     label10:
        $stack37 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge RIGHT>;

        $stack38 = virtualinvoke edge.<org.jfree.chart.ui.RectangleEdge: boolean equals(java.lang.Object)>($stack37);

        if $stack38 == 0 goto label13;

        iterator = interfaceinvoke categories.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $stack41 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack41 == 0 goto label12;

        $stack44 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack44;

        x = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: double getCategoryMiddle(java.lang.Comparable,java.util.List,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(key, categories, dataArea, edge);

        $stack46 = cursor - il;

        virtualinvoke $stack23.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(cursor, x, $stack46, x);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        $stack47 = cursor + ol;

        virtualinvoke $stack23.<java.awt.geom.Line2D: void setLine(double,double,double,double)>(cursor, x, $stack47, x);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        goto label11;

     label12:
        virtualinvoke state.<org.jfree.chart.axis.AxisState: void cursorRight(double)>(ol);

     label13:
        $stack39 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack39, saved);

        return;
    }

    protected org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable, float, org.jfree.chart.ui.RectangleEdge, java.awt.Graphics2D)
    {
        java.lang.Comparable category;
        java.lang.String $stack6;
        org.jfree.chart.axis.CategoryAxis this;
        java.awt.Font $stack7;
        java.awt.Paint $stack8;
        float width;
        org.jfree.chart.text.G2TextMeasurer $stack9;
        java.awt.Graphics2D g2;
        int $stack10;
        org.jfree.chart.text.TextBlock label;
        org.jfree.chart.ui.RectangleEdge edge;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        category := @parameter0: java.lang.Comparable;

        width := @parameter1: float;

        edge := @parameter2: org.jfree.chart.ui.RectangleEdge;

        g2 := @parameter3: java.awt.Graphics2D;

        $stack6 = virtualinvoke category.<java.lang.Object: java.lang.String toString()>();

        $stack7 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Font getTickLabelFont(java.lang.Comparable)>(category);

        $stack8 = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: java.awt.Paint getTickLabelPaint(java.lang.Comparable)>(category);

        $stack10 = this.<org.jfree.chart.axis.CategoryAxis: int maximumCategoryLabelLines>;

        $stack9 = new org.jfree.chart.text.G2TextMeasurer;

        specialinvoke $stack9.<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>(g2);

        label = staticinvoke <org.jfree.chart.text.TextUtils: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>($stack6, $stack7, $stack8, width, $stack10, $stack9);

        return label;
    }

    protected double calculateTextBlockWidth(org.jfree.chart.text.TextBlock, org.jfree.chart.axis.CategoryLabelPosition, java.awt.Graphics2D)
    {
        org.jfree.chart.axis.CategoryAxis this;
        org.jfree.chart.ui.RectangleInsets insets;
        org.jfree.chart.text.TextBlock block;
        java.awt.Graphics2D g2;
        org.jfree.chart.ui.Size2D size;
        java.awt.geom.Rectangle2D$Double $stack12;
        double $stack15, $stack16, $stack17, $stack20, $stack21, $stack22, $stack23, w;
        org.jfree.chart.axis.CategoryLabelPosition position;
        java.awt.Shape rotatedBox;
        java.awt.geom.Rectangle2D $stack19;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        block := @parameter0: org.jfree.chart.text.TextBlock;

        position := @parameter1: org.jfree.chart.axis.CategoryLabelPosition;

        g2 := @parameter2: java.awt.Graphics2D;

        insets = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.ui.RectangleInsets getTickLabelInsets()>();

        size = virtualinvoke block.<org.jfree.chart.text.TextBlock: org.jfree.chart.ui.Size2D calculateDimensions(java.awt.Graphics2D)>(g2);

        $stack12 = new java.awt.geom.Rectangle2D$Double;

        $stack15 = virtualinvoke size.<org.jfree.chart.ui.Size2D: double getWidth()>();

        $stack16 = virtualinvoke size.<org.jfree.chart.ui.Size2D: double getHeight()>();

        specialinvoke $stack12.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $stack15, $stack16);

        $stack17 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: double getAngle()>();

        rotatedBox = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape rotateShape(java.awt.Shape,double,float,float)>($stack12, $stack17, 0.0F, 0.0F);

        $stack19 = interfaceinvoke rotatedBox.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack20 = virtualinvoke $stack19.<java.awt.geom.Rectangle2D: double getWidth()>();

        $stack21 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getLeft()>();

        $stack22 = $stack20 + $stack21;

        $stack23 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getRight()>();

        w = $stack22 + $stack23;

        return w;
    }

    protected double calculateTextBlockHeight(org.jfree.chart.text.TextBlock, org.jfree.chart.axis.CategoryLabelPosition, java.awt.Graphics2D)
    {
        org.jfree.chart.axis.CategoryAxis this;
        org.jfree.chart.ui.RectangleInsets insets;
        org.jfree.chart.text.TextBlock block;
        java.awt.Graphics2D g2;
        org.jfree.chart.ui.Size2D size;
        java.awt.geom.Rectangle2D$Double $stack12;
        double $stack15, $stack16, $stack17, $stack20, $stack21, $stack22, $stack23, h;
        org.jfree.chart.axis.CategoryLabelPosition position;
        java.awt.Shape rotatedBox;
        java.awt.geom.Rectangle2D $stack19;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        block := @parameter0: org.jfree.chart.text.TextBlock;

        position := @parameter1: org.jfree.chart.axis.CategoryLabelPosition;

        g2 := @parameter2: java.awt.Graphics2D;

        insets = virtualinvoke this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.ui.RectangleInsets getTickLabelInsets()>();

        size = virtualinvoke block.<org.jfree.chart.text.TextBlock: org.jfree.chart.ui.Size2D calculateDimensions(java.awt.Graphics2D)>(g2);

        $stack12 = new java.awt.geom.Rectangle2D$Double;

        $stack15 = virtualinvoke size.<org.jfree.chart.ui.Size2D: double getWidth()>();

        $stack16 = virtualinvoke size.<org.jfree.chart.ui.Size2D: double getHeight()>();

        specialinvoke $stack12.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $stack15, $stack16);

        $stack17 = virtualinvoke position.<org.jfree.chart.axis.CategoryLabelPosition: double getAngle()>();

        rotatedBox = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape rotateShape(java.awt.Shape,double,float,float)>($stack12, $stack17, 0.0F, 0.0F);

        $stack19 = interfaceinvoke rotatedBox.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $stack20 = virtualinvoke $stack19.<java.awt.geom.Rectangle2D: double getHeight()>();

        $stack21 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getTop()>();

        $stack22 = $stack20 + $stack21;

        $stack23 = virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: double getBottom()>();

        h = $stack22 + $stack23;

        return h;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.axis.CategoryAxis this, clone;
        java.lang.Object $stack2;
        java.util.HashMap $stack3, $stack5, $stack7, $stack9;
        java.util.Map $stack4, $stack6, $stack8, $stack10;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack2 = specialinvoke this.<org.jfree.chart.axis.Axis: java.lang.Object clone()>();

        clone = (org.jfree.chart.axis.CategoryAxis) $stack2;

        $stack3 = new java.util.HashMap;

        $stack4 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelFontMap>;

        specialinvoke $stack3.<java.util.HashMap: void <init>(java.util.Map)>($stack4);

        clone.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelFontMap> = $stack3;

        $stack5 = new java.util.HashMap;

        $stack6 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap>;

        specialinvoke $stack5.<java.util.HashMap: void <init>(java.util.Map)>($stack6);

        clone.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap> = $stack5;

        $stack7 = new java.util.HashMap;

        $stack8 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips>;

        specialinvoke $stack7.<java.util.HashMap: void <init>(java.util.Map)>($stack8);

        clone.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips> = $stack7;

        $stack9 = new java.util.HashMap;

        $stack10 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips>;

        specialinvoke $stack9.<java.util.HashMap: void <init>(java.util.Map)>($stack10);

        clone.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelURLs> = $stack9;

        return clone;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.axis.CategoryAxis this, that;
        boolean $stack3, $stack4, $stack21, $stack24, $stack27, $stack30, $stack33;
        double $stack5, $stack6, $stack8, $stack9, $stack11, $stack12;
        byte $stack7, $stack10, $stack13, $stack16;
        float $stack14, $stack15;
        int $stack17, $stack18;
        org.jfree.chart.axis.CategoryLabelPositions $stack19, $stack20;
        java.util.Map $stack22, $stack23, $stack25, $stack26, $stack28, $stack29, $stack31, $stack32;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = obj instanceof org.jfree.chart.axis.CategoryAxis;

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        $stack4 = specialinvoke this.<org.jfree.chart.axis.Axis: boolean equals(java.lang.Object)>(obj);

        if $stack4 != 0 goto label03;

        return 0;

     label03:
        that = (org.jfree.chart.axis.CategoryAxis) obj;

        $stack6 = that.<org.jfree.chart.axis.CategoryAxis: double lowerMargin>;

        $stack5 = this.<org.jfree.chart.axis.CategoryAxis: double lowerMargin>;

        $stack7 = $stack6 cmpl $stack5;

        if $stack7 == 0 goto label04;

        return 0;

     label04:
        $stack9 = that.<org.jfree.chart.axis.CategoryAxis: double upperMargin>;

        $stack8 = this.<org.jfree.chart.axis.CategoryAxis: double upperMargin>;

        $stack10 = $stack9 cmpl $stack8;

        if $stack10 == 0 goto label05;

        return 0;

     label05:
        $stack12 = that.<org.jfree.chart.axis.CategoryAxis: double categoryMargin>;

        $stack11 = this.<org.jfree.chart.axis.CategoryAxis: double categoryMargin>;

        $stack13 = $stack12 cmpl $stack11;

        if $stack13 == 0 goto label06;

        return 0;

     label06:
        $stack15 = that.<org.jfree.chart.axis.CategoryAxis: float maximumCategoryLabelWidthRatio>;

        $stack14 = this.<org.jfree.chart.axis.CategoryAxis: float maximumCategoryLabelWidthRatio>;

        $stack16 = $stack15 cmpl $stack14;

        if $stack16 == 0 goto label07;

        return 0;

     label07:
        $stack18 = that.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        $stack17 = this.<org.jfree.chart.axis.CategoryAxis: int categoryLabelPositionOffset>;

        if $stack18 == $stack17 goto label08;

        return 0;

     label08:
        $stack20 = that.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions>;

        $stack19 = this.<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions>;

        $stack21 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack20, $stack19);

        if $stack21 != 0 goto label09;

        return 0;

     label09:
        $stack23 = that.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips>;

        $stack22 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelToolTips>;

        $stack24 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack23, $stack22);

        if $stack24 != 0 goto label10;

        return 0;

     label10:
        $stack26 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelURLs>;

        $stack25 = that.<org.jfree.chart.axis.CategoryAxis: java.util.Map categoryLabelURLs>;

        $stack27 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack26, $stack25);

        if $stack27 != 0 goto label11;

        return 0;

     label11:
        $stack29 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelFontMap>;

        $stack28 = that.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelFontMap>;

        $stack30 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack29, $stack28);

        if $stack30 != 0 goto label12;

        return 0;

     label12:
        $stack32 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap>;

        $stack31 = that.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap>;

        $stack33 = specialinvoke this.<org.jfree.chart.axis.CategoryAxis: boolean equalPaintMaps(java.util.Map,java.util.Map)>($stack32, $stack31);

        if $stack33 != 0 goto label13;

        return 0;

     label13:
        return 1;
    }

    public int hashCode()
    {
        org.jfree.chart.axis.CategoryAxis this;
        int $stack1;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        $stack1 = specialinvoke this.<org.jfree.chart.axis.Axis: int hashCode()>();

        return $stack1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack2;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap>;

        specialinvoke this.<org.jfree.chart.axis.CategoryAxis: void writePaintMap(java.util.Map,java.io.ObjectOutputStream)>($stack2, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.axis.CategoryAxis this;
        java.util.Map $stack2;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = specialinvoke this.<org.jfree.chart.axis.CategoryAxis: java.util.Map readPaintMap(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.CategoryAxis: java.util.Map tickLabelPaintMap> = $stack2;

        return;
    }

    private java.util.Map readPaintMap(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream in;
        boolean isNull;
        java.util.HashMap $stack9;
        int count, i;
        java.lang.Object $stack11;
        java.lang.Comparable category;
        java.awt.Paint paint;
        org.jfree.chart.axis.CategoryAxis this;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        in := @parameter0: java.io.ObjectInputStream;

        isNull = virtualinvoke in.<java.io.ObjectInputStream: boolean readBoolean()>();

        if isNull == 0 goto label1;

        return null;

     label1:
        $stack9 = new java.util.HashMap;

        specialinvoke $stack9.<java.util.HashMap: void <init>()>();

        count = virtualinvoke in.<java.io.ObjectInputStream: int readInt()>();

        i = 0;

     label2:
        if i >= count goto label3;

        $stack11 = virtualinvoke in.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        category = (java.lang.Comparable) $stack11;

        paint = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(in);

        interfaceinvoke $stack9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(category, paint);

        i = i + 1;

        goto label2;

     label3:
        return $stack9;
    }

    private void writePaintMap(java.util.Map, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Map map;
        java.io.ObjectOutputStream out;
        java.util.Set keys;
        int count;
        java.util.Iterator iterator;
        boolean $stack10;
        java.lang.Object $stack11, $stack12;
        java.lang.Comparable key;
        java.awt.Paint $stack13;
        org.jfree.chart.axis.CategoryAxis this;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        map := @parameter0: java.util.Map;

        out := @parameter1: java.io.ObjectOutputStream;

        if map != null goto label1;

        virtualinvoke out.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(1);

        goto label3;

     label1:
        virtualinvoke out.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(0);

        keys = interfaceinvoke map.<java.util.Map: java.util.Set keySet()>();

        count = interfaceinvoke keys.<java.util.Set: int size()>();

        virtualinvoke out.<java.io.ObjectOutputStream: void writeInt(int)>(count);

        iterator = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $stack10 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label3;

        $stack11 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Comparable) $stack11;

        virtualinvoke out.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(key);

        $stack12 = interfaceinvoke map.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        $stack13 = (java.awt.Paint) $stack12;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack13, out);

        goto label2;

     label3:
        return;
    }

    private boolean equalPaintMaps(java.util.Map, java.util.Map)
    {
        java.util.Map map1, map2;
        int $stack8, $stack9;
        java.util.Set entries;
        java.util.Iterator iterator;
        boolean $stack12, $stack17;
        java.lang.Object $stack13, $stack14, $stack15, $stack16;
        java.util.Map$Entry entry;
        java.awt.Paint p1, p2;
        org.jfree.chart.axis.CategoryAxis this;

        this := @this: org.jfree.chart.axis.CategoryAxis;

        map1 := @parameter0: java.util.Map;

        map2 := @parameter1: java.util.Map;

        $stack8 = interfaceinvoke map1.<java.util.Map: int size()>();

        $stack9 = interfaceinvoke map2.<java.util.Map: int size()>();

        if $stack8 == $stack9 goto label1;

        return 0;

     label1:
        entries = interfaceinvoke map1.<java.util.Map: java.util.Set entrySet()>();

        iterator = interfaceinvoke entries.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $stack12 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label4;

        $stack13 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack13;

        $stack14 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        p1 = (java.awt.Paint) $stack14;

        $stack15 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack16 = interfaceinvoke map2.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack15);

        p2 = (java.awt.Paint) $stack16;

        $stack17 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>(p1, p2);

        if $stack17 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.axis.CategoryAxis: double DEFAULT_CATEGORY_MARGIN> = 0.2;

        <org.jfree.chart.axis.CategoryAxis: double DEFAULT_AXIS_MARGIN> = 0.05;

        <org.jfree.chart.axis.CategoryAxis: long serialVersionUID> = 5886554608114265863L;

        return;
    }
}
