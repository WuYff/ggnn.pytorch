public class org.jfree.chart.plot.FastScatterPlot extends org.jfree.chart.plot.Plot implements org.jfree.chart.plot.ValueAxisPlot, org.jfree.chart.plot.Pannable, org.jfree.chart.plot.Zoomable, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE;
    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT;
    private float[][] data;
    private org.jfree.data.Range xDataRange;
    private org.jfree.data.Range yDataRange;
    private org.jfree.chart.axis.ValueAxis domainAxis;
    private org.jfree.chart.axis.ValueAxis rangeAxis;
    private transient java.awt.Paint paint;
    private boolean domainGridlinesVisible;
    private transient java.awt.Stroke domainGridlineStroke;
    private transient java.awt.Paint domainGridlinePaint;
    private boolean rangeGridlinesVisible;
    private transient java.awt.Stroke rangeGridlineStroke;
    private transient java.awt.Paint rangeGridlinePaint;
    private boolean domainPannable;
    private boolean rangePannable;
    protected static java.util.ResourceBundle localizationResources;

    public void <init>()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        org.jfree.chart.axis.NumberAxis $stack1, $stack3;
        float[][] $stack2;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack2 = (float[][]) null;

        $stack1 = new org.jfree.chart.axis.NumberAxis;

        specialinvoke $stack1.<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>("X");

        $stack3 = new org.jfree.chart.axis.NumberAxis;

        specialinvoke $stack3.<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>("Y");

        specialinvoke this.<org.jfree.chart.plot.FastScatterPlot: void <init>(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)>($stack2, $stack1, $stack3);

        return;
    }

    public void <init>(float[][], org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis, $stack6, $stack7, $stack8, $stack9;
        float[][] data;
        org.jfree.data.Range $stack4, $stack5;
        java.awt.Color $stack10;
        java.awt.Paint $stack11, $stack13;
        java.awt.Stroke $stack12, $stack14;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        data := @parameter0: float[][];

        domainAxis := @parameter1: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter2: org.jfree.chart.axis.ValueAxis;

        specialinvoke this.<org.jfree.chart.plot.Plot: void <init>()>();

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(domainAxis, "domainAxis");

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(rangeAxis, "rangeAxis");

        this.<org.jfree.chart.plot.FastScatterPlot: float[][] data> = data;

        $stack4 = specialinvoke this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range calculateXDataRange(float[][])>(data);

        this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range xDataRange> = $stack4;

        $stack5 = specialinvoke this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range calculateYDataRange(float[][])>(data);

        this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range yDataRange> = $stack5;

        this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis> = domainAxis;

        $stack6 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        virtualinvoke $stack6.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        $stack7 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        virtualinvoke $stack7.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

        this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis> = rangeAxis;

        $stack8 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        virtualinvoke $stack8.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(this);

        $stack9 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        virtualinvoke $stack9.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

        $stack10 = <java.awt.Color: java.awt.Color RED>;

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint paint> = $stack10;

        this.<org.jfree.chart.plot.FastScatterPlot: boolean domainGridlinesVisible> = 1;

        $stack11 = <org.jfree.chart.plot.FastScatterPlot: java.awt.Paint DEFAULT_GRIDLINE_PAINT>;

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint domainGridlinePaint> = $stack11;

        $stack12 = <org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke domainGridlineStroke> = $stack12;

        this.<org.jfree.chart.plot.FastScatterPlot: boolean rangeGridlinesVisible> = 1;

        $stack13 = <org.jfree.chart.plot.FastScatterPlot: java.awt.Paint DEFAULT_GRIDLINE_PAINT>;

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint rangeGridlinePaint> = $stack13;

        $stack14 = <org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE>;

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke rangeGridlineStroke> = $stack14;

        return;
    }

    public java.lang.String getPlotType()
    {
        java.util.ResourceBundle $stack1;
        java.lang.String $stack2;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = <org.jfree.chart.plot.FastScatterPlot: java.util.ResourceBundle localizationResources>;

        $stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Fast_Scatter_Plot");

        return $stack2;
    }

    public float[][] getData()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        float[][] $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: float[][] data>;

        return $stack1;
    }

    public void setData(float[][])
    {
        org.jfree.chart.plot.FastScatterPlot this;
        float[][] data;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        data := @parameter0: float[][];

        this.<org.jfree.chart.plot.FastScatterPlot: float[][] data> = data;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation()
    {
        org.jfree.chart.plot.PlotOrientation $stack1;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        return $stack1;
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        org.jfree.chart.axis.ValueAxis $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        return $stack1;
    }

    public void setDomainAxis(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(axis, "axis");

        this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis> = axis;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        org.jfree.chart.axis.ValueAxis $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        return $stack1;
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.axis.ValueAxis axis;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(axis, "axis");

        this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis> = axis;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getPaint()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint paint>;

        return $stack1;
    }

    public void setPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint paint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isDomainGridlinesVisible()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: boolean domainGridlinesVisible>;

        return $stack1;
    }

    public void setDomainGridlinesVisible(boolean)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.FastScatterPlot: boolean domainGridlinesVisible>;

        if $stack2 == visible goto label1;

        this.<org.jfree.chart.plot.FastScatterPlot: boolean domainGridlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getDomainGridlineStroke()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke domainGridlineStroke>;

        return $stack1;
    }

    public void setDomainGridlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke domainGridlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getDomainGridlinePaint()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint domainGridlinePaint>;

        return $stack1;
    }

    public void setDomainGridlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint domainGridlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

        return;
    }

    public boolean isRangeGridlinesVisible()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: boolean rangeGridlinesVisible>;

        return $stack1;
    }

    public void setRangeGridlinesVisible(boolean)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean visible, $stack2;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        visible := @parameter0: boolean;

        $stack2 = this.<org.jfree.chart.plot.FastScatterPlot: boolean rangeGridlinesVisible>;

        if $stack2 == visible goto label1;

        this.<org.jfree.chart.plot.FastScatterPlot: boolean rangeGridlinesVisible> = visible;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Stroke getRangeGridlineStroke()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        java.awt.Stroke $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke rangeGridlineStroke>;

        return $stack1;
    }

    public void setRangeGridlineStroke(java.awt.Stroke)
    {
        java.awt.Stroke stroke;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        stroke := @parameter0: java.awt.Stroke;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(stroke, "stroke");

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke rangeGridlineStroke> = stroke;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getRangeGridlinePaint()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint rangeGridlinePaint>;

        return $stack1;
    }

    public void setRangeGridlinePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint rangeGridlinePaint> = paint;

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void fireChangeEvent()>();

        return;
    }

    public void draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.plot.FastScatterPlot this;
        org.jfree.chart.ui.RectangleInsets insets;
        java.awt.geom.Rectangle2D area, dataArea;
        org.jfree.chart.axis.AxisSpace $stack14, space;
        java.awt.Graphics2D g2;
        org.jfree.chart.ui.RectangleEdge $stack15, $stack18, $stack24, $stack28;
        org.jfree.chart.axis.ValueAxis $stack16, $stack19, $stack22, $stack26;
        double $stack23, $stack27;
        org.jfree.chart.axis.AxisState domainAxisState, rangeAxisState;
        java.util.List $stack30, $stack31;
        java.awt.Shape originalClip;
        java.awt.Composite originalComposite;
        float $stack35;
        java.awt.AlphaComposite $stack36;
        java.awt.geom.Point2D anchor;
        org.jfree.chart.plot.PlotState parentState;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        area := @parameter1: java.awt.geom.Rectangle2D;

        anchor := @parameter2: java.awt.geom.Point2D;

        parentState := @parameter3: org.jfree.chart.plot.PlotState;

        info := @parameter4: org.jfree.chart.plot.PlotRenderingInfo;

        if info == null goto label1;

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void setPlotArea(java.awt.geom.Rectangle2D)>(area);

     label1:
        insets = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.ui.RectangleInsets getInsets()>();

        virtualinvoke insets.<org.jfree.chart.ui.RectangleInsets: void trim(java.awt.geom.Rectangle2D)>(area);

        $stack14 = new org.jfree.chart.axis.AxisSpace;

        specialinvoke $stack14.<org.jfree.chart.axis.AxisSpace: void <init>()>();

        $stack16 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack15 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        space = virtualinvoke $stack16.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)>(g2, this, area, $stack15, $stack14);

        $stack19 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack18 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        space = virtualinvoke $stack19.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)>(g2, this, area, $stack18, space);

        dataArea = virtualinvoke space.<org.jfree.chart.axis.AxisSpace: java.awt.geom.Rectangle2D shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(area, null);

        if info == null goto label2;

        virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: void setDataArea(java.awt.geom.Rectangle2D)>(dataArea);

     label2:
        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea);

        $stack22 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack23 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack24 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        domainAxisState = virtualinvoke $stack22.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, $stack23, area, dataArea, $stack24, info);

        $stack26 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack27 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack28 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        rangeAxisState = virtualinvoke $stack26.<org.jfree.chart.axis.ValueAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, $stack27, area, dataArea, $stack28, info);

        $stack30 = virtualinvoke domainAxisState.<org.jfree.chart.axis.AxisState: java.util.List getTicks()>();

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void drawDomainGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)>(g2, dataArea, $stack30);

        $stack31 = virtualinvoke rangeAxisState.<org.jfree.chart.axis.AxisState: java.util.List getTicks()>();

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void drawRangeGridlines(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)>(g2, dataArea, $stack31);

        originalClip = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Shape getClip()>();

        originalComposite = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        virtualinvoke g2.<java.awt.Graphics2D: void clip(java.awt.Shape)>(dataArea);

        $stack35 = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: float getForegroundAlpha()>();

        $stack36 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $stack35);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($stack36);

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>(g2, dataArea, info, null);

        virtualinvoke g2.<java.awt.Graphics2D: void setClip(java.awt.Shape)>(originalClip);

        virtualinvoke g2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(originalComposite);

        virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: void drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>(g2, dataArea);

        return;
    }

    public void render(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.CrosshairState)
    {
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.FastScatterPlot this;
        java.awt.Paint $stack10;
        float[][] $stack11, $stack12, $stack15, $stack17;
        float[] $stack13, $stack16, $stack18;
        int $stack14, transX, transY, i;
        float x, y;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack19, $stack23;
        double $stack20, $stack22, $stack24, $stack26;
        org.jfree.chart.axis.ValueAxis $stack21, $stack25;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.plot.CrosshairState crosshairState;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        crosshairState := @parameter3: org.jfree.chart.plot.CrosshairState;

        $stack10 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint paint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack10);

        $stack11 = this.<org.jfree.chart.plot.FastScatterPlot: float[][] data>;

        if $stack11 == null goto label2;

        i = 0;

     label1:
        $stack12 = this.<org.jfree.chart.plot.FastScatterPlot: float[][] data>;

        $stack13 = $stack12[0];

        $stack14 = lengthof $stack13;

        if i >= $stack14 goto label2;

        $stack15 = this.<org.jfree.chart.plot.FastScatterPlot: float[][] data>;

        $stack16 = $stack15[0];

        x = $stack16[i];

        $stack17 = this.<org.jfree.chart.plot.FastScatterPlot: float[][] data>;

        $stack18 = $stack17[1];

        y = $stack18[i];

        $stack21 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack20 = (double) x;

        $stack19 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        $stack22 = virtualinvoke $stack21.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack20, dataArea, $stack19);

        transX = (int) $stack22;

        $stack25 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack24 = (double) y;

        $stack23 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        $stack26 = virtualinvoke $stack25.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack24, dataArea, $stack23);

        transY = (int) $stack26;

        virtualinvoke g2.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(transX, transY, 1, 1);

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean $stack10, $stack16;
        java.awt.Graphics2D g2;
        java.awt.RenderingHints$Key $stack11, $stack14, $stack17;
        java.lang.Object saved, $stack13, $stack18;
        java.util.List ticks;
        java.util.Iterator iterator;
        org.jfree.chart.axis.ValueTick tick;
        org.jfree.chart.axis.ValueAxis $stack19;
        double $stack20, v, $stack24, $stack25;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack21;
        java.awt.geom.Line2D$Double $stack23;
        java.awt.Paint $stack26;
        java.awt.Stroke $stack27;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        ticks := @parameter2: java.util.List;

        $stack10 = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: boolean isDomainGridlinesVisible()>();

        if $stack10 != 0 goto label1;

        return;

     label1:
        $stack11 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        saved = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack11);

        $stack14 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $stack13 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack14, $stack13);

        iterator = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack16 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label3;

        $stack18 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack18;

        $stack19 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack20 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack21 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        v = virtualinvoke $stack19.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack20, dataArea, $stack21);

        $stack23 = new java.awt.geom.Line2D$Double;

        $stack24 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack25 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke $stack23.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(v, $stack24, v, $stack25);

        $stack26 = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint getDomainGridlinePaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack26);

        $stack27 = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke getDomainGridlineStroke()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack27);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        goto label2;

     label3:
        $stack17 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack17, saved);

        return;
    }

    protected void drawRangeGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean $stack10, $stack16;
        java.awt.Graphics2D g2;
        java.awt.RenderingHints$Key $stack11, $stack14, $stack17;
        java.lang.Object saved, $stack13, $stack18;
        java.util.List ticks;
        java.util.Iterator iterator;
        org.jfree.chart.axis.ValueTick tick;
        org.jfree.chart.axis.ValueAxis $stack19;
        double $stack20, v, $stack24, $stack25;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge $stack21;
        java.awt.geom.Line2D$Double $stack23;
        java.awt.Paint $stack26;
        java.awt.Stroke $stack27;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        ticks := @parameter2: java.util.List;

        $stack10 = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: boolean isRangeGridlinesVisible()>();

        if $stack10 != 0 goto label1;

        return;

     label1:
        $stack11 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        saved = virtualinvoke g2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($stack11);

        $stack14 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $stack13 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack14, $stack13);

        iterator = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack16 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack16 == 0 goto label3;

        $stack18 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack18;

        $stack19 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack20 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack21 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        v = virtualinvoke $stack19.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack20, dataArea, $stack21);

        $stack23 = new java.awt.geom.Line2D$Double;

        $stack24 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack25 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        specialinvoke $stack23.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack24, v, $stack25, v);

        $stack26 = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint getRangeGridlinePaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack26);

        $stack27 = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke getRangeGridlineStroke()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack27);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack23);

        goto label2;

     label3:
        $stack17 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        virtualinvoke g2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($stack17, saved);

        return;
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)
    {
        org.jfree.chart.axis.ValueAxis axis, $stack3, $stack4;
        org.jfree.chart.plot.FastScatterPlot this;
        org.jfree.data.Range result;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        axis := @parameter0: org.jfree.chart.axis.ValueAxis;

        result = null;

        $stack3 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        if axis != $stack3 goto label1;

        result = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range xDataRange>;

        goto label2;

     label1:
        $stack4 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        if axis != $stack4 goto label2;

        result = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range yDataRange>;

     label2:
        return result;
    }

    private org.jfree.data.Range calculateXDataRange(float[][])
    {
        float[][] data;
        float[] $stack7, $stack14;
        int $stack8, i;
        byte $stack9, $stack15, $stack16;
        org.jfree.data.Range $stack11, result;
        double $stack12, $stack13;
        float v, lowest, highest;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        data := @parameter0: float[][];

        result = null;

        if data == null goto label5;

        lowest = #InfinityF;

        highest = #-InfinityF;

        i = 0;

     label1:
        $stack7 = data[0];

        $stack8 = lengthof $stack7;

        if i >= $stack8 goto label4;

        $stack14 = data[0];

        v = $stack14[i];

        $stack15 = v cmpg lowest;

        if $stack15 >= 0 goto label2;

        lowest = v;

     label2:
        $stack16 = v cmpl highest;

        if $stack16 <= 0 goto label3;

        highest = v;

     label3:
        i = i + 1;

        goto label1;

     label4:
        $stack9 = lowest cmpg highest;

        if $stack9 > 0 goto label5;

        $stack11 = new org.jfree.data.Range;

        $stack13 = (double) lowest;

        $stack12 = (double) highest;

        specialinvoke $stack11.<org.jfree.data.Range: void <init>(double,double)>($stack13, $stack12);

        result = $stack11;

     label5:
        return result;
    }

    private org.jfree.data.Range calculateYDataRange(float[][])
    {
        float[][] data;
        float[] $stack7, $stack14;
        int $stack8, i;
        byte $stack9, $stack15, $stack16;
        org.jfree.data.Range $stack11, result;
        double $stack12, $stack13;
        float v, lowest, highest;
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        data := @parameter0: float[][];

        result = null;

        if data == null goto label5;

        lowest = #InfinityF;

        highest = #-InfinityF;

        i = 0;

     label1:
        $stack7 = data[0];

        $stack8 = lengthof $stack7;

        if i >= $stack8 goto label4;

        $stack14 = data[1];

        v = $stack14[i];

        $stack15 = v cmpg lowest;

        if $stack15 >= 0 goto label2;

        lowest = v;

     label2:
        $stack16 = v cmpl highest;

        if $stack16 <= 0 goto label3;

        highest = v;

     label3:
        i = i + 1;

        goto label1;

     label4:
        $stack9 = lowest cmpg highest;

        if $stack9 > 0 goto label5;

        $stack11 = new org.jfree.data.Range;

        $stack13 = (double) lowest;

        $stack12 = (double) highest;

        specialinvoke $stack11.<org.jfree.data.Range: void <init>(double,double)>($stack13, $stack12);

        result = $stack11;

     label5:
        return result;
    }

    public void zoomDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        double factor;
        org.jfree.chart.axis.ValueAxis $stack5;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        $stack5 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        virtualinvoke $stack5.<org.jfree.chart.axis.ValueAxis: void resizeRange(double)>(factor);

        return;
    }

    public void zoomDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D, boolean)
    {
        boolean useAnchor;
        org.jfree.chart.plot.FastScatterPlot this;
        double factor, sourceX, anchorX;
        org.jfree.chart.axis.ValueAxis $stack10, $stack12, $stack16;
        java.awt.geom.Point2D source;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Rectangle2D $stack13;
        org.jfree.chart.ui.RectangleEdge $stack14;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        useAnchor := @parameter3: boolean;

        if useAnchor == 0 goto label1;

        sourceX = virtualinvoke source.<java.awt.geom.Point2D: double getX()>();

        $stack12 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack13 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack14 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        anchorX = virtualinvoke $stack12.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(sourceX, $stack13, $stack14);

        $stack16 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        virtualinvoke $stack16.<org.jfree.chart.axis.ValueAxis: void resizeRange2(double,double)>(factor, anchorX);

        goto label2;

     label1:
        $stack10 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        virtualinvoke $stack10.<org.jfree.chart.axis.ValueAxis: void resizeRange(double)>(factor);

     label2:
        return;
    }

    public void zoomDomainAxes(double, double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        double lowerPercent, upperPercent;
        org.jfree.chart.axis.ValueAxis $stack7;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        lowerPercent := @parameter0: double;

        upperPercent := @parameter1: double;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter3: java.awt.geom.Point2D;

        $stack7 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        virtualinvoke $stack7.<org.jfree.chart.axis.ValueAxis: void zoomRange(double,double)>(lowerPercent, upperPercent);

        return;
    }

    public void zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        double factor;
        org.jfree.chart.axis.ValueAxis $stack5;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        $stack5 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        virtualinvoke $stack5.<org.jfree.chart.axis.ValueAxis: void resizeRange(double)>(factor);

        return;
    }

    public void zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D, boolean)
    {
        boolean useAnchor;
        org.jfree.chart.plot.FastScatterPlot this;
        double factor, sourceY, anchorY;
        org.jfree.chart.axis.ValueAxis $stack10, $stack12, $stack16;
        java.awt.geom.Point2D source;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Rectangle2D $stack13;
        org.jfree.chart.ui.RectangleEdge $stack14;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        factor := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        useAnchor := @parameter3: boolean;

        if useAnchor == 0 goto label1;

        sourceY = virtualinvoke source.<java.awt.geom.Point2D: double getY()>();

        $stack12 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack13 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: java.awt.geom.Rectangle2D getDataArea()>();

        $stack14 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        anchorY = virtualinvoke $stack12.<org.jfree.chart.axis.ValueAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(sourceY, $stack13, $stack14);

        $stack16 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        virtualinvoke $stack16.<org.jfree.chart.axis.ValueAxis: void resizeRange2(double,double)>(factor, anchorY);

        goto label2;

     label1:
        $stack10 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        virtualinvoke $stack10.<org.jfree.chart.axis.ValueAxis: void resizeRange(double)>(factor);

     label2:
        return;
    }

    public void zoomRangeAxes(double, double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        double lowerPercent, upperPercent;
        org.jfree.chart.axis.ValueAxis $stack7;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        lowerPercent := @parameter0: double;

        upperPercent := @parameter1: double;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter3: java.awt.geom.Point2D;

        $stack7 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        virtualinvoke $stack7.<org.jfree.chart.axis.ValueAxis: void zoomRange(double,double)>(lowerPercent, upperPercent);

        return;
    }

    public boolean isDomainZoomable()
    {
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        return 1;
    }

    public boolean isRangeZoomable()
    {
        org.jfree.chart.plot.FastScatterPlot this;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        return 1;
    }

    public boolean isDomainPannable()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: boolean domainPannable>;

        return $stack1;
    }

    public void setDomainPannable(boolean)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean pannable;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        pannable := @parameter0: boolean;

        this.<org.jfree.chart.plot.FastScatterPlot: boolean domainPannable> = pannable;

        return;
    }

    public boolean isRangePannable()
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean $stack1;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack1 = this.<org.jfree.chart.plot.FastScatterPlot: boolean rangePannable>;

        return $stack1;
    }

    public void setRangePannable(boolean)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean pannable;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        pannable := @parameter0: boolean;

        this.<org.jfree.chart.plot.FastScatterPlot: boolean rangePannable> = pannable;

        return;
    }

    public void panDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean $stack9, $stack15;
        org.jfree.chart.axis.ValueAxis $stack10, $stack11, $stack14, $stack16, $stack17, $stack19;
        org.jfree.data.Range $stack12;
        double length, percent, $stack18, $stack20, $stack21, $stack22, adj;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        percent := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        $stack9 = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: boolean isDomainPannable()>();

        if $stack9 == 0 goto label1;

        $stack10 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        if $stack10 != null goto label2;

     label1:
        return;

     label2:
        $stack11 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack12 = virtualinvoke $stack11.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        length = virtualinvoke $stack12.<org.jfree.data.Range: double getLength()>();

        adj = percent * length;

        $stack14 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack15 = virtualinvoke $stack14.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        if $stack15 == 0 goto label3;

        adj = neg adj;

     label3:
        $stack17 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack16 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack18 = virtualinvoke $stack16.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack20 = $stack18 + adj;

        $stack19 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack21 = virtualinvoke $stack19.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        $stack22 = $stack21 + adj;

        virtualinvoke $stack17.<org.jfree.chart.axis.ValueAxis: void setRange(double,double)>($stack20, $stack22);

        return;
    }

    public void panRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)
    {
        org.jfree.chart.plot.FastScatterPlot this;
        boolean $stack9, $stack15;
        org.jfree.chart.axis.ValueAxis $stack10, $stack11, $stack14, $stack16, $stack17, $stack19;
        org.jfree.data.Range $stack12;
        double length, percent, $stack18, $stack20, $stack21, $stack22, adj;
        org.jfree.chart.plot.PlotRenderingInfo info;
        java.awt.geom.Point2D source;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        percent := @parameter0: double;

        info := @parameter1: org.jfree.chart.plot.PlotRenderingInfo;

        source := @parameter2: java.awt.geom.Point2D;

        $stack9 = virtualinvoke this.<org.jfree.chart.plot.FastScatterPlot: boolean isRangePannable()>();

        if $stack9 == 0 goto label1;

        $stack10 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        if $stack10 != null goto label2;

     label1:
        return;

     label2:
        $stack11 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack12 = virtualinvoke $stack11.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range getRange()>();

        length = virtualinvoke $stack12.<org.jfree.data.Range: double getLength()>();

        adj = percent * length;

        $stack14 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack15 = virtualinvoke $stack14.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>();

        if $stack15 == 0 goto label3;

        adj = neg adj;

     label3:
        $stack17 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack16 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack18 = virtualinvoke $stack16.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack20 = $stack18 + adj;

        $stack19 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack21 = virtualinvoke $stack19.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        $stack22 = $stack21 + adj;

        virtualinvoke $stack17.<org.jfree.chart.axis.ValueAxis: void setRange(double,double)>($stack20, $stack22);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.plot.FastScatterPlot this, that;
        boolean $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack11, $stack14, $stack17, $stack20, $stack21, $stack22, $stack25, $stack28, $stack29, $stack30, $stack33, $stack36, $stack38;
        float[][] $stack9, $stack10;
        org.jfree.chart.axis.ValueAxis $stack12, $stack13, $stack15, $stack16;
        java.awt.Paint $stack18, $stack19, $stack23, $stack24, $stack31, $stack32;
        java.awt.Stroke $stack26, $stack27, $stack34, $stack35;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label01;

        return 1;

     label01:
        $stack3 = specialinvoke this.<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>(obj);

        if $stack3 != 0 goto label02;

        return 0;

     label02:
        $stack4 = obj instanceof org.jfree.chart.plot.FastScatterPlot;

        if $stack4 != 0 goto label03;

        return 0;

     label03:
        that = (org.jfree.chart.plot.FastScatterPlot) obj;

        $stack6 = this.<org.jfree.chart.plot.FastScatterPlot: boolean domainPannable>;

        $stack5 = that.<org.jfree.chart.plot.FastScatterPlot: boolean domainPannable>;

        if $stack6 == $stack5 goto label04;

        return 0;

     label04:
        $stack8 = this.<org.jfree.chart.plot.FastScatterPlot: boolean rangePannable>;

        $stack7 = that.<org.jfree.chart.plot.FastScatterPlot: boolean rangePannable>;

        if $stack8 == $stack7 goto label05;

        return 0;

     label05:
        $stack10 = this.<org.jfree.chart.plot.FastScatterPlot: float[][] data>;

        $stack9 = that.<org.jfree.chart.plot.FastScatterPlot: float[][] data>;

        $stack11 = staticinvoke <org.jfree.chart.util.ArrayUtils: boolean equal(float[][],float[][])>($stack10, $stack9);

        if $stack11 != 0 goto label06;

        return 0;

     label06:
        $stack13 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack12 = that.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack14 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack13, $stack12);

        if $stack14 != 0 goto label07;

        return 0;

     label07:
        $stack16 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack15 = that.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack17 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack16, $stack15);

        if $stack17 != 0 goto label08;

        return 0;

     label08:
        $stack19 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint paint>;

        $stack18 = that.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint paint>;

        $stack20 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack19, $stack18);

        if $stack20 != 0 goto label09;

        return 0;

     label09:
        $stack22 = this.<org.jfree.chart.plot.FastScatterPlot: boolean domainGridlinesVisible>;

        $stack21 = that.<org.jfree.chart.plot.FastScatterPlot: boolean domainGridlinesVisible>;

        if $stack22 == $stack21 goto label10;

        return 0;

     label10:
        $stack24 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint domainGridlinePaint>;

        $stack23 = that.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint domainGridlinePaint>;

        $stack25 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack24, $stack23);

        if $stack25 != 0 goto label11;

        return 0;

     label11:
        $stack27 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke domainGridlineStroke>;

        $stack26 = that.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke domainGridlineStroke>;

        $stack28 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack27, $stack26);

        if $stack28 != 0 goto label12;

        return 0;

     label12:
        $stack29 = this.<org.jfree.chart.plot.FastScatterPlot: boolean rangeGridlinesVisible>;

        if $stack29 != 0 goto label13;

        $stack38 = 1;

        goto label14;

     label13:
        $stack38 = 0;

     label14:
        $stack30 = that.<org.jfree.chart.plot.FastScatterPlot: boolean rangeGridlinesVisible>;

        if $stack38 != $stack30 goto label15;

        return 0;

     label15:
        $stack32 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint rangeGridlinePaint>;

        $stack31 = that.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint rangeGridlinePaint>;

        $stack33 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack32, $stack31);

        if $stack33 != 0 goto label16;

        return 0;

     label16:
        $stack35 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke rangeGridlineStroke>;

        $stack34 = that.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke rangeGridlineStroke>;

        $stack36 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($stack35, $stack34);

        if $stack36 != 0 goto label17;

        return 0;

     label17:
        return 1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.plot.FastScatterPlot this, clone;
        java.lang.Object $stack2, $stack7, $stack13;
        float[][] $stack3, $stack18, $stack19;
        org.jfree.chart.axis.ValueAxis $stack4, $stack5, $stack6, $stack8, $stack9, $stack10, $stack12, $stack14, $stack15, $stack16;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        $stack2 = specialinvoke this.<org.jfree.chart.plot.Plot: java.lang.Object clone()>();

        clone = (org.jfree.chart.plot.FastScatterPlot) $stack2;

        $stack3 = this.<org.jfree.chart.plot.FastScatterPlot: float[][] data>;

        if $stack3 == null goto label1;

        $stack18 = this.<org.jfree.chart.plot.FastScatterPlot: float[][] data>;

        $stack19 = staticinvoke <org.jfree.chart.util.ArrayUtils: float[][] clone(float[][])>($stack18);

        clone.<org.jfree.chart.plot.FastScatterPlot: float[][] data> = $stack19;

     label1:
        $stack4 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        if $stack4 == null goto label2;

        $stack12 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        $stack13 = virtualinvoke $stack12.<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>();

        $stack14 = (org.jfree.chart.axis.ValueAxis) $stack13;

        clone.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis> = $stack14;

        $stack15 = clone.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        virtualinvoke $stack15.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(clone);

        $stack16 = clone.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        virtualinvoke $stack16.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(clone);

     label2:
        $stack5 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        if $stack5 == null goto label3;

        $stack6 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        $stack7 = virtualinvoke $stack6.<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>();

        $stack8 = (org.jfree.chart.axis.ValueAxis) $stack7;

        clone.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis> = $stack8;

        $stack9 = clone.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        virtualinvoke $stack9.<org.jfree.chart.axis.ValueAxis: void setPlot(org.jfree.chart.plot.Plot)>(clone);

        $stack10 = clone.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        virtualinvoke $stack10.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(clone);

     label3:
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.plot.FastScatterPlot this;
        java.awt.Paint $stack2, $stack4, $stack6;
        java.awt.Stroke $stack3, $stack5;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint paint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke domainGridlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack3, stream);

        $stack4 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint domainGridlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack4, stream);

        $stack5 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke rangeGridlineStroke>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>($stack5, stream);

        $stack6 = this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint rangeGridlinePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack6, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.plot.FastScatterPlot this;
        java.awt.Paint $stack2, $stack4, $stack6;
        java.awt.Stroke $stack3, $stack5;
        org.jfree.chart.axis.ValueAxis $stack7, $stack8, $stack9, $stack10;

        this := @this: org.jfree.chart.plot.FastScatterPlot;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint paint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke domainGridlineStroke> = $stack3;

        $stack4 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint domainGridlinePaint> = $stack4;

        $stack5 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Stroke readStroke(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke rangeGridlineStroke> = $stack5;

        $stack6 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.plot.FastScatterPlot: java.awt.Paint rangeGridlinePaint> = $stack6;

        $stack7 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        if $stack7 == null goto label1;

        $stack10 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis domainAxis>;

        virtualinvoke $stack10.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label1:
        $stack8 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        if $stack8 == null goto label2;

        $stack9 = this.<org.jfree.chart.plot.FastScatterPlot: org.jfree.chart.axis.ValueAxis rangeAxis>;

        virtualinvoke $stack9.<org.jfree.chart.axis.ValueAxis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>(this);

     label2:
        return;
    }

    static void <clinit>()
    {
        java.awt.BasicStroke $stack0;
        float[] $stack1;
        java.awt.Color $stack2;
        java.util.ResourceBundle $stack3;

        <org.jfree.chart.plot.FastScatterPlot: long serialVersionUID> = 7871545897358563521L;

        $stack0 = new java.awt.BasicStroke;

        $stack1 = newarray (float)[2];

        $stack1[0] = 2.0F;

        $stack1[1] = 2.0F;

        specialinvoke $stack0.<java.awt.BasicStroke: void <init>(float,int,int,float,float[],float)>(0.5F, 0, 2, 0.0F, $stack1, 0.0F);

        <org.jfree.chart.plot.FastScatterPlot: java.awt.Stroke DEFAULT_GRIDLINE_STROKE> = $stack0;

        $stack2 = <java.awt.Color: java.awt.Color lightGray>;

        <org.jfree.chart.plot.FastScatterPlot: java.awt.Paint DEFAULT_GRIDLINE_PAINT> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.ResourceBundleWrapper: java.util.ResourceBundle getBundle(java.lang.String)>("org.jfree.chart.plot.LocalizationBundle");

        <org.jfree.chart.plot.FastScatterPlot: java.util.ResourceBundle localizationResources> = $stack3;

        return;
    }
}
