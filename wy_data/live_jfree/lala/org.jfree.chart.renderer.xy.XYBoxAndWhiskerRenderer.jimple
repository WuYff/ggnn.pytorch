public class org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer extends org.jfree.chart.renderer.xy.AbstractXYItemRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private double boxWidth;
    private transient java.awt.Paint boxPaint;
    private boolean fillBox;
    private transient java.awt.Paint artifactPaint;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void <init>(double)>(-1.0);

        return;
    }

    public void <init>(double)
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        java.awt.Color $stack3, $stack4;
        double boxWidth;
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator $stack5;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        boxWidth := @parameter0: double;

        specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>();

        $stack3 = <java.awt.Color: java.awt.Color BLACK>;

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint artifactPaint> = $stack3;

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: double boxWidth> = boxWidth;

        $stack4 = <java.awt.Color: java.awt.Color GREEN>;

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint boxPaint> = $stack4;

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: boolean fillBox> = 1;

        $stack5 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;

        specialinvoke $stack5.<org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator: void <init>()>();

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void setDefaultToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)>($stack5);

        return;
    }

    public double getBoxWidth()
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        double $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: double boxWidth>;

        return $stack1;
    }

    public void setBoxWidth(double)
    {
        double width, $stack3;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        byte $stack4;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        width := @parameter0: double;

        $stack3 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: double boxWidth>;

        $stack4 = width cmpl $stack3;

        if $stack4 == 0 goto label1;

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: double boxWidth> = width;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void fireChangeEvent()>();

     label1:
        return;
    }

    public java.awt.Paint getBoxPaint()
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint boxPaint>;

        return $stack1;
    }

    public void setBoxPaint(java.awt.Paint)
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        java.awt.Paint paint;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        paint := @parameter0: java.awt.Paint;

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint boxPaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public boolean getFillBox()
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: boolean fillBox>;

        return $stack1;
    }

    public void setFillBox(boolean)
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        boolean flag;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: boolean fillBox> = flag;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getArtifactPaint()
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        return $stack1;
    }

    public void setArtifactPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint artifactPaint> = paint;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void fireChangeEvent()>();

        return;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.Range $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        $stack2 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>(dataset, 1);

        return $stack2;
    }

    protected java.awt.Paint lookupBoxPaint(int, int)
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        java.awt.Paint p, $stack5;
        int series, item;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        series := @parameter0: int;

        item := @parameter1: int;

        p = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint getBoxPaint()>();

        if p == null goto label1;

        return p;

     label1:
        $stack5 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        return $stack5;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.plot.PlotOrientation orientation, $stack15, $stack16;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        org.jfree.data.xy.XYDataset dataset;
        int series, item, pass;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.renderer.xy.XYItemRendererState state;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack15 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if orientation != $stack15 goto label1;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void drawHorizontalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>(g2, dataArea, info, plot, domainAxis, rangeAxis, dataset, series, item, crosshairState, pass);

        goto label2;

     label1:
        $stack16 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack16 goto label2;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>(g2, dataArea, info, plot, domainAxis, rangeAxis, dataset, series, item, crosshairState, pass);

     label2:
        return;
    }

    public void drawHorizontalItem(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.statistics.BoxAndWhiskerXYDataset boxAndWhiskerData;
        int series, item, pass, itemCount;
        java.lang.Number x, yMax, yMin, yMedian, yAverage, yQ1Median, yQ3Median;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        double $stack58, xx, $stack62, yyMax, $stack64, yyMin, $stack66, yyMedian, $stack68, yyQ1Median, $stack70, yyQ3Median, dataAreaX, maxBoxWidth, $stack91, $stack92, $stack93, $stack99, $stack100, $stack101, $stack102, aRadius, $stack104, $stack105, $stack108, $stack109, $stack112, $stack113, $stack114, $stack115, $stack140, $stack141, $stack142, $stack145, $stack146, $stack147, $stack189, yyAverage, exactBoxWidth, width, $stack79, $stack82, $stack80, $stack81, $stack85, $stack88, $stack86, $stack87;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack59, location;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        byte $stack74, $stack106, $stack110, $stack148, $stack149, $stack89;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D$Double $stack90, $stack139, box;
        boolean $stack94, $stack103;
        java.awt.Stroke $stack95, itemCount#34;
        java.awt.Paint $stack96, $stack97, $stack116, $stack75;
        java.awt.geom.Line2D$Double $stack98, $stack77, $stack78, $stack83, $stack84;
        java.awt.geom.Ellipse2D$Double $stack111;
        org.jfree.chart.ChartRenderingInfo $stack208;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.entity.EntityCollection entities;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter3: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter4: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter6: org.jfree.data.xy.XYDataset;

        series := @parameter7: int;

        item := @parameter8: int;

        crosshairState := @parameter9: org.jfree.chart.plot.CrosshairState;

        pass := @parameter10: int;

        entities = null;

        if info == null goto label01;

        $stack208 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        entities = virtualinvoke $stack208.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

     label01:
        boxAndWhiskerData = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;

        x = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getX(int,int)>(series, item);

        yMax = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMaxRegularValue(int,int)>(series, item);

        yMin = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMinRegularValue(int,int)>(series, item);

        yMedian = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMedianValue(int,int)>(series, item);

        yAverage = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMeanValue(int,int)>(series, item);

        yQ1Median = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getQ1Value(int,int)>(series, item);

        yQ3Median = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getQ3Value(int,int)>(series, item);

        $stack58 = virtualinvoke x.<java.lang.Number: double doubleValue()>();

        $stack59 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack58, dataArea, $stack59);

        location = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        $stack62 = virtualinvoke yMax.<java.lang.Number: double doubleValue()>();

        yyMax = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack62, dataArea, location);

        $stack64 = virtualinvoke yMin.<java.lang.Number: double doubleValue()>();

        yyMin = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack64, dataArea, location);

        $stack66 = virtualinvoke yMedian.<java.lang.Number: double doubleValue()>();

        yyMedian = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack66, dataArea, location);

        yyAverage = 0.0;

        if yAverage == null goto label02;

        $stack189 = virtualinvoke yAverage.<java.lang.Number: double doubleValue()>();

        yyAverage = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack189, dataArea, location);

     label02:
        $stack68 = virtualinvoke yQ1Median.<java.lang.Number: double doubleValue()>();

        yyQ1Median = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack68, dataArea, location);

        $stack70 = virtualinvoke yQ3Median.<java.lang.Number: double doubleValue()>();

        yyQ3Median = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack70, dataArea, location);

        exactBoxWidth = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: double getBoxWidth()>();

        width = exactBoxWidth;

        dataAreaX = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getHeight()>();

        maxBoxWidth = dataAreaX * 0.1;

        $stack74 = exactBoxWidth cmpg 0.0;

        if $stack74 > 0 goto label05;

        itemCount = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: int getItemCount(int)>(series);

        $stack145 = (double) itemCount;

        $stack146 = dataAreaX / $stack145;

        $stack147 = $stack146 * 4.5;

        exactBoxWidth = $stack147 / 7.0;

        $stack148 = exactBoxWidth cmpg 3.0;

        if $stack148 >= 0 goto label03;

        width = 3.0;

        goto label05;

     label03:
        $stack149 = exactBoxWidth cmpl maxBoxWidth;

        if $stack149 <= 0 goto label04;

        width = maxBoxWidth;

        goto label05;

     label04:
        width = exactBoxWidth;

     label05:
        $stack75 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack75);

        itemCount#34 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Stroke getItemStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(itemCount#34);

        $stack77 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack77.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yyMax, xx, yyQ3Median, xx);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack77);

        $stack78 = new java.awt.geom.Line2D$Double;

        $stack79 = width / 2.0;

        $stack82 = xx - $stack79;

        $stack80 = width / 2.0;

        $stack81 = xx + $stack80;

        specialinvoke $stack78.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yyMax, $stack82, yyMax, $stack81);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack78);

        $stack83 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack83.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yyMin, xx, yyQ1Median, xx);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack83);

        $stack84 = new java.awt.geom.Line2D$Double;

        $stack85 = width / 2.0;

        $stack88 = xx - $stack85;

        $stack86 = width / 2.0;

        $stack87 = xx + $stack86;

        specialinvoke $stack84.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yyMin, $stack88, yyMin, $stack87);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack84);

        $stack89 = yyQ1Median cmpg yyQ3Median;

        if $stack89 >= 0 goto label06;

        $stack139 = new java.awt.geom.Rectangle2D$Double;

        $stack140 = width / 2.0;

        $stack142 = xx - $stack140;

        $stack141 = yyQ3Median - yyQ1Median;

        specialinvoke $stack139.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(yyQ1Median, $stack142, $stack141, width);

        box = $stack139;

        goto label07;

     label06:
        $stack90 = new java.awt.geom.Rectangle2D$Double;

        $stack91 = width / 2.0;

        $stack93 = xx - $stack91;

        $stack92 = yyQ1Median - yyQ3Median;

        specialinvoke $stack90.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(yyQ3Median, $stack93, $stack92, width);

        box = $stack90;

     label07:
        $stack94 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: boolean fillBox>;

        if $stack94 == 0 goto label08;

        $stack116 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint lookupBoxPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack116);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(box);

     label08:
        $stack95 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Stroke getItemOutlineStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack95);

        $stack96 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack96);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(box);

        $stack97 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint getArtifactPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack97);

        $stack98 = new java.awt.geom.Line2D$Double;

        $stack99 = width / 2.0;

        $stack102 = xx - $stack99;

        $stack100 = width / 2.0;

        $stack101 = xx + $stack100;

        specialinvoke $stack98.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yyMedian, $stack102, yyMedian, $stack101);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack98);

        if yAverage == null goto label09;

        aRadius = width / 4.0;

        $stack104 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        $stack105 = $stack104 - aRadius;

        $stack106 = yyAverage cmpl $stack105;

        if $stack106 <= 0 goto label09;

        $stack108 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack109 = $stack108 + aRadius;

        $stack110 = yyAverage cmpg $stack109;

        if $stack110 >= 0 goto label09;

        $stack111 = new java.awt.geom.Ellipse2D$Double;

        $stack115 = yyAverage - aRadius;

        $stack114 = xx - aRadius;

        $stack113 = aRadius * 2.0;

        $stack112 = aRadius * 2.0;

        specialinvoke $stack111.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack115, $stack114, $stack113, $stack112);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack111);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack111);

     label09:
        if entities == null goto label10;

        $stack103 = interfaceinvoke box.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(dataArea);

        if $stack103 == 0 goto label10;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(entities, box, dataset, series, item, yyAverage, xx);

     label10:
        return;
    }

    public void drawVerticalItem(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.data.statistics.BoxAndWhiskerXYDataset boxAndWhiskerData;
        int series, item, pass, itemCount, i, $stack121;
        java.lang.Number x, yMax, yMin, yMedian, yAverage, yQ1Median, yQ3Median, $stack144, $stack146, $stack149, $stack152, $stack155;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        double $stack73, xx, $stack77, yyMax, $stack79, yyMin, $stack81, yyMedian, $stack83, yyQ1Median, $stack85, yyQ3Median, $stack88, $stack89, dataAreaX, maxBoxWidth, $stack107, $stack108, $stack109, $stack115, $stack116, $stack117, $stack118, oRadius, $stack124, $stack125, $stack126, $stack127, minAxisValue, $stack147, $stack150, $stack153, $stack156, $stack167, $stack168, $stack171, $stack172, $stack175, $stack176, $stack177, $stack178, $stack207, $stack208, $stack209, $stack212, $stack213, $stack214, $stack256, yyAverage, exactBoxWidth, width, $stack95, $stack98, $stack96, $stack97, $stack101, $stack104, $stack102, $stack103, aRadius, outlier, yyOutlier, i#218;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack74, location;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        byte $stack90, $stack148, $stack151, $stack154, $stack157, $stack169, $stack173, $stack215, $stack216, $stack105;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D$Double $stack106, $stack206, box;
        boolean $stack110, $stack123, $stack129, $stack130, $stack131, $stack132, $stack138;
        java.awt.Stroke $stack111, itemCount#35;
        java.awt.Paint $stack112, $stack113, $stack179, $stack91;
        java.awt.geom.Line2D$Double $stack114, $stack93, $stack94, $stack99, $stack100;
        java.util.Iterator iterator, i#216;
        java.lang.Object $stack135, $stack140, $stack143;
        org.jfree.chart.renderer.OutlierList list;
        org.jfree.chart.renderer.Outlier outlier, $stack161, $stack165;
        java.awt.geom.Point2D point;
        java.awt.geom.Ellipse2D$Double $stack174;
        org.jfree.chart.ChartRenderingInfo $stack296;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.entity.EntityCollection entities;
        java.util.List yOutliers;
        java.util.ArrayList $stack119;
        org.jfree.chart.renderer.OutlierListCollection $stack120;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        info := @parameter2: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter3: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter4: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter6: org.jfree.data.xy.XYDataset;

        series := @parameter7: int;

        item := @parameter8: int;

        crosshairState := @parameter9: org.jfree.chart.plot.CrosshairState;

        pass := @parameter10: int;

        entities = null;

        if info == null goto label01;

        $stack296 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        entities = virtualinvoke $stack296.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

     label01:
        boxAndWhiskerData = (org.jfree.data.statistics.BoxAndWhiskerXYDataset) dataset;

        x = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getX(int,int)>(series, item);

        yMax = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMaxRegularValue(int,int)>(series, item);

        yMin = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMinRegularValue(int,int)>(series, item);

        yMedian = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMedianValue(int,int)>(series, item);

        yAverage = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMeanValue(int,int)>(series, item);

        yQ1Median = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getQ1Value(int,int)>(series, item);

        yQ3Median = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getQ3Value(int,int)>(series, item);

        yOutliers = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.util.List getOutliers(int,int)>(series, item);

        if yOutliers != null goto label02;

        yOutliers = <java.util.Collections: java.util.List EMPTY_LIST>;

     label02:
        $stack73 = virtualinvoke x.<java.lang.Number: double doubleValue()>();

        $stack74 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack73, dataArea, $stack74);

        location = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        $stack77 = virtualinvoke yMax.<java.lang.Number: double doubleValue()>();

        yyMax = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack77, dataArea, location);

        $stack79 = virtualinvoke yMin.<java.lang.Number: double doubleValue()>();

        yyMin = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack79, dataArea, location);

        $stack81 = virtualinvoke yMedian.<java.lang.Number: double doubleValue()>();

        yyMedian = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack81, dataArea, location);

        yyAverage = 0.0;

        if yAverage == null goto label03;

        $stack256 = virtualinvoke yAverage.<java.lang.Number: double doubleValue()>();

        yyAverage = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack256, dataArea, location);

     label03:
        $stack83 = virtualinvoke yQ1Median.<java.lang.Number: double doubleValue()>();

        yyQ1Median = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack83, dataArea, location);

        $stack85 = virtualinvoke yQ3Median.<java.lang.Number: double doubleValue()>();

        yyQ3Median = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack85, dataArea, location);

        exactBoxWidth = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: double getBoxWidth()>();

        width = exactBoxWidth;

        $stack88 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack89 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinX()>();

        dataAreaX = $stack88 - $stack89;

        maxBoxWidth = dataAreaX * 0.1;

        $stack90 = exactBoxWidth cmpg 0.0;

        if $stack90 > 0 goto label06;

        itemCount = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: int getItemCount(int)>(series);

        $stack212 = (double) itemCount;

        $stack213 = dataAreaX / $stack212;

        $stack214 = $stack213 * 4.5;

        exactBoxWidth = $stack214 / 7.0;

        $stack215 = exactBoxWidth cmpg 3.0;

        if $stack215 >= 0 goto label04;

        width = 3.0;

        goto label06;

     label04:
        $stack216 = exactBoxWidth cmpl maxBoxWidth;

        if $stack216 <= 0 goto label05;

        width = maxBoxWidth;

        goto label06;

     label05:
        width = exactBoxWidth;

     label06:
        $stack91 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack91);

        itemCount#35 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Stroke getItemStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(itemCount#35);

        $stack93 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack93.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, yyMax, xx, yyQ3Median);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack93);

        $stack94 = new java.awt.geom.Line2D$Double;

        $stack95 = width / 2.0;

        $stack98 = xx - $stack95;

        $stack96 = width / 2.0;

        $stack97 = xx + $stack96;

        specialinvoke $stack94.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack98, yyMax, $stack97, yyMax);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack94);

        $stack99 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack99.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx, yyMin, xx, yyQ1Median);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack99);

        $stack100 = new java.awt.geom.Line2D$Double;

        $stack101 = width / 2.0;

        $stack104 = xx - $stack101;

        $stack102 = width / 2.0;

        $stack103 = xx + $stack102;

        specialinvoke $stack100.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack104, yyMin, $stack103, yyMin);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack100);

        $stack105 = yyQ1Median cmpl yyQ3Median;

        if $stack105 <= 0 goto label07;

        $stack206 = new java.awt.geom.Rectangle2D$Double;

        $stack207 = width / 2.0;

        $stack209 = xx - $stack207;

        $stack208 = yyQ1Median - yyQ3Median;

        specialinvoke $stack206.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack209, yyQ3Median, width, $stack208);

        box = $stack206;

        goto label08;

     label07:
        $stack106 = new java.awt.geom.Rectangle2D$Double;

        $stack107 = width / 2.0;

        $stack109 = xx - $stack107;

        $stack108 = yyQ3Median - yyQ1Median;

        specialinvoke $stack106.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack109, yyQ1Median, width, $stack108);

        box = $stack106;

     label08:
        $stack110 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: boolean fillBox>;

        if $stack110 == 0 goto label09;

        $stack179 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint lookupBoxPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack179);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>(box);

     label09:
        $stack111 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Stroke getItemOutlineStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack111);

        $stack112 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint getItemOutlinePaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack112);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(box);

        $stack113 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint getArtifactPaint()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack113);

        $stack114 = new java.awt.geom.Line2D$Double;

        $stack115 = width / 2.0;

        $stack118 = xx - $stack115;

        $stack116 = width / 2.0;

        $stack117 = xx + $stack116;

        specialinvoke $stack114.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack118, yyMedian, $stack117, yyMedian);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack114);

        aRadius = 0.0;

        oRadius = width / 3.0;

        if yAverage == null goto label10;

        aRadius = width / 4.0;

        $stack167 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMinY()>();

        $stack168 = $stack167 - aRadius;

        $stack169 = yyAverage cmpl $stack168;

        if $stack169 <= 0 goto label10;

        $stack171 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack172 = $stack171 + aRadius;

        $stack173 = yyAverage cmpg $stack172;

        if $stack173 >= 0 goto label10;

        $stack174 = new java.awt.geom.Ellipse2D$Double;

        $stack178 = xx - aRadius;

        $stack177 = yyAverage - aRadius;

        $stack176 = aRadius * 2.0;

        $stack175 = aRadius * 2.0;

        specialinvoke $stack174.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack178, $stack177, $stack176, $stack175);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack174);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack174);

     label10:
        $stack119 = new java.util.ArrayList;

        specialinvoke $stack119.<java.util.ArrayList: void <init>()>();

        $stack120 = new org.jfree.chart.renderer.OutlierListCollection;

        specialinvoke $stack120.<org.jfree.chart.renderer.OutlierListCollection: void <init>()>();

        i = 0;

     label11:
        $stack121 = interfaceinvoke yOutliers.<java.util.List: int size()>();

        if i >= $stack121 goto label16;

        $stack143 = interfaceinvoke yOutliers.<java.util.List: java.lang.Object get(int)>(i);

        $stack144 = (java.lang.Number) $stack143;

        outlier = virtualinvoke $stack144.<java.lang.Number: double doubleValue()>();

        $stack146 = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMaxOutlier(int,int)>(series, item);

        $stack147 = virtualinvoke $stack146.<java.lang.Number: double doubleValue()>();

        $stack148 = outlier cmpl $stack147;

        if $stack148 <= 0 goto label12;

        virtualinvoke $stack120.<org.jfree.chart.renderer.OutlierListCollection: void setHighFarOut(boolean)>(1);

        goto label15;

     label12:
        $stack149 = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMinOutlier(int,int)>(series, item);

        $stack150 = virtualinvoke $stack149.<java.lang.Number: double doubleValue()>();

        $stack151 = outlier cmpg $stack150;

        if $stack151 >= 0 goto label13;

        virtualinvoke $stack120.<org.jfree.chart.renderer.OutlierListCollection: void setLowFarOut(boolean)>(1);

        goto label15;

     label13:
        $stack152 = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMaxRegularValue(int,int)>(series, item);

        $stack153 = virtualinvoke $stack152.<java.lang.Number: double doubleValue()>();

        $stack154 = outlier cmpl $stack153;

        if $stack154 <= 0 goto label14;

        yyOutlier = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(outlier, dataArea, location);

        $stack165 = new org.jfree.chart.renderer.Outlier;

        specialinvoke $stack165.<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>(xx, yyOutlier, oRadius);

        interfaceinvoke $stack119.<java.util.List: boolean add(java.lang.Object)>($stack165);

        goto label15;

     label14:
        $stack155 = interfaceinvoke boxAndWhiskerData.<org.jfree.data.statistics.BoxAndWhiskerXYDataset: java.lang.Number getMinRegularValue(int,int)>(series, item);

        $stack156 = virtualinvoke $stack155.<java.lang.Number: double doubleValue()>();

        $stack157 = outlier cmpg $stack156;

        if $stack157 >= 0 goto label15;

        yyOutlier = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(outlier, dataArea, location);

        $stack161 = new org.jfree.chart.renderer.Outlier;

        specialinvoke $stack161.<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>(xx, yyOutlier, oRadius);

        interfaceinvoke $stack119.<java.util.List: boolean add(java.lang.Object)>($stack161);

     label15:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($stack119);

        i = i + 1;

        goto label11;

     label16:
        i#216 = interfaceinvoke $stack119.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $stack123 = interfaceinvoke i#216.<java.util.Iterator: boolean hasNext()>();

        if $stack123 == 0 goto label18;

        $stack140 = interfaceinvoke i#216.<java.util.Iterator: java.lang.Object next()>();

        outlier = (org.jfree.chart.renderer.Outlier) $stack140;

        virtualinvoke $stack120.<org.jfree.chart.renderer.OutlierListCollection: boolean add(org.jfree.chart.renderer.Outlier)>(outlier);

        goto label17;

     label18:
        $stack124 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>();

        $stack125 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack124, dataArea, location);

        i#218 = $stack125 + aRadius;

        $stack126 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>();

        $stack127 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack126, dataArea, location);

        minAxisValue = $stack127 - aRadius;

        iterator = virtualinvoke $stack120.<org.jfree.chart.renderer.OutlierListCollection: java.util.Iterator iterator()>();

     label19:
        $stack129 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack129 == 0 goto label22;

        $stack135 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        list = (org.jfree.chart.renderer.OutlierList) $stack135;

        outlier = virtualinvoke list.<org.jfree.chart.renderer.OutlierList: org.jfree.chart.renderer.Outlier getAveragedOutlier()>();

        point = virtualinvoke outlier.<org.jfree.chart.renderer.Outlier: java.awt.geom.Point2D getPoint()>();

        $stack138 = virtualinvoke list.<org.jfree.chart.renderer.OutlierList: boolean isMultiple()>();

        if $stack138 == 0 goto label20;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void drawMultipleEllipse(java.awt.geom.Point2D,double,double,java.awt.Graphics2D)>(point, width, oRadius, g2);

        goto label21;

     label20:
        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void drawEllipse(java.awt.geom.Point2D,double,java.awt.Graphics2D)>(point, oRadius, g2);

     label21:
        goto label19;

     label22:
        $stack130 = virtualinvoke $stack120.<org.jfree.chart.renderer.OutlierListCollection: boolean isHighFarOut()>();

        if $stack130 == 0 goto label23;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void drawHighFarOut(double,java.awt.Graphics2D,double,double)>(aRadius, g2, xx, i#218);

     label23:
        $stack131 = virtualinvoke $stack120.<org.jfree.chart.renderer.OutlierListCollection: boolean isLowFarOut()>();

        if $stack131 == 0 goto label24;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void drawLowFarOut(double,java.awt.Graphics2D,double,double)>(aRadius, g2, xx, minAxisValue);

     label24:
        if entities == null goto label25;

        $stack132 = interfaceinvoke box.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(dataArea);

        if $stack132 == 0 goto label25;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(entities, box, dataset, series, item, xx, yyAverage);

     label25:
        return;
    }

    protected void drawEllipse(java.awt.geom.Point2D, double, java.awt.Graphics2D)
    {
        java.awt.geom.Ellipse2D$Double $stack6;
        java.awt.geom.Point2D point;
        double $stack7, oRadius, $stack8, $stack9, $stack10;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        point := @parameter0: java.awt.geom.Point2D;

        oRadius := @parameter1: double;

        g2 := @parameter2: java.awt.Graphics2D;

        $stack6 = new java.awt.geom.Ellipse2D$Double;

        $stack7 = virtualinvoke point.<java.awt.geom.Point2D: double getX()>();

        $stack8 = oRadius / 2.0;

        $stack9 = $stack7 + $stack8;

        $stack10 = virtualinvoke point.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $stack6.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack9, $stack10, oRadius, oRadius);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack6);

        return;
    }

    protected void drawMultipleEllipse(java.awt.geom.Point2D, double, double, java.awt.Graphics2D)
    {
        java.awt.geom.Ellipse2D$Double $stack9, $stack15;
        java.awt.geom.Point2D point;
        double $stack10, boxWidth, $stack11, oRadius, $stack12, $stack13, $stack14, $stack16, $stack17, $stack18, $stack19;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        point := @parameter0: java.awt.geom.Point2D;

        boxWidth := @parameter1: double;

        oRadius := @parameter2: double;

        g2 := @parameter3: java.awt.Graphics2D;

        $stack9 = new java.awt.geom.Ellipse2D$Double;

        $stack10 = virtualinvoke point.<java.awt.geom.Point2D: double getX()>();

        $stack11 = boxWidth / 2.0;

        $stack12 = $stack10 - $stack11;

        $stack13 = $stack12 + oRadius;

        $stack14 = virtualinvoke point.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $stack9.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack13, $stack14, oRadius, oRadius);

        $stack15 = new java.awt.geom.Ellipse2D$Double;

        $stack16 = virtualinvoke point.<java.awt.geom.Point2D: double getX()>();

        $stack17 = boxWidth / 2.0;

        $stack18 = $stack16 + $stack17;

        $stack19 = virtualinvoke point.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $stack15.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($stack18, $stack19, oRadius, oRadius);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack9);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack15);

        return;
    }

    protected void drawHighFarOut(double, java.awt.Graphics2D, double, double)
    {
        double aRadius, side, xx, m, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20;
        java.awt.Graphics2D g2;
        java.awt.geom.Line2D$Double $stack10, $stack15, $stack18;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        aRadius := @parameter0: double;

        g2 := @parameter1: java.awt.Graphics2D;

        xx := @parameter2: double;

        m := @parameter3: double;

        side = aRadius * 2.0;

        $stack10 = new java.awt.geom.Line2D$Double;

        $stack14 = xx - side;

        $stack13 = m + side;

        $stack12 = xx + side;

        $stack11 = m + side;

        specialinvoke $stack10.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack14, $stack13, $stack12, $stack11);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack10);

        $stack15 = new java.awt.geom.Line2D$Double;

        $stack17 = xx - side;

        $stack16 = m + side;

        specialinvoke $stack15.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack17, $stack16, xx, m);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack15);

        $stack18 = new java.awt.geom.Line2D$Double;

        $stack20 = xx + side;

        $stack19 = m + side;

        specialinvoke $stack18.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack20, $stack19, xx, m);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack18);

        return;
    }

    protected void drawLowFarOut(double, java.awt.Graphics2D, double, double)
    {
        double aRadius, side, xx, m, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20;
        java.awt.Graphics2D g2;
        java.awt.geom.Line2D$Double $stack10, $stack15, $stack18;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        aRadius := @parameter0: double;

        g2 := @parameter1: java.awt.Graphics2D;

        xx := @parameter2: double;

        m := @parameter3: double;

        side = aRadius * 2.0;

        $stack10 = new java.awt.geom.Line2D$Double;

        $stack14 = xx - side;

        $stack13 = m - side;

        $stack12 = xx + side;

        $stack11 = m - side;

        specialinvoke $stack10.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack14, $stack13, $stack12, $stack11);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack10);

        $stack15 = new java.awt.geom.Line2D$Double;

        $stack17 = xx - side;

        $stack16 = m - side;

        specialinvoke $stack15.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack17, $stack16, xx, m);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack15);

        $stack18 = new java.awt.geom.Line2D$Double;

        $stack20 = xx + side;

        $stack19 = m - side;

        specialinvoke $stack18.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>($stack20, $stack19, xx, m);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack18);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this, that;
        boolean $stack3, $stack4, $stack10, $stack13, $stack14, $stack15;
        double $stack5, $stack6;
        byte $stack7;
        java.awt.Paint $stack8, $stack9, $stack11, $stack12;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        $stack4 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>(obj);

        if $stack4 != 0 goto label3;

        return 0;

     label3:
        that = (org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: double boxWidth>;

        $stack6 = virtualinvoke that.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: double getBoxWidth()>();

        $stack7 = $stack5 cmpl $stack6;

        if $stack7 == 0 goto label4;

        return 0;

     label4:
        $stack9 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint boxPaint>;

        $stack8 = that.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint boxPaint>;

        $stack10 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack9, $stack8);

        if $stack10 != 0 goto label5;

        return 0;

     label5:
        $stack12 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        $stack11 = that.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        $stack13 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack12, $stack11);

        if $stack13 != 0 goto label6;

        return 0;

     label6:
        $stack15 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: boolean fillBox>;

        $stack14 = that.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: boolean fillBox>;

        if $stack15 == $stack14 goto label7;

        return 0;

     label7:
        return 1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        java.awt.Paint $stack2, $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint boxPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint artifactPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        java.awt.Paint $stack2, $stack3;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint boxPaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: java.awt.Paint artifactPaint> = $stack3;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;

        $stack1 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: long serialVersionUID> = -8020170108532232324L;

        return;
    }
}
