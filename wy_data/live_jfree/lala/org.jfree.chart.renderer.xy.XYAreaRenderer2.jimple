public class org.jfree.chart.renderer.xy.XYAreaRenderer2 extends org.jfree.chart.renderer.xy.AbstractXYItemRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer, org.jfree.chart.util.PublicCloneable
{
    private static final long serialVersionUID;
    private boolean showOutline;
    private transient java.awt.Shape legendArea;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        specialinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>(null, null);

        return;
    }

    public void <init>(org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)
    {
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;
        org.jfree.chart.labels.XYToolTipGenerator labelGenerator;
        org.jfree.chart.urls.XYURLGenerator urlGenerator;
        java.awt.geom.GeneralPath $stack4;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        labelGenerator := @parameter0: org.jfree.chart.labels.XYToolTipGenerator;

        urlGenerator := @parameter1: org.jfree.chart.urls.XYURLGenerator;

        specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>();

        this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean showOutline> = 0;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: void setDefaultToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)>(labelGenerator);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: void setURLGenerator(org.jfree.chart.urls.XYURLGenerator)>(urlGenerator);

        $stack4 = new java.awt.geom.GeneralPath;

        specialinvoke $stack4.<java.awt.geom.GeneralPath: void <init>()>();

        virtualinvoke $stack4.<java.awt.geom.GeneralPath: void moveTo(float,float)>(0.0F, -4.0F);

        virtualinvoke $stack4.<java.awt.geom.GeneralPath: void lineTo(float,float)>(3.0F, -2.0F);

        virtualinvoke $stack4.<java.awt.geom.GeneralPath: void lineTo(float,float)>(4.0F, 4.0F);

        virtualinvoke $stack4.<java.awt.geom.GeneralPath: void lineTo(float,float)>(-4.0F, 4.0F);

        virtualinvoke $stack4.<java.awt.geom.GeneralPath: void lineTo(float,float)>(-3.0F, -2.0F);

        virtualinvoke $stack4.<java.awt.geom.GeneralPath: void closePath()>();

        this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea> = $stack4;

        return;
    }

    public boolean isOutline()
    {
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;
        boolean $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean showOutline>;

        return $stack1;
    }

    public void setOutline(boolean)
    {
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;
        boolean show;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        show := @parameter0: boolean;

        this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean showOutline> = show;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: void fireChangeEvent()>();

        return;
    }

    public java.awt.Shape getLegendArea()
    {
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;
        java.awt.Shape $stack1;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        $stack1 = this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea>;

        return $stack1;
    }

    public void setLegendArea(java.awt.Shape)
    {
        java.awt.Shape area;
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        area := @parameter0: java.awt.Shape;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(area, "area");

        this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea> = area;

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: void fireChangeEvent()>();

        return;
    }

    public org.jfree.chart.LegendItem getLegendItem(int, int)
    {
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;
        org.jfree.chart.plot.XYPlot xyplot;
        int datasetIndex, series;
        org.jfree.data.xy.XYDataset dataset;
        org.jfree.chart.labels.XYSeriesLabelGenerator lg, $stack18, $stack19, $stack35, $stack51;
        java.lang.String label, toolTipText, urlText;
        java.awt.Paint paint, labelPaint;
        org.jfree.chart.LegendItem $stack21, result;
        java.awt.Shape $stack22;
        java.awt.Font $stack23;
        java.lang.Comparable $stack25;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        datasetIndex := @parameter0: int;

        series := @parameter1: int;

        result = null;

        xyplot = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: org.jfree.chart.plot.XYPlot getPlot()>();

        if xyplot == null goto label4;

        dataset = virtualinvoke xyplot.<org.jfree.chart.plot.XYPlot: org.jfree.data.xy.XYDataset getDataset(int)>(datasetIndex);

        if dataset == null goto label4;

        lg = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemLabelGenerator()>();

        label = interfaceinvoke lg.<org.jfree.chart.labels.XYSeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int)>(dataset, series);

        toolTipText = null;

        $stack18 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemToolTipGenerator()>();

        if $stack18 == null goto label1;

        $stack51 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemToolTipGenerator()>();

        toolTipText = interfaceinvoke $stack51.<org.jfree.chart.labels.XYSeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int)>(dataset, series);

     label1:
        urlText = null;

        $stack19 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemURLGenerator()>();

        if $stack19 == null goto label2;

        $stack35 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemURLGenerator()>();

        urlText = interfaceinvoke $stack35.<org.jfree.chart.labels.XYSeriesLabelGenerator: java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int)>(dataset, series);

     label2:
        paint = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Paint lookupSeriesPaint(int)>(series);

        $stack21 = new org.jfree.chart.LegendItem;

        $stack22 = this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea>;

        specialinvoke $stack21.<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>(label, label, toolTipText, urlText, $stack22, paint);

        result = $stack21;

        $stack23 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Font lookupLegendTextFont(int)>(series);

        virtualinvoke $stack21.<org.jfree.chart.LegendItem: void setLabelFont(java.awt.Font)>($stack23);

        labelPaint = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Paint lookupLegendTextPaint(int)>(series);

        if labelPaint == null goto label3;

        virtualinvoke $stack21.<org.jfree.chart.LegendItem: void setLabelPaint(java.awt.Paint)>(labelPaint);

     label3:
        virtualinvoke $stack21.<org.jfree.chart.LegendItem: void setDataset(org.jfree.data.general.Dataset)>(dataset);

        virtualinvoke $stack21.<org.jfree.chart.LegendItem: void setDatasetIndex(int)>(datasetIndex);

        $stack25 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: java.lang.Comparable getSeriesKey(int)>(series);

        virtualinvoke $stack21.<org.jfree.chart.LegendItem: void setSeriesKey(java.lang.Comparable)>($stack25);

        virtualinvoke $stack21.<org.jfree.chart.LegendItem: void setSeriesIndex(int)>(series);

     label4:
        return result;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;
        int series, item, $stack59, $stack60, $stack62, $stack63, itemCount, $stack71, $stack72, $stack73, $stack75, $stack76, $stack77, datasetIndex, pass;
        boolean $stack51, $stack54, $stack65, $stack79, $stack105, $stack111;
        org.jfree.data.xy.XYDataset dataset;
        double x1, transX1, transY1, x0, transX0, transY0, x2, transX2, transY2, transZero, $stack90, $stack91, $stack92, $stack93, $stack94, $stack95, $stack96, $stack97, $stack98, $stack99, $stack100, $stack101, $stack141, $stack142, $stack143, $stack144, $stack145, $stack146, $stack147, $stack148, $stack149, $stack150, $stack151, $stack152, y1, y0, y2;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack55, $stack57, $stack66, $stack68, $stack80, $stack82, $stack85;
        java.awt.geom.GeneralPath $stack87;
        org.jfree.chart.plot.PlotOrientation $stack88, $stack89, orientation;
        java.awt.Paint paint, $stack129;
        java.awt.Stroke stroke, $stack128;
        java.awt.Graphics2D g2;
        org.jfree.chart.plot.CrosshairState crosshairState;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.plot.PlotRenderingInfo $stack107, info;
        org.jfree.chart.entity.EntityCollection entities;
        java.awt.geom.Area $stack109, $stack110;
        org.jfree.chart.labels.XYToolTipGenerator generator;
        org.jfree.chart.urls.XYURLGenerator $stack113, $stack115;
        org.jfree.chart.entity.XYItemEntity $stack114;
        java.lang.String tip, url;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        $stack51 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean getItemVisible(int,int)>(series, item);

        if $stack51 != 0 goto label01;

        return;

     label01:
        x1 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, item);

        y1 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, item);

        $stack54 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y1);

        if $stack54 == 0 goto label02;

        y1 = 0.0;

     label02:
        $stack55 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        transX1 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x1, dataArea, $stack55);

        $stack57 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        transY1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y1, dataArea, $stack57);

        $stack59 = item - 1;

        $stack60 = staticinvoke <java.lang.Math: int max(int,int)>($stack59, 0);

        x0 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, $stack60);

        $stack62 = item - 1;

        $stack63 = staticinvoke <java.lang.Math: int max(int,int)>($stack62, 0);

        y0 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, $stack63);

        $stack65 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y0);

        if $stack65 == 0 goto label03;

        y0 = 0.0;

     label03:
        $stack66 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        transX0 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x0, dataArea, $stack66);

        $stack68 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        transY0 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y0, dataArea, $stack68);

        itemCount = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(series);

        $stack72 = item + 1;

        $stack71 = itemCount - 1;

        $stack73 = staticinvoke <java.lang.Math: int min(int,int)>($stack72, $stack71);

        x2 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, $stack73);

        $stack76 = item + 1;

        $stack75 = itemCount - 1;

        $stack77 = staticinvoke <java.lang.Math: int min(int,int)>($stack76, $stack75);

        y2 = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, $stack77);

        $stack79 = staticinvoke <java.lang.Double: boolean isNaN(double)>(y2);

        if $stack79 == 0 goto label04;

        y2 = 0.0;

     label04:
        $stack80 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        transX2 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x2, dataArea, $stack80);

        $stack82 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        transY2 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y2, dataArea, $stack82);

        $stack85 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        transZero = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(0.0, dataArea, $stack85);

        $stack87 = new java.awt.geom.GeneralPath;

        specialinvoke $stack87.<java.awt.geom.GeneralPath: void <init>()>();

        $stack88 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack89 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        if $stack88 != $stack89 goto label05;

        $stack141 = transX0 + transX1;

        $stack142 = $stack141 / 2.0;

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void moveTo(java.awt.geom.GeneralPath,double,double)>($stack87, transZero, $stack142);

        $stack143 = transY0 + transY1;

        $stack146 = $stack143 / 2.0;

        $stack144 = transX0 + transX1;

        $stack145 = $stack144 / 2.0;

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void lineTo(java.awt.geom.GeneralPath,double,double)>($stack87, $stack146, $stack145);

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void lineTo(java.awt.geom.GeneralPath,double,double)>($stack87, transY1, transX1);

        $stack147 = transY1 + transY2;

        $stack150 = $stack147 / 2.0;

        $stack148 = transX1 + transX2;

        $stack149 = $stack148 / 2.0;

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void lineTo(java.awt.geom.GeneralPath,double,double)>($stack87, $stack150, $stack149);

        $stack151 = transX1 + transX2;

        $stack152 = $stack151 / 2.0;

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void lineTo(java.awt.geom.GeneralPath,double,double)>($stack87, transZero, $stack152);

        goto label06;

     label05:
        $stack90 = transX0 + transX1;

        $stack91 = $stack90 / 2.0;

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void moveTo(java.awt.geom.GeneralPath,double,double)>($stack87, $stack91, transZero);

        $stack92 = transX0 + transX1;

        $stack95 = $stack92 / 2.0;

        $stack93 = transY0 + transY1;

        $stack94 = $stack93 / 2.0;

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void lineTo(java.awt.geom.GeneralPath,double,double)>($stack87, $stack95, $stack94);

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void lineTo(java.awt.geom.GeneralPath,double,double)>($stack87, transX1, transY1);

        $stack96 = transX1 + transX2;

        $stack99 = $stack96 / 2.0;

        $stack97 = transY1 + transY2;

        $stack98 = $stack97 / 2.0;

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void lineTo(java.awt.geom.GeneralPath,double,double)>($stack87, $stack99, $stack98);

        $stack100 = transX1 + transX2;

        $stack101 = $stack100 / 2.0;

        staticinvoke <org.jfree.chart.renderer.xy.XYAreaRenderer2: void lineTo(java.awt.geom.GeneralPath,double,double)>($stack87, $stack101, transZero);

     label06:
        virtualinvoke $stack87.<java.awt.geom.GeneralPath: void closePath()>();

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        paint = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Paint getItemPaint(int,int)>(series, item);

        stroke = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Stroke getItemStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(paint);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(stroke);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack87);

        $stack105 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean isOutline()>();

        if $stack105 == 0 goto label07;

        $stack128 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Stroke lookupSeriesOutlineStroke(int)>(series);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack128);

        $stack129 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Paint lookupSeriesOutlinePaint(int)>(series);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack129);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack87);

     label07:
        datasetIndex = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: int indexOf(org.jfree.data.xy.XYDataset)>(dataset);

        virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: void updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,int,double,double,org.jfree.chart.plot.PlotOrientation)>(crosshairState, x1, y1, datasetIndex, transX1, transY1, orientation);

        $stack107 = virtualinvoke state.<org.jfree.chart.renderer.xy.XYItemRendererState: org.jfree.chart.plot.PlotRenderingInfo getInfo()>();

        if $stack107 == null goto label10;

        entities = virtualinvoke state.<org.jfree.chart.renderer.xy.XYItemRendererState: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label10;

        $stack109 = new java.awt.geom.Area;

        specialinvoke $stack109.<java.awt.geom.Area: void <init>(java.awt.Shape)>($stack87);

        $stack110 = new java.awt.geom.Area;

        specialinvoke $stack110.<java.awt.geom.Area: void <init>(java.awt.Shape)>(dataArea);

        virtualinvoke $stack109.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>($stack110);

        $stack111 = virtualinvoke $stack109.<java.awt.geom.Area: boolean isEmpty()>();

        if $stack111 != 0 goto label10;

        tip = null;

        generator = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: org.jfree.chart.labels.XYToolTipGenerator getToolTipGenerator(int,int)>(series, item);

        if generator == null goto label08;

        tip = interfaceinvoke generator.<org.jfree.chart.labels.XYToolTipGenerator: java.lang.String generateToolTip(org.jfree.data.xy.XYDataset,int,int)>(dataset, series, item);

     label08:
        url = null;

        $stack113 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: org.jfree.chart.urls.XYURLGenerator getURLGenerator()>();

        if $stack113 == null goto label09;

        $stack115 = virtualinvoke this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: org.jfree.chart.urls.XYURLGenerator getURLGenerator()>();

        url = interfaceinvoke $stack115.<org.jfree.chart.urls.XYURLGenerator: java.lang.String generateURL(org.jfree.data.xy.XYDataset,int,int)>(dataset, series, item);

     label09:
        $stack114 = new org.jfree.chart.entity.XYItemEntity;

        specialinvoke $stack114.<org.jfree.chart.entity.XYItemEntity: void <init>(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)>($stack109, dataset, series, item, tip, url);

        interfaceinvoke entities.<org.jfree.chart.entity.EntityCollection: void add(org.jfree.chart.entity.ChartEntity)>($stack114);

     label10:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this, that;
        boolean $stack3, $stack4, $stack5, $stack8, $stack9;
        java.awt.Shape $stack6, $stack7;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.XYAreaRenderer2;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.xy.XYAreaRenderer2) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean showOutline>;

        $stack4 = that.<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean showOutline>;

        if $stack5 == $stack4 goto label3;

        return 0;

     label3:
        $stack7 = this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea>;

        $stack6 = that.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea>;

        $stack8 = staticinvoke <org.jfree.chart.util.ShapeUtils: boolean equal(java.awt.Shape,java.awt.Shape)>($stack7, $stack6);

        if $stack8 != 0 goto label4;

        return 0;

     label4:
        $stack9 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack9;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this, clone;
        java.lang.Object $stack2;
        java.awt.Shape $stack3, $stack4;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        $stack2 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>();

        clone = (org.jfree.chart.renderer.xy.XYAreaRenderer2) $stack2;

        $stack3 = this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea>;

        $stack4 = staticinvoke <org.jfree.chart.util.ShapeUtils: java.awt.Shape clone(java.awt.Shape)>($stack3);

        clone.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea> = $stack4;

        return clone;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;
        java.awt.Shape $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Shape readShape(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea> = $stack2;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.renderer.xy.XYAreaRenderer2 this;
        java.awt.Shape $stack2;

        this := @this: org.jfree.chart.renderer.xy.XYAreaRenderer2;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.awt.Shape legendArea>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>($stack2, stream);

        return;
    }

    public static void <clinit>()
    {
        <org.jfree.chart.renderer.xy.XYAreaRenderer2: long serialVersionUID> = -7378069681579984133L;

        return;
    }
}
