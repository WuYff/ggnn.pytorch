public class org.jfree.chart.util.PaintUtils extends java.lang.Object
{

    private void <init>()
    {
        org.jfree.chart.util.PaintUtils this;

        this := @this: org.jfree.chart.util.PaintUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean equal(java.awt.Paint, java.awt.Paint)
    {
        java.awt.Paint p1, p2;
        boolean $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack20, $stack23, $stack26, $stack33, $stack34, $stack38, $stack41, $stack45, $stack48, $stack55, $stack56, $stack60, $stack63, $stack67, $stack70, $stack71, $stack72, $stack75, $stack64, $stack42, $stack17;
        java.awt.geom.Point2D $stack11, $stack12, $stack18, $stack19, $stack36, $stack37, $stack39, $stack40, $stack65, $stack66, $stack68, $stack69;
        float $stack14, $stack15;
        byte $stack16;
        float[] $stack21, $stack22, $stack43, $stack44;
        java.awt.Color[] $stack24, $stack25, $stack46, $stack47;
        java.awt.MultipleGradientPaint$CycleMethod $stack27, $stack28, $stack49, $stack50;
        java.awt.MultipleGradientPaint$ColorSpaceType $stack29, $stack30, $stack51, $stack52;
        java.awt.geom.AffineTransform $stack31, $stack32, $stack53, $stack54;
        java.awt.Color $stack58, $stack59, $stack61, $stack62;
        int $stack73, $stack74;
        java.awt.GradientPaint gp1, gp2;
        java.awt.LinearGradientPaint gp1#9, gp2#10;
        java.awt.RadialGradientPaint gp1#17, gp2#18;

        p1 := @parameter0: java.awt.Paint;

        p2 := @parameter1: java.awt.Paint;

        if p1 != p2 goto label01;

        return 1;

     label01:
        if p1 != null goto label04;

        if p2 != null goto label02;

        $stack75 = 1;

        goto label03;

     label02:
        $stack75 = 0;

     label03:
        return $stack75;

     label04:
        if p2 != null goto label05;

        return 0;

     label05:
        $stack4 = p1 instanceof java.awt.GradientPaint;

        if $stack4 == 0 goto label08;

        $stack56 = p2 instanceof java.awt.GradientPaint;

        if $stack56 == 0 goto label08;

        gp1 = (java.awt.GradientPaint) p1;

        gp2 = (java.awt.GradientPaint) p2;

        $stack58 = virtualinvoke gp1.<java.awt.GradientPaint: java.awt.Color getColor1()>();

        $stack59 = virtualinvoke gp2.<java.awt.GradientPaint: java.awt.Color getColor1()>();

        $stack60 = virtualinvoke $stack58.<java.awt.Color: boolean equals(java.lang.Object)>($stack59);

        if $stack60 == 0 goto label06;

        $stack61 = virtualinvoke gp1.<java.awt.GradientPaint: java.awt.Color getColor2()>();

        $stack62 = virtualinvoke gp2.<java.awt.GradientPaint: java.awt.Color getColor2()>();

        $stack63 = virtualinvoke $stack61.<java.awt.Color: boolean equals(java.lang.Object)>($stack62);

        if $stack63 == 0 goto label06;

        $stack65 = virtualinvoke gp1.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint1()>();

        $stack66 = virtualinvoke gp2.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint1()>();

        $stack67 = virtualinvoke $stack65.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>($stack66);

        if $stack67 == 0 goto label06;

        $stack68 = virtualinvoke gp1.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint2()>();

        $stack69 = virtualinvoke gp2.<java.awt.GradientPaint: java.awt.geom.Point2D getPoint2()>();

        $stack70 = virtualinvoke $stack68.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>($stack69);

        if $stack70 == 0 goto label06;

        $stack71 = virtualinvoke gp1.<java.awt.GradientPaint: boolean isCyclic()>();

        $stack72 = virtualinvoke gp2.<java.awt.GradientPaint: boolean isCyclic()>();

        if $stack71 != $stack72 goto label06;

        $stack73 = virtualinvoke gp1.<java.awt.GradientPaint: int getTransparency()>();

        $stack74 = virtualinvoke gp1.<java.awt.GradientPaint: int getTransparency()>();

        if $stack73 != $stack74 goto label06;

        $stack64 = 1;

        goto label07;

     label06:
        $stack64 = 0;

     label07:
        return $stack64;

     label08:
        $stack5 = p1 instanceof java.awt.LinearGradientPaint;

        if $stack5 == 0 goto label11;

        $stack34 = p2 instanceof java.awt.LinearGradientPaint;

        if $stack34 == 0 goto label11;

        gp1#9 = (java.awt.LinearGradientPaint) p1;

        gp2#10 = (java.awt.LinearGradientPaint) p2;

        $stack36 = virtualinvoke gp1#9.<java.awt.LinearGradientPaint: java.awt.geom.Point2D getStartPoint()>();

        $stack37 = virtualinvoke gp2#10.<java.awt.LinearGradientPaint: java.awt.geom.Point2D getStartPoint()>();

        $stack38 = virtualinvoke $stack36.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>($stack37);

        if $stack38 == 0 goto label09;

        $stack39 = virtualinvoke gp1#9.<java.awt.LinearGradientPaint: java.awt.geom.Point2D getEndPoint()>();

        $stack40 = virtualinvoke gp2#10.<java.awt.LinearGradientPaint: java.awt.geom.Point2D getEndPoint()>();

        $stack41 = virtualinvoke $stack39.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>($stack40);

        if $stack41 == 0 goto label09;

        $stack43 = virtualinvoke gp1#9.<java.awt.LinearGradientPaint: float[] getFractions()>();

        $stack44 = virtualinvoke gp2#10.<java.awt.LinearGradientPaint: float[] getFractions()>();

        $stack45 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack43, $stack44);

        if $stack45 == 0 goto label09;

        $stack46 = virtualinvoke gp1#9.<java.awt.LinearGradientPaint: java.awt.Color[] getColors()>();

        $stack47 = virtualinvoke gp2#10.<java.awt.LinearGradientPaint: java.awt.Color[] getColors()>();

        $stack48 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack46, $stack47);

        if $stack48 == 0 goto label09;

        $stack49 = virtualinvoke gp1#9.<java.awt.LinearGradientPaint: java.awt.MultipleGradientPaint$CycleMethod getCycleMethod()>();

        $stack50 = virtualinvoke gp2#10.<java.awt.LinearGradientPaint: java.awt.MultipleGradientPaint$CycleMethod getCycleMethod()>();

        if $stack49 != $stack50 goto label09;

        $stack51 = virtualinvoke gp1#9.<java.awt.LinearGradientPaint: java.awt.MultipleGradientPaint$ColorSpaceType getColorSpace()>();

        $stack52 = virtualinvoke gp2#10.<java.awt.LinearGradientPaint: java.awt.MultipleGradientPaint$ColorSpaceType getColorSpace()>();

        if $stack51 != $stack52 goto label09;

        $stack53 = virtualinvoke gp1#9.<java.awt.LinearGradientPaint: java.awt.geom.AffineTransform getTransform()>();

        $stack54 = virtualinvoke gp2#10.<java.awt.LinearGradientPaint: java.awt.geom.AffineTransform getTransform()>();

        $stack55 = virtualinvoke $stack53.<java.awt.geom.AffineTransform: boolean equals(java.lang.Object)>($stack54);

        if $stack55 == 0 goto label09;

        $stack42 = 1;

        goto label10;

     label09:
        $stack42 = 0;

     label10:
        return $stack42;

     label11:
        $stack6 = p1 instanceof java.awt.RadialGradientPaint;

        if $stack6 == 0 goto label14;

        $stack8 = p2 instanceof java.awt.RadialGradientPaint;

        if $stack8 == 0 goto label14;

        gp1#17 = (java.awt.RadialGradientPaint) p1;

        gp2#18 = (java.awt.RadialGradientPaint) p2;

        $stack11 = virtualinvoke gp1#17.<java.awt.RadialGradientPaint: java.awt.geom.Point2D getCenterPoint()>();

        $stack12 = virtualinvoke gp2#18.<java.awt.RadialGradientPaint: java.awt.geom.Point2D getCenterPoint()>();

        $stack13 = virtualinvoke $stack11.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>($stack12);

        if $stack13 == 0 goto label12;

        $stack14 = virtualinvoke gp1#17.<java.awt.RadialGradientPaint: float getRadius()>();

        $stack15 = virtualinvoke gp2#18.<java.awt.RadialGradientPaint: float getRadius()>();

        $stack16 = $stack14 cmpl $stack15;

        if $stack16 != 0 goto label12;

        $stack18 = virtualinvoke gp1#17.<java.awt.RadialGradientPaint: java.awt.geom.Point2D getFocusPoint()>();

        $stack19 = virtualinvoke gp2#18.<java.awt.RadialGradientPaint: java.awt.geom.Point2D getFocusPoint()>();

        $stack20 = virtualinvoke $stack18.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>($stack19);

        if $stack20 == 0 goto label12;

        $stack21 = virtualinvoke gp1#17.<java.awt.RadialGradientPaint: float[] getFractions()>();

        $stack22 = virtualinvoke gp2#18.<java.awt.RadialGradientPaint: float[] getFractions()>();

        $stack23 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack21, $stack22);

        if $stack23 == 0 goto label12;

        $stack24 = virtualinvoke gp1#17.<java.awt.RadialGradientPaint: java.awt.Color[] getColors()>();

        $stack25 = virtualinvoke gp2#18.<java.awt.RadialGradientPaint: java.awt.Color[] getColors()>();

        $stack26 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack24, $stack25);

        if $stack26 == 0 goto label12;

        $stack27 = virtualinvoke gp1#17.<java.awt.RadialGradientPaint: java.awt.MultipleGradientPaint$CycleMethod getCycleMethod()>();

        $stack28 = virtualinvoke gp2#18.<java.awt.RadialGradientPaint: java.awt.MultipleGradientPaint$CycleMethod getCycleMethod()>();

        if $stack27 != $stack28 goto label12;

        $stack29 = virtualinvoke gp1#17.<java.awt.RadialGradientPaint: java.awt.MultipleGradientPaint$ColorSpaceType getColorSpace()>();

        $stack30 = virtualinvoke gp2#18.<java.awt.RadialGradientPaint: java.awt.MultipleGradientPaint$ColorSpaceType getColorSpace()>();

        if $stack29 != $stack30 goto label12;

        $stack31 = virtualinvoke gp1#17.<java.awt.RadialGradientPaint: java.awt.geom.AffineTransform getTransform()>();

        $stack32 = virtualinvoke gp2#18.<java.awt.RadialGradientPaint: java.awt.geom.AffineTransform getTransform()>();

        $stack33 = virtualinvoke $stack31.<java.awt.geom.AffineTransform: boolean equals(java.lang.Object)>($stack32);

        if $stack33 == 0 goto label12;

        $stack17 = 1;

        goto label13;

     label12:
        $stack17 = 0;

     label13:
        return $stack17;

     label14:
        $stack7 = virtualinvoke p1.<java.lang.Object: boolean equals(java.lang.Object)>(p2);

        return $stack7;
    }

    public static java.lang.String colorToString(java.awt.Color)
    {
        java.lang.Class $stack6;
        int $stack8, $stack9, $stack10, $stack15, $stack21, $stack25, $stack27, i, f#8, name#9;
        java.awt.Color c;
        java.lang.StringBuffer $stack12;
        java.lang.String $stack17, name, fields#6;
        boolean $stack22, $stack26, $stack28, $stack31, $stack32;
        java.lang.Object oColor;
        java.lang.Exception $stack33;
        java.lang.reflect.Field[] fields;
        java.lang.reflect.Field f;

        c := @parameter0: java.awt.Color;

     label1:
        $stack6 = class "Ljava/awt/Color;";

        fields = virtualinvoke $stack6.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i = 0;

     label2:
        $stack8 = lengthof fields;

        if i >= $stack8 goto label5;

        f = fields[i];

        $stack21 = virtualinvoke f.<java.lang.reflect.Field: int getModifiers()>();

        $stack22 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack21);

        if $stack22 == 0 goto label4;

        $stack25 = virtualinvoke f.<java.lang.reflect.Field: int getModifiers()>();

        $stack26 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack25);

        if $stack26 == 0 goto label4;

        $stack27 = virtualinvoke f.<java.lang.reflect.Field: int getModifiers()>();

        $stack28 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($stack27);

        if $stack28 == 0 goto label4;

        name = virtualinvoke f.<java.lang.reflect.Field: java.lang.String getName()>();

        oColor = virtualinvoke f.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $stack31 = oColor instanceof java.awt.Color;

        if $stack31 == 0 goto label4;

        $stack32 = virtualinvoke c.<java.awt.Color: boolean equals(java.lang.Object)>(oColor);

        if $stack32 == 0 goto label4;

     label3:
        return name;

     label4:
        i = i + 1;

        goto label2;

     label5:
        goto label7;

     label6:
        $stack33 := @caughtexception;

     label7:
        $stack9 = virtualinvoke c.<java.awt.Color: int getRGB()>();

        $stack10 = $stack9 & 16777215;

        fields#6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($stack10);

        $stack12 = new java.lang.StringBuffer;

        specialinvoke $stack12.<java.lang.StringBuffer: void <init>(int)>(7);

        virtualinvoke $stack12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#");

        $stack15 = virtualinvoke fields#6.<java.lang.String: int length()>();

        f#8 = 6 - $stack15;

        name#9 = 0;

     label8:
        if name#9 >= f#8 goto label9;

        virtualinvoke $stack12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

        name#9 = name#9 + 1;

        goto label8;

     label9:
        virtualinvoke $stack12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(fields#6);

        $stack17 = virtualinvoke $stack12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $stack17;

        catch java.lang.Exception from label1 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static java.awt.Color stringToColor(java.lang.String)
    {
        java.lang.String value;
        java.awt.Color $stack3, $stack4, $stack6, $stack11;
        java.lang.Exception $stack5;
        java.lang.NumberFormatException $stack7;
        java.lang.Class $stack8;
        java.lang.Object $stack10;
        java.lang.reflect.Field f;

        value := @parameter0: java.lang.String;

        if value != null goto label1;

        $stack4 = <java.awt.Color: java.awt.Color BLACK>;

        return $stack4;

     label1:
        $stack3 = staticinvoke <java.awt.Color: java.awt.Color decode(java.lang.String)>(value);

     label2:
        return $stack3;

     label3:
        $stack7 := @caughtexception;

     label4:
        $stack8 = class "Ljava/awt/Color;";

        f = virtualinvoke $stack8.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(value);

        $stack10 = virtualinvoke f.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $stack11 = (java.awt.Color) $stack10;

     label5:
        return $stack11;

     label6:
        $stack5 := @caughtexception;

        $stack6 = <java.awt.Color: java.awt.Color BLACK>;

        return $stack6;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }
}
