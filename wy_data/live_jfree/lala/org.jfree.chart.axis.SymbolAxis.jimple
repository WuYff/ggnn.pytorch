public class org.jfree.chart.axis.SymbolAxis extends org.jfree.chart.axis.NumberAxis implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.awt.Paint DEFAULT_GRID_BAND_PAINT;
    public static final java.awt.Paint DEFAULT_GRID_BAND_ALTERNATE_PAINT;
    private java.util.List symbols;
    private boolean gridBandsVisible;
    private transient java.awt.Paint gridBandPaint;
    private transient java.awt.Paint gridBandAlternatePaint;

    public void <init>(java.lang.String, java.lang.String[])
    {
        org.jfree.chart.axis.SymbolAxis this;
        java.lang.String label;
        java.lang.String[] sv;
        java.util.List $stack3;
        java.awt.Paint $stack4, $stack5;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        label := @parameter0: java.lang.String;

        sv := @parameter1: java.lang.String[];

        specialinvoke this.<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>(label);

        $stack3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(sv);

        this.<org.jfree.chart.axis.SymbolAxis: java.util.List symbols> = $stack3;

        this.<org.jfree.chart.axis.SymbolAxis: boolean gridBandsVisible> = 1;

        $stack4 = <org.jfree.chart.axis.SymbolAxis: java.awt.Paint DEFAULT_GRID_BAND_PAINT>;

        this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandPaint> = $stack4;

        $stack5 = <org.jfree.chart.axis.SymbolAxis: java.awt.Paint DEFAULT_GRID_BAND_ALTERNATE_PAINT>;

        this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandAlternatePaint> = $stack5;

        virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: void setAutoTickUnitSelection(boolean,boolean)>(0, 0);

        virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: void setAutoRangeStickyZero(boolean)>(0);

        return;
    }

    public java.lang.String[] getSymbols()
    {
        org.jfree.chart.axis.SymbolAxis this;
        java.util.List $stack2, $stack4;
        int $stack3;
        java.lang.Object[] $stack5;
        java.lang.String[] $stack6, result;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        $stack2 = this.<org.jfree.chart.axis.SymbolAxis: java.util.List symbols>;

        $stack3 = interfaceinvoke $stack2.<java.util.List: int size()>();

        result = newarray (java.lang.String)[$stack3];

        $stack4 = this.<org.jfree.chart.axis.SymbolAxis: java.util.List symbols>;

        $stack5 = interfaceinvoke $stack4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(result);

        $stack6 = (java.lang.String[]) $stack5;

        result = (java.lang.String[]) $stack6;

        return result;
    }

    public boolean isGridBandsVisible()
    {
        org.jfree.chart.axis.SymbolAxis this;
        boolean $stack1;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        $stack1 = this.<org.jfree.chart.axis.SymbolAxis: boolean gridBandsVisible>;

        return $stack1;
    }

    public void setGridBandsVisible(boolean)
    {
        org.jfree.chart.axis.SymbolAxis this;
        boolean flag;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        flag := @parameter0: boolean;

        this.<org.jfree.chart.axis.SymbolAxis: boolean gridBandsVisible> = flag;

        virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getGridBandPaint()
    {
        org.jfree.chart.axis.SymbolAxis this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        $stack1 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandPaint>;

        return $stack1;
    }

    public void setGridBandPaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.axis.SymbolAxis this;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandPaint> = paint;

        virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: void fireChangeEvent()>();

        return;
    }

    public java.awt.Paint getGridBandAlternatePaint()
    {
        org.jfree.chart.axis.SymbolAxis this;
        java.awt.Paint $stack1;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        $stack1 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandAlternatePaint>;

        return $stack1;
    }

    public void setGridBandAlternatePaint(java.awt.Paint)
    {
        java.awt.Paint paint;
        org.jfree.chart.axis.SymbolAxis this;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        paint := @parameter0: java.awt.Paint;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(paint, "paint");

        this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandAlternatePaint> = paint;

        virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: void fireChangeEvent()>();

        return;
    }

    protected void selectAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        java.lang.UnsupportedOperationException $stack4;
        org.jfree.chart.axis.SymbolAxis this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.ui.RectangleEdge edge;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        edge := @parameter2: org.jfree.chart.ui.RectangleEdge;

        $stack4 = new java.lang.UnsupportedOperationException;

        specialinvoke $stack4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $stack4;
    }

    public org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)
    {
        org.jfree.chart.axis.AxisState $stack9, info;
        double cursor;
        org.jfree.chart.axis.SymbolAxis this;
        boolean $stack10, $stack11;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D plotArea, dataArea;
        org.jfree.chart.ui.RectangleEdge edge;
        java.util.List $stack12;
        org.jfree.chart.plot.PlotRenderingInfo plotState;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        cursor := @parameter1: double;

        plotArea := @parameter2: java.awt.geom.Rectangle2D;

        dataArea := @parameter3: java.awt.geom.Rectangle2D;

        edge := @parameter4: org.jfree.chart.ui.RectangleEdge;

        plotState := @parameter5: org.jfree.chart.plot.PlotRenderingInfo;

        $stack9 = new org.jfree.chart.axis.AxisState;

        specialinvoke $stack9.<org.jfree.chart.axis.AxisState: void <init>(double)>(cursor);

        info = $stack9;

        $stack10 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: boolean isVisible()>();

        if $stack10 == 0 goto label1;

        info = specialinvoke this.<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>(g2, cursor, plotArea, dataArea, edge, plotState);

     label1:
        $stack11 = this.<org.jfree.chart.axis.SymbolAxis: boolean gridBandsVisible>;

        if $stack11 == 0 goto label2;

        $stack12 = virtualinvoke info.<org.jfree.chart.axis.AxisState: java.util.List getTicks()>();

        virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: void drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge,java.util.List)>(g2, plotArea, dataArea, edge, $stack12);

     label2:
        return info;
    }

    protected void drawGridBands(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge, java.util.List)
    {
        java.awt.Graphics2D g2;
        java.awt.Shape savedClip;
        java.awt.geom.Rectangle2D dataArea, plotArea;
        org.jfree.chart.ui.RectangleEdge edge;
        boolean $stack8, $stack9;
        org.jfree.chart.axis.SymbolAxis this;
        java.util.List ticks;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        ticks := @parameter4: java.util.List;

        savedClip = virtualinvoke g2.<java.awt.Graphics2D: java.awt.Shape getClip()>();

        virtualinvoke g2.<java.awt.Graphics2D: void clip(java.awt.Shape)>(dataArea);

        $stack8 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack8 == 0 goto label1;

        virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: void drawGridBandsHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)>(g2, plotArea, dataArea, 1, ticks);

        goto label2;

     label1:
        $stack9 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack9 == 0 goto label2;

        virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: void drawGridBandsVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,boolean,java.util.List)>(g2, plotArea, dataArea, 1, ticks);

     label2:
        virtualinvoke g2.<java.awt.Graphics2D: void setClip(java.awt.Shape)>(savedClip);

        return;
    }

    protected void drawGridBandsHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, boolean, java.util.List)
    {
        boolean firstGridBandIsDark, $stack57, currentGridBandIsDark, $stack23, $stack43;
        java.awt.geom.Rectangle2D dataArea, plotArea;
        double yy, $stack25, $stack27, xx1, $stack29, $stack31, xx2, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41, outlineStrokeWidth;
        org.jfree.chart.axis.SymbolAxis this;
        org.jfree.chart.plot.Plot $stack20;
        java.awt.Stroke outlineStroke;
        java.util.List ticks;
        java.util.Iterator iterator;
        java.lang.Object $stack24;
        org.jfree.chart.axis.ValueTick tick;
        org.jfree.chart.ui.RectangleEdge $stack26, $stack30;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack33, $stack44;
        java.awt.geom.Rectangle2D$Double $stack34;
        java.awt.BasicStroke $stack59;
        float $stack60;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        firstGridBandIsDark := @parameter3: boolean;

        ticks := @parameter4: java.util.List;

        currentGridBandIsDark = firstGridBandIsDark;

        yy = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getY()>();

        outlineStrokeWidth = 1.0;

        $stack20 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: org.jfree.chart.plot.Plot getPlot()>();

        outlineStroke = virtualinvoke $stack20.<org.jfree.chart.plot.Plot: java.awt.Stroke getOutlineStroke()>();

        if outlineStroke == null goto label1;

        $stack57 = outlineStroke instanceof java.awt.BasicStroke;

        if $stack57 == 0 goto label1;

        $stack59 = (java.awt.BasicStroke) outlineStroke;

        $stack60 = virtualinvoke $stack59.<java.awt.BasicStroke: float getLineWidth()>();

        outlineStrokeWidth = (double) $stack60;

     label1:
        iterator = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack23 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label7;

        $stack24 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack24;

        $stack25 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack27 = $stack25 - 0.5;

        $stack26 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        xx1 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack27, dataArea, $stack26);

        $stack29 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack31 = $stack29 + 0.5;

        $stack30 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge BOTTOM>;

        xx2 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack31, dataArea, $stack30);

        if currentGridBandIsDark == 0 goto label3;

        $stack44 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack44);

        goto label4;

     label3:
        $stack33 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandAlternatePaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack33);

     label4:
        $stack34 = new java.awt.geom.Rectangle2D$Double;

        $stack35 = staticinvoke <java.lang.Math: double min(double,double)>(xx1, xx2);

        $stack37 = yy + outlineStrokeWidth;

        $stack36 = xx2 - xx1;

        $stack38 = staticinvoke <java.lang.Math: double abs(double)>($stack36);

        $stack39 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $stack40 = $stack39 - yy;

        $stack41 = $stack40 - outlineStrokeWidth;

        specialinvoke $stack34.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack35, $stack37, $stack38, $stack41);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack34);

        if currentGridBandIsDark != 0 goto label5;

        $stack43 = 1;

        goto label6;

     label5:
        $stack43 = 0;

     label6:
        currentGridBandIsDark = $stack43;

        goto label2;

     label7:
        return;
    }

    protected void drawGridBandsVertical(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, boolean, java.util.List)
    {
        boolean firstGridBandIsDark, $stack57, currentGridBandIsDark, $stack23, $stack43;
        java.awt.geom.Rectangle2D dataArea, plotArea;
        double xx, $stack25, $stack27, yy1, $stack29, $stack31, yy2, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41, outlineStrokeWidth;
        org.jfree.chart.axis.SymbolAxis this;
        org.jfree.chart.plot.Plot $stack20;
        java.awt.Stroke outlineStroke;
        java.util.List ticks;
        java.util.Iterator iterator;
        java.lang.Object $stack24;
        org.jfree.chart.axis.ValueTick tick;
        org.jfree.chart.ui.RectangleEdge $stack26, $stack30;
        java.awt.Graphics2D g2;
        java.awt.Paint $stack33, $stack44;
        java.awt.geom.Rectangle2D$Double $stack34;
        java.awt.BasicStroke $stack59;
        float $stack60;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        plotArea := @parameter1: java.awt.geom.Rectangle2D;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        firstGridBandIsDark := @parameter3: boolean;

        ticks := @parameter4: java.util.List;

        currentGridBandIsDark = firstGridBandIsDark;

        xx = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getX()>();

        outlineStrokeWidth = 1.0;

        $stack20 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: org.jfree.chart.plot.Plot getPlot()>();

        outlineStroke = virtualinvoke $stack20.<org.jfree.chart.plot.Plot: java.awt.Stroke getOutlineStroke()>();

        if outlineStroke == null goto label1;

        $stack57 = outlineStroke instanceof java.awt.BasicStroke;

        if $stack57 == 0 goto label1;

        $stack59 = (java.awt.BasicStroke) outlineStroke;

        $stack60 = virtualinvoke $stack59.<java.awt.BasicStroke: float getLineWidth()>();

        outlineStrokeWidth = (double) $stack60;

     label1:
        iterator = interfaceinvoke ticks.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack23 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        if $stack23 == 0 goto label7;

        $stack24 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        tick = (org.jfree.chart.axis.ValueTick) $stack24;

        $stack25 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack27 = $stack25 + 0.5;

        $stack26 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        yy1 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack27, dataArea, $stack26);

        $stack29 = virtualinvoke tick.<org.jfree.chart.axis.ValueTick: double getValue()>();

        $stack31 = $stack29 - 0.5;

        $stack30 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        yy2 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack31, dataArea, $stack30);

        if currentGridBandIsDark == 0 goto label3;

        $stack44 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandPaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack44);

        goto label4;

     label3:
        $stack33 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandAlternatePaint>;

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack33);

     label4:
        $stack34 = new java.awt.geom.Rectangle2D$Double;

        $stack35 = xx + outlineStrokeWidth;

        $stack36 = staticinvoke <java.lang.Math: double min(double,double)>(yy1, yy2);

        $stack37 = virtualinvoke dataArea.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $stack38 = $stack37 - xx;

        $stack40 = $stack38 - outlineStrokeWidth;

        $stack39 = yy2 - yy1;

        $stack41 = staticinvoke <java.lang.Math: double abs(double)>($stack39);

        specialinvoke $stack34.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($stack35, $stack36, $stack40, $stack41);

        virtualinvoke g2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($stack34);

        if currentGridBandIsDark != 0 goto label5;

        $stack43 = 1;

        goto label6;

     label5:
        $stack43 = 0;

     label6:
        currentGridBandIsDark = $stack43;

        goto label2;

     label7:
        return;
    }

    protected void autoAdjustRange()
    {
        org.jfree.chart.axis.SymbolAxis this;
        org.jfree.chart.plot.Plot plot;
        boolean $stack15, $stack21, $stack22, $stack38;
        java.util.List $stack16;
        int $stack17, $stack18;
        double range, minRange, $stack25, $stack32, $stack34, $stack39, $stack41, $stack47, $stack48, $stack49, $stack50, upper, lower;
        byte $stack20, $stack24, $stack26, $stack43, $stack44;
        org.jfree.data.Range $stack23;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        plot = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: org.jfree.chart.plot.Plot getPlot()>();

        if plot != null goto label01;

        return;

     label01:
        $stack15 = plot instanceof org.jfree.chart.plot.ValueAxisPlot;

        if $stack15 == 0 goto label13;

        $stack16 = this.<org.jfree.chart.axis.SymbolAxis: java.util.List symbols>;

        $stack17 = interfaceinvoke $stack16.<java.util.List: int size()>();

        $stack18 = $stack17 - 1;

        upper = (double) $stack18;

        lower = 0.0;

        range = upper - 0.0;

        minRange = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: double getAutoRangeMinimumSize()>();

        $stack20 = range cmpg minRange;

        if $stack20 >= 0 goto label02;

        $stack47 = upper + 0.0;

        $stack48 = $stack47 + minRange;

        upper = $stack48 / 2.0;

        $stack49 = upper + 0.0;

        $stack50 = $stack49 - minRange;

        lower = $stack50 / 2.0;

     label02:
        $stack21 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: boolean getAutoRangeIncludesZero()>();

        if $stack21 == 0 goto label07;

        $stack38 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: boolean getAutoRangeStickyZero()>();

        if $stack38 == 0 goto label06;

        $stack43 = upper cmpg 0.0;

        if $stack43 > 0 goto label03;

        upper = 0.0;

        goto label04;

     label03:
        upper = upper + 0.5;

     label04:
        $stack44 = lower cmpl 0.0;

        if $stack44 < 0 goto label05;

        lower = 0.0;

        goto label12;

     label05:
        lower = lower - 0.5;

        goto label12;

     label06:
        $stack39 = upper + 0.5;

        upper = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $stack39);

        $stack41 = lower - 0.5;

        lower = staticinvoke <java.lang.Math: double min(double,double)>(0.0, $stack41);

        goto label12;

     label07:
        $stack22 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: boolean getAutoRangeStickyZero()>();

        if $stack22 == 0 goto label11;

        $stack24 = upper cmpg 0.0;

        if $stack24 > 0 goto label08;

        $stack34 = upper + 0.5;

        upper = staticinvoke <java.lang.Math: double min(double,double)>(0.0, $stack34);

        goto label09;

     label08:
        $stack25 = 0.5 * range;

        upper = upper + $stack25;

     label09:
        $stack26 = lower cmpl 0.0;

        if $stack26 < 0 goto label10;

        $stack32 = lower - 0.5;

        lower = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $stack32);

        goto label12;

     label10:
        lower = lower - 0.5;

        goto label12;

     label11:
        upper = upper + 0.5;

        lower = lower - 0.5;

     label12:
        $stack23 = new org.jfree.data.Range;

        specialinvoke $stack23.<org.jfree.data.Range: void <init>(double,double)>(lower, upper);

        virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: void setRange(org.jfree.data.Range,boolean,boolean)>($stack23, 0, 0);

     label13:
        return;
    }

    public java.util.List refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        org.jfree.chart.ui.RectangleEdge edge;
        boolean $stack6, $stack7;
        org.jfree.chart.axis.SymbolAxis this;
        java.awt.Graphics2D g2;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.axis.AxisState state;
        java.util.List ticks;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.axis.AxisState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        edge := @parameter3: org.jfree.chart.ui.RectangleEdge;

        ticks = null;

        $stack6 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack6 == 0 goto label1;

        ticks = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(g2, dataArea, edge);

        goto label2;

     label1:
        $stack7 = staticinvoke <org.jfree.chart.ui.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.ui.RectangleEdge)>(edge);

        if $stack7 == 0 goto label2;

        ticks = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(g2, dataArea, edge);

     label2:
        return ticks;
    }

    protected java.util.List refreshTicksHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        java.util.ArrayList $stack31;
        org.jfree.chart.axis.SymbolAxis this;
        java.awt.Font tickLabelFont;
        java.awt.Graphics2D g2;
        org.jfree.chart.axis.NumberTickUnit $stack33;
        double size, lowestTickValue, $stack38, $stack39, currentTickValue, xx, tickLabelLength, $stack64, $stack65, $stack66, previousDrawnTickLabelPos, previousDrawnTickLabelLength, $stack46, avgTickLabelLength, angle;
        int count, i;
        java.awt.geom.Rectangle2D dataArea, bounds;
        org.jfree.chart.ui.RectangleEdge edge, $stack48, $stack61;
        java.text.NumberFormat formatter;
        java.awt.FontMetrics $stack43;
        boolean $stack45, $stack47, tickLabelsOverlapping;
        byte $stack67;
        java.lang.String tickLabel;
        org.jfree.chart.ui.TextAnchor avgTickLabelLength#11, rotationAnchor;
        org.jfree.chart.axis.NumberTick $stack49;
        java.lang.Double $stack50;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        edge := @parameter2: org.jfree.chart.ui.RectangleEdge;

        $stack31 = new java.util.ArrayList;

        specialinvoke $stack31.<java.util.ArrayList: void <init>()>();

        tickLabelFont = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: java.awt.Font getTickLabelFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>(tickLabelFont);

        $stack33 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: org.jfree.chart.axis.NumberTickUnit getTickUnit()>();

        size = virtualinvoke $stack33.<org.jfree.chart.axis.NumberTickUnit: double getSize()>();

        count = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: int calculateVisibleTickCount()>();

        lowestTickValue = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: double calculateLowestVisibleTickValue()>();

        previousDrawnTickLabelPos = 0.0;

        previousDrawnTickLabelLength = 0.0;

        if count > 500 goto label13;

        i = 0;

     label01:
        if i >= count goto label13;

        $stack38 = (double) i;

        $stack39 = $stack38 * size;

        currentTickValue = lowestTickValue + $stack39;

        xx = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(currentTickValue, dataArea, edge);

        formatter = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: java.text.NumberFormat getNumberFormatOverride()>();

        if formatter == null goto label02;

        tickLabel = virtualinvoke formatter.<java.text.NumberFormat: java.lang.String format(double)>(currentTickValue);

        goto label03;

     label02:
        tickLabel = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: java.lang.String valueToString(double)>(currentTickValue);

     label03:
        $stack43 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics()>();

        bounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>(tickLabel, g2, $stack43);

        $stack45 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: boolean isVerticalTickLabels()>();

        if $stack45 == 0 goto label04;

        $stack46 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getHeight()>();

        goto label05;

     label04:
        $stack46 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getWidth()>();

     label05:
        tickLabelLength = $stack46;

        tickLabelsOverlapping = 0;

        if i <= 0 goto label06;

        $stack64 = previousDrawnTickLabelLength + $stack46;

        avgTickLabelLength = $stack64 / 2.0;

        $stack65 = xx - previousDrawnTickLabelPos;

        $stack66 = staticinvoke <java.lang.Math: double abs(double)>($stack65);

        $stack67 = $stack66 cmpg avgTickLabelLength;

        if $stack67 >= 0 goto label06;

        tickLabelsOverlapping = 1;

     label06:
        if tickLabelsOverlapping == 0 goto label07;

        tickLabel = "";

        goto label08;

     label07:
        previousDrawnTickLabelPos = xx;

        previousDrawnTickLabelLength = tickLabelLength;

     label08:
        angle = 0.0;

        $stack47 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: boolean isVerticalTickLabels()>();

        if $stack47 == 0 goto label10;

        avgTickLabelLength#11 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_RIGHT>;

        rotationAnchor = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_RIGHT>;

        $stack61 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack61 goto label09;

        angle = 1.5707963267948966;

        goto label12;

     label09:
        angle = -1.5707963267948966;

        goto label12;

     label10:
        $stack48 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge TOP>;

        if edge != $stack48 goto label11;

        avgTickLabelLength#11 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor BOTTOM_CENTER>;

        rotationAnchor = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor BOTTOM_CENTER>;

        goto label12;

     label11:
        avgTickLabelLength#11 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor TOP_CENTER>;

        rotationAnchor = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor TOP_CENTER>;

     label12:
        $stack49 = new org.jfree.chart.axis.NumberTick;

        $stack50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(currentTickValue);

        specialinvoke $stack49.<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.ui.TextAnchor,org.jfree.chart.ui.TextAnchor,double)>($stack50, tickLabel, avgTickLabelLength#11, rotationAnchor, angle);

        interfaceinvoke $stack31.<java.util.List: boolean add(java.lang.Object)>($stack49);

        i = i + 1;

        goto label01;

     label13:
        return $stack31;
    }

    protected java.util.List refreshTicksVertical(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.ui.RectangleEdge)
    {
        java.util.ArrayList $stack31;
        org.jfree.chart.axis.SymbolAxis this;
        java.awt.Font tickLabelFont;
        java.awt.Graphics2D g2;
        org.jfree.chart.axis.NumberTickUnit $stack33;
        double size, lowestTickValue, $stack38, $stack39, currentTickValue, yy, tickLabelLength, $stack64, $stack65, $stack66, previousDrawnTickLabelPos, previousDrawnTickLabelLength, $stack46, avgTickLabelLength, angle;
        int count, i;
        java.awt.geom.Rectangle2D dataArea, bounds;
        org.jfree.chart.ui.RectangleEdge edge, $stack48, $stack61;
        java.text.NumberFormat formatter;
        java.awt.FontMetrics $stack43;
        boolean $stack45, $stack47, tickLabelsOverlapping;
        byte $stack67;
        java.lang.String tickLabel;
        org.jfree.chart.ui.TextAnchor avgTickLabelLength#11, rotationAnchor;
        org.jfree.chart.axis.NumberTick $stack49;
        java.lang.Double $stack50;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        g2 := @parameter0: java.awt.Graphics2D;

        dataArea := @parameter1: java.awt.geom.Rectangle2D;

        edge := @parameter2: org.jfree.chart.ui.RectangleEdge;

        $stack31 = new java.util.ArrayList;

        specialinvoke $stack31.<java.util.ArrayList: void <init>()>();

        tickLabelFont = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: java.awt.Font getTickLabelFont()>();

        virtualinvoke g2.<java.awt.Graphics2D: void setFont(java.awt.Font)>(tickLabelFont);

        $stack33 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: org.jfree.chart.axis.NumberTickUnit getTickUnit()>();

        size = virtualinvoke $stack33.<org.jfree.chart.axis.NumberTickUnit: double getSize()>();

        count = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: int calculateVisibleTickCount()>();

        lowestTickValue = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: double calculateLowestVisibleTickValue()>();

        previousDrawnTickLabelPos = 0.0;

        previousDrawnTickLabelLength = 0.0;

        if count > 500 goto label13;

        i = 0;

     label01:
        if i >= count goto label13;

        $stack38 = (double) i;

        $stack39 = $stack38 * size;

        currentTickValue = lowestTickValue + $stack39;

        yy = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(currentTickValue, dataArea, edge);

        formatter = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: java.text.NumberFormat getNumberFormatOverride()>();

        if formatter == null goto label02;

        tickLabel = virtualinvoke formatter.<java.text.NumberFormat: java.lang.String format(double)>(currentTickValue);

        goto label03;

     label02:
        tickLabel = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: java.lang.String valueToString(double)>(currentTickValue);

     label03:
        $stack43 = virtualinvoke g2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics()>();

        bounds = staticinvoke <org.jfree.chart.text.TextUtils: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>(tickLabel, g2, $stack43);

        $stack45 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: boolean isVerticalTickLabels()>();

        if $stack45 == 0 goto label04;

        $stack46 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getWidth()>();

        goto label05;

     label04:
        $stack46 = virtualinvoke bounds.<java.awt.geom.Rectangle2D: double getHeight()>();

     label05:
        tickLabelLength = $stack46;

        tickLabelsOverlapping = 0;

        if i <= 0 goto label06;

        $stack64 = previousDrawnTickLabelLength + $stack46;

        avgTickLabelLength = $stack64 / 2.0;

        $stack65 = yy - previousDrawnTickLabelPos;

        $stack66 = staticinvoke <java.lang.Math: double abs(double)>($stack65);

        $stack67 = $stack66 cmpg avgTickLabelLength;

        if $stack67 >= 0 goto label06;

        tickLabelsOverlapping = 1;

     label06:
        if tickLabelsOverlapping == 0 goto label07;

        tickLabel = "";

        goto label08;

     label07:
        previousDrawnTickLabelPos = yy;

        previousDrawnTickLabelLength = tickLabelLength;

     label08:
        angle = 0.0;

        $stack47 = virtualinvoke this.<org.jfree.chart.axis.SymbolAxis: boolean isVerticalTickLabels()>();

        if $stack47 == 0 goto label10;

        avgTickLabelLength#11 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor BOTTOM_CENTER>;

        rotationAnchor = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor BOTTOM_CENTER>;

        $stack61 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack61 goto label09;

        angle = -1.5707963267948966;

        goto label12;

     label09:
        angle = 1.5707963267948966;

        goto label12;

     label10:
        $stack48 = <org.jfree.chart.ui.RectangleEdge: org.jfree.chart.ui.RectangleEdge LEFT>;

        if edge != $stack48 goto label11;

        avgTickLabelLength#11 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_RIGHT>;

        rotationAnchor = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_RIGHT>;

        goto label12;

     label11:
        avgTickLabelLength#11 = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_LEFT>;

        rotationAnchor = <org.jfree.chart.ui.TextAnchor: org.jfree.chart.ui.TextAnchor CENTER_LEFT>;

     label12:
        $stack49 = new org.jfree.chart.axis.NumberTick;

        $stack50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(currentTickValue);

        specialinvoke $stack49.<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.ui.TextAnchor,org.jfree.chart.ui.TextAnchor,double)>($stack50, tickLabel, avgTickLabelLength#11, rotationAnchor, angle);

        interfaceinvoke $stack31.<java.util.List: boolean add(java.lang.Object)>($stack49);

        i = i + 1;

        goto label01;

     label13:
        return $stack31;
    }

    public java.lang.String valueToString(double)
    {
        org.jfree.chart.axis.SymbolAxis this;
        double value;
        int $stack5;
        java.util.List $stack6;
        java.lang.Object $stack7;
        java.lang.IndexOutOfBoundsException $stack8;
        java.lang.String strToReturn;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        value := @parameter0: double;

     label1:
        $stack6 = this.<org.jfree.chart.axis.SymbolAxis: java.util.List symbols>;

        $stack5 = (int) value;

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.lang.Object get(int)>($stack5);

        strToReturn = (java.lang.String) $stack7;

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

        strToReturn = "";

     label4:
        return strToReturn;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.axis.SymbolAxis this, that;
        boolean $stack3, $stack6, $stack7, $stack8, $stack11, $stack14, $stack15;
        java.util.List $stack4, $stack5;
        java.awt.Paint $stack9, $stack10, $stack12, $stack13;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.axis.SymbolAxis;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.axis.SymbolAxis) obj;

        $stack5 = this.<org.jfree.chart.axis.SymbolAxis: java.util.List symbols>;

        $stack4 = that.<org.jfree.chart.axis.SymbolAxis: java.util.List symbols>;

        $stack6 = interfaceinvoke $stack5.<java.util.List: boolean equals(java.lang.Object)>($stack4);

        if $stack6 != 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.axis.SymbolAxis: boolean gridBandsVisible>;

        $stack7 = that.<org.jfree.chart.axis.SymbolAxis: boolean gridBandsVisible>;

        if $stack8 == $stack7 goto label4;

        return 0;

     label4:
        $stack10 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandPaint>;

        $stack9 = that.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandPaint>;

        $stack11 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack10, $stack9);

        if $stack11 != 0 goto label5;

        return 0;

     label5:
        $stack13 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandAlternatePaint>;

        $stack12 = that.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandAlternatePaint>;

        $stack14 = staticinvoke <org.jfree.chart.util.PaintUtils: boolean equal(java.awt.Paint,java.awt.Paint)>($stack13, $stack12);

        if $stack14 != 0 goto label6;

        return 0;

     label6:
        $stack15 = specialinvoke this.<org.jfree.chart.axis.NumberAxis: boolean equals(java.lang.Object)>(obj);

        return $stack15;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream stream;
        org.jfree.chart.axis.SymbolAxis this;
        java.awt.Paint $stack2, $stack3;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        stream := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke stream.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $stack2 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandPaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack2, stream);

        $stack3 = this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandAlternatePaint>;

        staticinvoke <org.jfree.chart.util.SerialUtils: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>($stack3, stream);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream stream;
        org.jfree.chart.axis.SymbolAxis this;
        java.awt.Paint $stack2, $stack3;

        this := @this: org.jfree.chart.axis.SymbolAxis;

        stream := @parameter0: java.io.ObjectInputStream;

        virtualinvoke stream.<java.io.ObjectInputStream: void defaultReadObject()>();

        $stack2 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandPaint> = $stack2;

        $stack3 = staticinvoke <org.jfree.chart.util.SerialUtils: java.awt.Paint readPaint(java.io.ObjectInputStream)>(stream);

        this.<org.jfree.chart.axis.SymbolAxis: java.awt.Paint gridBandAlternatePaint> = $stack3;

        return;
    }

    static void <clinit>()
    {
        java.awt.Color $stack0, $stack1;

        <org.jfree.chart.axis.SymbolAxis: long serialVersionUID> = 7216330468770619716L;

        $stack0 = new java.awt.Color;

        specialinvoke $stack0.<java.awt.Color: void <init>(int,int,int,int)>(232, 234, 232, 128);

        <org.jfree.chart.axis.SymbolAxis: java.awt.Paint DEFAULT_GRID_BAND_PAINT> = $stack0;

        $stack1 = new java.awt.Color;

        specialinvoke $stack1.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, 0);

        <org.jfree.chart.axis.SymbolAxis: java.awt.Paint DEFAULT_GRID_BAND_ALTERNATE_PAINT> = $stack1;

        return;
    }
}
