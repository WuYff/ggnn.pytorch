public class org.jfree.chart.renderer.xy.VectorRenderer extends org.jfree.chart.renderer.xy.AbstractXYItemRenderer implements org.jfree.chart.renderer.xy.XYItemRenderer, java.lang.Cloneable, org.jfree.chart.util.PublicCloneable, java.io.Serializable
{
    private double baseLength;
    private double headLength;

    public void <init>()
    {
        org.jfree.chart.renderer.xy.VectorRenderer this;

        this := @this: org.jfree.chart.renderer.xy.VectorRenderer;

        specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>();

        this.<org.jfree.chart.renderer.xy.VectorRenderer: double baseLength> = 0.1;

        this.<org.jfree.chart.renderer.xy.VectorRenderer: double headLength> = 0.14;

        return;
    }

    public org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.data.xy.XYDataset dataset;
        int seriesCount, series, itemCount, item, vdataset#9;
        boolean $stack18;
        byte $stack19, $stack35;
        org.jfree.data.Range $stack20;
        double delta, minimum, maximum, uvalue, lvalue;
        org.jfree.chart.renderer.xy.VectorRenderer this;
        org.jfree.data.xy.VectorXYDataset vdataset;

        this := @this: org.jfree.chart.renderer.xy.VectorRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(dataset, "dataset");

        minimum = #Infinity;

        maximum = #-Infinity;

        seriesCount = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getSeriesCount()>();

        $stack18 = dataset instanceof org.jfree.data.xy.VectorXYDataset;

        if $stack18 == 0 goto label07;

        vdataset = (org.jfree.data.xy.VectorXYDataset) dataset;

        series = 0;

     label01:
        if series >= seriesCount goto label06;

        itemCount = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(series);

        item = 0;

     label02:
        if item >= itemCount goto label05;

        delta = interfaceinvoke vdataset.<org.jfree.data.xy.VectorXYDataset: double getVectorXValue(int,int)>(series, item);

        $stack35 = delta cmpg 0.0;

        if $stack35 >= 0 goto label03;

        uvalue = interfaceinvoke vdataset.<org.jfree.data.xy.VectorXYDataset: double getXValue(int,int)>(series, item);

        lvalue = uvalue + delta;

        goto label04;

     label03:
        lvalue = interfaceinvoke vdataset.<org.jfree.data.xy.VectorXYDataset: double getXValue(int,int)>(series, item);

        uvalue = lvalue + delta;

     label04:
        minimum = staticinvoke <java.lang.Math: double min(double,double)>(minimum, lvalue);

        maximum = staticinvoke <java.lang.Math: double max(double,double)>(maximum, uvalue);

        item = item + 1;

        goto label02;

     label05:
        series = series + 1;

        goto label01;

     label06:
        goto label11;

     label07:
        vdataset#9 = 0;

     label08:
        if vdataset#9 >= seriesCount goto label11;

        series = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(vdataset#9);

        itemCount = 0;

     label09:
        if itemCount >= series goto label10;

        lvalue = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(vdataset#9, itemCount);

        minimum = staticinvoke <java.lang.Math: double min(double,double)>(minimum, lvalue);

        maximum = staticinvoke <java.lang.Math: double max(double,double)>(maximum, lvalue);

        itemCount = itemCount + 1;

        goto label09;

     label10:
        vdataset#9 = vdataset#9 + 1;

        goto label08;

     label11:
        $stack19 = minimum cmpl maximum;

        if $stack19 <= 0 goto label12;

        return null;

     label12:
        $stack20 = new org.jfree.data.Range;

        specialinvoke $stack20.<org.jfree.data.Range: void <init>(double,double)>(minimum, maximum);

        return $stack20;
    }

    public org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)
    {
        org.jfree.data.xy.XYDataset dataset;
        int seriesCount, series, itemCount, item, vdataset#9;
        boolean $stack18;
        byte $stack19, $stack35;
        org.jfree.data.Range $stack20;
        double delta, minimum, maximum, uvalue, lvalue;
        org.jfree.chart.renderer.xy.VectorRenderer this;
        org.jfree.data.xy.VectorXYDataset vdataset;

        this := @this: org.jfree.chart.renderer.xy.VectorRenderer;

        dataset := @parameter0: org.jfree.data.xy.XYDataset;

        staticinvoke <org.jfree.chart.util.Args: void nullNotPermitted(java.lang.Object,java.lang.String)>(dataset, "dataset");

        minimum = #Infinity;

        maximum = #-Infinity;

        seriesCount = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getSeriesCount()>();

        $stack18 = dataset instanceof org.jfree.data.xy.VectorXYDataset;

        if $stack18 == 0 goto label07;

        vdataset = (org.jfree.data.xy.VectorXYDataset) dataset;

        series = 0;

     label01:
        if series >= seriesCount goto label06;

        itemCount = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(series);

        item = 0;

     label02:
        if item >= itemCount goto label05;

        delta = interfaceinvoke vdataset.<org.jfree.data.xy.VectorXYDataset: double getVectorYValue(int,int)>(series, item);

        $stack35 = delta cmpg 0.0;

        if $stack35 >= 0 goto label03;

        uvalue = interfaceinvoke vdataset.<org.jfree.data.xy.VectorXYDataset: double getYValue(int,int)>(series, item);

        lvalue = uvalue + delta;

        goto label04;

     label03:
        lvalue = interfaceinvoke vdataset.<org.jfree.data.xy.VectorXYDataset: double getYValue(int,int)>(series, item);

        uvalue = lvalue + delta;

     label04:
        minimum = staticinvoke <java.lang.Math: double min(double,double)>(minimum, lvalue);

        maximum = staticinvoke <java.lang.Math: double max(double,double)>(maximum, uvalue);

        item = item + 1;

        goto label02;

     label05:
        series = series + 1;

        goto label01;

     label06:
        goto label11;

     label07:
        vdataset#9 = 0;

     label08:
        if vdataset#9 >= seriesCount goto label11;

        series = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(vdataset#9);

        itemCount = 0;

     label09:
        if itemCount >= series goto label10;

        lvalue = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(vdataset#9, itemCount);

        minimum = staticinvoke <java.lang.Math: double min(double,double)>(minimum, lvalue);

        maximum = staticinvoke <java.lang.Math: double max(double,double)>(maximum, lvalue);

        itemCount = itemCount + 1;

        goto label09;

     label10:
        vdataset#9 = vdataset#9 + 1;

        goto label08;

     label11:
        $stack19 = minimum cmpl maximum;

        if $stack19 <= 0 goto label12;

        return null;

     label12:
        $stack20 = new org.jfree.data.Range;

        specialinvoke $stack20.<org.jfree.data.Range: void <init>(double,double)>(minimum, maximum);

        return $stack20;
    }

    public void drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, org.jfree.chart.plot.CrosshairState, int)
    {
        org.jfree.data.xy.XYDataset dataset;
        int series, item, pass;
        double x, y, xx0, yy0, $stack66, xx1, $stack69, yy1, dxx, dyy, $stack78, $stack79, $stack80, bx, $stack81, $stack82, $stack83, by, $stack84, $stack85, $stack86, cx, $stack87, $stack88, $stack89, cy, $stack92, deltaX, $stack94, deltaY, leftx, lefty, rightx, righty, $stack120, $stack122, dx, dy, angle;
        boolean $stack61, $stack74;
        org.jfree.chart.axis.ValueAxis domainAxis, rangeAxis;
        java.awt.geom.Rectangle2D dataArea;
        org.jfree.chart.plot.XYPlot plot;
        org.jfree.chart.ui.RectangleEdge $stack62, $stack64, $stack67, $stack70;
        org.jfree.chart.plot.PlotOrientation orientation, $stack73, $stack96;
        java.awt.geom.Line2D$Double $stack75, $stack140, line;
        java.awt.Graphics2D g2;
        org.jfree.chart.renderer.xy.VectorRenderer this;
        java.awt.Paint $stack76;
        java.awt.Stroke $stack77;
        byte $stack90;
        java.awt.geom.GeneralPath $stack95;
        float $stack97, $stack98, $stack99, $stack100, $stack101, $stack102, $stack103, $stack104, $stack108, $stack109, $stack110, $stack111, $stack112, $stack113, $stack114, $stack115;
        org.jfree.chart.plot.PlotRenderingInfo info;
        org.jfree.chart.ChartRenderingInfo $stack105;
        org.jfree.chart.entity.EntityCollection entities;
        java.awt.Rectangle $stack107;
        org.jfree.data.xy.VectorXYDataset $stack180, $stack182;
        org.jfree.chart.renderer.xy.XYItemRendererState state;
        org.jfree.chart.plot.CrosshairState crosshairState;

        this := @this: org.jfree.chart.renderer.xy.VectorRenderer;

        g2 := @parameter0: java.awt.Graphics2D;

        state := @parameter1: org.jfree.chart.renderer.xy.XYItemRendererState;

        dataArea := @parameter2: java.awt.geom.Rectangle2D;

        info := @parameter3: org.jfree.chart.plot.PlotRenderingInfo;

        plot := @parameter4: org.jfree.chart.plot.XYPlot;

        domainAxis := @parameter5: org.jfree.chart.axis.ValueAxis;

        rangeAxis := @parameter6: org.jfree.chart.axis.ValueAxis;

        dataset := @parameter7: org.jfree.data.xy.XYDataset;

        series := @parameter8: int;

        item := @parameter9: int;

        crosshairState := @parameter10: org.jfree.chart.plot.CrosshairState;

        pass := @parameter11: int;

        x = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(series, item);

        y = interfaceinvoke dataset.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(series, item);

        dx = 0.0;

        dy = 0.0;

        $stack61 = dataset instanceof org.jfree.data.xy.VectorXYDataset;

        if $stack61 == 0 goto label1;

        $stack180 = (org.jfree.data.xy.VectorXYDataset) dataset;

        dx = interfaceinvoke $stack180.<org.jfree.data.xy.VectorXYDataset: double getVectorXValue(int,int)>(series, item);

        $stack182 = (org.jfree.data.xy.VectorXYDataset) dataset;

        dy = interfaceinvoke $stack182.<org.jfree.data.xy.VectorXYDataset: double getVectorYValue(int,int)>(series, item);

     label1:
        $stack62 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx0 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(x, dataArea, $stack62);

        $stack64 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yy0 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>(y, dataArea, $stack64);

        $stack66 = x + dx;

        $stack67 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getDomainAxisEdge()>();

        xx1 = virtualinvoke domainAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack66, dataArea, $stack67);

        $stack69 = y + dy;

        $stack70 = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.ui.RectangleEdge getRangeAxisEdge()>();

        yy1 = virtualinvoke rangeAxis.<org.jfree.chart.axis.ValueAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.ui.RectangleEdge)>($stack69, dataArea, $stack70);

        orientation = virtualinvoke plot.<org.jfree.chart.plot.XYPlot: org.jfree.chart.plot.PlotOrientation getOrientation()>();

        $stack73 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation HORIZONTAL>;

        $stack74 = virtualinvoke orientation.<org.jfree.chart.plot.PlotOrientation: boolean equals(java.lang.Object)>($stack73);

        if $stack74 == 0 goto label2;

        $stack140 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack140.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(yy0, xx0, yy1, xx1);

        line = $stack140;

        goto label3;

     label2:
        $stack75 = new java.awt.geom.Line2D$Double;

        specialinvoke $stack75.<java.awt.geom.Line2D$Double: void <init>(double,double,double,double)>(xx0, yy0, xx1, yy1);

        line = $stack75;

     label3:
        $stack76 = virtualinvoke this.<org.jfree.chart.renderer.xy.VectorRenderer: java.awt.Paint getItemPaint(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($stack76);

        $stack77 = virtualinvoke this.<org.jfree.chart.renderer.xy.VectorRenderer: java.awt.Stroke getItemStroke(int,int)>(series, item);

        virtualinvoke g2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($stack77);

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(line);

        dxx = xx1 - xx0;

        dyy = yy1 - yy0;

        $stack78 = this.<org.jfree.chart.renderer.xy.VectorRenderer: double baseLength>;

        $stack79 = 1.0 - $stack78;

        $stack80 = $stack79 * dxx;

        bx = xx0 + $stack80;

        $stack81 = this.<org.jfree.chart.renderer.xy.VectorRenderer: double baseLength>;

        $stack82 = 1.0 - $stack81;

        $stack83 = $stack82 * dyy;

        by = yy0 + $stack83;

        $stack84 = this.<org.jfree.chart.renderer.xy.VectorRenderer: double headLength>;

        $stack85 = 1.0 - $stack84;

        $stack86 = $stack85 * dxx;

        cx = xx0 + $stack86;

        $stack87 = this.<org.jfree.chart.renderer.xy.VectorRenderer: double headLength>;

        $stack88 = 1.0 - $stack87;

        $stack89 = $stack88 * dyy;

        cy = yy0 + $stack89;

        angle = 0.0;

        $stack90 = dxx cmpl 0.0;

        if $stack90 == 0 goto label4;

        $stack120 = dyy / dxx;

        $stack122 = staticinvoke <java.lang.Math: double atan(double)>($stack120);

        angle = 1.5707963267948966 - $stack122;

     label4:
        $stack92 = staticinvoke <java.lang.Math: double cos(double)>(angle);

        deltaX = 2.0 * $stack92;

        $stack94 = staticinvoke <java.lang.Math: double sin(double)>(angle);

        deltaY = 2.0 * $stack94;

        leftx = cx + deltaX;

        lefty = cy - deltaY;

        rightx = cx - deltaX;

        righty = cy + deltaY;

        $stack95 = new java.awt.geom.GeneralPath;

        specialinvoke $stack95.<java.awt.geom.GeneralPath: void <init>()>();

        $stack96 = <org.jfree.chart.plot.PlotOrientation: org.jfree.chart.plot.PlotOrientation VERTICAL>;

        if orientation != $stack96 goto label5;

        $stack109 = (float) xx1;

        $stack108 = (float) yy1;

        virtualinvoke $stack95.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack109, $stack108);

        $stack111 = (float) rightx;

        $stack110 = (float) righty;

        virtualinvoke $stack95.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack111, $stack110);

        $stack113 = (float) bx;

        $stack112 = (float) by;

        virtualinvoke $stack95.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack113, $stack112);

        $stack115 = (float) leftx;

        $stack114 = (float) lefty;

        virtualinvoke $stack95.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack115, $stack114);

        goto label6;

     label5:
        $stack98 = (float) yy1;

        $stack97 = (float) xx1;

        virtualinvoke $stack95.<java.awt.geom.GeneralPath: void moveTo(float,float)>($stack98, $stack97);

        $stack100 = (float) righty;

        $stack99 = (float) rightx;

        virtualinvoke $stack95.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack100, $stack99);

        $stack102 = (float) by;

        $stack101 = (float) bx;

        virtualinvoke $stack95.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack102, $stack101);

        $stack104 = (float) lefty;

        $stack103 = (float) leftx;

        virtualinvoke $stack95.<java.awt.geom.GeneralPath: void lineTo(float,float)>($stack104, $stack103);

     label6:
        virtualinvoke $stack95.<java.awt.geom.GeneralPath: void closePath()>();

        virtualinvoke g2.<java.awt.Graphics2D: void draw(java.awt.Shape)>($stack95);

        if info == null goto label7;

        $stack105 = virtualinvoke info.<org.jfree.chart.plot.PlotRenderingInfo: org.jfree.chart.ChartRenderingInfo getOwner()>();

        entities = virtualinvoke $stack105.<org.jfree.chart.ChartRenderingInfo: org.jfree.chart.entity.EntityCollection getEntityCollection()>();

        if entities == null goto label7;

        $stack107 = virtualinvoke line.<java.awt.geom.Line2D: java.awt.Rectangle getBounds()>();

        virtualinvoke this.<org.jfree.chart.renderer.xy.VectorRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>(entities, $stack107, dataset, series, item, 0.0, 0.0);

     label7:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object obj;
        org.jfree.chart.renderer.xy.VectorRenderer this, that;
        boolean $stack3, $stack10;
        double $stack4, $stack5, $stack7, $stack8;
        byte $stack6, $stack9;

        this := @this: org.jfree.chart.renderer.xy.VectorRenderer;

        obj := @parameter0: java.lang.Object;

        if obj != this goto label1;

        return 1;

     label1:
        $stack3 = obj instanceof org.jfree.chart.renderer.xy.VectorRenderer;

        if $stack3 != 0 goto label2;

        return 0;

     label2:
        that = (org.jfree.chart.renderer.xy.VectorRenderer) obj;

        $stack5 = this.<org.jfree.chart.renderer.xy.VectorRenderer: double baseLength>;

        $stack4 = that.<org.jfree.chart.renderer.xy.VectorRenderer: double baseLength>;

        $stack6 = $stack5 cmpl $stack4;

        if $stack6 == 0 goto label3;

        return 0;

     label3:
        $stack8 = this.<org.jfree.chart.renderer.xy.VectorRenderer: double headLength>;

        $stack7 = that.<org.jfree.chart.renderer.xy.VectorRenderer: double headLength>;

        $stack9 = $stack8 cmpl $stack7;

        if $stack9 == 0 goto label4;

        return 0;

     label4:
        $stack10 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>(obj);

        return $stack10;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jfree.chart.renderer.xy.VectorRenderer this;
        java.lang.Object $stack1;

        this := @this: org.jfree.chart.renderer.xy.VectorRenderer;

        $stack1 = specialinvoke this.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>();

        return $stack1;
    }
}
