public abstract class org.jsoup.nodes.Node extends java.lang.Object implements java.lang.Cloneable
{
    static final java.lang.String EmptyString;
    org.jsoup.nodes.Node parentNode;
    int siblingIndex;

    protected void <init>()
    {
        org.jsoup.nodes.Node this;

        this := @this: org.jsoup.nodes.Node;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.String nodeName();

    protected abstract boolean hasAttributes();

    public boolean hasParent()
    {
        org.jsoup.nodes.Node this, $stack1;
        boolean $stack2;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public java.lang.String attr(java.lang.String)
    {
        java.lang.String attributeKey, val, $stack8, $stack10, $stack11;
        org.jsoup.nodes.Node this;
        boolean $stack3, $stack7;
        org.jsoup.nodes.Attributes $stack4;
        int $stack6, $stack9;

        this := @this: org.jsoup.nodes.Node;

        attributeKey := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(attributeKey);

        $stack3 = virtualinvoke this.<org.jsoup.nodes.Node: boolean hasAttributes()>();

        if $stack3 != 0 goto label1;

        return "";

     label1:
        $stack4 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>();

        val = virtualinvoke $stack4.<org.jsoup.nodes.Attributes: java.lang.String getIgnoreCase(java.lang.String)>(attributeKey);

        $stack6 = virtualinvoke val.<java.lang.String: int length()>();

        if $stack6 <= 0 goto label2;

        return val;

     label2:
        $stack7 = virtualinvoke attributeKey.<java.lang.String: boolean startsWith(java.lang.String)>("abs:");

        if $stack7 == 0 goto label3;

        $stack8 = "abs:";

        $stack9 = virtualinvoke $stack8.<java.lang.String: int length()>();

        $stack10 = virtualinvoke attributeKey.<java.lang.String: java.lang.String substring(int)>($stack9);

        $stack11 = virtualinvoke this.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>($stack10);

        return $stack11;

     label3:
        return "";
    }

    public abstract org.jsoup.nodes.Attributes attributes();

    public org.jsoup.nodes.Node attr(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.Node this;
        org.jsoup.parser.Parser $stack3;
        org.jsoup.parser.ParseSettings $stack4;
        org.jsoup.nodes.Attributes $stack6;
        java.lang.String attributeValue, attributeKey, attributeKey#2;

        this := @this: org.jsoup.nodes.Node;

        attributeKey := @parameter0: java.lang.String;

        attributeValue := @parameter1: java.lang.String;

        $stack3 = staticinvoke <org.jsoup.nodes.NodeUtils: org.jsoup.parser.Parser parser(org.jsoup.nodes.Node)>(this);

        $stack4 = virtualinvoke $stack3.<org.jsoup.parser.Parser: org.jsoup.parser.ParseSettings settings()>();

        attributeKey#2 = virtualinvoke $stack4.<org.jsoup.parser.ParseSettings: java.lang.String normalizeAttribute(java.lang.String)>(attributeKey);

        $stack6 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>();

        virtualinvoke $stack6.<org.jsoup.nodes.Attributes: void putIgnoreCase(java.lang.String,java.lang.String)>(attributeKey#2, attributeValue);

        return this;
    }

    public boolean hasAttr(java.lang.String)
    {
        java.lang.String attributeKey, $stack6, key, $stack13;
        boolean $stack3, $stack10, $stack14, $stack5;
        org.jsoup.nodes.Node this;
        int $stack7;
        org.jsoup.nodes.Attributes $stack9, $stack4;

        this := @this: org.jsoup.nodes.Node;

        attributeKey := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(attributeKey);

        $stack3 = virtualinvoke attributeKey.<java.lang.String: boolean startsWith(java.lang.String)>("abs:");

        if $stack3 == 0 goto label1;

        $stack6 = "abs:";

        $stack7 = virtualinvoke $stack6.<java.lang.String: int length()>();

        key = virtualinvoke attributeKey.<java.lang.String: java.lang.String substring(int)>($stack7);

        $stack9 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>();

        $stack10 = virtualinvoke $stack9.<org.jsoup.nodes.Attributes: boolean hasKeyIgnoreCase(java.lang.String)>(key);

        if $stack10 == 0 goto label1;

        $stack13 = virtualinvoke this.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>(key);

        $stack14 = virtualinvoke $stack13.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $stack14 != 0 goto label1;

        return 1;

     label1:
        $stack4 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>();

        $stack5 = virtualinvoke $stack4.<org.jsoup.nodes.Attributes: boolean hasKeyIgnoreCase(java.lang.String)>(attributeKey);

        return $stack5;
    }

    public org.jsoup.nodes.Node removeAttr(java.lang.String)
    {
        java.lang.String attributeKey;
        org.jsoup.nodes.Node this;
        org.jsoup.nodes.Attributes $stack2;

        this := @this: org.jsoup.nodes.Node;

        attributeKey := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(attributeKey);

        $stack2 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>();

        virtualinvoke $stack2.<org.jsoup.nodes.Attributes: void removeIgnoreCase(java.lang.String)>(attributeKey);

        return this;
    }

    public org.jsoup.nodes.Node clearAttributes()
    {
        org.jsoup.nodes.Node this;
        org.jsoup.nodes.Attributes $stack2;
        java.util.Iterator it;
        boolean $stack4;

        this := @this: org.jsoup.nodes.Node;

        $stack2 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>();

        it = virtualinvoke $stack2.<org.jsoup.nodes.Attributes: java.util.Iterator iterator()>();

     label1:
        $stack4 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $stack4 == 0 goto label2;

        interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke it.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return this;
    }

    public abstract java.lang.String baseUri();

    protected abstract void doSetBaseUri(java.lang.String);

    public void setBaseUri(java.lang.String)
    {
        java.lang.String baseUri;
        org.jsoup.nodes.Node this;

        this := @this: org.jsoup.nodes.Node;

        baseUri := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(baseUri);

        virtualinvoke this.<org.jsoup.nodes.Node: void doSetBaseUri(java.lang.String)>(baseUri);

        return;
    }

    public java.lang.String absUrl(java.lang.String)
    {
        java.lang.String attributeKey, $stack3, $stack4, $stack5;
        org.jsoup.nodes.Node this;
        boolean $stack2;

        this := @this: org.jsoup.nodes.Node;

        attributeKey := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(attributeKey);

        $stack2 = virtualinvoke this.<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>(attributeKey);

        if $stack2 != 0 goto label1;

        return "";

     label1:
        $stack3 = virtualinvoke this.<org.jsoup.nodes.Node: java.lang.String baseUri()>();

        $stack4 = virtualinvoke this.<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>(attributeKey);

        $stack5 = staticinvoke <org.jsoup.internal.StringUtil: java.lang.String resolve(java.lang.String,java.lang.String)>($stack3, $stack4);

        return $stack5;
    }

    protected abstract java.util.List ensureChildNodes();

    public org.jsoup.nodes.Node childNode(int)
    {
        org.jsoup.nodes.Node this, $stack4;
        java.util.List $stack2;
        int index;
        java.lang.Object $stack3;

        this := @this: org.jsoup.nodes.Node;

        index := @parameter0: int;

        $stack2 = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack3 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(index);

        $stack4 = (org.jsoup.nodes.Node) $stack3;

        return $stack4;
    }

    public java.util.List childNodes()
    {
        org.jsoup.nodes.Node this;
        java.util.List $stack1, $stack2;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($stack1);

        return $stack2;
    }

    public java.util.List childNodesCopy()
    {
        org.jsoup.nodes.Node this, node, $stack11;
        java.util.List nodes;
        java.util.ArrayList $stack6;
        int $stack7;
        java.util.Iterator l3;
        boolean $stack9;
        java.lang.Object $stack10;

        this := @this: org.jsoup.nodes.Node;

        nodes = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack6 = new java.util.ArrayList;

        $stack7 = interfaceinvoke nodes.<java.util.List: int size()>();

        specialinvoke $stack6.<java.util.ArrayList: void <init>(int)>($stack7);

        l3 = interfaceinvoke nodes.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack9 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label2;

        $stack10 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        node = (org.jsoup.nodes.Node) $stack10;

        $stack11 = virtualinvoke node.<org.jsoup.nodes.Node: org.jsoup.nodes.Node clone()>();

        virtualinvoke $stack6.<java.util.ArrayList: boolean add(java.lang.Object)>($stack11);

        goto label1;

     label2:
        return $stack6;
    }

    public abstract int childNodeSize();

    protected org.jsoup.nodes.Node[] childNodesAsArray()
    {
        org.jsoup.nodes.Node this;
        java.util.List $stack1;
        org.jsoup.nodes.Node[] $stack2, $stack4;
        java.lang.Object[] $stack3;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack2 = newarray (org.jsoup.nodes.Node)[0];

        $stack3 = interfaceinvoke $stack1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack2);

        $stack4 = (org.jsoup.nodes.Node[]) $stack3;

        return $stack4;
    }

    public abstract org.jsoup.nodes.Node empty();

    public org.jsoup.nodes.Node parent()
    {
        org.jsoup.nodes.Node this, $stack1;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        return $stack1;
    }

    public final org.jsoup.nodes.Node parentNode()
    {
        org.jsoup.nodes.Node this, $stack1;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        return $stack1;
    }

    public org.jsoup.nodes.Node root()
    {
        org.jsoup.nodes.Node this, $stack2, node;

        this := @this: org.jsoup.nodes.Node;

        node = this;

     label1:
        $stack2 = node.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $stack2 == null goto label2;

        node = node.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        goto label1;

     label2:
        return node;
    }

    public org.jsoup.nodes.Document ownerDocument()
    {
        org.jsoup.nodes.Node this, root;
        boolean $stack3;
        org.jsoup.nodes.Document $stack4;

        this := @this: org.jsoup.nodes.Node;

        root = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node root()>();

        $stack3 = root instanceof org.jsoup.nodes.Document;

        if $stack3 == 0 goto label1;

        $stack4 = (org.jsoup.nodes.Document) root;

        goto label2;

     label1:
        $stack4 = null;

     label2:
        return $stack4;
    }

    public void remove()
    {
        org.jsoup.nodes.Node this, $stack1, $stack2;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($stack1);

        $stack2 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $stack2.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(this);

        return;
    }

    public org.jsoup.nodes.Node before(java.lang.String)
    {
        org.jsoup.nodes.Node this;
        java.lang.String html;
        int $stack2;

        this := @this: org.jsoup.nodes.Node;

        html := @parameter0: java.lang.String;

        $stack2 = this.<org.jsoup.nodes.Node: int siblingIndex>;

        specialinvoke this.<org.jsoup.nodes.Node: void addSiblingHtml(int,java.lang.String)>($stack2, html);

        return this;
    }

    public org.jsoup.nodes.Node before(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node node, this, $stack2, $stack5;
        org.jsoup.nodes.Node[] $stack3;
        int $stack4;

        this := @this: org.jsoup.nodes.Node;

        node := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(node);

        $stack2 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($stack2);

        $stack5 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $stack4 = this.<org.jsoup.nodes.Node: int siblingIndex>;

        $stack3 = newarray (org.jsoup.nodes.Node)[1];

        $stack3[0] = node;

        virtualinvoke $stack5.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($stack4, $stack3);

        return this;
    }

    public org.jsoup.nodes.Node after(java.lang.String)
    {
        org.jsoup.nodes.Node this;
        int $stack2, $stack3;
        java.lang.String html;

        this := @this: org.jsoup.nodes.Node;

        html := @parameter0: java.lang.String;

        $stack2 = this.<org.jsoup.nodes.Node: int siblingIndex>;

        $stack3 = $stack2 + 1;

        specialinvoke this.<org.jsoup.nodes.Node: void addSiblingHtml(int,java.lang.String)>($stack3, html);

        return this;
    }

    public org.jsoup.nodes.Node after(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node node, this, $stack2, $stack6;
        int $stack3, $stack5;
        org.jsoup.nodes.Node[] $stack4;

        this := @this: org.jsoup.nodes.Node;

        node := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(node);

        $stack2 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($stack2);

        $stack6 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $stack3 = this.<org.jsoup.nodes.Node: int siblingIndex>;

        $stack5 = $stack3 + 1;

        $stack4 = newarray (org.jsoup.nodes.Node)[1];

        $stack4[0] = node;

        virtualinvoke $stack6.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($stack5, $stack4);

        return this;
    }

    private void addSiblingHtml(int, java.lang.String)
    {
        java.lang.String html, $stack9;
        org.jsoup.nodes.Node this, $stack5, $stack6, $stack12, $stack15;
        boolean $stack7;
        org.jsoup.parser.Parser $stack8;
        java.util.List nodes;
        int index;
        org.jsoup.nodes.Node[] $stack11, $stack14;
        java.lang.Object[] $stack13;
        org.jsoup.nodes.Element $stack16;

        this := @this: org.jsoup.nodes.Node;

        index := @parameter0: int;

        html := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(html);

        $stack5 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($stack5);

        $stack6 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $stack7 = $stack6 instanceof org.jsoup.nodes.Element;

        if $stack7 == 0 goto label1;

        $stack15 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $stack16 = (org.jsoup.nodes.Element) $stack15;

        goto label2;

     label1:
        $stack16 = null;

     label2:
        $stack8 = staticinvoke <org.jsoup.nodes.NodeUtils: org.jsoup.parser.Parser parser(org.jsoup.nodes.Node)>(this);

        $stack9 = virtualinvoke this.<org.jsoup.nodes.Node: java.lang.String baseUri()>();

        nodes = virtualinvoke $stack8.<org.jsoup.parser.Parser: java.util.List parseFragmentInput(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>(html, $stack16, $stack9);

        $stack12 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $stack11 = newarray (org.jsoup.nodes.Node)[0];

        $stack13 = interfaceinvoke nodes.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack11);

        $stack14 = (org.jsoup.nodes.Node[]) $stack13;

        virtualinvoke $stack12.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>(index, $stack14);

        return;
    }

    public org.jsoup.nodes.Node wrap(java.lang.String)
    {
        java.lang.String html, $stack12;
        org.jsoup.nodes.Node this, $stack9, wrapNode, $stack17, remainder, $stack23, $stack27;
        boolean $stack10, $stack15;
        org.jsoup.parser.Parser $stack11;
        java.util.List wrapChildren;
        java.lang.Object $stack14, $stack22;
        org.jsoup.nodes.Element wrap, deepest, $stack28;
        org.jsoup.nodes.Node[] $stack18;
        int $stack19, $stack20, i;

        this := @this: org.jsoup.nodes.Node;

        html := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(html);

        $stack9 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $stack10 = $stack9 instanceof org.jsoup.nodes.Element;

        if $stack10 == 0 goto label1;

        $stack27 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $stack28 = (org.jsoup.nodes.Element) $stack27;

        goto label2;

     label1:
        $stack28 = null;

     label2:
        $stack11 = staticinvoke <org.jsoup.nodes.NodeUtils: org.jsoup.parser.Parser parser(org.jsoup.nodes.Node)>(this);

        $stack12 = virtualinvoke this.<org.jsoup.nodes.Node: java.lang.String baseUri()>();

        wrapChildren = virtualinvoke $stack11.<org.jsoup.parser.Parser: java.util.List parseFragmentInput(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>(html, $stack28, $stack12);

        $stack14 = interfaceinvoke wrapChildren.<java.util.List: java.lang.Object get(int)>(0);

        wrapNode = (org.jsoup.nodes.Node) $stack14;

        $stack15 = wrapNode instanceof org.jsoup.nodes.Element;

        if $stack15 != 0 goto label3;

        return null;

     label3:
        wrap = (org.jsoup.nodes.Element) wrapNode;

        deepest = specialinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)>(wrap);

        $stack17 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $stack17.<org.jsoup.nodes.Node: void replaceChild(org.jsoup.nodes.Node,org.jsoup.nodes.Node)>(this, wrap);

        $stack18 = newarray (org.jsoup.nodes.Node)[1];

        $stack18[0] = this;

        virtualinvoke deepest.<org.jsoup.nodes.Element: void addChildren(org.jsoup.nodes.Node[])>($stack18);

        $stack19 = interfaceinvoke wrapChildren.<java.util.List: int size()>();

        if $stack19 <= 0 goto label5;

        i = 0;

     label4:
        $stack20 = interfaceinvoke wrapChildren.<java.util.List: int size()>();

        if i >= $stack20 goto label5;

        $stack22 = interfaceinvoke wrapChildren.<java.util.List: java.lang.Object get(int)>(i);

        remainder = (org.jsoup.nodes.Node) $stack22;

        $stack23 = remainder.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $stack23.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(remainder);

        virtualinvoke wrap.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(remainder);

        i = i + 1;

        goto label4;

     label5:
        return this;
    }

    public org.jsoup.nodes.Node unwrap()
    {
        org.jsoup.nodes.Node this, $stack3, $stack6, $stack10;
        java.util.List childNodes;
        int $stack5, $stack7;
        org.jsoup.nodes.Node[] $stack8;
        java.lang.Object $stack9;

        this := @this: org.jsoup.nodes.Node;

        $stack3 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($stack3);

        childNodes = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack5 = interfaceinvoke childNodes.<java.util.List: int size()>();

        if $stack5 <= 0 goto label1;

        $stack9 = interfaceinvoke childNodes.<java.util.List: java.lang.Object get(int)>(0);

        $stack10 = (org.jsoup.nodes.Node) $stack9;

        goto label2;

     label1:
        $stack10 = null;

     label2:
        $stack6 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $stack7 = this.<org.jsoup.nodes.Node: int siblingIndex>;

        $stack8 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node[] childNodesAsArray()>();

        virtualinvoke $stack6.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($stack7, $stack8);

        virtualinvoke this.<org.jsoup.nodes.Node: void remove()>();

        return $stack10;
    }

    private org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Element el, $stack6, $stack7;
        org.jsoup.select.Elements children;
        int $stack4;
        org.jsoup.nodes.Node this;
        java.lang.Object $stack5;

        this := @this: org.jsoup.nodes.Node;

        el := @parameter0: org.jsoup.nodes.Element;

        children = virtualinvoke el.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $stack4 = interfaceinvoke children.<java.util.List: int size()>();

        if $stack4 <= 0 goto label1;

        $stack5 = interfaceinvoke children.<java.util.List: java.lang.Object get(int)>(0);

        $stack6 = (org.jsoup.nodes.Element) $stack5;

        $stack7 = specialinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)>($stack6);

        return $stack7;

     label1:
        return el;
    }

    void nodelistChanged()
    {
        org.jsoup.nodes.Node this;

        this := @this: org.jsoup.nodes.Node;

        return;
    }

    public void replaceWith(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node in, this, $stack2, $stack3;

        this := @this: org.jsoup.nodes.Node;

        in := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(in);

        $stack2 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($stack2);

        $stack3 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $stack3.<org.jsoup.nodes.Node: void replaceChild(org.jsoup.nodes.Node,org.jsoup.nodes.Node)>(this, in);

        return;
    }

    protected void setParentNode(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node parentNode, this, $stack2, $stack3;

        this := @this: org.jsoup.nodes.Node;

        parentNode := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(parentNode);

        $stack2 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $stack2 == null goto label1;

        $stack3 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $stack3.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(this);

     label1:
        this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = parentNode;

        return;
    }

    protected void replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node out, this, $stack4, in, $stack5, $stack8;
        int index;
        java.util.List $stack6;
        boolean $stack20;

        this := @this: org.jsoup.nodes.Node;

        out := @parameter0: org.jsoup.nodes.Node;

        in := @parameter1: org.jsoup.nodes.Node;

        $stack4 = out.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $stack4 != this goto label1;

        $stack20 = 1;

        goto label2;

     label1:
        $stack20 = 0;

     label2:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($stack20);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(in);

        $stack5 = in.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $stack5 == null goto label3;

        $stack8 = in.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $stack8.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(in);

     label3:
        index = out.<org.jsoup.nodes.Node: int siblingIndex>;

        $stack6 = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        interfaceinvoke $stack6.<java.util.List: java.lang.Object set(int,java.lang.Object)>(index, in);

        in.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = this;

        virtualinvoke in.<org.jsoup.nodes.Node: void setSiblingIndex(int)>(index);

        out.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = null;

        return;
    }

    protected void removeChild(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node out, this, $stack3;
        int index;
        java.util.List $stack4;
        boolean $stack6;

        this := @this: org.jsoup.nodes.Node;

        out := @parameter0: org.jsoup.nodes.Node;

        $stack3 = out.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $stack3 != this goto label1;

        $stack6 = 1;

        goto label2;

     label1:
        $stack6 = 0;

     label2:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($stack6);

        index = out.<org.jsoup.nodes.Node: int siblingIndex>;

        $stack4 = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        interfaceinvoke $stack4.<java.util.List: java.lang.Object remove(int)>(index);

        specialinvoke this.<org.jsoup.nodes.Node: void reindexChildren(int)>(index);

        out.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = null;

        return;
    }

    protected transient void addChildren(org.jsoup.nodes.Node[])
    {
        org.jsoup.nodes.Node this, child;
        java.util.List nodes;
        org.jsoup.nodes.Node[] children;
        int l4, $stack9, $stack10, l5;

        this := @this: org.jsoup.nodes.Node;

        children := @parameter0: org.jsoup.nodes.Node[];

        nodes = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        l4 = lengthof children;

        l5 = 0;

     label1:
        if l5 >= l4 goto label2;

        child = children[l5];

        virtualinvoke this.<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>(child);

        interfaceinvoke nodes.<java.util.List: boolean add(java.lang.Object)>(child);

        $stack9 = interfaceinvoke nodes.<java.util.List: int size()>();

        $stack10 = $stack9 - 1;

        virtualinvoke child.<org.jsoup.nodes.Node: void setSiblingIndex(int)>($stack10);

        l5 = l5 + 1;

        goto label1;

     label2:
        return;
    }

    protected transient void addChildren(int, org.jsoup.nodes.Node[])
    {
        org.jsoup.nodes.Node[] children;
        int $stack9, index, $stack17, $stack18, $stack25, i, $stack29, firstParentNodes#9;
        org.jsoup.nodes.Node this, $stack11, firstParent, child, $stack30, $stack31;
        java.util.List nodes, $stack13, $stack27, firstParentNodes;
        java.lang.Object $stack32;

        this := @this: org.jsoup.nodes.Node;

        index := @parameter0: int;

        children := @parameter1: org.jsoup.nodes.Node[];

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(children);

        $stack9 = lengthof children;

        if $stack9 != 0 goto label1;

        return;

     label1:
        nodes = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack11 = children[0];

        firstParent = virtualinvoke $stack11.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        if firstParent == null goto label6;

        $stack17 = virtualinvoke firstParent.<org.jsoup.nodes.Node: int childNodeSize()>();

        $stack18 = lengthof children;

        if $stack17 != $stack18 goto label6;

        firstParentNodes = virtualinvoke firstParent.<org.jsoup.nodes.Node: java.util.List childNodes()>();

        i = lengthof children;

     label2:
        $stack25 = i;

        i = i + -1;

        if $stack25 <= 0 goto label3;

        $stack31 = children[i];

        $stack32 = interfaceinvoke firstParentNodes.<java.util.List: java.lang.Object get(int)>(i);

        if $stack31 == $stack32 goto label2;

        goto label3;

     label3:
        virtualinvoke firstParent.<org.jsoup.nodes.Node: org.jsoup.nodes.Node empty()>();

        $stack27 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(children);

        interfaceinvoke nodes.<java.util.List: boolean addAll(int,java.util.Collection)>(index, $stack27);

        i = lengthof children;

     label4:
        $stack29 = i;

        i = i + -1;

        if $stack29 <= 0 goto label5;

        $stack30 = children[i];

        $stack30.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = this;

        goto label4;

     label5:
        specialinvoke this.<org.jsoup.nodes.Node: void reindexChildren(int)>(index);

        return;

     label6:
        staticinvoke <org.jsoup.helper.Validate: void noNullElements(java.lang.Object[])>(children);

        firstParentNodes#9 = lengthof children;

        i = 0;

     label7:
        if i >= firstParentNodes#9 goto label8;

        child = children[i];

        virtualinvoke this.<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>(child);

        i = i + 1;

        goto label7;

     label8:
        $stack13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(children);

        interfaceinvoke nodes.<java.util.List: boolean addAll(int,java.util.Collection)>(index, $stack13);

        specialinvoke this.<org.jsoup.nodes.Node: void reindexChildren(int)>(index);

        return;
    }

    protected void reparentChild(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node child, this;

        this := @this: org.jsoup.nodes.Node;

        child := @parameter0: org.jsoup.nodes.Node;

        virtualinvoke child.<org.jsoup.nodes.Node: void setParentNode(org.jsoup.nodes.Node)>(this);

        return;
    }

    private void reindexChildren(int)
    {
        org.jsoup.nodes.Node this, $stack7;
        java.util.List childNodes;
        int start, $stack5, i;
        java.lang.Object $stack6;

        this := @this: org.jsoup.nodes.Node;

        start := @parameter0: int;

        childNodes = virtualinvoke this.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        i = start;

     label1:
        $stack5 = interfaceinvoke childNodes.<java.util.List: int size()>();

        if i >= $stack5 goto label2;

        $stack6 = interfaceinvoke childNodes.<java.util.List: java.lang.Object get(int)>(i);

        $stack7 = (org.jsoup.nodes.Node) $stack6;

        virtualinvoke $stack7.<org.jsoup.nodes.Node: void setSiblingIndex(int)>(i);

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    public java.util.List siblingNodes()
    {
        org.jsoup.nodes.Node this, $stack5, $stack6, node;
        java.util.List nodes, $stack16;
        java.util.ArrayList $stack8;
        int $stack9, $stack10;
        java.util.Iterator l3;
        boolean $stack12;
        java.lang.Object $stack13;

        this := @this: org.jsoup.nodes.Node;

        $stack5 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $stack5 != null goto label1;

        $stack16 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $stack16;

     label1:
        $stack6 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        nodes = virtualinvoke $stack6.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack8 = new java.util.ArrayList;

        $stack9 = interfaceinvoke nodes.<java.util.List: int size()>();

        $stack10 = $stack9 - 1;

        specialinvoke $stack8.<java.util.ArrayList: void <init>(int)>($stack10);

        l3 = interfaceinvoke nodes.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label4;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        node = (org.jsoup.nodes.Node) $stack13;

        if node == this goto label3;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(node);

     label3:
        goto label2;

     label4:
        return $stack8;
    }

    public org.jsoup.nodes.Node nextSibling()
    {
        org.jsoup.nodes.Node this, $stack3, $stack4, $stack9;
        java.util.List siblings;
        int $stack6, index, $stack7;
        java.lang.Object $stack8;

        this := @this: org.jsoup.nodes.Node;

        $stack3 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $stack3 != null goto label1;

        return null;

     label1:
        $stack4 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        siblings = virtualinvoke $stack4.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack6 = this.<org.jsoup.nodes.Node: int siblingIndex>;

        index = $stack6 + 1;

        $stack7 = interfaceinvoke siblings.<java.util.List: int size()>();

        if $stack7 <= index goto label2;

        $stack8 = interfaceinvoke siblings.<java.util.List: java.lang.Object get(int)>(index);

        $stack9 = (org.jsoup.nodes.Node) $stack8;

        return $stack9;

     label2:
        return null;
    }

    public org.jsoup.nodes.Node previousSibling()
    {
        org.jsoup.nodes.Node this, $stack1, $stack3, $stack8;
        int $stack2, $stack5, $stack6;
        java.util.List $stack4;
        java.lang.Object $stack7;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $stack1 != null goto label1;

        return null;

     label1:
        $stack2 = this.<org.jsoup.nodes.Node: int siblingIndex>;

        if $stack2 <= 0 goto label2;

        $stack3 = this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $stack4 = virtualinvoke $stack3.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack5 = this.<org.jsoup.nodes.Node: int siblingIndex>;

        $stack6 = $stack5 - 1;

        $stack7 = interfaceinvoke $stack4.<java.util.List: java.lang.Object get(int)>($stack6);

        $stack8 = (org.jsoup.nodes.Node) $stack7;

        return $stack8;

     label2:
        return null;
    }

    public int siblingIndex()
    {
        org.jsoup.nodes.Node this;
        int $stack1;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = this.<org.jsoup.nodes.Node: int siblingIndex>;

        return $stack1;
    }

    protected void setSiblingIndex(int)
    {
        org.jsoup.nodes.Node this;
        int siblingIndex;

        this := @this: org.jsoup.nodes.Node;

        siblingIndex := @parameter0: int;

        this.<org.jsoup.nodes.Node: int siblingIndex> = siblingIndex;

        return;
    }

    public org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)
    {
        org.jsoup.select.NodeVisitor nodeVisitor;
        org.jsoup.nodes.Node this;

        this := @this: org.jsoup.nodes.Node;

        nodeVisitor := @parameter0: org.jsoup.select.NodeVisitor;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(nodeVisitor);

        staticinvoke <org.jsoup.select.NodeTraversor: void traverse(org.jsoup.select.NodeVisitor,org.jsoup.nodes.Node)>(nodeVisitor, this);

        return this;
    }

    public org.jsoup.nodes.Node filter(org.jsoup.select.NodeFilter)
    {
        org.jsoup.select.NodeFilter nodeFilter;
        org.jsoup.nodes.Node this;

        this := @this: org.jsoup.nodes.Node;

        nodeFilter := @parameter0: org.jsoup.select.NodeFilter;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(nodeFilter);

        staticinvoke <org.jsoup.select.NodeTraversor: org.jsoup.select.NodeFilter$FilterResult filter(org.jsoup.select.NodeFilter,org.jsoup.nodes.Node)>(nodeFilter, this);

        return this;
    }

    public java.lang.String outerHtml()
    {
        java.lang.StringBuilder accum;
        org.jsoup.nodes.Node this;
        java.lang.String $stack3;

        this := @this: org.jsoup.nodes.Node;

        accum = staticinvoke <org.jsoup.internal.StringUtil: java.lang.StringBuilder borrowBuilder()>();

        virtualinvoke this.<org.jsoup.nodes.Node: void outerHtml(java.lang.Appendable)>(accum);

        $stack3 = staticinvoke <org.jsoup.internal.StringUtil: java.lang.String releaseBuilder(java.lang.StringBuilder)>(accum);

        return $stack3;
    }

    protected void outerHtml(java.lang.Appendable)
    {
        org.jsoup.nodes.Node$OuterHtmlVisitor $stack2;
        java.lang.Appendable accum;
        org.jsoup.nodes.Node this;
        org.jsoup.nodes.Document$OutputSettings $stack3;

        this := @this: org.jsoup.nodes.Node;

        accum := @parameter0: java.lang.Appendable;

        $stack2 = new org.jsoup.nodes.Node$OuterHtmlVisitor;

        $stack3 = staticinvoke <org.jsoup.nodes.NodeUtils: org.jsoup.nodes.Document$OutputSettings outputSettings(org.jsoup.nodes.Node)>(this);

        specialinvoke $stack2.<org.jsoup.nodes.Node$OuterHtmlVisitor: void <init>(java.lang.Appendable,org.jsoup.nodes.Document$OutputSettings)>(accum, $stack3);

        staticinvoke <org.jsoup.select.NodeTraversor: void traverse(org.jsoup.select.NodeVisitor,org.jsoup.nodes.Node)>($stack2, this);

        return;
    }

    abstract void outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings) throws java.io.IOException;

    abstract void outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings) throws java.io.IOException;

    public java.lang.Appendable html(java.lang.Appendable)
    {
        org.jsoup.nodes.Node this;
        java.lang.Appendable appendable;

        this := @this: org.jsoup.nodes.Node;

        appendable := @parameter0: java.lang.Appendable;

        virtualinvoke this.<org.jsoup.nodes.Node: void outerHtml(java.lang.Appendable)>(appendable);

        return appendable;
    }

    public java.lang.String toString()
    {
        org.jsoup.nodes.Node this;
        java.lang.String $stack1;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.Node: java.lang.String outerHtml()>();

        return $stack1;
    }

    protected void indent(java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings) throws java.io.IOException
    {
        java.lang.Appendable accum, $stack4;
        int depth, $stack5, $stack6;
        org.jsoup.nodes.Document$OutputSettings out;
        java.lang.String $stack7;
        org.jsoup.nodes.Node this;

        this := @this: org.jsoup.nodes.Node;

        accum := @parameter0: java.lang.Appendable;

        depth := @parameter1: int;

        out := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $stack4 = interfaceinvoke accum.<java.lang.Appendable: java.lang.Appendable append(char)>(10);

        $stack5 = virtualinvoke out.<org.jsoup.nodes.Document$OutputSettings: int indentAmount()>();

        $stack6 = depth * $stack5;

        $stack7 = staticinvoke <org.jsoup.internal.StringUtil: java.lang.String padding(int)>($stack6);

        interfaceinvoke $stack4.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($stack7);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.jsoup.nodes.Node this;
        java.lang.Object o;
        boolean $stack2;

        this := @this: org.jsoup.nodes.Node;

        o := @parameter0: java.lang.Object;

        if this != o goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public boolean hasSameValue(java.lang.Object)
    {
        org.jsoup.nodes.Node this, $stack5;
        java.lang.Object o;
        java.lang.Class $stack2, $stack3;
        java.lang.String $stack4, $stack6;
        boolean $stack7;

        this := @this: org.jsoup.nodes.Node;

        o := @parameter0: java.lang.Object;

        if this != o goto label1;

        return 1;

     label1:
        if o == null goto label2;

        $stack2 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack3 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        if $stack2 == $stack3 goto label3;

     label2:
        return 0;

     label3:
        $stack4 = virtualinvoke this.<org.jsoup.nodes.Node: java.lang.String outerHtml()>();

        $stack5 = (org.jsoup.nodes.Node) o;

        $stack6 = virtualinvoke $stack5.<org.jsoup.nodes.Node: java.lang.String outerHtml()>();

        $stack7 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>($stack6);

        return $stack7;
    }

    public org.jsoup.nodes.Node clone()
    {
        org.jsoup.nodes.Node this, thisClone, currParent, $stack17, childClone;
        java.util.LinkedList $stack9;
        boolean $stack11;
        java.lang.Object $stack12, $stack16;
        int size, i;
        java.util.List childNodes;

        this := @this: org.jsoup.nodes.Node;

        thisClone = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)>(null);

        $stack9 = new java.util.LinkedList;

        specialinvoke $stack9.<java.util.LinkedList: void <init>()>();

        virtualinvoke $stack9.<java.util.LinkedList: boolean add(java.lang.Object)>(thisClone);

     label1:
        $stack11 = virtualinvoke $stack9.<java.util.LinkedList: boolean isEmpty()>();

        if $stack11 != 0 goto label4;

        $stack12 = virtualinvoke $stack9.<java.util.LinkedList: java.lang.Object remove()>();

        currParent = (org.jsoup.nodes.Node) $stack12;

        size = virtualinvoke currParent.<org.jsoup.nodes.Node: int childNodeSize()>();

        i = 0;

     label2:
        if i >= size goto label3;

        childNodes = virtualinvoke currParent.<org.jsoup.nodes.Node: java.util.List ensureChildNodes()>();

        $stack16 = interfaceinvoke childNodes.<java.util.List: java.lang.Object get(int)>(i);

        $stack17 = (org.jsoup.nodes.Node) $stack16;

        childClone = virtualinvoke $stack17.<org.jsoup.nodes.Node: org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)>(currParent);

        interfaceinvoke childNodes.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i, childClone);

        virtualinvoke $stack9.<java.util.LinkedList: boolean add(java.lang.Object)>(childClone);

        i = i + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return thisClone;
    }

    public org.jsoup.nodes.Node shallowClone()
    {
        org.jsoup.nodes.Node this, $stack1;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)>(null);

        return $stack1;
    }

    protected org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node this, clone, parent;
        java.lang.Object $stack4;
        java.lang.CloneNotSupportedException $stack8;
        java.lang.RuntimeException $stack9;
        int $stack5;

        this := @this: org.jsoup.nodes.Node;

        parent := @parameter0: org.jsoup.nodes.Node;

     label1:
        $stack4 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        clone = (org.jsoup.nodes.Node) $stack4;

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

        $stack9 = new java.lang.RuntimeException;

        specialinvoke $stack9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack8);

        throw $stack9;

     label4:
        clone.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = parent;

        if parent != null goto label5;

        $stack5 = 0;

        goto label6;

     label5:
        $stack5 = this.<org.jsoup.nodes.Node: int siblingIndex>;

     label6:
        clone.<org.jsoup.nodes.Node: int siblingIndex> = $stack5;

        return clone;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.Node this, $stack1;

        this := @this: org.jsoup.nodes.Node;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.Node: org.jsoup.nodes.Node clone()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.jsoup.nodes.Node: java.lang.String EmptyString> = "";

        return;
    }
}
