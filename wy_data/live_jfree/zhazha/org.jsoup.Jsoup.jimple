public class org.jsoup.Jsoup extends java.lang.Object
{

    private void <init>()
    {
        org.jsoup.Jsoup this;

        this := @this: org.jsoup.Jsoup;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.jsoup.nodes.Document parse(java.lang.String, java.lang.String)
    {
        java.lang.String html, baseUri;
        org.jsoup.nodes.Document $stack2;

        html := @parameter0: java.lang.String;

        baseUri := @parameter1: java.lang.String;

        $stack2 = staticinvoke <org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)>(html, baseUri);

        return $stack2;
    }

    public static org.jsoup.nodes.Document parse(java.lang.String, java.lang.String, org.jsoup.parser.Parser)
    {
        org.jsoup.parser.Parser parser;
        java.lang.String html, baseUri;
        org.jsoup.nodes.Document $stack3;

        html := @parameter0: java.lang.String;

        baseUri := @parameter1: java.lang.String;

        parser := @parameter2: org.jsoup.parser.Parser;

        $stack3 = virtualinvoke parser.<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>(html, baseUri);

        return $stack3;
    }

    public static org.jsoup.nodes.Document parse(java.lang.String)
    {
        java.lang.String html;
        org.jsoup.nodes.Document $stack1;

        html := @parameter0: java.lang.String;

        $stack1 = staticinvoke <org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)>(html, "");

        return $stack1;
    }

    public static org.jsoup.Connection connect(java.lang.String)
    {
        java.lang.String url;
        org.jsoup.Connection $stack1;

        url := @parameter0: java.lang.String;

        $stack1 = staticinvoke <org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)>(url);

        return $stack1;
    }

    public static org.jsoup.nodes.Document parse(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File in;
        java.lang.String charsetName, baseUri;
        org.jsoup.nodes.Document $stack3;

        in := @parameter0: java.io.File;

        charsetName := @parameter1: java.lang.String;

        baseUri := @parameter2: java.lang.String;

        $stack3 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document load(java.io.File,java.lang.String,java.lang.String)>(in, charsetName, baseUri);

        return $stack3;
    }

    public static org.jsoup.nodes.Document parse(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File in;
        java.lang.String charsetName, $stack2;
        org.jsoup.nodes.Document $stack3;

        in := @parameter0: java.io.File;

        charsetName := @parameter1: java.lang.String;

        $stack2 = virtualinvoke in.<java.io.File: java.lang.String getAbsolutePath()>();

        $stack3 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document load(java.io.File,java.lang.String,java.lang.String)>(in, charsetName, $stack2);

        return $stack3;
    }

    public static org.jsoup.nodes.Document parse(java.io.InputStream, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream in;
        java.lang.String charsetName, baseUri;
        org.jsoup.nodes.Document $stack3;

        in := @parameter0: java.io.InputStream;

        charsetName := @parameter1: java.lang.String;

        baseUri := @parameter2: java.lang.String;

        $stack3 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document load(java.io.InputStream,java.lang.String,java.lang.String)>(in, charsetName, baseUri);

        return $stack3;
    }

    public static org.jsoup.nodes.Document parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser) throws java.io.IOException
    {
        java.io.InputStream in;
        java.lang.String charsetName, baseUri;
        org.jsoup.parser.Parser parser;
        org.jsoup.nodes.Document $stack4;

        in := @parameter0: java.io.InputStream;

        charsetName := @parameter1: java.lang.String;

        baseUri := @parameter2: java.lang.String;

        parser := @parameter3: org.jsoup.parser.Parser;

        $stack4 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document load(java.io.InputStream,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>(in, charsetName, baseUri, parser);

        return $stack4;
    }

    public static org.jsoup.nodes.Document parseBodyFragment(java.lang.String, java.lang.String)
    {
        java.lang.String bodyHtml, baseUri;
        org.jsoup.nodes.Document $stack2;

        bodyHtml := @parameter0: java.lang.String;

        baseUri := @parameter1: java.lang.String;

        $stack2 = staticinvoke <org.jsoup.parser.Parser: org.jsoup.nodes.Document parseBodyFragment(java.lang.String,java.lang.String)>(bodyHtml, baseUri);

        return $stack2;
    }

    public static org.jsoup.nodes.Document parseBodyFragment(java.lang.String)
    {
        java.lang.String bodyHtml;
        org.jsoup.nodes.Document $stack1;

        bodyHtml := @parameter0: java.lang.String;

        $stack1 = staticinvoke <org.jsoup.parser.Parser: org.jsoup.nodes.Document parseBodyFragment(java.lang.String,java.lang.String)>(bodyHtml, "");

        return $stack1;
    }

    public static org.jsoup.nodes.Document parse(java.net.URL, int) throws java.io.IOException
    {
        java.net.URL url;
        org.jsoup.Connection con;
        int timeoutMillis;
        org.jsoup.nodes.Document $stack5;

        url := @parameter0: java.net.URL;

        timeoutMillis := @parameter1: int;

        con = staticinvoke <org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.net.URL)>(url);

        interfaceinvoke con.<org.jsoup.Connection: org.jsoup.Connection timeout(int)>(timeoutMillis);

        $stack5 = interfaceinvoke con.<org.jsoup.Connection: org.jsoup.nodes.Document get()>();

        return $stack5;
    }

    public static java.lang.String clean(java.lang.String, java.lang.String, org.jsoup.safety.Whitelist)
    {
        java.lang.String bodyHtml, baseUri, $stack10;
        org.jsoup.nodes.Document dirty, clean;
        org.jsoup.safety.Cleaner $stack7;
        org.jsoup.safety.Whitelist whitelist;
        org.jsoup.nodes.Element $stack9;

        bodyHtml := @parameter0: java.lang.String;

        baseUri := @parameter1: java.lang.String;

        whitelist := @parameter2: org.jsoup.safety.Whitelist;

        dirty = staticinvoke <org.jsoup.Jsoup: org.jsoup.nodes.Document parseBodyFragment(java.lang.String,java.lang.String)>(bodyHtml, baseUri);

        $stack7 = new org.jsoup.safety.Cleaner;

        specialinvoke $stack7.<org.jsoup.safety.Cleaner: void <init>(org.jsoup.safety.Whitelist)>(whitelist);

        clean = virtualinvoke $stack7.<org.jsoup.safety.Cleaner: org.jsoup.nodes.Document clean(org.jsoup.nodes.Document)>(dirty);

        $stack9 = virtualinvoke clean.<org.jsoup.nodes.Document: org.jsoup.nodes.Element body()>();

        $stack10 = virtualinvoke $stack9.<org.jsoup.nodes.Element: java.lang.String html()>();

        return $stack10;
    }

    public static java.lang.String clean(java.lang.String, org.jsoup.safety.Whitelist)
    {
        java.lang.String bodyHtml, $stack2;
        org.jsoup.safety.Whitelist whitelist;

        bodyHtml := @parameter0: java.lang.String;

        whitelist := @parameter1: org.jsoup.safety.Whitelist;

        $stack2 = staticinvoke <org.jsoup.Jsoup: java.lang.String clean(java.lang.String,java.lang.String,org.jsoup.safety.Whitelist)>(bodyHtml, "", whitelist);

        return $stack2;
    }

    public static java.lang.String clean(java.lang.String, java.lang.String, org.jsoup.safety.Whitelist, org.jsoup.nodes.Document$OutputSettings)
    {
        java.lang.String bodyHtml, baseUri, $stack12;
        org.jsoup.nodes.Document dirty, clean;
        org.jsoup.safety.Cleaner $stack8;
        org.jsoup.safety.Whitelist whitelist;
        org.jsoup.nodes.Document$OutputSettings outputSettings;
        org.jsoup.nodes.Element $stack11;

        bodyHtml := @parameter0: java.lang.String;

        baseUri := @parameter1: java.lang.String;

        whitelist := @parameter2: org.jsoup.safety.Whitelist;

        outputSettings := @parameter3: org.jsoup.nodes.Document$OutputSettings;

        dirty = staticinvoke <org.jsoup.Jsoup: org.jsoup.nodes.Document parseBodyFragment(java.lang.String,java.lang.String)>(bodyHtml, baseUri);

        $stack8 = new org.jsoup.safety.Cleaner;

        specialinvoke $stack8.<org.jsoup.safety.Cleaner: void <init>(org.jsoup.safety.Whitelist)>(whitelist);

        clean = virtualinvoke $stack8.<org.jsoup.safety.Cleaner: org.jsoup.nodes.Document clean(org.jsoup.nodes.Document)>(dirty);

        virtualinvoke clean.<org.jsoup.nodes.Document: org.jsoup.nodes.Document outputSettings(org.jsoup.nodes.Document$OutputSettings)>(outputSettings);

        $stack11 = virtualinvoke clean.<org.jsoup.nodes.Document: org.jsoup.nodes.Element body()>();

        $stack12 = virtualinvoke $stack11.<org.jsoup.nodes.Element: java.lang.String html()>();

        return $stack12;
    }

    public static boolean isValid(java.lang.String, org.jsoup.safety.Whitelist)
    {
        org.jsoup.safety.Cleaner $stack2;
        org.jsoup.safety.Whitelist whitelist;
        java.lang.String bodyHtml;
        boolean $stack3;

        bodyHtml := @parameter0: java.lang.String;

        whitelist := @parameter1: org.jsoup.safety.Whitelist;

        $stack2 = new org.jsoup.safety.Cleaner;

        specialinvoke $stack2.<org.jsoup.safety.Cleaner: void <init>(org.jsoup.safety.Whitelist)>(whitelist);

        $stack3 = virtualinvoke $stack2.<org.jsoup.safety.Cleaner: boolean isValidBodyHtml(java.lang.String)>(bodyHtml);

        return $stack3;
    }
}
