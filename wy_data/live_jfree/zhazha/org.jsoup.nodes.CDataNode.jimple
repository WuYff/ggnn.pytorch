public class org.jsoup.nodes.CDataNode extends org.jsoup.nodes.TextNode
{

    public void <init>(java.lang.String)
    {
        org.jsoup.nodes.CDataNode this;
        java.lang.String text;

        this := @this: org.jsoup.nodes.CDataNode;

        text := @parameter0: java.lang.String;

        specialinvoke this.<org.jsoup.nodes.TextNode: void <init>(java.lang.String)>(text);

        return;
    }

    public java.lang.String nodeName()
    {
        org.jsoup.nodes.CDataNode this;

        this := @this: org.jsoup.nodes.CDataNode;

        return "#cdata";
    }

    public java.lang.String text()
    {
        org.jsoup.nodes.CDataNode this;
        java.lang.String $stack1;

        this := @this: org.jsoup.nodes.CDataNode;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.CDataNode: java.lang.String getWholeText()>();

        return $stack1;
    }

    void outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings) throws java.io.IOException
    {
        java.lang.Appendable accum, $stack4;
        org.jsoup.nodes.CDataNode this;
        java.lang.String $stack5;
        int depth;
        org.jsoup.nodes.Document$OutputSettings out;

        this := @this: org.jsoup.nodes.CDataNode;

        accum := @parameter0: java.lang.Appendable;

        depth := @parameter1: int;

        out := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $stack4 = interfaceinvoke accum.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("<![CDATA[");

        $stack5 = virtualinvoke this.<org.jsoup.nodes.CDataNode: java.lang.String getWholeText()>();

        interfaceinvoke $stack4.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($stack5);

        return;
    }

    void outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document$OutputSettings)
    {
        java.lang.Appendable accum;
        java.io.IOException $stack6;
        org.jsoup.UncheckedIOException $stack7;
        org.jsoup.nodes.CDataNode this;
        int depth;
        org.jsoup.nodes.Document$OutputSettings out;

        this := @this: org.jsoup.nodes.CDataNode;

        accum := @parameter0: java.lang.Appendable;

        depth := @parameter1: int;

        out := @parameter2: org.jsoup.nodes.Document$OutputSettings;

     label1:
        interfaceinvoke accum.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("]]>");

     label2:
        goto label4;

     label3:
        $stack6 := @caughtexception;

        $stack7 = new org.jsoup.UncheckedIOException;

        specialinvoke $stack7.<org.jsoup.UncheckedIOException: void <init>(java.io.IOException)>($stack6);

        throw $stack7;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public org.jsoup.nodes.CDataNode clone()
    {
        org.jsoup.nodes.CDataNode this, $stack2;
        org.jsoup.nodes.TextNode $stack1;

        this := @this: org.jsoup.nodes.CDataNode;

        $stack1 = specialinvoke this.<org.jsoup.nodes.TextNode: org.jsoup.nodes.TextNode clone()>();

        $stack2 = (org.jsoup.nodes.CDataNode) $stack1;

        return $stack2;
    }

    public volatile org.jsoup.nodes.TextNode clone()
    {
        org.jsoup.nodes.CDataNode this, $stack1;

        this := @this: org.jsoup.nodes.CDataNode;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.CDataNode: org.jsoup.nodes.CDataNode clone()>();

        return $stack1;
    }

    public volatile org.jsoup.nodes.Node clone()
    {
        org.jsoup.nodes.CDataNode this, $stack1;

        this := @this: org.jsoup.nodes.CDataNode;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.CDataNode: org.jsoup.nodes.CDataNode clone()>();

        return $stack1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.CDataNode this, $stack1;

        this := @this: org.jsoup.nodes.CDataNode;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.CDataNode: org.jsoup.nodes.CDataNode clone()>();

        return $stack1;
    }
}
