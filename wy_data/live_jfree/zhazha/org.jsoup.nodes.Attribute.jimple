public class org.jsoup.nodes.Attribute extends java.lang.Object implements java.util.Map$Entry, java.lang.Cloneable
{
    private static final java.lang.String[] booleanAttributes;
    private java.lang.String key;
    private java.lang.String val;
    org.jsoup.nodes.Attributes parent;

    public void <init>(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String key, value;

        this := @this: org.jsoup.nodes.Attribute;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        specialinvoke this.<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String,org.jsoup.nodes.Attributes)>(key, value, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, org.jsoup.nodes.Attributes)
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String val, key, key#2;
        org.jsoup.nodes.Attributes parent;

        this := @this: org.jsoup.nodes.Attribute;

        key := @parameter0: java.lang.String;

        val := @parameter1: java.lang.String;

        parent := @parameter2: org.jsoup.nodes.Attributes;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(key);

        key#2 = virtualinvoke key.<java.lang.String: java.lang.String trim()>();

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(key#2);

        this.<org.jsoup.nodes.Attribute: java.lang.String key> = key#2;

        this.<org.jsoup.nodes.Attribute: java.lang.String val> = val;

        this.<org.jsoup.nodes.Attribute: org.jsoup.nodes.Attributes parent> = parent;

        return;
    }

    public java.lang.String getKey()
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String $stack1;

        this := @this: org.jsoup.nodes.Attribute;

        $stack1 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        return $stack1;
    }

    public void setKey(java.lang.String)
    {
        org.jsoup.nodes.Attribute this;
        org.jsoup.nodes.Attributes $stack4, $stack6, $stack10;
        java.lang.String $stack5, key, key#2;
        int i;
        java.lang.String[] $stack11;

        this := @this: org.jsoup.nodes.Attribute;

        key := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(key);

        key#2 = virtualinvoke key.<java.lang.String: java.lang.String trim()>();

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>(key#2);

        $stack4 = this.<org.jsoup.nodes.Attribute: org.jsoup.nodes.Attributes parent>;

        if $stack4 == null goto label1;

        $stack6 = this.<org.jsoup.nodes.Attribute: org.jsoup.nodes.Attributes parent>;

        $stack5 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        i = virtualinvoke $stack6.<org.jsoup.nodes.Attributes: int indexOfKey(java.lang.String)>($stack5);

        if i == -1 goto label1;

        $stack10 = this.<org.jsoup.nodes.Attribute: org.jsoup.nodes.Attributes parent>;

        $stack11 = $stack10.<org.jsoup.nodes.Attributes: java.lang.String[] keys>;

        $stack11[i] = key#2;

     label1:
        this.<org.jsoup.nodes.Attribute: java.lang.String key> = key#2;

        return;
    }

    public java.lang.String getValue()
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String $stack1, $stack2;

        this := @this: org.jsoup.nodes.Attribute;

        $stack1 = this.<org.jsoup.nodes.Attribute: java.lang.String val>;

        $stack2 = staticinvoke <org.jsoup.nodes.Attributes: java.lang.String checkNotNull(java.lang.String)>($stack1);

        return $stack2;
    }

    public boolean hasDeclaredValue()
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String $stack1;
        boolean $stack2;

        this := @this: org.jsoup.nodes.Attribute;

        $stack1 = this.<org.jsoup.nodes.Attribute: java.lang.String val>;

        if $stack1 == null goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public java.lang.String setValue(java.lang.String)
    {
        org.jsoup.nodes.Attribute this;
        org.jsoup.nodes.Attributes $stack4, $stack7, $stack10, $stack15;
        java.lang.String val, $stack6, $stack9, oldVal, $stack5;
        int i;
        java.lang.String[] $stack16;

        this := @this: org.jsoup.nodes.Attribute;

        val := @parameter0: java.lang.String;

        oldVal = this.<org.jsoup.nodes.Attribute: java.lang.String val>;

        $stack4 = this.<org.jsoup.nodes.Attribute: org.jsoup.nodes.Attributes parent>;

        if $stack4 == null goto label1;

        $stack7 = this.<org.jsoup.nodes.Attribute: org.jsoup.nodes.Attributes parent>;

        $stack6 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        oldVal = virtualinvoke $stack7.<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>($stack6);

        $stack10 = this.<org.jsoup.nodes.Attribute: org.jsoup.nodes.Attributes parent>;

        $stack9 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        i = virtualinvoke $stack10.<org.jsoup.nodes.Attributes: int indexOfKey(java.lang.String)>($stack9);

        if i == -1 goto label1;

        $stack15 = this.<org.jsoup.nodes.Attribute: org.jsoup.nodes.Attributes parent>;

        $stack16 = $stack15.<org.jsoup.nodes.Attributes: java.lang.String[] vals>;

        $stack16[i] = val;

     label1:
        this.<org.jsoup.nodes.Attribute: java.lang.String val> = val;

        $stack5 = staticinvoke <org.jsoup.nodes.Attributes: java.lang.String checkNotNull(java.lang.String)>(oldVal);

        return $stack5;
    }

    public java.lang.String html()
    {
        java.lang.StringBuilder sb;
        org.jsoup.nodes.Attribute this;
        org.jsoup.nodes.Document $stack4;
        org.jsoup.nodes.Document$OutputSettings $stack5;
        java.lang.String $stack6;
        java.io.IOException $stack7;
        org.jsoup.SerializationException $stack8;

        this := @this: org.jsoup.nodes.Attribute;

        sb = staticinvoke <org.jsoup.internal.StringUtil: java.lang.StringBuilder borrowBuilder()>();

     label1:
        $stack4 = new org.jsoup.nodes.Document;

        specialinvoke $stack4.<org.jsoup.nodes.Document: void <init>(java.lang.String)>("");

        $stack5 = virtualinvoke $stack4.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

        virtualinvoke this.<org.jsoup.nodes.Attribute: void html(java.lang.Appendable,org.jsoup.nodes.Document$OutputSettings)>(sb, $stack5);

     label2:
        goto label4;

     label3:
        $stack7 := @caughtexception;

        $stack8 = new org.jsoup.SerializationException;

        specialinvoke $stack8.<org.jsoup.SerializationException: void <init>(java.lang.Throwable)>($stack7);

        throw $stack8;

     label4:
        $stack6 = staticinvoke <org.jsoup.internal.StringUtil: java.lang.String releaseBuilder(java.lang.StringBuilder)>(sb);

        return $stack6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected static void html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document$OutputSettings) throws java.io.IOException
    {
        java.lang.Appendable accum;
        java.lang.String key, val, $stack7;
        org.jsoup.nodes.Document$OutputSettings out;
        boolean $stack5;

        key := @parameter0: java.lang.String;

        val := @parameter1: java.lang.String;

        accum := @parameter2: java.lang.Appendable;

        out := @parameter3: org.jsoup.nodes.Document$OutputSettings;

        interfaceinvoke accum.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(key);

        $stack5 = staticinvoke <org.jsoup.nodes.Attribute: boolean shouldCollapseAttribute(java.lang.String,java.lang.String,org.jsoup.nodes.Document$OutputSettings)>(key, val, out);

        if $stack5 != 0 goto label1;

        interfaceinvoke accum.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("=\"");

        $stack7 = staticinvoke <org.jsoup.nodes.Attributes: java.lang.String checkNotNull(java.lang.String)>(val);

        staticinvoke <org.jsoup.nodes.Entities: void escape(java.lang.Appendable,java.lang.String,org.jsoup.nodes.Document$OutputSettings,boolean,boolean,boolean)>(accum, $stack7, out, 1, 0, 0);

        interfaceinvoke accum.<java.lang.Appendable: java.lang.Appendable append(char)>(34);

     label1:
        return;
    }

    protected void html(java.lang.Appendable, org.jsoup.nodes.Document$OutputSettings) throws java.io.IOException
    {
        org.jsoup.nodes.Attribute this;
        java.lang.Appendable accum;
        org.jsoup.nodes.Document$OutputSettings out;
        java.lang.String $stack3, $stack4;

        this := @this: org.jsoup.nodes.Attribute;

        accum := @parameter0: java.lang.Appendable;

        out := @parameter1: org.jsoup.nodes.Document$OutputSettings;

        $stack4 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        $stack3 = this.<org.jsoup.nodes.Attribute: java.lang.String val>;

        staticinvoke <org.jsoup.nodes.Attribute: void html(java.lang.String,java.lang.String,java.lang.Appendable,org.jsoup.nodes.Document$OutputSettings)>($stack4, $stack3, accum, out);

        return;
    }

    public java.lang.String toString()
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String $stack1;

        this := @this: org.jsoup.nodes.Attribute;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.Attribute: java.lang.String html()>();

        return $stack1;
    }

    public static org.jsoup.nodes.Attribute createFromEncoded(java.lang.String, java.lang.String)
    {
        java.lang.String encodedValue, value, unencodedKey;
        org.jsoup.nodes.Attribute $stack4;

        unencodedKey := @parameter0: java.lang.String;

        encodedValue := @parameter1: java.lang.String;

        value = staticinvoke <org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String,boolean)>(encodedValue, 1);

        $stack4 = new org.jsoup.nodes.Attribute;

        specialinvoke $stack4.<org.jsoup.nodes.Attribute: void <init>(java.lang.String,java.lang.String,org.jsoup.nodes.Attributes)>(unencodedKey, value, null);

        return $stack4;
    }

    protected boolean isDataAttribute()
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String $stack1;
        boolean $stack2;

        this := @this: org.jsoup.nodes.Attribute;

        $stack1 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        $stack2 = staticinvoke <org.jsoup.nodes.Attribute: boolean isDataAttribute(java.lang.String)>($stack1);

        return $stack2;
    }

    protected static boolean isDataAttribute(java.lang.String)
    {
        java.lang.String key, $stack3;
        boolean $stack1, $stack5;
        int $stack2, $stack4;

        key := @parameter0: java.lang.String;

        $stack1 = virtualinvoke key.<java.lang.String: boolean startsWith(java.lang.String)>("data-");

        if $stack1 == 0 goto label1;

        $stack2 = virtualinvoke key.<java.lang.String: int length()>();

        $stack3 = "data-";

        $stack4 = virtualinvoke $stack3.<java.lang.String: int length()>();

        if $stack2 <= $stack4 goto label1;

        $stack5 = 1;

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        return $stack5;
    }

    protected final boolean shouldCollapseAttribute(org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.Attribute this;
        org.jsoup.nodes.Document$OutputSettings out;
        java.lang.String $stack2, $stack3;
        boolean $stack4;

        this := @this: org.jsoup.nodes.Attribute;

        out := @parameter0: org.jsoup.nodes.Document$OutputSettings;

        $stack3 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        $stack2 = this.<org.jsoup.nodes.Attribute: java.lang.String val>;

        $stack4 = staticinvoke <org.jsoup.nodes.Attribute: boolean shouldCollapseAttribute(java.lang.String,java.lang.String,org.jsoup.nodes.Document$OutputSettings)>($stack3, $stack2, out);

        return $stack4;
    }

    protected static boolean shouldCollapseAttribute(java.lang.String, java.lang.String, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.Document$OutputSettings out;
        org.jsoup.nodes.Document$OutputSettings$Syntax $stack3, $stack4;
        java.lang.String val, $stack6, key;
        boolean $stack7, $stack8, $stack9, $stack5;

        key := @parameter0: java.lang.String;

        val := @parameter1: java.lang.String;

        out := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $stack3 = virtualinvoke out.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings$Syntax syntax()>();

        $stack4 = <org.jsoup.nodes.Document$OutputSettings$Syntax: org.jsoup.nodes.Document$OutputSettings$Syntax html>;

        if $stack3 != $stack4 goto label3;

        if val == null goto label2;

        $stack6 = "";

        $stack7 = virtualinvoke $stack6.<java.lang.String: boolean equals(java.lang.Object)>(val);

        if $stack7 != 0 goto label1;

        $stack9 = virtualinvoke val.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(key);

        if $stack9 == 0 goto label3;

     label1:
        $stack8 = staticinvoke <org.jsoup.nodes.Attribute: boolean isBooleanAttribute(java.lang.String)>(key);

        if $stack8 == 0 goto label3;

     label2:
        $stack5 = 1;

        goto label4;

     label3:
        $stack5 = 0;

     label4:
        return $stack5;
    }

    protected static boolean isBooleanAttribute(java.lang.String)
    {
        java.lang.String key;
        java.lang.String[] $stack1;
        int $stack2;
        boolean $stack3;

        key := @parameter0: java.lang.String;

        $stack1 = <org.jsoup.nodes.Attribute: java.lang.String[] booleanAttributes>;

        $stack2 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($stack1, key);

        if $stack2 < 0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public boolean equals(java.lang.Object)
    {
        org.jsoup.nodes.Attribute this, attribute;
        java.lang.Object o;
        java.lang.Class $stack3, $stack4;
        java.lang.String $stack5, $stack6, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14;
        boolean $stack15, $stack9;

        this := @this: org.jsoup.nodes.Attribute;

        o := @parameter0: java.lang.Object;

        if this != o goto label1;

        return 1;

     label1:
        if o == null goto label2;

        $stack3 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack4 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        if $stack3 == $stack4 goto label3;

     label2:
        return 0;

     label3:
        attribute = (org.jsoup.nodes.Attribute) o;

        $stack5 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        if $stack5 == null goto label4;

        $stack14 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        $stack13 = attribute.<org.jsoup.nodes.Attribute: java.lang.String key>;

        $stack15 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>($stack13);

        if $stack15 != 0 goto label6;

        goto label5;

     label4:
        $stack6 = attribute.<org.jsoup.nodes.Attribute: java.lang.String key>;

        if $stack6 == null goto label6;

     label5:
        return 0;

     label6:
        $stack7 = this.<org.jsoup.nodes.Attribute: java.lang.String val>;

        if $stack7 == null goto label7;

        $stack11 = this.<org.jsoup.nodes.Attribute: java.lang.String val>;

        $stack10 = attribute.<org.jsoup.nodes.Attribute: java.lang.String val>;

        $stack9 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>($stack10);

        goto label9;

     label7:
        $stack8 = attribute.<org.jsoup.nodes.Attribute: java.lang.String val>;

        if $stack8 != null goto label8;

        $stack9 = 1;

        goto label9;

     label8:
        $stack9 = 0;

     label9:
        return $stack9;
    }

    public int hashCode()
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String $stack2, $stack3, $stack5, $stack9;
        int $stack4, $stack10, result, $stack6;

        this := @this: org.jsoup.nodes.Attribute;

        $stack2 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        if $stack2 == null goto label1;

        $stack9 = this.<org.jsoup.nodes.Attribute: java.lang.String key>;

        $stack10 = virtualinvoke $stack9.<java.lang.String: int hashCode()>();

        goto label2;

     label1:
        $stack10 = 0;

     label2:
        $stack4 = 31 * $stack10;

        $stack3 = this.<org.jsoup.nodes.Attribute: java.lang.String val>;

        if $stack3 == null goto label3;

        $stack5 = this.<org.jsoup.nodes.Attribute: java.lang.String val>;

        $stack6 = virtualinvoke $stack5.<java.lang.String: int hashCode()>();

        goto label4;

     label3:
        $stack6 = 0;

     label4:
        result = $stack4 + $stack6;

        return result;
    }

    public org.jsoup.nodes.Attribute clone()
    {
        org.jsoup.nodes.Attribute this, $stack3;
        java.lang.Object $stack2;
        java.lang.CloneNotSupportedException $stack4;
        java.lang.RuntimeException $stack5;

        this := @this: org.jsoup.nodes.Attribute;

     label1:
        $stack2 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        $stack3 = (org.jsoup.nodes.Attribute) $stack2;

     label2:
        return $stack3;

     label3:
        $stack4 := @caughtexception;

        $stack5 = new java.lang.RuntimeException;

        specialinvoke $stack5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($stack4);

        throw $stack5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.Attribute this, $stack1;

        this := @this: org.jsoup.nodes.Attribute;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.Attribute: org.jsoup.nodes.Attribute clone()>();

        return $stack1;
    }

    public volatile java.lang.Object setValue(java.lang.Object)
    {
        org.jsoup.nodes.Attribute this;
        java.lang.Object l1;
        java.lang.String $stack2, $stack3;

        this := @this: org.jsoup.nodes.Attribute;

        l1 := @parameter0: java.lang.Object;

        $stack2 = (java.lang.String) l1;

        $stack3 = virtualinvoke this.<org.jsoup.nodes.Attribute: java.lang.String setValue(java.lang.String)>($stack2);

        return $stack3;
    }

    public volatile java.lang.Object getValue()
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String $stack1;

        this := @this: org.jsoup.nodes.Attribute;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.Attribute: java.lang.String getValue()>();

        return $stack1;
    }

    public volatile java.lang.Object getKey()
    {
        org.jsoup.nodes.Attribute this;
        java.lang.String $stack1;

        this := @this: org.jsoup.nodes.Attribute;

        $stack1 = virtualinvoke this.<org.jsoup.nodes.Attribute: java.lang.String getKey()>();

        return $stack1;
    }

    static void <clinit>()
    {
        java.lang.String[] $stack0;

        $stack0 = newarray (java.lang.String)[30];

        $stack0[0] = "allowfullscreen";

        $stack0[1] = "async";

        $stack0[2] = "autofocus";

        $stack0[3] = "checked";

        $stack0[4] = "compact";

        $stack0[5] = "declare";

        $stack0[6] = "default";

        $stack0[7] = "defer";

        $stack0[8] = "disabled";

        $stack0[9] = "formnovalidate";

        $stack0[10] = "hidden";

        $stack0[11] = "inert";

        $stack0[12] = "ismap";

        $stack0[13] = "itemscope";

        $stack0[14] = "multiple";

        $stack0[15] = "muted";

        $stack0[16] = "nohref";

        $stack0[17] = "noresize";

        $stack0[18] = "noshade";

        $stack0[19] = "novalidate";

        $stack0[20] = "nowrap";

        $stack0[21] = "open";

        $stack0[22] = "readonly";

        $stack0[23] = "required";

        $stack0[24] = "reversed";

        $stack0[25] = "seamless";

        $stack0[26] = "selected";

        $stack0[27] = "sortable";

        $stack0[28] = "truespeed";

        $stack0[29] = "typemustmatch";

        <org.jsoup.nodes.Attribute: java.lang.String[] booleanAttributes> = $stack0;

        return;
    }
}
