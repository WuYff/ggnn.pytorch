public class org.jsoup.parser.XmlTreeBuilder extends org.jsoup.parser.TreeBuilder
{

    public void <init>()
    {
        org.jsoup.parser.XmlTreeBuilder this;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        specialinvoke this.<org.jsoup.parser.TreeBuilder: void <init>()>();

        return;
    }

    org.jsoup.parser.ParseSettings defaultSettings()
    {
        org.jsoup.parser.ParseSettings $stack1;
        org.jsoup.parser.XmlTreeBuilder this;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        $stack1 = <org.jsoup.parser.ParseSettings: org.jsoup.parser.ParseSettings preserveCase>;

        return $stack1;
    }

    protected void initialiseParse(java.io.Reader, java.lang.String, org.jsoup.parser.Parser)
    {
        org.jsoup.parser.XmlTreeBuilder this;
        java.io.Reader input;
        java.lang.String baseUri;
        org.jsoup.parser.Parser parser;
        org.jsoup.nodes.Document $stack4, $stack7;
        java.util.ArrayList $stack5;
        org.jsoup.nodes.Document$OutputSettings $stack8;
        org.jsoup.nodes.Document$OutputSettings$Syntax $stack9;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        input := @parameter0: java.io.Reader;

        baseUri := @parameter1: java.lang.String;

        parser := @parameter2: org.jsoup.parser.Parser;

        specialinvoke this.<org.jsoup.parser.TreeBuilder: void initialiseParse(java.io.Reader,java.lang.String,org.jsoup.parser.Parser)>(input, baseUri, parser);

        $stack5 = this.<org.jsoup.parser.XmlTreeBuilder: java.util.ArrayList stack>;

        $stack4 = this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.nodes.Document doc>;

        virtualinvoke $stack5.<java.util.ArrayList: boolean add(java.lang.Object)>($stack4);

        $stack7 = this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.nodes.Document doc>;

        $stack8 = virtualinvoke $stack7.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

        $stack9 = <org.jsoup.nodes.Document$OutputSettings$Syntax: org.jsoup.nodes.Document$OutputSettings$Syntax xml>;

        virtualinvoke $stack8.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings syntax(org.jsoup.nodes.Document$OutputSettings$Syntax)>($stack9);

        return;
    }

    org.jsoup.nodes.Document parse(java.io.Reader, java.lang.String)
    {
        org.jsoup.parser.XmlTreeBuilder this;
        java.io.Reader input;
        java.lang.String baseUri;
        org.jsoup.parser.Parser $stack3;
        org.jsoup.nodes.Document $stack4;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        input := @parameter0: java.io.Reader;

        baseUri := @parameter1: java.lang.String;

        $stack3 = new org.jsoup.parser.Parser;

        specialinvoke $stack3.<org.jsoup.parser.Parser: void <init>(org.jsoup.parser.TreeBuilder)>(this);

        $stack4 = virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.nodes.Document parse(java.io.Reader,java.lang.String,org.jsoup.parser.Parser)>(input, baseUri, $stack3);

        return $stack4;
    }

    org.jsoup.nodes.Document parse(java.lang.String, java.lang.String)
    {
        org.jsoup.parser.XmlTreeBuilder this;
        java.io.StringReader $stack3;
        java.lang.String input, baseUri;
        org.jsoup.parser.Parser $stack4;
        org.jsoup.nodes.Document $stack5;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        input := @parameter0: java.lang.String;

        baseUri := @parameter1: java.lang.String;

        $stack3 = new java.io.StringReader;

        specialinvoke $stack3.<java.io.StringReader: void <init>(java.lang.String)>(input);

        $stack4 = new org.jsoup.parser.Parser;

        specialinvoke $stack4.<org.jsoup.parser.Parser: void <init>(org.jsoup.parser.TreeBuilder)>(this);

        $stack5 = virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.nodes.Document parse(java.io.Reader,java.lang.String,org.jsoup.parser.Parser)>($stack3, baseUri, $stack4);

        return $stack5;
    }

    protected boolean process(org.jsoup.parser.Token)
    {
        org.jsoup.parser.Token token;
        org.jsoup.parser.Token$TokenType $stack2, $stack15;
        int[] $stack3;
        int $stack4, $stack5;
        org.jsoup.parser.XmlTreeBuilder this;
        org.jsoup.parser.Token$Doctype $stack6;
        org.jsoup.parser.Token$Character $stack8;
        org.jsoup.parser.Token$Comment $stack9;
        org.jsoup.parser.Token$EndTag $stack10;
        org.jsoup.parser.Token$StartTag $stack11;
        java.lang.StringBuilder $stack13, $stack14, $stack16;
        java.lang.String $stack17;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        token := @parameter0: org.jsoup.parser.Token;

        $stack3 = <org.jsoup.parser.XmlTreeBuilder$1: int[] $SwitchMap$org$jsoup$parser$Token$TokenType>;

        $stack2 = token.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $stack4 = virtualinvoke $stack2.<org.jsoup.parser.Token$TokenType: int ordinal()>();

        $stack5 = $stack3[$stack4];

        tableswitch($stack5)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        $stack11 = virtualinvoke token.<org.jsoup.parser.Token: org.jsoup.parser.Token$StartTag asStartTag()>();

        virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)>($stack11);

        goto label8;

     label2:
        $stack10 = virtualinvoke token.<org.jsoup.parser.Token: org.jsoup.parser.Token$EndTag asEndTag()>();

        specialinvoke this.<org.jsoup.parser.XmlTreeBuilder: void popStackToClose(org.jsoup.parser.Token$EndTag)>($stack10);

        goto label8;

     label3:
        $stack9 = virtualinvoke token.<org.jsoup.parser.Token: org.jsoup.parser.Token$Comment asComment()>();

        virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: void insert(org.jsoup.parser.Token$Comment)>($stack9);

        goto label8;

     label4:
        $stack8 = virtualinvoke token.<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>();

        virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>($stack8);

        goto label8;

     label5:
        $stack6 = virtualinvoke token.<org.jsoup.parser.Token: org.jsoup.parser.Token$Doctype asDoctype()>();

        virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: void insert(org.jsoup.parser.Token$Doctype)>($stack6);

        goto label8;

     label6:
        goto label8;

     label7:
        $stack13 = new java.lang.StringBuilder;

        specialinvoke $stack13.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected token type: ");

        $stack15 = token.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.jsoup.helper.Validate: void fail(java.lang.String)>($stack17);

     label8:
        return 1;
    }

    private void insertNode(org.jsoup.nodes.Node)
    {
        org.jsoup.parser.XmlTreeBuilder this;
        org.jsoup.nodes.Element $stack2;
        org.jsoup.nodes.Node node;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        node := @parameter0: org.jsoup.nodes.Node;

        $stack2 = virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        virtualinvoke $stack2.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(node);

        return;
    }

    org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)
    {
        org.jsoup.parser.Token$StartTag startTag;
        java.lang.String $stack4;
        org.jsoup.parser.XmlTreeBuilder this;
        org.jsoup.parser.ParseSettings $stack5, $stack10, $stack19;
        org.jsoup.parser.Tag tag;
        org.jsoup.nodes.Attributes $stack7, $stack9, $stack12, $stack20;
        org.jsoup.nodes.Element $stack8;
        boolean $stack13, $stack16;
        java.util.ArrayList $stack14;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        startTag := @parameter0: org.jsoup.parser.Token$StartTag;

        $stack4 = virtualinvoke startTag.<org.jsoup.parser.Token$StartTag: java.lang.String name()>();

        $stack5 = this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.parser.ParseSettings settings>;

        tag = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String,org.jsoup.parser.ParseSettings)>($stack4, $stack5);

        $stack7 = startTag.<org.jsoup.parser.Token$StartTag: org.jsoup.nodes.Attributes attributes>;

        if $stack7 == null goto label1;

        $stack20 = startTag.<org.jsoup.parser.Token$StartTag: org.jsoup.nodes.Attributes attributes>;

        $stack19 = this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.parser.ParseSettings settings>;

        virtualinvoke $stack20.<org.jsoup.nodes.Attributes: int deduplicate(org.jsoup.parser.ParseSettings)>($stack19);

     label1:
        $stack8 = new org.jsoup.nodes.Element;

        $stack10 = this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.parser.ParseSettings settings>;

        $stack9 = startTag.<org.jsoup.parser.Token$StartTag: org.jsoup.nodes.Attributes attributes>;

        $stack12 = virtualinvoke $stack10.<org.jsoup.parser.ParseSettings: org.jsoup.nodes.Attributes normalizeAttributes(org.jsoup.nodes.Attributes)>($stack9);

        specialinvoke $stack8.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>(tag, null, $stack12);

        specialinvoke this.<org.jsoup.parser.XmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>($stack8);

        $stack13 = virtualinvoke startTag.<org.jsoup.parser.Token$StartTag: boolean isSelfClosing()>();

        if $stack13 == 0 goto label2;

        $stack16 = virtualinvoke tag.<org.jsoup.parser.Tag: boolean isKnownTag()>();

        if $stack16 != 0 goto label3;

        virtualinvoke tag.<org.jsoup.parser.Tag: org.jsoup.parser.Tag setSelfClosing()>();

        goto label3;

     label2:
        $stack14 = this.<org.jsoup.parser.XmlTreeBuilder: java.util.ArrayList stack>;

        virtualinvoke $stack14.<java.util.ArrayList: boolean add(java.lang.Object)>($stack8);

     label3:
        return $stack8;
    }

    void insert(org.jsoup.parser.Token$Comment)
    {
        org.jsoup.nodes.Comment $stack5;
        org.jsoup.parser.Token$Comment commentToken;
        java.lang.String $stack6;
        boolean $stack7, $stack8;
        org.jsoup.parser.XmlTreeBuilder this;
        org.jsoup.nodes.XmlDeclaration decl;
        org.jsoup.nodes.LeafNode insert;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        commentToken := @parameter0: org.jsoup.parser.Token$Comment;

        $stack5 = new org.jsoup.nodes.Comment;

        $stack6 = virtualinvoke commentToken.<org.jsoup.parser.Token$Comment: java.lang.String getData()>();

        specialinvoke $stack5.<org.jsoup.nodes.Comment: void <init>(java.lang.String)>($stack6);

        insert = $stack5;

        $stack7 = commentToken.<org.jsoup.parser.Token$Comment: boolean bogus>;

        if $stack7 == 0 goto label1;

        $stack8 = virtualinvoke $stack5.<org.jsoup.nodes.Comment: boolean isXmlDeclaration()>();

        if $stack8 == 0 goto label1;

        decl = virtualinvoke $stack5.<org.jsoup.nodes.Comment: org.jsoup.nodes.XmlDeclaration asXmlDeclaration()>();

        if decl == null goto label1;

        insert = decl;

     label1:
        specialinvoke this.<org.jsoup.parser.XmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>(insert);

        return;
    }

    void insert(org.jsoup.parser.Token$Character)
    {
        org.jsoup.parser.Token$Character token;
        java.lang.String data;
        org.jsoup.parser.XmlTreeBuilder this;
        boolean $stack4;
        org.jsoup.nodes.TextNode $stack5, $u1;
        org.jsoup.nodes.CDataNode $u0;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        token := @parameter0: org.jsoup.parser.Token$Character;

        data = virtualinvoke token.<org.jsoup.parser.Token$Character: java.lang.String getData()>();

        $stack4 = virtualinvoke token.<org.jsoup.parser.Token$Character: boolean isCData()>();

        if $stack4 == 0 goto label1;

        $u0 = new org.jsoup.nodes.CDataNode;

        $stack5 = $u0;

        specialinvoke $u0.<org.jsoup.nodes.CDataNode: void <init>(java.lang.String)>(data);

        goto label2;

     label1:
        $u1 = new org.jsoup.nodes.TextNode;

        $stack5 = $u1;

        specialinvoke $u1.<org.jsoup.nodes.TextNode: void <init>(java.lang.String)>(data);

     label2:
        specialinvoke this.<org.jsoup.parser.XmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>($stack5);

        return;
    }

    void insert(org.jsoup.parser.Token$Doctype)
    {
        org.jsoup.nodes.DocumentType $stack3;
        org.jsoup.parser.XmlTreeBuilder this;
        org.jsoup.parser.Token$Doctype d;
        org.jsoup.parser.ParseSettings $stack4;
        java.lang.String $stack5, $stack6, $stack7, $stack8, $stack9;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        d := @parameter0: org.jsoup.parser.Token$Doctype;

        $stack3 = new org.jsoup.nodes.DocumentType;

        $stack4 = this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.parser.ParseSettings settings>;

        $stack5 = virtualinvoke d.<org.jsoup.parser.Token$Doctype: java.lang.String getName()>();

        $stack6 = virtualinvoke $stack4.<org.jsoup.parser.ParseSettings: java.lang.String normalizeTag(java.lang.String)>($stack5);

        $stack7 = virtualinvoke d.<org.jsoup.parser.Token$Doctype: java.lang.String getPublicIdentifier()>();

        $stack8 = virtualinvoke d.<org.jsoup.parser.Token$Doctype: java.lang.String getSystemIdentifier()>();

        specialinvoke $stack3.<org.jsoup.nodes.DocumentType: void <init>(java.lang.String,java.lang.String,java.lang.String)>($stack6, $stack7, $stack8);

        $stack9 = virtualinvoke d.<org.jsoup.parser.Token$Doctype: java.lang.String getPubSysKey()>();

        virtualinvoke $stack3.<org.jsoup.nodes.DocumentType: void setPubSysKey(java.lang.String)>($stack9);

        specialinvoke this.<org.jsoup.parser.XmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>($stack3);

        return;
    }

    private void popStackToClose(org.jsoup.parser.Token$EndTag)
    {
        org.jsoup.parser.XmlTreeBuilder this;
        org.jsoup.parser.Token$EndTag endTag;
        java.lang.String $stack6, elName, $stack20;
        org.jsoup.parser.ParseSettings $stack7;
        java.util.ArrayList $stack9, $stack11, $stack13, $stack15, $stack18;
        int $stack10, $stack12, pos;
        java.lang.Object $stack14, $stack19;
        boolean $stack21;
        org.jsoup.nodes.Element firstFound, next;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        endTag := @parameter0: org.jsoup.parser.Token$EndTag;

        $stack7 = this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.parser.ParseSettings settings>;

        $stack6 = endTag.<org.jsoup.parser.Token$EndTag: java.lang.String tagName>;

        elName = virtualinvoke $stack7.<org.jsoup.parser.ParseSettings: java.lang.String normalizeTag(java.lang.String)>($stack6);

        firstFound = null;

        $stack9 = this.<org.jsoup.parser.XmlTreeBuilder: java.util.ArrayList stack>;

        $stack10 = virtualinvoke $stack9.<java.util.ArrayList: int size()>();

        pos = $stack10 - 1;

     label1:
        if pos < 0 goto label3;

        $stack18 = this.<org.jsoup.parser.XmlTreeBuilder: java.util.ArrayList stack>;

        $stack19 = virtualinvoke $stack18.<java.util.ArrayList: java.lang.Object get(int)>(pos);

        next = (org.jsoup.nodes.Element) $stack19;

        $stack20 = virtualinvoke next.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $stack21 = virtualinvoke $stack20.<java.lang.String: boolean equals(java.lang.Object)>(elName);

        if $stack21 == 0 goto label2;

        firstFound = next;

        goto label3;

     label2:
        pos = pos + -1;

        goto label1;

     label3:
        if firstFound != null goto label4;

        return;

     label4:
        $stack11 = this.<org.jsoup.parser.XmlTreeBuilder: java.util.ArrayList stack>;

        $stack12 = virtualinvoke $stack11.<java.util.ArrayList: int size()>();

        pos = $stack12 - 1;

     label5:
        if pos < 0 goto label7;

        $stack13 = this.<org.jsoup.parser.XmlTreeBuilder: java.util.ArrayList stack>;

        $stack14 = virtualinvoke $stack13.<java.util.ArrayList: java.lang.Object get(int)>(pos);

        next = (org.jsoup.nodes.Element) $stack14;

        $stack15 = this.<org.jsoup.parser.XmlTreeBuilder: java.util.ArrayList stack>;

        virtualinvoke $stack15.<java.util.ArrayList: java.lang.Object remove(int)>(pos);

        if next != firstFound goto label6;

        goto label7;

     label6:
        pos = pos + -1;

        goto label5;

     label7:
        return;
    }

    java.util.List parseFragment(java.lang.String, java.lang.String, org.jsoup.parser.Parser)
    {
        org.jsoup.parser.XmlTreeBuilder this;
        java.io.StringReader $stack4;
        java.lang.String inputFragment, baseUri;
        org.jsoup.parser.Parser parser;
        org.jsoup.nodes.Document $stack5;
        java.util.List $stack6;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        inputFragment := @parameter0: java.lang.String;

        baseUri := @parameter1: java.lang.String;

        parser := @parameter2: org.jsoup.parser.Parser;

        $stack4 = new java.io.StringReader;

        specialinvoke $stack4.<java.io.StringReader: void <init>(java.lang.String)>(inputFragment);

        virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: void initialiseParse(java.io.Reader,java.lang.String,org.jsoup.parser.Parser)>($stack4, baseUri, parser);

        virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: void runParser()>();

        $stack5 = this.<org.jsoup.parser.XmlTreeBuilder: org.jsoup.nodes.Document doc>;

        $stack6 = virtualinvoke $stack5.<org.jsoup.nodes.Document: java.util.List childNodes()>();

        return $stack6;
    }

    java.util.List parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)
    {
        org.jsoup.parser.XmlTreeBuilder this;
        java.lang.String inputFragment, baseUri;
        org.jsoup.parser.Parser parser;
        java.util.List $stack5;
        org.jsoup.nodes.Element context;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        inputFragment := @parameter0: java.lang.String;

        context := @parameter1: org.jsoup.nodes.Element;

        baseUri := @parameter2: java.lang.String;

        parser := @parameter3: org.jsoup.parser.Parser;

        $stack5 = virtualinvoke this.<org.jsoup.parser.XmlTreeBuilder: java.util.List parseFragment(java.lang.String,java.lang.String,org.jsoup.parser.Parser)>(inputFragment, baseUri, parser);

        return $stack5;
    }

    public volatile boolean processStartTag(java.lang.String, org.jsoup.nodes.Attributes)
    {
        org.jsoup.parser.XmlTreeBuilder this;
        java.lang.String l1;
        org.jsoup.nodes.Attributes l2;
        boolean $stack3;

        this := @this: org.jsoup.parser.XmlTreeBuilder;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: org.jsoup.nodes.Attributes;

        $stack3 = specialinvoke this.<org.jsoup.parser.TreeBuilder: boolean processStartTag(java.lang.String,org.jsoup.nodes.Attributes)>(l1, l2);

        return $stack3;
    }
}
