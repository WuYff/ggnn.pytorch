public final class org.jsoup.helper.Validate extends java.lang.Object
{

    private void <init>()
    {
        org.jsoup.helper.Validate this;

        this := @this: org.jsoup.helper.Validate;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void notNull(java.lang.Object)
    {
        java.lang.Object obj;
        java.lang.IllegalArgumentException $stack1;

        obj := @parameter0: java.lang.Object;

        if obj != null goto label1;

        $stack1 = new java.lang.IllegalArgumentException;

        specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Object must not be null");

        throw $stack1;

     label1:
        return;
    }

    public static void notNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object obj;
        java.lang.IllegalArgumentException $stack2;
        java.lang.String msg;

        obj := @parameter0: java.lang.Object;

        msg := @parameter1: java.lang.String;

        if obj != null goto label1;

        $stack2 = new java.lang.IllegalArgumentException;

        specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(msg);

        throw $stack2;

     label1:
        return;
    }

    public static void isTrue(boolean)
    {
        boolean val;
        java.lang.IllegalArgumentException $stack1;

        val := @parameter0: boolean;

        if val != 0 goto label1;

        $stack1 = new java.lang.IllegalArgumentException;

        specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be true");

        throw $stack1;

     label1:
        return;
    }

    public static void isTrue(boolean, java.lang.String)
    {
        boolean val;
        java.lang.IllegalArgumentException $stack2;
        java.lang.String msg;

        val := @parameter0: boolean;

        msg := @parameter1: java.lang.String;

        if val != 0 goto label1;

        $stack2 = new java.lang.IllegalArgumentException;

        specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(msg);

        throw $stack2;

     label1:
        return;
    }

    public static void isFalse(boolean)
    {
        boolean val;
        java.lang.IllegalArgumentException $stack1;

        val := @parameter0: boolean;

        if val == 0 goto label1;

        $stack1 = new java.lang.IllegalArgumentException;

        specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be false");

        throw $stack1;

     label1:
        return;
    }

    public static void isFalse(boolean, java.lang.String)
    {
        boolean val;
        java.lang.IllegalArgumentException $stack2;
        java.lang.String msg;

        val := @parameter0: boolean;

        msg := @parameter1: java.lang.String;

        if val == 0 goto label1;

        $stack2 = new java.lang.IllegalArgumentException;

        specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(msg);

        throw $stack2;

     label1:
        return;
    }

    public static void noNullElements(java.lang.Object[])
    {
        java.lang.Object[] objects;

        objects := @parameter0: java.lang.Object[];

        staticinvoke <org.jsoup.helper.Validate: void noNullElements(java.lang.Object[],java.lang.String)>(objects, "Array must not contain any null objects");

        return;
    }

    public static void noNullElements(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] objects;
        int l3, l4;
        java.lang.Object obj;
        java.lang.IllegalArgumentException $stack8;
        java.lang.String msg;

        objects := @parameter0: java.lang.Object[];

        msg := @parameter1: java.lang.String;

        l3 = lengthof objects;

        l4 = 0;

     label1:
        if l4 >= l3 goto label3;

        obj = objects[l4];

        if obj != null goto label2;

        $stack8 = new java.lang.IllegalArgumentException;

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(msg);

        throw $stack8;

     label2:
        l4 = l4 + 1;

        goto label1;

     label3:
        return;
    }

    public static void notEmpty(java.lang.String)
    {
        java.lang.String string;
        java.lang.IllegalArgumentException $stack1;
        int $stack2;

        string := @parameter0: java.lang.String;

        if string == null goto label1;

        $stack2 = virtualinvoke string.<java.lang.String: int length()>();

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = new java.lang.IllegalArgumentException;

        specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String must not be empty");

        throw $stack1;

     label2:
        return;
    }

    public static void notEmpty(java.lang.String, java.lang.String)
    {
        java.lang.String string, msg;
        java.lang.IllegalArgumentException $stack2;
        int $stack3;

        string := @parameter0: java.lang.String;

        msg := @parameter1: java.lang.String;

        if string == null goto label1;

        $stack3 = virtualinvoke string.<java.lang.String: int length()>();

        if $stack3 != 0 goto label2;

     label1:
        $stack2 = new java.lang.IllegalArgumentException;

        specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(msg);

        throw $stack2;

     label2:
        return;
    }

    public static void wtf(java.lang.String)
    {
        java.lang.IllegalStateException $stack1;
        java.lang.String msg;

        msg := @parameter0: java.lang.String;

        $stack1 = new java.lang.IllegalStateException;

        specialinvoke $stack1.<java.lang.IllegalStateException: void <init>(java.lang.String)>(msg);

        throw $stack1;
    }

    public static void fail(java.lang.String)
    {
        java.lang.IllegalArgumentException $stack1;
        java.lang.String msg;

        msg := @parameter0: java.lang.String;

        $stack1 = new java.lang.IllegalArgumentException;

        specialinvoke $stack1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(msg);

        throw $stack1;
    }
}
