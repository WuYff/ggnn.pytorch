class org.jsoup.select.StructuralEvaluator$Not extends org.jsoup.select.StructuralEvaluator
{

    public void <init>(org.jsoup.select.Evaluator)
    {
        org.jsoup.select.StructuralEvaluator$Not this;
        org.jsoup.select.Evaluator evaluator;

        this := @this: org.jsoup.select.StructuralEvaluator$Not;

        evaluator := @parameter0: org.jsoup.select.Evaluator;

        specialinvoke this.<org.jsoup.select.StructuralEvaluator: void <init>()>();

        this.<org.jsoup.select.StructuralEvaluator$Not: org.jsoup.select.Evaluator evaluator> = evaluator;

        return;
    }

    public boolean matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.select.StructuralEvaluator$Not this;
        org.jsoup.nodes.Element root, node;
        org.jsoup.select.Evaluator $stack3;
        boolean $stack4, $stack5;

        this := @this: org.jsoup.select.StructuralEvaluator$Not;

        root := @parameter0: org.jsoup.nodes.Element;

        node := @parameter1: org.jsoup.nodes.Element;

        $stack3 = this.<org.jsoup.select.StructuralEvaluator$Not: org.jsoup.select.Evaluator evaluator>;

        $stack4 = virtualinvoke $stack3.<org.jsoup.select.Evaluator: boolean matches(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>(root, node);

        if $stack4 != 0 goto label1;

        $stack5 = 1;

        goto label2;

     label1:
        $stack5 = 0;

     label2:
        return $stack5;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $stack1;
        org.jsoup.select.StructuralEvaluator$Not this;
        org.jsoup.select.Evaluator $stack2;
        java.lang.String $stack3;

        this := @this: org.jsoup.select.StructuralEvaluator$Not;

        $stack1 = newarray (java.lang.Object)[1];

        $stack2 = this.<org.jsoup.select.StructuralEvaluator$Not: org.jsoup.select.Evaluator evaluator>;

        $stack1[0] = $stack2;

        $stack3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(":not%s", $stack1);

        return $stack3;
    }
}
